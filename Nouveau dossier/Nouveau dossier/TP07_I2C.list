
TP07_I2C.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000e3a8  08000140  08000140  00001140  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000410  0800e4e8  0800e4e8  0000f4e8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800e8f8  0800e8f8  0001038c  2**0
                  CONTENTS
  4 .ARM          00000008  0800e8f8  0800e8f8  0000f8f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800e900  0800e900  0001038c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800e900  0800e900  0000f900  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800e904  0800e904  0000f904  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000038c  20000000  0800e908  00010000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000003f4  2000038c  0800ec94  0001038c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000780  0800ec94  00010780  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0001038c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002de0b  00000000  00000000  000103b5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003c4f  00000000  00000000  0003e1c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002828  00000000  00000000  00041e10  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001ef1  00000000  00000000  00044638  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00019bca  00000000  00000000  00046529  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00020119  00000000  00000000  000600f3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009baba  00000000  00000000  0008020c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0011bcc6  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000bed8  00000000  00000000  0011bd0c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006a  00000000  00000000  00127be4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	@ (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	@ (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	@ (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	2000038c 	.word	0x2000038c
 800015c:	00000000 	.word	0x00000000
 8000160:	0800e4d0 	.word	0x0800e4d0

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	@ (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	@ (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	@ (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	20000390 	.word	0x20000390
 800017c:	0800e4d0 	.word	0x0800e4d0

08000180 <strlen>:
 8000180:	4603      	mov	r3, r0
 8000182:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000186:	2a00      	cmp	r2, #0
 8000188:	d1fb      	bne.n	8000182 <strlen+0x2>
 800018a:	1a18      	subs	r0, r3, r0
 800018c:	3801      	subs	r0, #1
 800018e:	4770      	bx	lr

08000190 <__aeabi_drsub>:
 8000190:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000194:	e002      	b.n	800019c <__adddf3>
 8000196:	bf00      	nop

08000198 <__aeabi_dsub>:
 8000198:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800019c <__adddf3>:
 800019c:	b530      	push	{r4, r5, lr}
 800019e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001a6:	ea94 0f05 	teq	r4, r5
 80001aa:	bf08      	it	eq
 80001ac:	ea90 0f02 	teqeq	r0, r2
 80001b0:	bf1f      	itttt	ne
 80001b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001c2:	f000 80e2 	beq.w	800038a <__adddf3+0x1ee>
 80001c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80001ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80001ce:	bfb8      	it	lt
 80001d0:	426d      	neglt	r5, r5
 80001d2:	dd0c      	ble.n	80001ee <__adddf3+0x52>
 80001d4:	442c      	add	r4, r5
 80001d6:	ea80 0202 	eor.w	r2, r0, r2
 80001da:	ea81 0303 	eor.w	r3, r1, r3
 80001de:	ea82 0000 	eor.w	r0, r2, r0
 80001e2:	ea83 0101 	eor.w	r1, r3, r1
 80001e6:	ea80 0202 	eor.w	r2, r0, r2
 80001ea:	ea81 0303 	eor.w	r3, r1, r3
 80001ee:	2d36      	cmp	r5, #54	@ 0x36
 80001f0:	bf88      	it	hi
 80001f2:	bd30      	pophi	{r4, r5, pc}
 80001f4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80001f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001fc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000200:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000204:	d002      	beq.n	800020c <__adddf3+0x70>
 8000206:	4240      	negs	r0, r0
 8000208:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800020c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000210:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000214:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000218:	d002      	beq.n	8000220 <__adddf3+0x84>
 800021a:	4252      	negs	r2, r2
 800021c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000220:	ea94 0f05 	teq	r4, r5
 8000224:	f000 80a7 	beq.w	8000376 <__adddf3+0x1da>
 8000228:	f1a4 0401 	sub.w	r4, r4, #1
 800022c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000230:	db0d      	blt.n	800024e <__adddf3+0xb2>
 8000232:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000236:	fa22 f205 	lsr.w	r2, r2, r5
 800023a:	1880      	adds	r0, r0, r2
 800023c:	f141 0100 	adc.w	r1, r1, #0
 8000240:	fa03 f20e 	lsl.w	r2, r3, lr
 8000244:	1880      	adds	r0, r0, r2
 8000246:	fa43 f305 	asr.w	r3, r3, r5
 800024a:	4159      	adcs	r1, r3
 800024c:	e00e      	b.n	800026c <__adddf3+0xd0>
 800024e:	f1a5 0520 	sub.w	r5, r5, #32
 8000252:	f10e 0e20 	add.w	lr, lr, #32
 8000256:	2a01      	cmp	r2, #1
 8000258:	fa03 fc0e 	lsl.w	ip, r3, lr
 800025c:	bf28      	it	cs
 800025e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000262:	fa43 f305 	asr.w	r3, r3, r5
 8000266:	18c0      	adds	r0, r0, r3
 8000268:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800026c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000270:	d507      	bpl.n	8000282 <__adddf3+0xe6>
 8000272:	f04f 0e00 	mov.w	lr, #0
 8000276:	f1dc 0c00 	rsbs	ip, ip, #0
 800027a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800027e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000282:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000286:	d31b      	bcc.n	80002c0 <__adddf3+0x124>
 8000288:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800028c:	d30c      	bcc.n	80002a8 <__adddf3+0x10c>
 800028e:	0849      	lsrs	r1, r1, #1
 8000290:	ea5f 0030 	movs.w	r0, r0, rrx
 8000294:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000298:	f104 0401 	add.w	r4, r4, #1
 800029c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002a0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80002a4:	f080 809a 	bcs.w	80003dc <__adddf3+0x240>
 80002a8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80002ac:	bf08      	it	eq
 80002ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002b2:	f150 0000 	adcs.w	r0, r0, #0
 80002b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002ba:	ea41 0105 	orr.w	r1, r1, r5
 80002be:	bd30      	pop	{r4, r5, pc}
 80002c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002c4:	4140      	adcs	r0, r0
 80002c6:	eb41 0101 	adc.w	r1, r1, r1
 80002ca:	3c01      	subs	r4, #1
 80002cc:	bf28      	it	cs
 80002ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80002d2:	d2e9      	bcs.n	80002a8 <__adddf3+0x10c>
 80002d4:	f091 0f00 	teq	r1, #0
 80002d8:	bf04      	itt	eq
 80002da:	4601      	moveq	r1, r0
 80002dc:	2000      	moveq	r0, #0
 80002de:	fab1 f381 	clz	r3, r1
 80002e2:	bf08      	it	eq
 80002e4:	3320      	addeq	r3, #32
 80002e6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ea:	f1b3 0220 	subs.w	r2, r3, #32
 80002ee:	da0c      	bge.n	800030a <__adddf3+0x16e>
 80002f0:	320c      	adds	r2, #12
 80002f2:	dd08      	ble.n	8000306 <__adddf3+0x16a>
 80002f4:	f102 0c14 	add.w	ip, r2, #20
 80002f8:	f1c2 020c 	rsb	r2, r2, #12
 80002fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000300:	fa21 f102 	lsr.w	r1, r1, r2
 8000304:	e00c      	b.n	8000320 <__adddf3+0x184>
 8000306:	f102 0214 	add.w	r2, r2, #20
 800030a:	bfd8      	it	le
 800030c:	f1c2 0c20 	rsble	ip, r2, #32
 8000310:	fa01 f102 	lsl.w	r1, r1, r2
 8000314:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000318:	bfdc      	itt	le
 800031a:	ea41 010c 	orrle.w	r1, r1, ip
 800031e:	4090      	lslle	r0, r2
 8000320:	1ae4      	subs	r4, r4, r3
 8000322:	bfa2      	ittt	ge
 8000324:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000328:	4329      	orrge	r1, r5
 800032a:	bd30      	popge	{r4, r5, pc}
 800032c:	ea6f 0404 	mvn.w	r4, r4
 8000330:	3c1f      	subs	r4, #31
 8000332:	da1c      	bge.n	800036e <__adddf3+0x1d2>
 8000334:	340c      	adds	r4, #12
 8000336:	dc0e      	bgt.n	8000356 <__adddf3+0x1ba>
 8000338:	f104 0414 	add.w	r4, r4, #20
 800033c:	f1c4 0220 	rsb	r2, r4, #32
 8000340:	fa20 f004 	lsr.w	r0, r0, r4
 8000344:	fa01 f302 	lsl.w	r3, r1, r2
 8000348:	ea40 0003 	orr.w	r0, r0, r3
 800034c:	fa21 f304 	lsr.w	r3, r1, r4
 8000350:	ea45 0103 	orr.w	r1, r5, r3
 8000354:	bd30      	pop	{r4, r5, pc}
 8000356:	f1c4 040c 	rsb	r4, r4, #12
 800035a:	f1c4 0220 	rsb	r2, r4, #32
 800035e:	fa20 f002 	lsr.w	r0, r0, r2
 8000362:	fa01 f304 	lsl.w	r3, r1, r4
 8000366:	ea40 0003 	orr.w	r0, r0, r3
 800036a:	4629      	mov	r1, r5
 800036c:	bd30      	pop	{r4, r5, pc}
 800036e:	fa21 f004 	lsr.w	r0, r1, r4
 8000372:	4629      	mov	r1, r5
 8000374:	bd30      	pop	{r4, r5, pc}
 8000376:	f094 0f00 	teq	r4, #0
 800037a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800037e:	bf06      	itte	eq
 8000380:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000384:	3401      	addeq	r4, #1
 8000386:	3d01      	subne	r5, #1
 8000388:	e74e      	b.n	8000228 <__adddf3+0x8c>
 800038a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800038e:	bf18      	it	ne
 8000390:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000394:	d029      	beq.n	80003ea <__adddf3+0x24e>
 8000396:	ea94 0f05 	teq	r4, r5
 800039a:	bf08      	it	eq
 800039c:	ea90 0f02 	teqeq	r0, r2
 80003a0:	d005      	beq.n	80003ae <__adddf3+0x212>
 80003a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80003a6:	bf04      	itt	eq
 80003a8:	4619      	moveq	r1, r3
 80003aa:	4610      	moveq	r0, r2
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	ea91 0f03 	teq	r1, r3
 80003b2:	bf1e      	ittt	ne
 80003b4:	2100      	movne	r1, #0
 80003b6:	2000      	movne	r0, #0
 80003b8:	bd30      	popne	{r4, r5, pc}
 80003ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003be:	d105      	bne.n	80003cc <__adddf3+0x230>
 80003c0:	0040      	lsls	r0, r0, #1
 80003c2:	4149      	adcs	r1, r1
 80003c4:	bf28      	it	cs
 80003c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80003ca:	bd30      	pop	{r4, r5, pc}
 80003cc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80003d0:	bf3c      	itt	cc
 80003d2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80003d6:	bd30      	popcc	{r4, r5, pc}
 80003d8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003dc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80003e0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80003e4:	f04f 0000 	mov.w	r0, #0
 80003e8:	bd30      	pop	{r4, r5, pc}
 80003ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ee:	bf1a      	itte	ne
 80003f0:	4619      	movne	r1, r3
 80003f2:	4610      	movne	r0, r2
 80003f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003f8:	bf1c      	itt	ne
 80003fa:	460b      	movne	r3, r1
 80003fc:	4602      	movne	r2, r0
 80003fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000402:	bf06      	itte	eq
 8000404:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000408:	ea91 0f03 	teqeq	r1, r3
 800040c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000410:	bd30      	pop	{r4, r5, pc}
 8000412:	bf00      	nop

08000414 <__aeabi_ui2d>:
 8000414:	f090 0f00 	teq	r0, #0
 8000418:	bf04      	itt	eq
 800041a:	2100      	moveq	r1, #0
 800041c:	4770      	bxeq	lr
 800041e:	b530      	push	{r4, r5, lr}
 8000420:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000424:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000428:	f04f 0500 	mov.w	r5, #0
 800042c:	f04f 0100 	mov.w	r1, #0
 8000430:	e750      	b.n	80002d4 <__adddf3+0x138>
 8000432:	bf00      	nop

08000434 <__aeabi_i2d>:
 8000434:	f090 0f00 	teq	r0, #0
 8000438:	bf04      	itt	eq
 800043a:	2100      	moveq	r1, #0
 800043c:	4770      	bxeq	lr
 800043e:	b530      	push	{r4, r5, lr}
 8000440:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000444:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000448:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800044c:	bf48      	it	mi
 800044e:	4240      	negmi	r0, r0
 8000450:	f04f 0100 	mov.w	r1, #0
 8000454:	e73e      	b.n	80002d4 <__adddf3+0x138>
 8000456:	bf00      	nop

08000458 <__aeabi_f2d>:
 8000458:	0042      	lsls	r2, r0, #1
 800045a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800045e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000462:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000466:	bf1f      	itttt	ne
 8000468:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800046c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000470:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000474:	4770      	bxne	lr
 8000476:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800047a:	bf08      	it	eq
 800047c:	4770      	bxeq	lr
 800047e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000482:	bf04      	itt	eq
 8000484:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000488:	4770      	bxeq	lr
 800048a:	b530      	push	{r4, r5, lr}
 800048c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000490:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000494:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000498:	e71c      	b.n	80002d4 <__adddf3+0x138>
 800049a:	bf00      	nop

0800049c <__aeabi_ul2d>:
 800049c:	ea50 0201 	orrs.w	r2, r0, r1
 80004a0:	bf08      	it	eq
 80004a2:	4770      	bxeq	lr
 80004a4:	b530      	push	{r4, r5, lr}
 80004a6:	f04f 0500 	mov.w	r5, #0
 80004aa:	e00a      	b.n	80004c2 <__aeabi_l2d+0x16>

080004ac <__aeabi_l2d>:
 80004ac:	ea50 0201 	orrs.w	r2, r0, r1
 80004b0:	bf08      	it	eq
 80004b2:	4770      	bxeq	lr
 80004b4:	b530      	push	{r4, r5, lr}
 80004b6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80004ba:	d502      	bpl.n	80004c2 <__aeabi_l2d+0x16>
 80004bc:	4240      	negs	r0, r0
 80004be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004c2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004c6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80004ce:	f43f aed8 	beq.w	8000282 <__adddf3+0xe6>
 80004d2:	f04f 0203 	mov.w	r2, #3
 80004d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004da:	bf18      	it	ne
 80004dc:	3203      	addne	r2, #3
 80004de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004e2:	bf18      	it	ne
 80004e4:	3203      	addne	r2, #3
 80004e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ea:	f1c2 0320 	rsb	r3, r2, #32
 80004ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80004f2:	fa20 f002 	lsr.w	r0, r0, r2
 80004f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004fa:	ea40 000e 	orr.w	r0, r0, lr
 80004fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000502:	4414      	add	r4, r2
 8000504:	e6bd      	b.n	8000282 <__adddf3+0xe6>
 8000506:	bf00      	nop

08000508 <__aeabi_dmul>:
 8000508:	b570      	push	{r4, r5, r6, lr}
 800050a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800050e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000512:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000516:	bf1d      	ittte	ne
 8000518:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800051c:	ea94 0f0c 	teqne	r4, ip
 8000520:	ea95 0f0c 	teqne	r5, ip
 8000524:	f000 f8de 	bleq	80006e4 <__aeabi_dmul+0x1dc>
 8000528:	442c      	add	r4, r5
 800052a:	ea81 0603 	eor.w	r6, r1, r3
 800052e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000532:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000536:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800053a:	bf18      	it	ne
 800053c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000540:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000544:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000548:	d038      	beq.n	80005bc <__aeabi_dmul+0xb4>
 800054a:	fba0 ce02 	umull	ip, lr, r0, r2
 800054e:	f04f 0500 	mov.w	r5, #0
 8000552:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000556:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800055a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800055e:	f04f 0600 	mov.w	r6, #0
 8000562:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000566:	f09c 0f00 	teq	ip, #0
 800056a:	bf18      	it	ne
 800056c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000570:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000574:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000578:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800057c:	d204      	bcs.n	8000588 <__aeabi_dmul+0x80>
 800057e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000582:	416d      	adcs	r5, r5
 8000584:	eb46 0606 	adc.w	r6, r6, r6
 8000588:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800058c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000590:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000594:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000598:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800059c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80005a0:	bf88      	it	hi
 80005a2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80005a6:	d81e      	bhi.n	80005e6 <__aeabi_dmul+0xde>
 80005a8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80005ac:	bf08      	it	eq
 80005ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005b2:	f150 0000 	adcs.w	r0, r0, #0
 80005b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005ba:	bd70      	pop	{r4, r5, r6, pc}
 80005bc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80005c0:	ea46 0101 	orr.w	r1, r6, r1
 80005c4:	ea40 0002 	orr.w	r0, r0, r2
 80005c8:	ea81 0103 	eor.w	r1, r1, r3
 80005cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005d0:	bfc2      	ittt	gt
 80005d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005da:	bd70      	popgt	{r4, r5, r6, pc}
 80005dc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005e0:	f04f 0e00 	mov.w	lr, #0
 80005e4:	3c01      	subs	r4, #1
 80005e6:	f300 80ab 	bgt.w	8000740 <__aeabi_dmul+0x238>
 80005ea:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80005ee:	bfde      	ittt	le
 80005f0:	2000      	movle	r0, #0
 80005f2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80005f6:	bd70      	pople	{r4, r5, r6, pc}
 80005f8:	f1c4 0400 	rsb	r4, r4, #0
 80005fc:	3c20      	subs	r4, #32
 80005fe:	da35      	bge.n	800066c <__aeabi_dmul+0x164>
 8000600:	340c      	adds	r4, #12
 8000602:	dc1b      	bgt.n	800063c <__aeabi_dmul+0x134>
 8000604:	f104 0414 	add.w	r4, r4, #20
 8000608:	f1c4 0520 	rsb	r5, r4, #32
 800060c:	fa00 f305 	lsl.w	r3, r0, r5
 8000610:	fa20 f004 	lsr.w	r0, r0, r4
 8000614:	fa01 f205 	lsl.w	r2, r1, r5
 8000618:	ea40 0002 	orr.w	r0, r0, r2
 800061c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000620:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000624:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000628:	fa21 f604 	lsr.w	r6, r1, r4
 800062c:	eb42 0106 	adc.w	r1, r2, r6
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 040c 	rsb	r4, r4, #12
 8000640:	f1c4 0520 	rsb	r5, r4, #32
 8000644:	fa00 f304 	lsl.w	r3, r0, r4
 8000648:	fa20 f005 	lsr.w	r0, r0, r5
 800064c:	fa01 f204 	lsl.w	r2, r1, r4
 8000650:	ea40 0002 	orr.w	r0, r0, r2
 8000654:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000658:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800065c:	f141 0100 	adc.w	r1, r1, #0
 8000660:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000664:	bf08      	it	eq
 8000666:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800066a:	bd70      	pop	{r4, r5, r6, pc}
 800066c:	f1c4 0520 	rsb	r5, r4, #32
 8000670:	fa00 f205 	lsl.w	r2, r0, r5
 8000674:	ea4e 0e02 	orr.w	lr, lr, r2
 8000678:	fa20 f304 	lsr.w	r3, r0, r4
 800067c:	fa01 f205 	lsl.w	r2, r1, r5
 8000680:	ea43 0302 	orr.w	r3, r3, r2
 8000684:	fa21 f004 	lsr.w	r0, r1, r4
 8000688:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800068c:	fa21 f204 	lsr.w	r2, r1, r4
 8000690:	ea20 0002 	bic.w	r0, r0, r2
 8000694:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000698:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800069c:	bf08      	it	eq
 800069e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006a2:	bd70      	pop	{r4, r5, r6, pc}
 80006a4:	f094 0f00 	teq	r4, #0
 80006a8:	d10f      	bne.n	80006ca <__aeabi_dmul+0x1c2>
 80006aa:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80006ae:	0040      	lsls	r0, r0, #1
 80006b0:	eb41 0101 	adc.w	r1, r1, r1
 80006b4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80006b8:	bf08      	it	eq
 80006ba:	3c01      	subeq	r4, #1
 80006bc:	d0f7      	beq.n	80006ae <__aeabi_dmul+0x1a6>
 80006be:	ea41 0106 	orr.w	r1, r1, r6
 80006c2:	f095 0f00 	teq	r5, #0
 80006c6:	bf18      	it	ne
 80006c8:	4770      	bxne	lr
 80006ca:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80006ce:	0052      	lsls	r2, r2, #1
 80006d0:	eb43 0303 	adc.w	r3, r3, r3
 80006d4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80006d8:	bf08      	it	eq
 80006da:	3d01      	subeq	r5, #1
 80006dc:	d0f7      	beq.n	80006ce <__aeabi_dmul+0x1c6>
 80006de:	ea43 0306 	orr.w	r3, r3, r6
 80006e2:	4770      	bx	lr
 80006e4:	ea94 0f0c 	teq	r4, ip
 80006e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006ec:	bf18      	it	ne
 80006ee:	ea95 0f0c 	teqne	r5, ip
 80006f2:	d00c      	beq.n	800070e <__aeabi_dmul+0x206>
 80006f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006f8:	bf18      	it	ne
 80006fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006fe:	d1d1      	bne.n	80006a4 <__aeabi_dmul+0x19c>
 8000700:	ea81 0103 	eor.w	r1, r1, r3
 8000704:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000708:	f04f 0000 	mov.w	r0, #0
 800070c:	bd70      	pop	{r4, r5, r6, pc}
 800070e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000712:	bf06      	itte	eq
 8000714:	4610      	moveq	r0, r2
 8000716:	4619      	moveq	r1, r3
 8000718:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800071c:	d019      	beq.n	8000752 <__aeabi_dmul+0x24a>
 800071e:	ea94 0f0c 	teq	r4, ip
 8000722:	d102      	bne.n	800072a <__aeabi_dmul+0x222>
 8000724:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000728:	d113      	bne.n	8000752 <__aeabi_dmul+0x24a>
 800072a:	ea95 0f0c 	teq	r5, ip
 800072e:	d105      	bne.n	800073c <__aeabi_dmul+0x234>
 8000730:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000734:	bf1c      	itt	ne
 8000736:	4610      	movne	r0, r2
 8000738:	4619      	movne	r1, r3
 800073a:	d10a      	bne.n	8000752 <__aeabi_dmul+0x24a>
 800073c:	ea81 0103 	eor.w	r1, r1, r3
 8000740:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000744:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000748:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800074c:	f04f 0000 	mov.w	r0, #0
 8000750:	bd70      	pop	{r4, r5, r6, pc}
 8000752:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000756:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800075a:	bd70      	pop	{r4, r5, r6, pc}

0800075c <__aeabi_ddiv>:
 800075c:	b570      	push	{r4, r5, r6, lr}
 800075e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000762:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000766:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800076a:	bf1d      	ittte	ne
 800076c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000770:	ea94 0f0c 	teqne	r4, ip
 8000774:	ea95 0f0c 	teqne	r5, ip
 8000778:	f000 f8a7 	bleq	80008ca <__aeabi_ddiv+0x16e>
 800077c:	eba4 0405 	sub.w	r4, r4, r5
 8000780:	ea81 0e03 	eor.w	lr, r1, r3
 8000784:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000788:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800078c:	f000 8088 	beq.w	80008a0 <__aeabi_ddiv+0x144>
 8000790:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000794:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000798:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800079c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007b0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80007b4:	429d      	cmp	r5, r3
 80007b6:	bf08      	it	eq
 80007b8:	4296      	cmpeq	r6, r2
 80007ba:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80007be:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80007c2:	d202      	bcs.n	80007ca <__aeabi_ddiv+0x6e>
 80007c4:	085b      	lsrs	r3, r3, #1
 80007c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ca:	1ab6      	subs	r6, r6, r2
 80007cc:	eb65 0503 	sbc.w	r5, r5, r3
 80007d0:	085b      	lsrs	r3, r3, #1
 80007d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007d6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80007da:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000808:	085b      	lsrs	r3, r3, #1
 800080a:	ea4f 0232 	mov.w	r2, r2, rrx
 800080e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000812:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000816:	bf22      	ittt	cs
 8000818:	1ab6      	subcs	r6, r6, r2
 800081a:	4675      	movcs	r5, lr
 800081c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000820:	085b      	lsrs	r3, r3, #1
 8000822:	ea4f 0232 	mov.w	r2, r2, rrx
 8000826:	ebb6 0e02 	subs.w	lr, r6, r2
 800082a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800082e:	bf22      	ittt	cs
 8000830:	1ab6      	subcs	r6, r6, r2
 8000832:	4675      	movcs	r5, lr
 8000834:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000838:	ea55 0e06 	orrs.w	lr, r5, r6
 800083c:	d018      	beq.n	8000870 <__aeabi_ddiv+0x114>
 800083e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000842:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000846:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800084a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800084e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000852:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000856:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800085a:	d1c0      	bne.n	80007de <__aeabi_ddiv+0x82>
 800085c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000860:	d10b      	bne.n	800087a <__aeabi_ddiv+0x11e>
 8000862:	ea41 0100 	orr.w	r1, r1, r0
 8000866:	f04f 0000 	mov.w	r0, #0
 800086a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800086e:	e7b6      	b.n	80007de <__aeabi_ddiv+0x82>
 8000870:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000874:	bf04      	itt	eq
 8000876:	4301      	orreq	r1, r0
 8000878:	2000      	moveq	r0, #0
 800087a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800087e:	bf88      	it	hi
 8000880:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000884:	f63f aeaf 	bhi.w	80005e6 <__aeabi_dmul+0xde>
 8000888:	ebb5 0c03 	subs.w	ip, r5, r3
 800088c:	bf04      	itt	eq
 800088e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000892:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000896:	f150 0000 	adcs.w	r0, r0, #0
 800089a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800089e:	bd70      	pop	{r4, r5, r6, pc}
 80008a0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80008a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008ac:	bfc2      	ittt	gt
 80008ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008b6:	bd70      	popgt	{r4, r5, r6, pc}
 80008b8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80008bc:	f04f 0e00 	mov.w	lr, #0
 80008c0:	3c01      	subs	r4, #1
 80008c2:	e690      	b.n	80005e6 <__aeabi_dmul+0xde>
 80008c4:	ea45 0e06 	orr.w	lr, r5, r6
 80008c8:	e68d      	b.n	80005e6 <__aeabi_dmul+0xde>
 80008ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80008ce:	ea94 0f0c 	teq	r4, ip
 80008d2:	bf08      	it	eq
 80008d4:	ea95 0f0c 	teqeq	r5, ip
 80008d8:	f43f af3b 	beq.w	8000752 <__aeabi_dmul+0x24a>
 80008dc:	ea94 0f0c 	teq	r4, ip
 80008e0:	d10a      	bne.n	80008f8 <__aeabi_ddiv+0x19c>
 80008e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008e6:	f47f af34 	bne.w	8000752 <__aeabi_dmul+0x24a>
 80008ea:	ea95 0f0c 	teq	r5, ip
 80008ee:	f47f af25 	bne.w	800073c <__aeabi_dmul+0x234>
 80008f2:	4610      	mov	r0, r2
 80008f4:	4619      	mov	r1, r3
 80008f6:	e72c      	b.n	8000752 <__aeabi_dmul+0x24a>
 80008f8:	ea95 0f0c 	teq	r5, ip
 80008fc:	d106      	bne.n	800090c <__aeabi_ddiv+0x1b0>
 80008fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000902:	f43f aefd 	beq.w	8000700 <__aeabi_dmul+0x1f8>
 8000906:	4610      	mov	r0, r2
 8000908:	4619      	mov	r1, r3
 800090a:	e722      	b.n	8000752 <__aeabi_dmul+0x24a>
 800090c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000910:	bf18      	it	ne
 8000912:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000916:	f47f aec5 	bne.w	80006a4 <__aeabi_dmul+0x19c>
 800091a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800091e:	f47f af0d 	bne.w	800073c <__aeabi_dmul+0x234>
 8000922:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000926:	f47f aeeb 	bne.w	8000700 <__aeabi_dmul+0x1f8>
 800092a:	e712      	b.n	8000752 <__aeabi_dmul+0x24a>

0800092c <__gedf2>:
 800092c:	f04f 3cff 	mov.w	ip, #4294967295
 8000930:	e006      	b.n	8000940 <__cmpdf2+0x4>
 8000932:	bf00      	nop

08000934 <__ledf2>:
 8000934:	f04f 0c01 	mov.w	ip, #1
 8000938:	e002      	b.n	8000940 <__cmpdf2+0x4>
 800093a:	bf00      	nop

0800093c <__cmpdf2>:
 800093c:	f04f 0c01 	mov.w	ip, #1
 8000940:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000944:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000948:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800094c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000950:	bf18      	it	ne
 8000952:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000956:	d01b      	beq.n	8000990 <__cmpdf2+0x54>
 8000958:	b001      	add	sp, #4
 800095a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800095e:	bf0c      	ite	eq
 8000960:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000964:	ea91 0f03 	teqne	r1, r3
 8000968:	bf02      	ittt	eq
 800096a:	ea90 0f02 	teqeq	r0, r2
 800096e:	2000      	moveq	r0, #0
 8000970:	4770      	bxeq	lr
 8000972:	f110 0f00 	cmn.w	r0, #0
 8000976:	ea91 0f03 	teq	r1, r3
 800097a:	bf58      	it	pl
 800097c:	4299      	cmppl	r1, r3
 800097e:	bf08      	it	eq
 8000980:	4290      	cmpeq	r0, r2
 8000982:	bf2c      	ite	cs
 8000984:	17d8      	asrcs	r0, r3, #31
 8000986:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800098a:	f040 0001 	orr.w	r0, r0, #1
 800098e:	4770      	bx	lr
 8000990:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000994:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000998:	d102      	bne.n	80009a0 <__cmpdf2+0x64>
 800099a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800099e:	d107      	bne.n	80009b0 <__cmpdf2+0x74>
 80009a0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009a4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009a8:	d1d6      	bne.n	8000958 <__cmpdf2+0x1c>
 80009aa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009ae:	d0d3      	beq.n	8000958 <__cmpdf2+0x1c>
 80009b0:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009b4:	4770      	bx	lr
 80009b6:	bf00      	nop

080009b8 <__aeabi_cdrcmple>:
 80009b8:	4684      	mov	ip, r0
 80009ba:	4610      	mov	r0, r2
 80009bc:	4662      	mov	r2, ip
 80009be:	468c      	mov	ip, r1
 80009c0:	4619      	mov	r1, r3
 80009c2:	4663      	mov	r3, ip
 80009c4:	e000      	b.n	80009c8 <__aeabi_cdcmpeq>
 80009c6:	bf00      	nop

080009c8 <__aeabi_cdcmpeq>:
 80009c8:	b501      	push	{r0, lr}
 80009ca:	f7ff ffb7 	bl	800093c <__cmpdf2>
 80009ce:	2800      	cmp	r0, #0
 80009d0:	bf48      	it	mi
 80009d2:	f110 0f00 	cmnmi.w	r0, #0
 80009d6:	bd01      	pop	{r0, pc}

080009d8 <__aeabi_dcmpeq>:
 80009d8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009dc:	f7ff fff4 	bl	80009c8 <__aeabi_cdcmpeq>
 80009e0:	bf0c      	ite	eq
 80009e2:	2001      	moveq	r0, #1
 80009e4:	2000      	movne	r0, #0
 80009e6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ea:	bf00      	nop

080009ec <__aeabi_dcmplt>:
 80009ec:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009f0:	f7ff ffea 	bl	80009c8 <__aeabi_cdcmpeq>
 80009f4:	bf34      	ite	cc
 80009f6:	2001      	movcc	r0, #1
 80009f8:	2000      	movcs	r0, #0
 80009fa:	f85d fb08 	ldr.w	pc, [sp], #8
 80009fe:	bf00      	nop

08000a00 <__aeabi_dcmple>:
 8000a00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a04:	f7ff ffe0 	bl	80009c8 <__aeabi_cdcmpeq>
 8000a08:	bf94      	ite	ls
 8000a0a:	2001      	movls	r0, #1
 8000a0c:	2000      	movhi	r0, #0
 8000a0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a12:	bf00      	nop

08000a14 <__aeabi_dcmpge>:
 8000a14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a18:	f7ff ffce 	bl	80009b8 <__aeabi_cdrcmple>
 8000a1c:	bf94      	ite	ls
 8000a1e:	2001      	movls	r0, #1
 8000a20:	2000      	movhi	r0, #0
 8000a22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a26:	bf00      	nop

08000a28 <__aeabi_dcmpgt>:
 8000a28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a2c:	f7ff ffc4 	bl	80009b8 <__aeabi_cdrcmple>
 8000a30:	bf34      	ite	cc
 8000a32:	2001      	movcc	r0, #1
 8000a34:	2000      	movcs	r0, #0
 8000a36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a3a:	bf00      	nop

08000a3c <__aeabi_dcmpun>:
 8000a3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a44:	d102      	bne.n	8000a4c <__aeabi_dcmpun+0x10>
 8000a46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a4a:	d10a      	bne.n	8000a62 <__aeabi_dcmpun+0x26>
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a54:	d102      	bne.n	8000a5c <__aeabi_dcmpun+0x20>
 8000a56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a5a:	d102      	bne.n	8000a62 <__aeabi_dcmpun+0x26>
 8000a5c:	f04f 0000 	mov.w	r0, #0
 8000a60:	4770      	bx	lr
 8000a62:	f04f 0001 	mov.w	r0, #1
 8000a66:	4770      	bx	lr

08000a68 <__aeabi_d2iz>:
 8000a68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a6c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a70:	d215      	bcs.n	8000a9e <__aeabi_d2iz+0x36>
 8000a72:	d511      	bpl.n	8000a98 <__aeabi_d2iz+0x30>
 8000a74:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a7c:	d912      	bls.n	8000aa4 <__aeabi_d2iz+0x3c>
 8000a7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a82:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000a86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a8a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000a8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a92:	bf18      	it	ne
 8000a94:	4240      	negne	r0, r0
 8000a96:	4770      	bx	lr
 8000a98:	f04f 0000 	mov.w	r0, #0
 8000a9c:	4770      	bx	lr
 8000a9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aa2:	d105      	bne.n	8000ab0 <__aeabi_d2iz+0x48>
 8000aa4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000aa8:	bf08      	it	eq
 8000aaa:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000aae:	4770      	bx	lr
 8000ab0:	f04f 0000 	mov.w	r0, #0
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_frsub>:
 8000ab8:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000abc:	e002      	b.n	8000ac4 <__addsf3>
 8000abe:	bf00      	nop

08000ac0 <__aeabi_fsub>:
 8000ac0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

08000ac4 <__addsf3>:
 8000ac4:	0042      	lsls	r2, r0, #1
 8000ac6:	bf1f      	itttt	ne
 8000ac8:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000acc:	ea92 0f03 	teqne	r2, r3
 8000ad0:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000ad4:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000ad8:	d06a      	beq.n	8000bb0 <__addsf3+0xec>
 8000ada:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000ade:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000ae2:	bfc1      	itttt	gt
 8000ae4:	18d2      	addgt	r2, r2, r3
 8000ae6:	4041      	eorgt	r1, r0
 8000ae8:	4048      	eorgt	r0, r1
 8000aea:	4041      	eorgt	r1, r0
 8000aec:	bfb8      	it	lt
 8000aee:	425b      	neglt	r3, r3
 8000af0:	2b19      	cmp	r3, #25
 8000af2:	bf88      	it	hi
 8000af4:	4770      	bxhi	lr
 8000af6:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000afa:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000afe:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 8000b02:	bf18      	it	ne
 8000b04:	4240      	negne	r0, r0
 8000b06:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b0a:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 8000b0e:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 8000b12:	bf18      	it	ne
 8000b14:	4249      	negne	r1, r1
 8000b16:	ea92 0f03 	teq	r2, r3
 8000b1a:	d03f      	beq.n	8000b9c <__addsf3+0xd8>
 8000b1c:	f1a2 0201 	sub.w	r2, r2, #1
 8000b20:	fa41 fc03 	asr.w	ip, r1, r3
 8000b24:	eb10 000c 	adds.w	r0, r0, ip
 8000b28:	f1c3 0320 	rsb	r3, r3, #32
 8000b2c:	fa01 f103 	lsl.w	r1, r1, r3
 8000b30:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000b34:	d502      	bpl.n	8000b3c <__addsf3+0x78>
 8000b36:	4249      	negs	r1, r1
 8000b38:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000b3c:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 8000b40:	d313      	bcc.n	8000b6a <__addsf3+0xa6>
 8000b42:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8000b46:	d306      	bcc.n	8000b56 <__addsf3+0x92>
 8000b48:	0840      	lsrs	r0, r0, #1
 8000b4a:	ea4f 0131 	mov.w	r1, r1, rrx
 8000b4e:	f102 0201 	add.w	r2, r2, #1
 8000b52:	2afe      	cmp	r2, #254	@ 0xfe
 8000b54:	d251      	bcs.n	8000bfa <__addsf3+0x136>
 8000b56:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 8000b5a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000b5e:	bf08      	it	eq
 8000b60:	f020 0001 	biceq.w	r0, r0, #1
 8000b64:	ea40 0003 	orr.w	r0, r0, r3
 8000b68:	4770      	bx	lr
 8000b6a:	0049      	lsls	r1, r1, #1
 8000b6c:	eb40 0000 	adc.w	r0, r0, r0
 8000b70:	3a01      	subs	r2, #1
 8000b72:	bf28      	it	cs
 8000b74:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 8000b78:	d2ed      	bcs.n	8000b56 <__addsf3+0x92>
 8000b7a:	fab0 fc80 	clz	ip, r0
 8000b7e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000b82:	ebb2 020c 	subs.w	r2, r2, ip
 8000b86:	fa00 f00c 	lsl.w	r0, r0, ip
 8000b8a:	bfaa      	itet	ge
 8000b8c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000b90:	4252      	neglt	r2, r2
 8000b92:	4318      	orrge	r0, r3
 8000b94:	bfbc      	itt	lt
 8000b96:	40d0      	lsrlt	r0, r2
 8000b98:	4318      	orrlt	r0, r3
 8000b9a:	4770      	bx	lr
 8000b9c:	f092 0f00 	teq	r2, #0
 8000ba0:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 8000ba4:	bf06      	itte	eq
 8000ba6:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 8000baa:	3201      	addeq	r2, #1
 8000bac:	3b01      	subne	r3, #1
 8000bae:	e7b5      	b.n	8000b1c <__addsf3+0x58>
 8000bb0:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000bb4:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000bb8:	bf18      	it	ne
 8000bba:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000bbe:	d021      	beq.n	8000c04 <__addsf3+0x140>
 8000bc0:	ea92 0f03 	teq	r2, r3
 8000bc4:	d004      	beq.n	8000bd0 <__addsf3+0x10c>
 8000bc6:	f092 0f00 	teq	r2, #0
 8000bca:	bf08      	it	eq
 8000bcc:	4608      	moveq	r0, r1
 8000bce:	4770      	bx	lr
 8000bd0:	ea90 0f01 	teq	r0, r1
 8000bd4:	bf1c      	itt	ne
 8000bd6:	2000      	movne	r0, #0
 8000bd8:	4770      	bxne	lr
 8000bda:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000bde:	d104      	bne.n	8000bea <__addsf3+0x126>
 8000be0:	0040      	lsls	r0, r0, #1
 8000be2:	bf28      	it	cs
 8000be4:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 8000be8:	4770      	bx	lr
 8000bea:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 8000bee:	bf3c      	itt	cc
 8000bf0:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000bf4:	4770      	bxcc	lr
 8000bf6:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000bfa:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 8000bfe:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c02:	4770      	bx	lr
 8000c04:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000c08:	bf16      	itet	ne
 8000c0a:	4608      	movne	r0, r1
 8000c0c:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000c10:	4601      	movne	r1, r0
 8000c12:	0242      	lsls	r2, r0, #9
 8000c14:	bf06      	itte	eq
 8000c16:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000c1a:	ea90 0f01 	teqeq	r0, r1
 8000c1e:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 8000c22:	4770      	bx	lr

08000c24 <__aeabi_ui2f>:
 8000c24:	f04f 0300 	mov.w	r3, #0
 8000c28:	e004      	b.n	8000c34 <__aeabi_i2f+0x8>
 8000c2a:	bf00      	nop

08000c2c <__aeabi_i2f>:
 8000c2c:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 8000c30:	bf48      	it	mi
 8000c32:	4240      	negmi	r0, r0
 8000c34:	ea5f 0c00 	movs.w	ip, r0
 8000c38:	bf08      	it	eq
 8000c3a:	4770      	bxeq	lr
 8000c3c:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 8000c40:	4601      	mov	r1, r0
 8000c42:	f04f 0000 	mov.w	r0, #0
 8000c46:	e01c      	b.n	8000c82 <__aeabi_l2f+0x2a>

08000c48 <__aeabi_ul2f>:
 8000c48:	ea50 0201 	orrs.w	r2, r0, r1
 8000c4c:	bf08      	it	eq
 8000c4e:	4770      	bxeq	lr
 8000c50:	f04f 0300 	mov.w	r3, #0
 8000c54:	e00a      	b.n	8000c6c <__aeabi_l2f+0x14>
 8000c56:	bf00      	nop

08000c58 <__aeabi_l2f>:
 8000c58:	ea50 0201 	orrs.w	r2, r0, r1
 8000c5c:	bf08      	it	eq
 8000c5e:	4770      	bxeq	lr
 8000c60:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 8000c64:	d502      	bpl.n	8000c6c <__aeabi_l2f+0x14>
 8000c66:	4240      	negs	r0, r0
 8000c68:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c6c:	ea5f 0c01 	movs.w	ip, r1
 8000c70:	bf02      	ittt	eq
 8000c72:	4684      	moveq	ip, r0
 8000c74:	4601      	moveq	r1, r0
 8000c76:	2000      	moveq	r0, #0
 8000c78:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000c7c:	bf08      	it	eq
 8000c7e:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 8000c82:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 8000c86:	fabc f28c 	clz	r2, ip
 8000c8a:	3a08      	subs	r2, #8
 8000c8c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000c90:	db10      	blt.n	8000cb4 <__aeabi_l2f+0x5c>
 8000c92:	fa01 fc02 	lsl.w	ip, r1, r2
 8000c96:	4463      	add	r3, ip
 8000c98:	fa00 fc02 	lsl.w	ip, r0, r2
 8000c9c:	f1c2 0220 	rsb	r2, r2, #32
 8000ca0:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000ca4:	fa20 f202 	lsr.w	r2, r0, r2
 8000ca8:	eb43 0002 	adc.w	r0, r3, r2
 8000cac:	bf08      	it	eq
 8000cae:	f020 0001 	biceq.w	r0, r0, #1
 8000cb2:	4770      	bx	lr
 8000cb4:	f102 0220 	add.w	r2, r2, #32
 8000cb8:	fa01 fc02 	lsl.w	ip, r1, r2
 8000cbc:	f1c2 0220 	rsb	r2, r2, #32
 8000cc0:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000cc4:	fa21 f202 	lsr.w	r2, r1, r2
 8000cc8:	eb43 0002 	adc.w	r0, r3, r2
 8000ccc:	bf08      	it	eq
 8000cce:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000cd2:	4770      	bx	lr

08000cd4 <__aeabi_fmul>:
 8000cd4:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000cd8:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000cdc:	bf1e      	ittt	ne
 8000cde:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000ce2:	ea92 0f0c 	teqne	r2, ip
 8000ce6:	ea93 0f0c 	teqne	r3, ip
 8000cea:	d06f      	beq.n	8000dcc <__aeabi_fmul+0xf8>
 8000cec:	441a      	add	r2, r3
 8000cee:	ea80 0c01 	eor.w	ip, r0, r1
 8000cf2:	0240      	lsls	r0, r0, #9
 8000cf4:	bf18      	it	ne
 8000cf6:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000cfa:	d01e      	beq.n	8000d3a <__aeabi_fmul+0x66>
 8000cfc:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8000d00:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000d04:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000d08:	fba0 3101 	umull	r3, r1, r0, r1
 8000d0c:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000d10:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
 8000d14:	bf3e      	ittt	cc
 8000d16:	0049      	lslcc	r1, r1, #1
 8000d18:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000d1c:	005b      	lslcc	r3, r3, #1
 8000d1e:	ea40 0001 	orr.w	r0, r0, r1
 8000d22:	f162 027f 	sbc.w	r2, r2, #127	@ 0x7f
 8000d26:	2afd      	cmp	r2, #253	@ 0xfd
 8000d28:	d81d      	bhi.n	8000d66 <__aeabi_fmul+0x92>
 8000d2a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8000d2e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000d32:	bf08      	it	eq
 8000d34:	f020 0001 	biceq.w	r0, r0, #1
 8000d38:	4770      	bx	lr
 8000d3a:	f090 0f00 	teq	r0, #0
 8000d3e:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000d42:	bf08      	it	eq
 8000d44:	0249      	lsleq	r1, r1, #9
 8000d46:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000d4a:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000d4e:	3a7f      	subs	r2, #127	@ 0x7f
 8000d50:	bfc2      	ittt	gt
 8000d52:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000d56:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000d5a:	4770      	bxgt	lr
 8000d5c:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000d60:	f04f 0300 	mov.w	r3, #0
 8000d64:	3a01      	subs	r2, #1
 8000d66:	dc5d      	bgt.n	8000e24 <__aeabi_fmul+0x150>
 8000d68:	f112 0f19 	cmn.w	r2, #25
 8000d6c:	bfdc      	itt	le
 8000d6e:	f000 4000 	andle.w	r0, r0, #2147483648	@ 0x80000000
 8000d72:	4770      	bxle	lr
 8000d74:	f1c2 0200 	rsb	r2, r2, #0
 8000d78:	0041      	lsls	r1, r0, #1
 8000d7a:	fa21 f102 	lsr.w	r1, r1, r2
 8000d7e:	f1c2 0220 	rsb	r2, r2, #32
 8000d82:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d86:	ea5f 0031 	movs.w	r0, r1, rrx
 8000d8a:	f140 0000 	adc.w	r0, r0, #0
 8000d8e:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000d92:	bf08      	it	eq
 8000d94:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d98:	4770      	bx	lr
 8000d9a:	f092 0f00 	teq	r2, #0
 8000d9e:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000da2:	bf02      	ittt	eq
 8000da4:	0040      	lsleq	r0, r0, #1
 8000da6:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000daa:	3a01      	subeq	r2, #1
 8000dac:	d0f9      	beq.n	8000da2 <__aeabi_fmul+0xce>
 8000dae:	ea40 000c 	orr.w	r0, r0, ip
 8000db2:	f093 0f00 	teq	r3, #0
 8000db6:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000dba:	bf02      	ittt	eq
 8000dbc:	0049      	lsleq	r1, r1, #1
 8000dbe:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000dc2:	3b01      	subeq	r3, #1
 8000dc4:	d0f9      	beq.n	8000dba <__aeabi_fmul+0xe6>
 8000dc6:	ea41 010c 	orr.w	r1, r1, ip
 8000dca:	e78f      	b.n	8000cec <__aeabi_fmul+0x18>
 8000dcc:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000dd0:	ea92 0f0c 	teq	r2, ip
 8000dd4:	bf18      	it	ne
 8000dd6:	ea93 0f0c 	teqne	r3, ip
 8000dda:	d00a      	beq.n	8000df2 <__aeabi_fmul+0x11e>
 8000ddc:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000de0:	bf18      	it	ne
 8000de2:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000de6:	d1d8      	bne.n	8000d9a <__aeabi_fmul+0xc6>
 8000de8:	ea80 0001 	eor.w	r0, r0, r1
 8000dec:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000df0:	4770      	bx	lr
 8000df2:	f090 0f00 	teq	r0, #0
 8000df6:	bf17      	itett	ne
 8000df8:	f090 4f00 	teqne	r0, #2147483648	@ 0x80000000
 8000dfc:	4608      	moveq	r0, r1
 8000dfe:	f091 0f00 	teqne	r1, #0
 8000e02:	f091 4f00 	teqne	r1, #2147483648	@ 0x80000000
 8000e06:	d014      	beq.n	8000e32 <__aeabi_fmul+0x15e>
 8000e08:	ea92 0f0c 	teq	r2, ip
 8000e0c:	d101      	bne.n	8000e12 <__aeabi_fmul+0x13e>
 8000e0e:	0242      	lsls	r2, r0, #9
 8000e10:	d10f      	bne.n	8000e32 <__aeabi_fmul+0x15e>
 8000e12:	ea93 0f0c 	teq	r3, ip
 8000e16:	d103      	bne.n	8000e20 <__aeabi_fmul+0x14c>
 8000e18:	024b      	lsls	r3, r1, #9
 8000e1a:	bf18      	it	ne
 8000e1c:	4608      	movne	r0, r1
 8000e1e:	d108      	bne.n	8000e32 <__aeabi_fmul+0x15e>
 8000e20:	ea80 0001 	eor.w	r0, r0, r1
 8000e24:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000e28:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000e2c:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000e30:	4770      	bx	lr
 8000e32:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000e36:	f440 0040 	orr.w	r0, r0, #12582912	@ 0xc00000
 8000e3a:	4770      	bx	lr

08000e3c <__aeabi_fdiv>:
 8000e3c:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000e40:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000e44:	bf1e      	ittt	ne
 8000e46:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000e4a:	ea92 0f0c 	teqne	r2, ip
 8000e4e:	ea93 0f0c 	teqne	r3, ip
 8000e52:	d069      	beq.n	8000f28 <__aeabi_fdiv+0xec>
 8000e54:	eba2 0203 	sub.w	r2, r2, r3
 8000e58:	ea80 0c01 	eor.w	ip, r0, r1
 8000e5c:	0249      	lsls	r1, r1, #9
 8000e5e:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000e62:	d037      	beq.n	8000ed4 <__aeabi_fdiv+0x98>
 8000e64:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8000e68:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000e6c:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000e70:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000e74:	428b      	cmp	r3, r1
 8000e76:	bf38      	it	cc
 8000e78:	005b      	lslcc	r3, r3, #1
 8000e7a:	f142 027d 	adc.w	r2, r2, #125	@ 0x7d
 8000e7e:	f44f 0c00 	mov.w	ip, #8388608	@ 0x800000
 8000e82:	428b      	cmp	r3, r1
 8000e84:	bf24      	itt	cs
 8000e86:	1a5b      	subcs	r3, r3, r1
 8000e88:	ea40 000c 	orrcs.w	r0, r0, ip
 8000e8c:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000e90:	bf24      	itt	cs
 8000e92:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000e96:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000e9a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000e9e:	bf24      	itt	cs
 8000ea0:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000ea4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000ea8:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000eac:	bf24      	itt	cs
 8000eae:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000eb2:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000eb6:	011b      	lsls	r3, r3, #4
 8000eb8:	bf18      	it	ne
 8000eba:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000ebe:	d1e0      	bne.n	8000e82 <__aeabi_fdiv+0x46>
 8000ec0:	2afd      	cmp	r2, #253	@ 0xfd
 8000ec2:	f63f af50 	bhi.w	8000d66 <__aeabi_fmul+0x92>
 8000ec6:	428b      	cmp	r3, r1
 8000ec8:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000ecc:	bf08      	it	eq
 8000ece:	f020 0001 	biceq.w	r0, r0, #1
 8000ed2:	4770      	bx	lr
 8000ed4:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000ed8:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000edc:	327f      	adds	r2, #127	@ 0x7f
 8000ede:	bfc2      	ittt	gt
 8000ee0:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000ee4:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000ee8:	4770      	bxgt	lr
 8000eea:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000eee:	f04f 0300 	mov.w	r3, #0
 8000ef2:	3a01      	subs	r2, #1
 8000ef4:	e737      	b.n	8000d66 <__aeabi_fmul+0x92>
 8000ef6:	f092 0f00 	teq	r2, #0
 8000efa:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000efe:	bf02      	ittt	eq
 8000f00:	0040      	lsleq	r0, r0, #1
 8000f02:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000f06:	3a01      	subeq	r2, #1
 8000f08:	d0f9      	beq.n	8000efe <__aeabi_fdiv+0xc2>
 8000f0a:	ea40 000c 	orr.w	r0, r0, ip
 8000f0e:	f093 0f00 	teq	r3, #0
 8000f12:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000f16:	bf02      	ittt	eq
 8000f18:	0049      	lsleq	r1, r1, #1
 8000f1a:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000f1e:	3b01      	subeq	r3, #1
 8000f20:	d0f9      	beq.n	8000f16 <__aeabi_fdiv+0xda>
 8000f22:	ea41 010c 	orr.w	r1, r1, ip
 8000f26:	e795      	b.n	8000e54 <__aeabi_fdiv+0x18>
 8000f28:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000f2c:	ea92 0f0c 	teq	r2, ip
 8000f30:	d108      	bne.n	8000f44 <__aeabi_fdiv+0x108>
 8000f32:	0242      	lsls	r2, r0, #9
 8000f34:	f47f af7d 	bne.w	8000e32 <__aeabi_fmul+0x15e>
 8000f38:	ea93 0f0c 	teq	r3, ip
 8000f3c:	f47f af70 	bne.w	8000e20 <__aeabi_fmul+0x14c>
 8000f40:	4608      	mov	r0, r1
 8000f42:	e776      	b.n	8000e32 <__aeabi_fmul+0x15e>
 8000f44:	ea93 0f0c 	teq	r3, ip
 8000f48:	d104      	bne.n	8000f54 <__aeabi_fdiv+0x118>
 8000f4a:	024b      	lsls	r3, r1, #9
 8000f4c:	f43f af4c 	beq.w	8000de8 <__aeabi_fmul+0x114>
 8000f50:	4608      	mov	r0, r1
 8000f52:	e76e      	b.n	8000e32 <__aeabi_fmul+0x15e>
 8000f54:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000f58:	bf18      	it	ne
 8000f5a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000f5e:	d1ca      	bne.n	8000ef6 <__aeabi_fdiv+0xba>
 8000f60:	f030 4200 	bics.w	r2, r0, #2147483648	@ 0x80000000
 8000f64:	f47f af5c 	bne.w	8000e20 <__aeabi_fmul+0x14c>
 8000f68:	f031 4300 	bics.w	r3, r1, #2147483648	@ 0x80000000
 8000f6c:	f47f af3c 	bne.w	8000de8 <__aeabi_fmul+0x114>
 8000f70:	e75f      	b.n	8000e32 <__aeabi_fmul+0x15e>
 8000f72:	bf00      	nop

08000f74 <__gesf2>:
 8000f74:	f04f 3cff 	mov.w	ip, #4294967295
 8000f78:	e006      	b.n	8000f88 <__cmpsf2+0x4>
 8000f7a:	bf00      	nop

08000f7c <__lesf2>:
 8000f7c:	f04f 0c01 	mov.w	ip, #1
 8000f80:	e002      	b.n	8000f88 <__cmpsf2+0x4>
 8000f82:	bf00      	nop

08000f84 <__cmpsf2>:
 8000f84:	f04f 0c01 	mov.w	ip, #1
 8000f88:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000f8c:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000f90:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000f94:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000f98:	bf18      	it	ne
 8000f9a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000f9e:	d011      	beq.n	8000fc4 <__cmpsf2+0x40>
 8000fa0:	b001      	add	sp, #4
 8000fa2:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8000fa6:	bf18      	it	ne
 8000fa8:	ea90 0f01 	teqne	r0, r1
 8000fac:	bf58      	it	pl
 8000fae:	ebb2 0003 	subspl.w	r0, r2, r3
 8000fb2:	bf88      	it	hi
 8000fb4:	17c8      	asrhi	r0, r1, #31
 8000fb6:	bf38      	it	cc
 8000fb8:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000fbc:	bf18      	it	ne
 8000fbe:	f040 0001 	orrne.w	r0, r0, #1
 8000fc2:	4770      	bx	lr
 8000fc4:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000fc8:	d102      	bne.n	8000fd0 <__cmpsf2+0x4c>
 8000fca:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000fce:	d105      	bne.n	8000fdc <__cmpsf2+0x58>
 8000fd0:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000fd4:	d1e4      	bne.n	8000fa0 <__cmpsf2+0x1c>
 8000fd6:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8000fda:	d0e1      	beq.n	8000fa0 <__cmpsf2+0x1c>
 8000fdc:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000fe0:	4770      	bx	lr
 8000fe2:	bf00      	nop

08000fe4 <__aeabi_cfrcmple>:
 8000fe4:	4684      	mov	ip, r0
 8000fe6:	4608      	mov	r0, r1
 8000fe8:	4661      	mov	r1, ip
 8000fea:	e7ff      	b.n	8000fec <__aeabi_cfcmpeq>

08000fec <__aeabi_cfcmpeq>:
 8000fec:	b50f      	push	{r0, r1, r2, r3, lr}
 8000fee:	f7ff ffc9 	bl	8000f84 <__cmpsf2>
 8000ff2:	2800      	cmp	r0, #0
 8000ff4:	bf48      	it	mi
 8000ff6:	f110 0f00 	cmnmi.w	r0, #0
 8000ffa:	bd0f      	pop	{r0, r1, r2, r3, pc}

08000ffc <__aeabi_fcmpeq>:
 8000ffc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001000:	f7ff fff4 	bl	8000fec <__aeabi_cfcmpeq>
 8001004:	bf0c      	ite	eq
 8001006:	2001      	moveq	r0, #1
 8001008:	2000      	movne	r0, #0
 800100a:	f85d fb08 	ldr.w	pc, [sp], #8
 800100e:	bf00      	nop

08001010 <__aeabi_fcmplt>:
 8001010:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001014:	f7ff ffea 	bl	8000fec <__aeabi_cfcmpeq>
 8001018:	bf34      	ite	cc
 800101a:	2001      	movcc	r0, #1
 800101c:	2000      	movcs	r0, #0
 800101e:	f85d fb08 	ldr.w	pc, [sp], #8
 8001022:	bf00      	nop

08001024 <__aeabi_fcmple>:
 8001024:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001028:	f7ff ffe0 	bl	8000fec <__aeabi_cfcmpeq>
 800102c:	bf94      	ite	ls
 800102e:	2001      	movls	r0, #1
 8001030:	2000      	movhi	r0, #0
 8001032:	f85d fb08 	ldr.w	pc, [sp], #8
 8001036:	bf00      	nop

08001038 <__aeabi_fcmpge>:
 8001038:	f84d ed08 	str.w	lr, [sp, #-8]!
 800103c:	f7ff ffd2 	bl	8000fe4 <__aeabi_cfrcmple>
 8001040:	bf94      	ite	ls
 8001042:	2001      	movls	r0, #1
 8001044:	2000      	movhi	r0, #0
 8001046:	f85d fb08 	ldr.w	pc, [sp], #8
 800104a:	bf00      	nop

0800104c <__aeabi_fcmpgt>:
 800104c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001050:	f7ff ffc8 	bl	8000fe4 <__aeabi_cfrcmple>
 8001054:	bf34      	ite	cc
 8001056:	2001      	movcc	r0, #1
 8001058:	2000      	movcs	r0, #0
 800105a:	f85d fb08 	ldr.w	pc, [sp], #8
 800105e:	bf00      	nop

08001060 <__aeabi_f2iz>:
 8001060:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001064:	f1b2 4ffe 	cmp.w	r2, #2130706432	@ 0x7f000000
 8001068:	d30f      	bcc.n	800108a <__aeabi_f2iz+0x2a>
 800106a:	f04f 039e 	mov.w	r3, #158	@ 0x9e
 800106e:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8001072:	d90d      	bls.n	8001090 <__aeabi_f2iz+0x30>
 8001074:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8001078:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800107c:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8001080:	fa23 f002 	lsr.w	r0, r3, r2
 8001084:	bf18      	it	ne
 8001086:	4240      	negne	r0, r0
 8001088:	4770      	bx	lr
 800108a:	f04f 0000 	mov.w	r0, #0
 800108e:	4770      	bx	lr
 8001090:	f112 0f61 	cmn.w	r2, #97	@ 0x61
 8001094:	d101      	bne.n	800109a <__aeabi_f2iz+0x3a>
 8001096:	0242      	lsls	r2, r0, #9
 8001098:	d105      	bne.n	80010a6 <__aeabi_f2iz+0x46>
 800109a:	f010 4000 	ands.w	r0, r0, #2147483648	@ 0x80000000
 800109e:	bf08      	it	eq
 80010a0:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 80010a4:	4770      	bx	lr
 80010a6:	f04f 0000 	mov.w	r0, #0
 80010aa:	4770      	bx	lr

080010ac <__aeabi_uldivmod>:
 80010ac:	b953      	cbnz	r3, 80010c4 <__aeabi_uldivmod+0x18>
 80010ae:	b94a      	cbnz	r2, 80010c4 <__aeabi_uldivmod+0x18>
 80010b0:	2900      	cmp	r1, #0
 80010b2:	bf08      	it	eq
 80010b4:	2800      	cmpeq	r0, #0
 80010b6:	bf1c      	itt	ne
 80010b8:	f04f 31ff 	movne.w	r1, #4294967295
 80010bc:	f04f 30ff 	movne.w	r0, #4294967295
 80010c0:	f000 b968 	b.w	8001394 <__aeabi_idiv0>
 80010c4:	f1ad 0c08 	sub.w	ip, sp, #8
 80010c8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80010cc:	f000 f806 	bl	80010dc <__udivmoddi4>
 80010d0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80010d4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80010d8:	b004      	add	sp, #16
 80010da:	4770      	bx	lr

080010dc <__udivmoddi4>:
 80010dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80010e0:	9d08      	ldr	r5, [sp, #32]
 80010e2:	460c      	mov	r4, r1
 80010e4:	2b00      	cmp	r3, #0
 80010e6:	d14e      	bne.n	8001186 <__udivmoddi4+0xaa>
 80010e8:	4694      	mov	ip, r2
 80010ea:	458c      	cmp	ip, r1
 80010ec:	4686      	mov	lr, r0
 80010ee:	fab2 f282 	clz	r2, r2
 80010f2:	d962      	bls.n	80011ba <__udivmoddi4+0xde>
 80010f4:	b14a      	cbz	r2, 800110a <__udivmoddi4+0x2e>
 80010f6:	f1c2 0320 	rsb	r3, r2, #32
 80010fa:	4091      	lsls	r1, r2
 80010fc:	fa20 f303 	lsr.w	r3, r0, r3
 8001100:	fa0c fc02 	lsl.w	ip, ip, r2
 8001104:	4319      	orrs	r1, r3
 8001106:	fa00 fe02 	lsl.w	lr, r0, r2
 800110a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800110e:	fbb1 f4f7 	udiv	r4, r1, r7
 8001112:	fb07 1114 	mls	r1, r7, r4, r1
 8001116:	fa1f f68c 	uxth.w	r6, ip
 800111a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800111e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8001122:	fb04 f106 	mul.w	r1, r4, r6
 8001126:	4299      	cmp	r1, r3
 8001128:	d90a      	bls.n	8001140 <__udivmoddi4+0x64>
 800112a:	eb1c 0303 	adds.w	r3, ip, r3
 800112e:	f104 30ff 	add.w	r0, r4, #4294967295
 8001132:	f080 8110 	bcs.w	8001356 <__udivmoddi4+0x27a>
 8001136:	4299      	cmp	r1, r3
 8001138:	f240 810d 	bls.w	8001356 <__udivmoddi4+0x27a>
 800113c:	3c02      	subs	r4, #2
 800113e:	4463      	add	r3, ip
 8001140:	1a59      	subs	r1, r3, r1
 8001142:	fbb1 f0f7 	udiv	r0, r1, r7
 8001146:	fb07 1110 	mls	r1, r7, r0, r1
 800114a:	fb00 f606 	mul.w	r6, r0, r6
 800114e:	fa1f f38e 	uxth.w	r3, lr
 8001152:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8001156:	429e      	cmp	r6, r3
 8001158:	d90a      	bls.n	8001170 <__udivmoddi4+0x94>
 800115a:	eb1c 0303 	adds.w	r3, ip, r3
 800115e:	f100 31ff 	add.w	r1, r0, #4294967295
 8001162:	f080 80fa 	bcs.w	800135a <__udivmoddi4+0x27e>
 8001166:	429e      	cmp	r6, r3
 8001168:	f240 80f7 	bls.w	800135a <__udivmoddi4+0x27e>
 800116c:	4463      	add	r3, ip
 800116e:	3802      	subs	r0, #2
 8001170:	2100      	movs	r1, #0
 8001172:	1b9b      	subs	r3, r3, r6
 8001174:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8001178:	b11d      	cbz	r5, 8001182 <__udivmoddi4+0xa6>
 800117a:	40d3      	lsrs	r3, r2
 800117c:	2200      	movs	r2, #0
 800117e:	e9c5 3200 	strd	r3, r2, [r5]
 8001182:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001186:	428b      	cmp	r3, r1
 8001188:	d905      	bls.n	8001196 <__udivmoddi4+0xba>
 800118a:	b10d      	cbz	r5, 8001190 <__udivmoddi4+0xb4>
 800118c:	e9c5 0100 	strd	r0, r1, [r5]
 8001190:	2100      	movs	r1, #0
 8001192:	4608      	mov	r0, r1
 8001194:	e7f5      	b.n	8001182 <__udivmoddi4+0xa6>
 8001196:	fab3 f183 	clz	r1, r3
 800119a:	2900      	cmp	r1, #0
 800119c:	d146      	bne.n	800122c <__udivmoddi4+0x150>
 800119e:	42a3      	cmp	r3, r4
 80011a0:	d302      	bcc.n	80011a8 <__udivmoddi4+0xcc>
 80011a2:	4290      	cmp	r0, r2
 80011a4:	f0c0 80ee 	bcc.w	8001384 <__udivmoddi4+0x2a8>
 80011a8:	1a86      	subs	r6, r0, r2
 80011aa:	eb64 0303 	sbc.w	r3, r4, r3
 80011ae:	2001      	movs	r0, #1
 80011b0:	2d00      	cmp	r5, #0
 80011b2:	d0e6      	beq.n	8001182 <__udivmoddi4+0xa6>
 80011b4:	e9c5 6300 	strd	r6, r3, [r5]
 80011b8:	e7e3      	b.n	8001182 <__udivmoddi4+0xa6>
 80011ba:	2a00      	cmp	r2, #0
 80011bc:	f040 808f 	bne.w	80012de <__udivmoddi4+0x202>
 80011c0:	eba1 040c 	sub.w	r4, r1, ip
 80011c4:	2101      	movs	r1, #1
 80011c6:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80011ca:	fa1f f78c 	uxth.w	r7, ip
 80011ce:	fbb4 f6f8 	udiv	r6, r4, r8
 80011d2:	fb08 4416 	mls	r4, r8, r6, r4
 80011d6:	fb07 f006 	mul.w	r0, r7, r6
 80011da:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80011de:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80011e2:	4298      	cmp	r0, r3
 80011e4:	d908      	bls.n	80011f8 <__udivmoddi4+0x11c>
 80011e6:	eb1c 0303 	adds.w	r3, ip, r3
 80011ea:	f106 34ff 	add.w	r4, r6, #4294967295
 80011ee:	d202      	bcs.n	80011f6 <__udivmoddi4+0x11a>
 80011f0:	4298      	cmp	r0, r3
 80011f2:	f200 80cb 	bhi.w	800138c <__udivmoddi4+0x2b0>
 80011f6:	4626      	mov	r6, r4
 80011f8:	1a1c      	subs	r4, r3, r0
 80011fa:	fbb4 f0f8 	udiv	r0, r4, r8
 80011fe:	fb08 4410 	mls	r4, r8, r0, r4
 8001202:	fb00 f707 	mul.w	r7, r0, r7
 8001206:	fa1f f38e 	uxth.w	r3, lr
 800120a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800120e:	429f      	cmp	r7, r3
 8001210:	d908      	bls.n	8001224 <__udivmoddi4+0x148>
 8001212:	eb1c 0303 	adds.w	r3, ip, r3
 8001216:	f100 34ff 	add.w	r4, r0, #4294967295
 800121a:	d202      	bcs.n	8001222 <__udivmoddi4+0x146>
 800121c:	429f      	cmp	r7, r3
 800121e:	f200 80ae 	bhi.w	800137e <__udivmoddi4+0x2a2>
 8001222:	4620      	mov	r0, r4
 8001224:	1bdb      	subs	r3, r3, r7
 8001226:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800122a:	e7a5      	b.n	8001178 <__udivmoddi4+0x9c>
 800122c:	f1c1 0720 	rsb	r7, r1, #32
 8001230:	408b      	lsls	r3, r1
 8001232:	fa22 fc07 	lsr.w	ip, r2, r7
 8001236:	ea4c 0c03 	orr.w	ip, ip, r3
 800123a:	fa24 f607 	lsr.w	r6, r4, r7
 800123e:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8001242:	fbb6 f8f9 	udiv	r8, r6, r9
 8001246:	fa1f fe8c 	uxth.w	lr, ip
 800124a:	fb09 6618 	mls	r6, r9, r8, r6
 800124e:	fa20 f307 	lsr.w	r3, r0, r7
 8001252:	408c      	lsls	r4, r1
 8001254:	fa00 fa01 	lsl.w	sl, r0, r1
 8001258:	fb08 f00e 	mul.w	r0, r8, lr
 800125c:	431c      	orrs	r4, r3
 800125e:	0c23      	lsrs	r3, r4, #16
 8001260:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8001264:	4298      	cmp	r0, r3
 8001266:	fa02 f201 	lsl.w	r2, r2, r1
 800126a:	d90a      	bls.n	8001282 <__udivmoddi4+0x1a6>
 800126c:	eb1c 0303 	adds.w	r3, ip, r3
 8001270:	f108 36ff 	add.w	r6, r8, #4294967295
 8001274:	f080 8081 	bcs.w	800137a <__udivmoddi4+0x29e>
 8001278:	4298      	cmp	r0, r3
 800127a:	d97e      	bls.n	800137a <__udivmoddi4+0x29e>
 800127c:	f1a8 0802 	sub.w	r8, r8, #2
 8001280:	4463      	add	r3, ip
 8001282:	1a1e      	subs	r6, r3, r0
 8001284:	fbb6 f3f9 	udiv	r3, r6, r9
 8001288:	fb09 6613 	mls	r6, r9, r3, r6
 800128c:	fb03 fe0e 	mul.w	lr, r3, lr
 8001290:	b2a4      	uxth	r4, r4
 8001292:	ea44 4406 	orr.w	r4, r4, r6, lsl #16
 8001296:	45a6      	cmp	lr, r4
 8001298:	d908      	bls.n	80012ac <__udivmoddi4+0x1d0>
 800129a:	eb1c 0404 	adds.w	r4, ip, r4
 800129e:	f103 30ff 	add.w	r0, r3, #4294967295
 80012a2:	d266      	bcs.n	8001372 <__udivmoddi4+0x296>
 80012a4:	45a6      	cmp	lr, r4
 80012a6:	d964      	bls.n	8001372 <__udivmoddi4+0x296>
 80012a8:	3b02      	subs	r3, #2
 80012aa:	4464      	add	r4, ip
 80012ac:	ea43 4008 	orr.w	r0, r3, r8, lsl #16
 80012b0:	fba0 8302 	umull	r8, r3, r0, r2
 80012b4:	eba4 040e 	sub.w	r4, r4, lr
 80012b8:	429c      	cmp	r4, r3
 80012ba:	46c6      	mov	lr, r8
 80012bc:	461e      	mov	r6, r3
 80012be:	d350      	bcc.n	8001362 <__udivmoddi4+0x286>
 80012c0:	d04d      	beq.n	800135e <__udivmoddi4+0x282>
 80012c2:	b155      	cbz	r5, 80012da <__udivmoddi4+0x1fe>
 80012c4:	ebba 030e 	subs.w	r3, sl, lr
 80012c8:	eb64 0406 	sbc.w	r4, r4, r6
 80012cc:	fa04 f707 	lsl.w	r7, r4, r7
 80012d0:	40cb      	lsrs	r3, r1
 80012d2:	431f      	orrs	r7, r3
 80012d4:	40cc      	lsrs	r4, r1
 80012d6:	e9c5 7400 	strd	r7, r4, [r5]
 80012da:	2100      	movs	r1, #0
 80012dc:	e751      	b.n	8001182 <__udivmoddi4+0xa6>
 80012de:	fa0c fc02 	lsl.w	ip, ip, r2
 80012e2:	f1c2 0320 	rsb	r3, r2, #32
 80012e6:	40d9      	lsrs	r1, r3
 80012e8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80012ec:	fa20 f303 	lsr.w	r3, r0, r3
 80012f0:	fa00 fe02 	lsl.w	lr, r0, r2
 80012f4:	fbb1 f0f8 	udiv	r0, r1, r8
 80012f8:	fb08 1110 	mls	r1, r8, r0, r1
 80012fc:	4094      	lsls	r4, r2
 80012fe:	431c      	orrs	r4, r3
 8001300:	fa1f f78c 	uxth.w	r7, ip
 8001304:	0c23      	lsrs	r3, r4, #16
 8001306:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800130a:	fb00 f107 	mul.w	r1, r0, r7
 800130e:	4299      	cmp	r1, r3
 8001310:	d908      	bls.n	8001324 <__udivmoddi4+0x248>
 8001312:	eb1c 0303 	adds.w	r3, ip, r3
 8001316:	f100 36ff 	add.w	r6, r0, #4294967295
 800131a:	d22c      	bcs.n	8001376 <__udivmoddi4+0x29a>
 800131c:	4299      	cmp	r1, r3
 800131e:	d92a      	bls.n	8001376 <__udivmoddi4+0x29a>
 8001320:	3802      	subs	r0, #2
 8001322:	4463      	add	r3, ip
 8001324:	1a5b      	subs	r3, r3, r1
 8001326:	fbb3 f1f8 	udiv	r1, r3, r8
 800132a:	fb08 3311 	mls	r3, r8, r1, r3
 800132e:	b2a4      	uxth	r4, r4
 8001330:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8001334:	fb01 f307 	mul.w	r3, r1, r7
 8001338:	42a3      	cmp	r3, r4
 800133a:	d908      	bls.n	800134e <__udivmoddi4+0x272>
 800133c:	eb1c 0404 	adds.w	r4, ip, r4
 8001340:	f101 36ff 	add.w	r6, r1, #4294967295
 8001344:	d213      	bcs.n	800136e <__udivmoddi4+0x292>
 8001346:	42a3      	cmp	r3, r4
 8001348:	d911      	bls.n	800136e <__udivmoddi4+0x292>
 800134a:	3902      	subs	r1, #2
 800134c:	4464      	add	r4, ip
 800134e:	1ae4      	subs	r4, r4, r3
 8001350:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8001354:	e73b      	b.n	80011ce <__udivmoddi4+0xf2>
 8001356:	4604      	mov	r4, r0
 8001358:	e6f2      	b.n	8001140 <__udivmoddi4+0x64>
 800135a:	4608      	mov	r0, r1
 800135c:	e708      	b.n	8001170 <__udivmoddi4+0x94>
 800135e:	45c2      	cmp	sl, r8
 8001360:	d2af      	bcs.n	80012c2 <__udivmoddi4+0x1e6>
 8001362:	ebb8 0e02 	subs.w	lr, r8, r2
 8001366:	eb63 060c 	sbc.w	r6, r3, ip
 800136a:	3801      	subs	r0, #1
 800136c:	e7a9      	b.n	80012c2 <__udivmoddi4+0x1e6>
 800136e:	4631      	mov	r1, r6
 8001370:	e7ed      	b.n	800134e <__udivmoddi4+0x272>
 8001372:	4603      	mov	r3, r0
 8001374:	e79a      	b.n	80012ac <__udivmoddi4+0x1d0>
 8001376:	4630      	mov	r0, r6
 8001378:	e7d4      	b.n	8001324 <__udivmoddi4+0x248>
 800137a:	46b0      	mov	r8, r6
 800137c:	e781      	b.n	8001282 <__udivmoddi4+0x1a6>
 800137e:	4463      	add	r3, ip
 8001380:	3802      	subs	r0, #2
 8001382:	e74f      	b.n	8001224 <__udivmoddi4+0x148>
 8001384:	4606      	mov	r6, r0
 8001386:	4623      	mov	r3, r4
 8001388:	4608      	mov	r0, r1
 800138a:	e711      	b.n	80011b0 <__udivmoddi4+0xd4>
 800138c:	3e02      	subs	r6, #2
 800138e:	4463      	add	r3, ip
 8001390:	e732      	b.n	80011f8 <__udivmoddi4+0x11c>
 8001392:	bf00      	nop

08001394 <__aeabi_idiv0>:
 8001394:	4770      	bx	lr
 8001396:	bf00      	nop

08001398 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001398:	b5b0      	push	{r4, r5, r7, lr}
 800139a:	b090      	sub	sp, #64	@ 0x40
 800139c:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800139e:	f007 fe9f 	bl	80090e0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80013a2:	f000 f86b 	bl	800147c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80013a6:	f000 f8e1 	bl	800156c <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80013aa:	f000 f8b5 	bl	8001518 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

	float temperature = 0.0f, humidity = 0.0f;
 80013ae:	f04f 0300 	mov.w	r3, #0
 80013b2:	623b      	str	r3, [r7, #32]
 80013b4:	f04f 0300 	mov.w	r3, #0
 80013b8:	61fb      	str	r3, [r7, #28]
	int Tunits, Tdecimals;
	int Hunits, Hdecimals;
	int Punits, Pdecimals;


	printf("Debut du programme \r\n");
 80013ba:	482d      	ldr	r0, [pc, #180]	@ (8001470 <main+0xd8>)
 80013bc:	f00b f910 	bl	800c5e0 <puts>


	uint32_t instance = IKS01A3_HTS221_0;  // L'instance de ton capteur (HTS221 dans ce cas)
 80013c0:	2300      	movs	r3, #0
 80013c2:	62fb      	str	r3, [r7, #44]	@ 0x2c
	uint32_t functions = ENV_TEMPERATURE | ENV_HUMIDITY;  // Température et Humidité activées
 80013c4:	2305      	movs	r3, #5
 80013c6:	62bb      	str	r3, [r7, #40]	@ 0x28
	int32_t ret = IKS01A3_ENV_SENSOR_Init(instance, functions);
 80013c8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80013ca:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80013cc:	f006 ffda 	bl	8008384 <IKS01A3_ENV_SENSOR_Init>
 80013d0:	6278      	str	r0, [r7, #36]	@ 0x24
	if (ret != BSP_ERROR_NONE)
 80013d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80013d4:	2b00      	cmp	r3, #0
 80013d6:	d002      	beq.n	80013de <main+0x46>
	{
		printf("Error get env\r\n");
 80013d8:	4826      	ldr	r0, [pc, #152]	@ (8001474 <main+0xdc>)
 80013da:	f00b f901 	bl	800c5e0 <puts>
	}

	IKS01A3_MOTION_SENSOR_Init(IKS01A3_LSM6DSO_0, MOTION_GYRO);
 80013de:	2101      	movs	r1, #1
 80013e0:	2000      	movs	r0, #0
 80013e2:	f007 fb67 	bl	8008ab4 <IKS01A3_MOTION_SENSOR_Init>

	float pressure;
	IKS01A3_ENV_SENSOR_Init(IKS01A3_LPS22HH_0, ENV_PRESSURE); // init de la pression atmo
 80013e6:	2102      	movs	r1, #2
 80013e8:	2001      	movs	r0, #1
 80013ea:	f006 ffcb 	bl	8008384 <IKS01A3_ENV_SENSOR_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1)
	{

			IKS01A3_ENV_SENSOR_GetValue(IKS01A3_HTS221_0, ENV_TEMPERATURE, &temperature);
 80013ee:	f107 0320 	add.w	r3, r7, #32
 80013f2:	461a      	mov	r2, r3
 80013f4:	2101      	movs	r1, #1
 80013f6:	2000      	movs	r0, #0
 80013f8:	f007 f8d2 	bl	80085a0 <IKS01A3_ENV_SENSOR_GetValue>
			IKS01A3_ENV_SENSOR_GetValue(IKS01A3_HTS221_0, ENV_HUMIDITY, &humidity);
 80013fc:	f107 031c 	add.w	r3, r7, #28
 8001400:	461a      	mov	r2, r3
 8001402:	2104      	movs	r1, #4
 8001404:	2000      	movs	r0, #0
 8001406:	f007 f8cb 	bl	80085a0 <IKS01A3_ENV_SENSOR_GetValue>
			IKS01A3_ENV_SENSOR_GetValue(IKS01A3_LPS22HH_0, ENV_PRESSURE, &pressure);
 800140a:	463b      	mov	r3, r7
 800140c:	461a      	mov	r2, r3
 800140e:	2102      	movs	r1, #2
 8001410:	2001      	movs	r0, #1
 8001412:	f007 f8c5 	bl	80085a0 <IKS01A3_ENV_SENSOR_GetValue>

			floatToIntParts(humidity, &Hunits, &Hdecimals);
 8001416:	69fb      	ldr	r3, [r7, #28]
 8001418:	f107 020c 	add.w	r2, r7, #12
 800141c:	f107 0110 	add.w	r1, r7, #16
 8001420:	4618      	mov	r0, r3
 8001422:	f000 f91b 	bl	800165c <floatToIntParts>
			floatToIntParts(temperature, &Tunits, &Tdecimals);
 8001426:	6a3b      	ldr	r3, [r7, #32]
 8001428:	f107 0214 	add.w	r2, r7, #20
 800142c:	f107 0118 	add.w	r1, r7, #24
 8001430:	4618      	mov	r0, r3
 8001432:	f000 f913 	bl	800165c <floatToIntParts>
			floatToIntParts(pressure, &Punits, &Pdecimals);
 8001436:	683b      	ldr	r3, [r7, #0]
 8001438:	1d3a      	adds	r2, r7, #4
 800143a:	f107 0108 	add.w	r1, r7, #8
 800143e:	4618      	mov	r0, r3
 8001440:	f000 f90c 	bl	800165c <floatToIntParts>
			printf("T: %d,%d°C  H: %d,%d%%   P: %d,%d HPA  \n\r\n\n", Tunits,Tdecimals, Hunits,Hdecimals,Punits,Pdecimals);
 8001444:	69b8      	ldr	r0, [r7, #24]
 8001446:	697c      	ldr	r4, [r7, #20]
 8001448:	693d      	ldr	r5, [r7, #16]
 800144a:	68fb      	ldr	r3, [r7, #12]
 800144c:	68ba      	ldr	r2, [r7, #8]
 800144e:	6879      	ldr	r1, [r7, #4]
 8001450:	9102      	str	r1, [sp, #8]
 8001452:	9201      	str	r2, [sp, #4]
 8001454:	9300      	str	r3, [sp, #0]
 8001456:	462b      	mov	r3, r5
 8001458:	4622      	mov	r2, r4
 800145a:	4601      	mov	r1, r0
 800145c:	4806      	ldr	r0, [pc, #24]	@ (8001478 <main+0xe0>)
 800145e:	f00b f857 	bl	800c510 <iprintf>





			HAL_Delay(5000);
 8001462:	f241 3088 	movw	r0, #5000	@ 0x1388
 8001466:	f007 fea9 	bl	80091bc <HAL_Delay>
			IKS01A3_ENV_SENSOR_GetValue(IKS01A3_HTS221_0, ENV_TEMPERATURE, &temperature);
 800146a:	bf00      	nop
 800146c:	e7bf      	b.n	80013ee <main+0x56>
 800146e:	bf00      	nop
 8001470:	0800e4e8 	.word	0x0800e4e8
 8001474:	0800e500 	.word	0x0800e500
 8001478:	0800e510 	.word	0x0800e510

0800147c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800147c:	b580      	push	{r7, lr}
 800147e:	b092      	sub	sp, #72	@ 0x48
 8001480:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001482:	f107 0314 	add.w	r3, r7, #20
 8001486:	2234      	movs	r2, #52	@ 0x34
 8001488:	2100      	movs	r1, #0
 800148a:	4618      	mov	r0, r3
 800148c:	f00b f988 	bl	800c7a0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001490:	463b      	mov	r3, r7
 8001492:	2200      	movs	r2, #0
 8001494:	601a      	str	r2, [r3, #0]
 8001496:	605a      	str	r2, [r3, #4]
 8001498:	609a      	str	r2, [r3, #8]
 800149a:	60da      	str	r2, [r3, #12]
 800149c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800149e:	4b1d      	ldr	r3, [pc, #116]	@ (8001514 <SystemClock_Config+0x98>)
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	f423 53c0 	bic.w	r3, r3, #6144	@ 0x1800
 80014a6:	4a1b      	ldr	r2, [pc, #108]	@ (8001514 <SystemClock_Config+0x98>)
 80014a8:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80014ac:	6013      	str	r3, [r2, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80014ae:	2302      	movs	r3, #2
 80014b0:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80014b2:	2301      	movs	r3, #1
 80014b4:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80014b6:	2310      	movs	r3, #16
 80014b8:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80014ba:	2302      	movs	r3, #2
 80014bc:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80014be:	2300      	movs	r3, #0
 80014c0:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 80014c2:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 80014c6:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLDIV = RCC_PLL_DIV3;
 80014c8:	f44f 0300 	mov.w	r3, #8388608	@ 0x800000
 80014cc:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80014ce:	f107 0314 	add.w	r3, r7, #20
 80014d2:	4618      	mov	r0, r3
 80014d4:	f009 fa8e 	bl	800a9f4 <HAL_RCC_OscConfig>
 80014d8:	4603      	mov	r3, r0
 80014da:	2b00      	cmp	r3, #0
 80014dc:	d001      	beq.n	80014e2 <SystemClock_Config+0x66>
  {
    Error_Handler();
 80014de:	f000 f8ef 	bl	80016c0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80014e2:	230f      	movs	r3, #15
 80014e4:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80014e6:	2303      	movs	r3, #3
 80014e8:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80014ea:	2300      	movs	r3, #0
 80014ec:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80014ee:	2300      	movs	r3, #0
 80014f0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80014f2:	2300      	movs	r3, #0
 80014f4:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80014f6:	463b      	mov	r3, r7
 80014f8:	2101      	movs	r1, #1
 80014fa:	4618      	mov	r0, r3
 80014fc:	f009 fdaa 	bl	800b054 <HAL_RCC_ClockConfig>
 8001500:	4603      	mov	r3, r0
 8001502:	2b00      	cmp	r3, #0
 8001504:	d001      	beq.n	800150a <SystemClock_Config+0x8e>
  {
    Error_Handler();
 8001506:	f000 f8db 	bl	80016c0 <Error_Handler>
  }
}
 800150a:	bf00      	nop
 800150c:	3748      	adds	r7, #72	@ 0x48
 800150e:	46bd      	mov	sp, r7
 8001510:	bd80      	pop	{r7, pc}
 8001512:	bf00      	nop
 8001514:	40007000 	.word	0x40007000

08001518 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001518:	b580      	push	{r7, lr}
 800151a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800151c:	4b11      	ldr	r3, [pc, #68]	@ (8001564 <MX_USART2_UART_Init+0x4c>)
 800151e:	4a12      	ldr	r2, [pc, #72]	@ (8001568 <MX_USART2_UART_Init+0x50>)
 8001520:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001522:	4b10      	ldr	r3, [pc, #64]	@ (8001564 <MX_USART2_UART_Init+0x4c>)
 8001524:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001528:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800152a:	4b0e      	ldr	r3, [pc, #56]	@ (8001564 <MX_USART2_UART_Init+0x4c>)
 800152c:	2200      	movs	r2, #0
 800152e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001530:	4b0c      	ldr	r3, [pc, #48]	@ (8001564 <MX_USART2_UART_Init+0x4c>)
 8001532:	2200      	movs	r2, #0
 8001534:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001536:	4b0b      	ldr	r3, [pc, #44]	@ (8001564 <MX_USART2_UART_Init+0x4c>)
 8001538:	2200      	movs	r2, #0
 800153a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800153c:	4b09      	ldr	r3, [pc, #36]	@ (8001564 <MX_USART2_UART_Init+0x4c>)
 800153e:	220c      	movs	r2, #12
 8001540:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001542:	4b08      	ldr	r3, [pc, #32]	@ (8001564 <MX_USART2_UART_Init+0x4c>)
 8001544:	2200      	movs	r2, #0
 8001546:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001548:	4b06      	ldr	r3, [pc, #24]	@ (8001564 <MX_USART2_UART_Init+0x4c>)
 800154a:	2200      	movs	r2, #0
 800154c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800154e:	4805      	ldr	r0, [pc, #20]	@ (8001564 <MX_USART2_UART_Init+0x4c>)
 8001550:	f00a f846 	bl	800b5e0 <HAL_UART_Init>
 8001554:	4603      	mov	r3, r0
 8001556:	2b00      	cmp	r3, #0
 8001558:	d001      	beq.n	800155e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800155a:	f000 f8b1 	bl	80016c0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800155e:	bf00      	nop
 8001560:	bd80      	pop	{r7, pc}
 8001562:	bf00      	nop
 8001564:	200003a8 	.word	0x200003a8
 8001568:	40004400 	.word	0x40004400

0800156c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800156c:	b580      	push	{r7, lr}
 800156e:	b08a      	sub	sp, #40	@ 0x28
 8001570:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001572:	f107 0314 	add.w	r3, r7, #20
 8001576:	2200      	movs	r2, #0
 8001578:	601a      	str	r2, [r3, #0]
 800157a:	605a      	str	r2, [r3, #4]
 800157c:	609a      	str	r2, [r3, #8]
 800157e:	60da      	str	r2, [r3, #12]
 8001580:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001582:	4b2a      	ldr	r3, [pc, #168]	@ (800162c <MX_GPIO_Init+0xc0>)
 8001584:	69db      	ldr	r3, [r3, #28]
 8001586:	4a29      	ldr	r2, [pc, #164]	@ (800162c <MX_GPIO_Init+0xc0>)
 8001588:	f043 0304 	orr.w	r3, r3, #4
 800158c:	61d3      	str	r3, [r2, #28]
 800158e:	4b27      	ldr	r3, [pc, #156]	@ (800162c <MX_GPIO_Init+0xc0>)
 8001590:	69db      	ldr	r3, [r3, #28]
 8001592:	f003 0304 	and.w	r3, r3, #4
 8001596:	613b      	str	r3, [r7, #16]
 8001598:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800159a:	4b24      	ldr	r3, [pc, #144]	@ (800162c <MX_GPIO_Init+0xc0>)
 800159c:	69db      	ldr	r3, [r3, #28]
 800159e:	4a23      	ldr	r2, [pc, #140]	@ (800162c <MX_GPIO_Init+0xc0>)
 80015a0:	f043 0320 	orr.w	r3, r3, #32
 80015a4:	61d3      	str	r3, [r2, #28]
 80015a6:	4b21      	ldr	r3, [pc, #132]	@ (800162c <MX_GPIO_Init+0xc0>)
 80015a8:	69db      	ldr	r3, [r3, #28]
 80015aa:	f003 0320 	and.w	r3, r3, #32
 80015ae:	60fb      	str	r3, [r7, #12]
 80015b0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80015b2:	4b1e      	ldr	r3, [pc, #120]	@ (800162c <MX_GPIO_Init+0xc0>)
 80015b4:	69db      	ldr	r3, [r3, #28]
 80015b6:	4a1d      	ldr	r2, [pc, #116]	@ (800162c <MX_GPIO_Init+0xc0>)
 80015b8:	f043 0301 	orr.w	r3, r3, #1
 80015bc:	61d3      	str	r3, [r2, #28]
 80015be:	4b1b      	ldr	r3, [pc, #108]	@ (800162c <MX_GPIO_Init+0xc0>)
 80015c0:	69db      	ldr	r3, [r3, #28]
 80015c2:	f003 0301 	and.w	r3, r3, #1
 80015c6:	60bb      	str	r3, [r7, #8]
 80015c8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80015ca:	4b18      	ldr	r3, [pc, #96]	@ (800162c <MX_GPIO_Init+0xc0>)
 80015cc:	69db      	ldr	r3, [r3, #28]
 80015ce:	4a17      	ldr	r2, [pc, #92]	@ (800162c <MX_GPIO_Init+0xc0>)
 80015d0:	f043 0302 	orr.w	r3, r3, #2
 80015d4:	61d3      	str	r3, [r2, #28]
 80015d6:	4b15      	ldr	r3, [pc, #84]	@ (800162c <MX_GPIO_Init+0xc0>)
 80015d8:	69db      	ldr	r3, [r3, #28]
 80015da:	f003 0302 	and.w	r3, r3, #2
 80015de:	607b      	str	r3, [r7, #4]
 80015e0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80015e2:	2200      	movs	r2, #0
 80015e4:	2120      	movs	r1, #32
 80015e6:	4812      	ldr	r0, [pc, #72]	@ (8001630 <MX_GPIO_Init+0xc4>)
 80015e8:	f008 f96e 	bl	80098c8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80015ec:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80015f0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80015f2:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80015f6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015f8:	2300      	movs	r3, #0
 80015fa:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80015fc:	f107 0314 	add.w	r3, r7, #20
 8001600:	4619      	mov	r1, r3
 8001602:	480c      	ldr	r0, [pc, #48]	@ (8001634 <MX_GPIO_Init+0xc8>)
 8001604:	f007 fee0 	bl	80093c8 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8001608:	2320      	movs	r3, #32
 800160a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800160c:	2301      	movs	r3, #1
 800160e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001610:	2300      	movs	r3, #0
 8001612:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001614:	2300      	movs	r3, #0
 8001616:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8001618:	f107 0314 	add.w	r3, r7, #20
 800161c:	4619      	mov	r1, r3
 800161e:	4804      	ldr	r0, [pc, #16]	@ (8001630 <MX_GPIO_Init+0xc4>)
 8001620:	f007 fed2 	bl	80093c8 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001624:	bf00      	nop
 8001626:	3728      	adds	r7, #40	@ 0x28
 8001628:	46bd      	mov	sp, r7
 800162a:	bd80      	pop	{r7, pc}
 800162c:	40023800 	.word	0x40023800
 8001630:	40020000 	.word	0x40020000
 8001634:	40020800 	.word	0x40020800

08001638 <__io_putchar>:

/* USER CODE BEGIN 4 */
int __io_putchar(int ch)
{
 8001638:	b580      	push	{r7, lr}
 800163a:	b082      	sub	sp, #8
 800163c:	af00      	add	r7, sp, #0
 800163e:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, 0xFFFF);
 8001640:	1d39      	adds	r1, r7, #4
 8001642:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001646:	2201      	movs	r2, #1
 8001648:	4803      	ldr	r0, [pc, #12]	@ (8001658 <__io_putchar+0x20>)
 800164a:	f00a f819 	bl	800b680 <HAL_UART_Transmit>
	return ch;
 800164e:	687b      	ldr	r3, [r7, #4]
}
 8001650:	4618      	mov	r0, r3
 8001652:	3708      	adds	r7, #8
 8001654:	46bd      	mov	sp, r7
 8001656:	bd80      	pop	{r7, pc}
 8001658:	200003a8 	.word	0x200003a8

0800165c <floatToIntParts>:

void floatToIntParts(float value, int *units, int *decimals) {
 800165c:	b580      	push	{r7, lr}
 800165e:	b084      	sub	sp, #16
 8001660:	af00      	add	r7, sp, #0
 8001662:	60f8      	str	r0, [r7, #12]
 8001664:	60b9      	str	r1, [r7, #8]
 8001666:	607a      	str	r2, [r7, #4]
	*units = (int)value;  // Partie entière
 8001668:	68f8      	ldr	r0, [r7, #12]
 800166a:	f7ff fcf9 	bl	8001060 <__aeabi_f2iz>
 800166e:	4602      	mov	r2, r0
 8001670:	68bb      	ldr	r3, [r7, #8]
 8001672:	601a      	str	r2, [r3, #0]
	*decimals = (int)((value - *units) * 100);  // Partie décimale (2 chiffres après la virgule)
 8001674:	68bb      	ldr	r3, [r7, #8]
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	4618      	mov	r0, r3
 800167a:	f7ff fad7 	bl	8000c2c <__aeabi_i2f>
 800167e:	4603      	mov	r3, r0
 8001680:	4619      	mov	r1, r3
 8001682:	68f8      	ldr	r0, [r7, #12]
 8001684:	f7ff fa1c 	bl	8000ac0 <__aeabi_fsub>
 8001688:	4603      	mov	r3, r0
 800168a:	490c      	ldr	r1, [pc, #48]	@ (80016bc <floatToIntParts+0x60>)
 800168c:	4618      	mov	r0, r3
 800168e:	f7ff fb21 	bl	8000cd4 <__aeabi_fmul>
 8001692:	4603      	mov	r3, r0
 8001694:	4618      	mov	r0, r3
 8001696:	f7ff fce3 	bl	8001060 <__aeabi_f2iz>
 800169a:	4602      	mov	r2, r0
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	601a      	str	r2, [r3, #0]
	if (*decimals < 0) *decimals = -*decimals; // Pour gérer les nombres négatifs
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	2b00      	cmp	r3, #0
 80016a6:	da04      	bge.n	80016b2 <floatToIntParts+0x56>
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	425a      	negs	r2, r3
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	601a      	str	r2, [r3, #0]
}
 80016b2:	bf00      	nop
 80016b4:	3710      	adds	r7, #16
 80016b6:	46bd      	mov	sp, r7
 80016b8:	bd80      	pop	{r7, pc}
 80016ba:	bf00      	nop
 80016bc:	42c80000 	.word	0x42c80000

080016c0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80016c0:	b480      	push	{r7}
 80016c2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80016c4:	b672      	cpsid	i
}
 80016c6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 80016c8:	bf00      	nop
 80016ca:	e7fd      	b.n	80016c8 <Error_Handler+0x8>

080016cc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80016cc:	b580      	push	{r7, lr}
 80016ce:	b084      	sub	sp, #16
 80016d0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_COMP_CLK_ENABLE();
 80016d2:	4b15      	ldr	r3, [pc, #84]	@ (8001728 <HAL_MspInit+0x5c>)
 80016d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80016d6:	4a14      	ldr	r2, [pc, #80]	@ (8001728 <HAL_MspInit+0x5c>)
 80016d8:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80016dc:	6253      	str	r3, [r2, #36]	@ 0x24
 80016de:	4b12      	ldr	r3, [pc, #72]	@ (8001728 <HAL_MspInit+0x5c>)
 80016e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80016e2:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80016e6:	60fb      	str	r3, [r7, #12]
 80016e8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80016ea:	4b0f      	ldr	r3, [pc, #60]	@ (8001728 <HAL_MspInit+0x5c>)
 80016ec:	6a1b      	ldr	r3, [r3, #32]
 80016ee:	4a0e      	ldr	r2, [pc, #56]	@ (8001728 <HAL_MspInit+0x5c>)
 80016f0:	f043 0301 	orr.w	r3, r3, #1
 80016f4:	6213      	str	r3, [r2, #32]
 80016f6:	4b0c      	ldr	r3, [pc, #48]	@ (8001728 <HAL_MspInit+0x5c>)
 80016f8:	6a1b      	ldr	r3, [r3, #32]
 80016fa:	f003 0301 	and.w	r3, r3, #1
 80016fe:	60bb      	str	r3, [r7, #8]
 8001700:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001702:	4b09      	ldr	r3, [pc, #36]	@ (8001728 <HAL_MspInit+0x5c>)
 8001704:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001706:	4a08      	ldr	r2, [pc, #32]	@ (8001728 <HAL_MspInit+0x5c>)
 8001708:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800170c:	6253      	str	r3, [r2, #36]	@ 0x24
 800170e:	4b06      	ldr	r3, [pc, #24]	@ (8001728 <HAL_MspInit+0x5c>)
 8001710:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001712:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001716:	607b      	str	r3, [r7, #4]
 8001718:	687b      	ldr	r3, [r7, #4]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800171a:	2007      	movs	r0, #7
 800171c:	f007 fe20 	bl	8009360 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001720:	bf00      	nop
 8001722:	3710      	adds	r7, #16
 8001724:	46bd      	mov	sp, r7
 8001726:	bd80      	pop	{r7, pc}
 8001728:	40023800 	.word	0x40023800

0800172c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800172c:	b580      	push	{r7, lr}
 800172e:	b08a      	sub	sp, #40	@ 0x28
 8001730:	af00      	add	r7, sp, #0
 8001732:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001734:	f107 0314 	add.w	r3, r7, #20
 8001738:	2200      	movs	r2, #0
 800173a:	601a      	str	r2, [r3, #0]
 800173c:	605a      	str	r2, [r3, #4]
 800173e:	609a      	str	r2, [r3, #8]
 8001740:	60da      	str	r2, [r3, #12]
 8001742:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	4a17      	ldr	r2, [pc, #92]	@ (80017a8 <HAL_UART_MspInit+0x7c>)
 800174a:	4293      	cmp	r3, r2
 800174c:	d127      	bne.n	800179e <HAL_UART_MspInit+0x72>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800174e:	4b17      	ldr	r3, [pc, #92]	@ (80017ac <HAL_UART_MspInit+0x80>)
 8001750:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001752:	4a16      	ldr	r2, [pc, #88]	@ (80017ac <HAL_UART_MspInit+0x80>)
 8001754:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001758:	6253      	str	r3, [r2, #36]	@ 0x24
 800175a:	4b14      	ldr	r3, [pc, #80]	@ (80017ac <HAL_UART_MspInit+0x80>)
 800175c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800175e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001762:	613b      	str	r3, [r7, #16]
 8001764:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001766:	4b11      	ldr	r3, [pc, #68]	@ (80017ac <HAL_UART_MspInit+0x80>)
 8001768:	69db      	ldr	r3, [r3, #28]
 800176a:	4a10      	ldr	r2, [pc, #64]	@ (80017ac <HAL_UART_MspInit+0x80>)
 800176c:	f043 0301 	orr.w	r3, r3, #1
 8001770:	61d3      	str	r3, [r2, #28]
 8001772:	4b0e      	ldr	r3, [pc, #56]	@ (80017ac <HAL_UART_MspInit+0x80>)
 8001774:	69db      	ldr	r3, [r3, #28]
 8001776:	f003 0301 	and.w	r3, r3, #1
 800177a:	60fb      	str	r3, [r7, #12]
 800177c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800177e:	230c      	movs	r3, #12
 8001780:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001782:	2302      	movs	r3, #2
 8001784:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001786:	2300      	movs	r3, #0
 8001788:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800178a:	2303      	movs	r3, #3
 800178c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800178e:	2307      	movs	r3, #7
 8001790:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001792:	f107 0314 	add.w	r3, r7, #20
 8001796:	4619      	mov	r1, r3
 8001798:	4805      	ldr	r0, [pc, #20]	@ (80017b0 <HAL_UART_MspInit+0x84>)
 800179a:	f007 fe15 	bl	80093c8 <HAL_GPIO_Init>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 800179e:	bf00      	nop
 80017a0:	3728      	adds	r7, #40	@ 0x28
 80017a2:	46bd      	mov	sp, r7
 80017a4:	bd80      	pop	{r7, pc}
 80017a6:	bf00      	nop
 80017a8:	40004400 	.word	0x40004400
 80017ac:	40023800 	.word	0x40023800
 80017b0:	40020000 	.word	0x40020000

080017b4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80017b4:	b480      	push	{r7}
 80017b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80017b8:	bf00      	nop
 80017ba:	e7fd      	b.n	80017b8 <NMI_Handler+0x4>

080017bc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80017bc:	b480      	push	{r7}
 80017be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80017c0:	bf00      	nop
 80017c2:	e7fd      	b.n	80017c0 <HardFault_Handler+0x4>

080017c4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80017c4:	b480      	push	{r7}
 80017c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80017c8:	bf00      	nop
 80017ca:	e7fd      	b.n	80017c8 <MemManage_Handler+0x4>

080017cc <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80017cc:	b480      	push	{r7}
 80017ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80017d0:	bf00      	nop
 80017d2:	e7fd      	b.n	80017d0 <BusFault_Handler+0x4>

080017d4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80017d4:	b480      	push	{r7}
 80017d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80017d8:	bf00      	nop
 80017da:	e7fd      	b.n	80017d8 <UsageFault_Handler+0x4>

080017dc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80017dc:	b480      	push	{r7}
 80017de:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80017e0:	bf00      	nop
 80017e2:	46bd      	mov	sp, r7
 80017e4:	bc80      	pop	{r7}
 80017e6:	4770      	bx	lr

080017e8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80017e8:	b480      	push	{r7}
 80017ea:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80017ec:	bf00      	nop
 80017ee:	46bd      	mov	sp, r7
 80017f0:	bc80      	pop	{r7}
 80017f2:	4770      	bx	lr

080017f4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80017f4:	b480      	push	{r7}
 80017f6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80017f8:	bf00      	nop
 80017fa:	46bd      	mov	sp, r7
 80017fc:	bc80      	pop	{r7}
 80017fe:	4770      	bx	lr

08001800 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001800:	b580      	push	{r7, lr}
 8001802:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001804:	f007 fcbe 	bl	8009184 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001808:	bf00      	nop
 800180a:	bd80      	pop	{r7, pc}

0800180c <BSP_I2C1_Init>:
/**
  * @brief  Initialize I2C HAL
  * @retval BSP status
  */
int32_t BSP_I2C1_Init(void)
{
 800180c:	b580      	push	{r7, lr}
 800180e:	b082      	sub	sp, #8
 8001810:	af00      	add	r7, sp, #0

  int32_t ret = BSP_ERROR_NONE;
 8001812:	2300      	movs	r3, #0
 8001814:	607b      	str	r3, [r7, #4]

  hi2c1.Instance  = I2C1;
 8001816:	4b13      	ldr	r3, [pc, #76]	@ (8001864 <BSP_I2C1_Init+0x58>)
 8001818:	4a13      	ldr	r2, [pc, #76]	@ (8001868 <BSP_I2C1_Init+0x5c>)
 800181a:	601a      	str	r2, [r3, #0]

  if(I2C1InitCounter++ == 0)
 800181c:	4b13      	ldr	r3, [pc, #76]	@ (800186c <BSP_I2C1_Init+0x60>)
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	1c5a      	adds	r2, r3, #1
 8001822:	4912      	ldr	r1, [pc, #72]	@ (800186c <BSP_I2C1_Init+0x60>)
 8001824:	600a      	str	r2, [r1, #0]
 8001826:	2b00      	cmp	r3, #0
 8001828:	d117      	bne.n	800185a <BSP_I2C1_Init+0x4e>
  {
    if (HAL_I2C_GetState(&hi2c1) == HAL_I2C_STATE_RESET)
 800182a:	480e      	ldr	r0, [pc, #56]	@ (8001864 <BSP_I2C1_Init+0x58>)
 800182c:	f008 fd16 	bl	800a25c <HAL_I2C_GetState>
 8001830:	4603      	mov	r3, r0
 8001832:	2b00      	cmp	r3, #0
 8001834:	d111      	bne.n	800185a <BSP_I2C1_Init+0x4e>
    {
    #if (USE_HAL_I2C_REGISTER_CALLBACKS == 0U)
      /* Init the I2C Msp */
      I2C1_MspInit(&hi2c1);
 8001836:	480b      	ldr	r0, [pc, #44]	@ (8001864 <BSP_I2C1_Init+0x58>)
 8001838:	f000 f8e2 	bl	8001a00 <I2C1_MspInit>
        {
          return BSP_ERROR_MSP_FAILURE;
        }
      }
    #endif
      if(ret == BSP_ERROR_NONE)
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	2b00      	cmp	r3, #0
 8001840:	d10b      	bne.n	800185a <BSP_I2C1_Init+0x4e>
      {
        /* Init the I2C */
        if(MX_I2C1_Init(&hi2c1) != HAL_OK)
 8001842:	4808      	ldr	r0, [pc, #32]	@ (8001864 <BSP_I2C1_Init+0x58>)
 8001844:	f000 f8a8 	bl	8001998 <MX_I2C1_Init>
 8001848:	4603      	mov	r3, r0
 800184a:	2b00      	cmp	r3, #0
 800184c:	d003      	beq.n	8001856 <BSP_I2C1_Init+0x4a>
        {
          ret = BSP_ERROR_BUS_FAILURE;
 800184e:	f06f 0307 	mvn.w	r3, #7
 8001852:	607b      	str	r3, [r7, #4]
 8001854:	e001      	b.n	800185a <BSP_I2C1_Init+0x4e>
        }
        else
        {
          ret = BSP_ERROR_NONE;
 8001856:	2300      	movs	r3, #0
 8001858:	607b      	str	r3, [r7, #4]
        }
      }
    }
  }
  return ret;
 800185a:	687b      	ldr	r3, [r7, #4]
}
 800185c:	4618      	mov	r0, r3
 800185e:	3708      	adds	r7, #8
 8001860:	46bd      	mov	sp, r7
 8001862:	bd80      	pop	{r7, pc}
 8001864:	200003f0 	.word	0x200003f0
 8001868:	40005400 	.word	0x40005400
 800186c:	20000444 	.word	0x20000444

08001870 <BSP_I2C1_DeInit>:
/**
  * @brief  DeInitialize I2C HAL.
  * @retval BSP status
  */
int32_t BSP_I2C1_DeInit(void)
{
 8001870:	b580      	push	{r7, lr}
 8001872:	b082      	sub	sp, #8
 8001874:	af00      	add	r7, sp, #0
  int32_t ret = BSP_ERROR_NONE;
 8001876:	2300      	movs	r3, #0
 8001878:	607b      	str	r3, [r7, #4]

  if (I2C1InitCounter > 0)
 800187a:	4b0f      	ldr	r3, [pc, #60]	@ (80018b8 <BSP_I2C1_DeInit+0x48>)
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	2b00      	cmp	r3, #0
 8001880:	d014      	beq.n	80018ac <BSP_I2C1_DeInit+0x3c>
  {
    if (--I2C1InitCounter == 0)
 8001882:	4b0d      	ldr	r3, [pc, #52]	@ (80018b8 <BSP_I2C1_DeInit+0x48>)
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	3b01      	subs	r3, #1
 8001888:	4a0b      	ldr	r2, [pc, #44]	@ (80018b8 <BSP_I2C1_DeInit+0x48>)
 800188a:	6013      	str	r3, [r2, #0]
 800188c:	4b0a      	ldr	r3, [pc, #40]	@ (80018b8 <BSP_I2C1_DeInit+0x48>)
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	2b00      	cmp	r3, #0
 8001892:	d10b      	bne.n	80018ac <BSP_I2C1_DeInit+0x3c>
    {
  #if (USE_HAL_I2C_REGISTER_CALLBACKS == 0U)
      /* DeInit the I2C */
      I2C1_MspDeInit(&hi2c1);
 8001894:	4809      	ldr	r0, [pc, #36]	@ (80018bc <BSP_I2C1_DeInit+0x4c>)
 8001896:	f000 f8f9 	bl	8001a8c <I2C1_MspDeInit>
  #endif
      /* DeInit the I2C */
      if (HAL_I2C_DeInit(&hi2c1) != HAL_OK)
 800189a:	4808      	ldr	r0, [pc, #32]	@ (80018bc <BSP_I2C1_DeInit+0x4c>)
 800189c:	f008 f970 	bl	8009b80 <HAL_I2C_DeInit>
 80018a0:	4603      	mov	r3, r0
 80018a2:	2b00      	cmp	r3, #0
 80018a4:	d002      	beq.n	80018ac <BSP_I2C1_DeInit+0x3c>
      {
        ret = BSP_ERROR_BUS_FAILURE;
 80018a6:	f06f 0307 	mvn.w	r3, #7
 80018aa:	607b      	str	r3, [r7, #4]
      }
    }
  }
  return ret;
 80018ac:	687b      	ldr	r3, [r7, #4]
}
 80018ae:	4618      	mov	r0, r3
 80018b0:	3708      	adds	r7, #8
 80018b2:	46bd      	mov	sp, r7
 80018b4:	bd80      	pop	{r7, pc}
 80018b6:	bf00      	nop
 80018b8:	20000444 	.word	0x20000444
 80018bc:	200003f0 	.word	0x200003f0

080018c0 <BSP_I2C1_WriteReg>:
  * @param  Length Data Length
  * @retval BSP status
  */

int32_t BSP_I2C1_WriteReg(uint16_t DevAddr, uint16_t Reg, uint8_t *pData, uint16_t Length)
{
 80018c0:	b580      	push	{r7, lr}
 80018c2:	b08a      	sub	sp, #40	@ 0x28
 80018c4:	af04      	add	r7, sp, #16
 80018c6:	60ba      	str	r2, [r7, #8]
 80018c8:	461a      	mov	r2, r3
 80018ca:	4603      	mov	r3, r0
 80018cc:	81fb      	strh	r3, [r7, #14]
 80018ce:	460b      	mov	r3, r1
 80018d0:	81bb      	strh	r3, [r7, #12]
 80018d2:	4613      	mov	r3, r2
 80018d4:	80fb      	strh	r3, [r7, #6]
  int32_t ret = BSP_ERROR_NONE;
 80018d6:	2300      	movs	r3, #0
 80018d8:	617b      	str	r3, [r7, #20]

  if (HAL_I2C_Mem_Write(&hi2c1, DevAddr,Reg, I2C_MEMADD_SIZE_8BIT,pData, Length, BUS_I2C1_POLL_TIMEOUT) != HAL_OK)
 80018da:	89ba      	ldrh	r2, [r7, #12]
 80018dc:	89f9      	ldrh	r1, [r7, #14]
 80018de:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80018e2:	9302      	str	r3, [sp, #8]
 80018e4:	88fb      	ldrh	r3, [r7, #6]
 80018e6:	9301      	str	r3, [sp, #4]
 80018e8:	68bb      	ldr	r3, [r7, #8]
 80018ea:	9300      	str	r3, [sp, #0]
 80018ec:	2301      	movs	r3, #1
 80018ee:	480c      	ldr	r0, [pc, #48]	@ (8001920 <BSP_I2C1_WriteReg+0x60>)
 80018f0:	f008 f988 	bl	8009c04 <HAL_I2C_Mem_Write>
 80018f4:	4603      	mov	r3, r0
 80018f6:	2b00      	cmp	r3, #0
 80018f8:	d00c      	beq.n	8001914 <BSP_I2C1_WriteReg+0x54>
  {
    if (HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF)
 80018fa:	4809      	ldr	r0, [pc, #36]	@ (8001920 <BSP_I2C1_WriteReg+0x60>)
 80018fc:	f008 fcbb 	bl	800a276 <HAL_I2C_GetError>
 8001900:	4603      	mov	r3, r0
 8001902:	2b04      	cmp	r3, #4
 8001904:	d103      	bne.n	800190e <BSP_I2C1_WriteReg+0x4e>
    {
      ret = BSP_ERROR_BUS_ACKNOWLEDGE_FAILURE;
 8001906:	f06f 0365 	mvn.w	r3, #101	@ 0x65
 800190a:	617b      	str	r3, [r7, #20]
 800190c:	e002      	b.n	8001914 <BSP_I2C1_WriteReg+0x54>
    }
    else
    {
      ret =  BSP_ERROR_PERIPH_FAILURE;
 800190e:	f06f 0303 	mvn.w	r3, #3
 8001912:	617b      	str	r3, [r7, #20]
    }
  }
  return ret;
 8001914:	697b      	ldr	r3, [r7, #20]
}
 8001916:	4618      	mov	r0, r3
 8001918:	3718      	adds	r7, #24
 800191a:	46bd      	mov	sp, r7
 800191c:	bd80      	pop	{r7, pc}
 800191e:	bf00      	nop
 8001920:	200003f0 	.word	0x200003f0

08001924 <BSP_I2C1_ReadReg>:
  * @param  pData  Pointer to data buffer to read
  * @param  Length Data Length
  * @retval BSP status
  */
int32_t  BSP_I2C1_ReadReg(uint16_t DevAddr, uint16_t Reg, uint8_t *pData, uint16_t Length)
{
 8001924:	b580      	push	{r7, lr}
 8001926:	b08a      	sub	sp, #40	@ 0x28
 8001928:	af04      	add	r7, sp, #16
 800192a:	60ba      	str	r2, [r7, #8]
 800192c:	461a      	mov	r2, r3
 800192e:	4603      	mov	r3, r0
 8001930:	81fb      	strh	r3, [r7, #14]
 8001932:	460b      	mov	r3, r1
 8001934:	81bb      	strh	r3, [r7, #12]
 8001936:	4613      	mov	r3, r2
 8001938:	80fb      	strh	r3, [r7, #6]
  int32_t ret = BSP_ERROR_NONE;
 800193a:	2300      	movs	r3, #0
 800193c:	617b      	str	r3, [r7, #20]

  if (HAL_I2C_Mem_Read(&hi2c1, DevAddr, Reg, I2C_MEMADD_SIZE_8BIT, pData, Length, BUS_I2C1_POLL_TIMEOUT) != HAL_OK)
 800193e:	89ba      	ldrh	r2, [r7, #12]
 8001940:	89f9      	ldrh	r1, [r7, #14]
 8001942:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001946:	9302      	str	r3, [sp, #8]
 8001948:	88fb      	ldrh	r3, [r7, #6]
 800194a:	9301      	str	r3, [sp, #4]
 800194c:	68bb      	ldr	r3, [r7, #8]
 800194e:	9300      	str	r3, [sp, #0]
 8001950:	2301      	movs	r3, #1
 8001952:	480c      	ldr	r0, [pc, #48]	@ (8001984 <BSP_I2C1_ReadReg+0x60>)
 8001954:	f008 fa50 	bl	8009df8 <HAL_I2C_Mem_Read>
 8001958:	4603      	mov	r3, r0
 800195a:	2b00      	cmp	r3, #0
 800195c:	d00c      	beq.n	8001978 <BSP_I2C1_ReadReg+0x54>
  {
    if (HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF)
 800195e:	4809      	ldr	r0, [pc, #36]	@ (8001984 <BSP_I2C1_ReadReg+0x60>)
 8001960:	f008 fc89 	bl	800a276 <HAL_I2C_GetError>
 8001964:	4603      	mov	r3, r0
 8001966:	2b04      	cmp	r3, #4
 8001968:	d103      	bne.n	8001972 <BSP_I2C1_ReadReg+0x4e>
    {
      ret = BSP_ERROR_BUS_ACKNOWLEDGE_FAILURE;
 800196a:	f06f 0365 	mvn.w	r3, #101	@ 0x65
 800196e:	617b      	str	r3, [r7, #20]
 8001970:	e002      	b.n	8001978 <BSP_I2C1_ReadReg+0x54>
    }
    else
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 8001972:	f06f 0303 	mvn.w	r3, #3
 8001976:	617b      	str	r3, [r7, #20]
    }
  }
  return ret;
 8001978:	697b      	ldr	r3, [r7, #20]
}
 800197a:	4618      	mov	r0, r3
 800197c:	3718      	adds	r7, #24
 800197e:	46bd      	mov	sp, r7
 8001980:	bd80      	pop	{r7, pc}
 8001982:	bf00      	nop
 8001984:	200003f0 	.word	0x200003f0

08001988 <BSP_GetTick>:

/**
  * @brief  Return system tick in ms
  * @retval Current HAL time base time stamp
  */
int32_t BSP_GetTick(void) {
 8001988:	b580      	push	{r7, lr}
 800198a:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 800198c:	f007 fc0c 	bl	80091a8 <HAL_GetTick>
 8001990:	4603      	mov	r3, r0
}
 8001992:	4618      	mov	r0, r3
 8001994:	bd80      	pop	{r7, pc}
	...

08001998 <MX_I2C1_Init>:

/* I2C1 init function */

__weak HAL_StatusTypeDef MX_I2C1_Init(I2C_HandleTypeDef* hi2c)
{
 8001998:	b580      	push	{r7, lr}
 800199a:	b084      	sub	sp, #16
 800199c:	af00      	add	r7, sp, #0
 800199e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 80019a0:	2300      	movs	r3, #0
 80019a2:	73fb      	strb	r3, [r7, #15]

  hi2c->Instance = I2C1;
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	4a14      	ldr	r2, [pc, #80]	@ (80019f8 <MX_I2C1_Init+0x60>)
 80019a8:	601a      	str	r2, [r3, #0]
  hi2c->Init.ClockSpeed = 400000;
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	4a13      	ldr	r2, [pc, #76]	@ (80019fc <MX_I2C1_Init+0x64>)
 80019ae:	605a      	str	r2, [r3, #4]
  hi2c->Init.DutyCycle = I2C_DUTYCYCLE_2;
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	2200      	movs	r2, #0
 80019b4:	609a      	str	r2, [r3, #8]
  hi2c->Init.OwnAddress1 = 0;
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	2200      	movs	r2, #0
 80019ba:	60da      	str	r2, [r3, #12]
  hi2c->Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80019c2:	611a      	str	r2, [r3, #16]
  hi2c->Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	2200      	movs	r2, #0
 80019c8:	615a      	str	r2, [r3, #20]
  hi2c->Init.OwnAddress2 = 0;
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	2200      	movs	r2, #0
 80019ce:	619a      	str	r2, [r3, #24]
  hi2c->Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	2200      	movs	r2, #0
 80019d4:	61da      	str	r2, [r3, #28]
  hi2c->Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	2200      	movs	r2, #0
 80019da:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(hi2c) != HAL_OK)
 80019dc:	6878      	ldr	r0, [r7, #4]
 80019de:	f007 ff8b 	bl	80098f8 <HAL_I2C_Init>
 80019e2:	4603      	mov	r3, r0
 80019e4:	2b00      	cmp	r3, #0
 80019e6:	d001      	beq.n	80019ec <MX_I2C1_Init+0x54>
  {
    ret = HAL_ERROR;
 80019e8:	2301      	movs	r3, #1
 80019ea:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 80019ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80019ee:	4618      	mov	r0, r3
 80019f0:	3710      	adds	r7, #16
 80019f2:	46bd      	mov	sp, r7
 80019f4:	bd80      	pop	{r7, pc}
 80019f6:	bf00      	nop
 80019f8:	40005400 	.word	0x40005400
 80019fc:	00061a80 	.word	0x00061a80

08001a00 <I2C1_MspInit>:

static void I2C1_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001a00:	b580      	push	{r7, lr}
 8001a02:	b08a      	sub	sp, #40	@ 0x28
 8001a04:	af00      	add	r7, sp, #0
 8001a06:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a08:	4b1e      	ldr	r3, [pc, #120]	@ (8001a84 <I2C1_MspInit+0x84>)
 8001a0a:	69db      	ldr	r3, [r3, #28]
 8001a0c:	4a1d      	ldr	r2, [pc, #116]	@ (8001a84 <I2C1_MspInit+0x84>)
 8001a0e:	f043 0302 	orr.w	r3, r3, #2
 8001a12:	61d3      	str	r3, [r2, #28]
 8001a14:	4b1b      	ldr	r3, [pc, #108]	@ (8001a84 <I2C1_MspInit+0x84>)
 8001a16:	69db      	ldr	r3, [r3, #28]
 8001a18:	f003 0302 	and.w	r3, r3, #2
 8001a1c:	613b      	str	r3, [r7, #16]
 8001a1e:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = BUS_I2C1_SCL_GPIO_PIN;
 8001a20:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001a24:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001a26:	2312      	movs	r3, #18
 8001a28:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a2a:	2300      	movs	r3, #0
 8001a2c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a2e:	2303      	movs	r3, #3
 8001a30:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = BUS_I2C1_SCL_GPIO_AF;
 8001a32:	2304      	movs	r3, #4
 8001a34:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(BUS_I2C1_SCL_GPIO_PORT, &GPIO_InitStruct);
 8001a36:	f107 0314 	add.w	r3, r7, #20
 8001a3a:	4619      	mov	r1, r3
 8001a3c:	4812      	ldr	r0, [pc, #72]	@ (8001a88 <I2C1_MspInit+0x88>)
 8001a3e:	f007 fcc3 	bl	80093c8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = BUS_I2C1_SDA_GPIO_PIN;
 8001a42:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001a46:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001a48:	2312      	movs	r3, #18
 8001a4a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a4c:	2300      	movs	r3, #0
 8001a4e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a50:	2303      	movs	r3, #3
 8001a52:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = BUS_I2C1_SDA_GPIO_AF;
 8001a54:	2304      	movs	r3, #4
 8001a56:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(BUS_I2C1_SDA_GPIO_PORT, &GPIO_InitStruct);
 8001a58:	f107 0314 	add.w	r3, r7, #20
 8001a5c:	4619      	mov	r1, r3
 8001a5e:	480a      	ldr	r0, [pc, #40]	@ (8001a88 <I2C1_MspInit+0x88>)
 8001a60:	f007 fcb2 	bl	80093c8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001a64:	4b07      	ldr	r3, [pc, #28]	@ (8001a84 <I2C1_MspInit+0x84>)
 8001a66:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a68:	4a06      	ldr	r2, [pc, #24]	@ (8001a84 <I2C1_MspInit+0x84>)
 8001a6a:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001a6e:	6253      	str	r3, [r2, #36]	@ 0x24
 8001a70:	4b04      	ldr	r3, [pc, #16]	@ (8001a84 <I2C1_MspInit+0x84>)
 8001a72:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a74:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001a78:	60fb      	str	r3, [r7, #12]
 8001a7a:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
}
 8001a7c:	bf00      	nop
 8001a7e:	3728      	adds	r7, #40	@ 0x28
 8001a80:	46bd      	mov	sp, r7
 8001a82:	bd80      	pop	{r7, pc}
 8001a84:	40023800 	.word	0x40023800
 8001a88:	40020400 	.word	0x40020400

08001a8c <I2C1_MspDeInit>:

static void I2C1_MspDeInit(I2C_HandleTypeDef* i2cHandle)
{
 8001a8c:	b580      	push	{r7, lr}
 8001a8e:	b082      	sub	sp, #8
 8001a90:	af00      	add	r7, sp, #0
 8001a92:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN I2C1_MspDeInit 0 */

  /* USER CODE END I2C1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C1_CLK_DISABLE();
 8001a94:	4b09      	ldr	r3, [pc, #36]	@ (8001abc <I2C1_MspDeInit+0x30>)
 8001a96:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a98:	4a08      	ldr	r2, [pc, #32]	@ (8001abc <I2C1_MspDeInit+0x30>)
 8001a9a:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8001a9e:	6253      	str	r3, [r2, #36]	@ 0x24

    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    HAL_GPIO_DeInit(BUS_I2C1_SCL_GPIO_PORT, BUS_I2C1_SCL_GPIO_PIN);
 8001aa0:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001aa4:	4806      	ldr	r0, [pc, #24]	@ (8001ac0 <I2C1_MspDeInit+0x34>)
 8001aa6:	f007 fe1f 	bl	80096e8 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(BUS_I2C1_SDA_GPIO_PORT, BUS_I2C1_SDA_GPIO_PIN);
 8001aaa:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001aae:	4804      	ldr	r0, [pc, #16]	@ (8001ac0 <I2C1_MspDeInit+0x34>)
 8001ab0:	f007 fe1a 	bl	80096e8 <HAL_GPIO_DeInit>

  /* USER CODE BEGIN I2C1_MspDeInit 1 */

  /* USER CODE END I2C1_MspDeInit 1 */
}
 8001ab4:	bf00      	nop
 8001ab6:	3708      	adds	r7, #8
 8001ab8:	46bd      	mov	sp, r7
 8001aba:	bd80      	pop	{r7, pc}
 8001abc:	40023800 	.word	0x40023800
 8001ac0:	40020400 	.word	0x40020400

08001ac4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001ac4:	b480      	push	{r7}
 8001ac6:	af00      	add	r7, sp, #0
  return 1;
 8001ac8:	2301      	movs	r3, #1
}
 8001aca:	4618      	mov	r0, r3
 8001acc:	46bd      	mov	sp, r7
 8001ace:	bc80      	pop	{r7}
 8001ad0:	4770      	bx	lr

08001ad2 <_kill>:

int _kill(int pid, int sig)
{
 8001ad2:	b580      	push	{r7, lr}
 8001ad4:	b082      	sub	sp, #8
 8001ad6:	af00      	add	r7, sp, #0
 8001ad8:	6078      	str	r0, [r7, #4]
 8001ada:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001adc:	f00a feb2 	bl	800c844 <__errno>
 8001ae0:	4603      	mov	r3, r0
 8001ae2:	2216      	movs	r2, #22
 8001ae4:	601a      	str	r2, [r3, #0]
  return -1;
 8001ae6:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001aea:	4618      	mov	r0, r3
 8001aec:	3708      	adds	r7, #8
 8001aee:	46bd      	mov	sp, r7
 8001af0:	bd80      	pop	{r7, pc}

08001af2 <_exit>:

void _exit (int status)
{
 8001af2:	b580      	push	{r7, lr}
 8001af4:	b082      	sub	sp, #8
 8001af6:	af00      	add	r7, sp, #0
 8001af8:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001afa:	f04f 31ff 	mov.w	r1, #4294967295
 8001afe:	6878      	ldr	r0, [r7, #4]
 8001b00:	f7ff ffe7 	bl	8001ad2 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001b04:	bf00      	nop
 8001b06:	e7fd      	b.n	8001b04 <_exit+0x12>

08001b08 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001b08:	b580      	push	{r7, lr}
 8001b0a:	b086      	sub	sp, #24
 8001b0c:	af00      	add	r7, sp, #0
 8001b0e:	60f8      	str	r0, [r7, #12]
 8001b10:	60b9      	str	r1, [r7, #8]
 8001b12:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b14:	2300      	movs	r3, #0
 8001b16:	617b      	str	r3, [r7, #20]
 8001b18:	e00a      	b.n	8001b30 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001b1a:	f3af 8000 	nop.w
 8001b1e:	4601      	mov	r1, r0
 8001b20:	68bb      	ldr	r3, [r7, #8]
 8001b22:	1c5a      	adds	r2, r3, #1
 8001b24:	60ba      	str	r2, [r7, #8]
 8001b26:	b2ca      	uxtb	r2, r1
 8001b28:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b2a:	697b      	ldr	r3, [r7, #20]
 8001b2c:	3301      	adds	r3, #1
 8001b2e:	617b      	str	r3, [r7, #20]
 8001b30:	697a      	ldr	r2, [r7, #20]
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	429a      	cmp	r2, r3
 8001b36:	dbf0      	blt.n	8001b1a <_read+0x12>
  }

  return len;
 8001b38:	687b      	ldr	r3, [r7, #4]
}
 8001b3a:	4618      	mov	r0, r3
 8001b3c:	3718      	adds	r7, #24
 8001b3e:	46bd      	mov	sp, r7
 8001b40:	bd80      	pop	{r7, pc}

08001b42 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001b42:	b580      	push	{r7, lr}
 8001b44:	b086      	sub	sp, #24
 8001b46:	af00      	add	r7, sp, #0
 8001b48:	60f8      	str	r0, [r7, #12]
 8001b4a:	60b9      	str	r1, [r7, #8]
 8001b4c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b4e:	2300      	movs	r3, #0
 8001b50:	617b      	str	r3, [r7, #20]
 8001b52:	e009      	b.n	8001b68 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001b54:	68bb      	ldr	r3, [r7, #8]
 8001b56:	1c5a      	adds	r2, r3, #1
 8001b58:	60ba      	str	r2, [r7, #8]
 8001b5a:	781b      	ldrb	r3, [r3, #0]
 8001b5c:	4618      	mov	r0, r3
 8001b5e:	f7ff fd6b 	bl	8001638 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b62:	697b      	ldr	r3, [r7, #20]
 8001b64:	3301      	adds	r3, #1
 8001b66:	617b      	str	r3, [r7, #20]
 8001b68:	697a      	ldr	r2, [r7, #20]
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	429a      	cmp	r2, r3
 8001b6e:	dbf1      	blt.n	8001b54 <_write+0x12>
  }
  return len;
 8001b70:	687b      	ldr	r3, [r7, #4]
}
 8001b72:	4618      	mov	r0, r3
 8001b74:	3718      	adds	r7, #24
 8001b76:	46bd      	mov	sp, r7
 8001b78:	bd80      	pop	{r7, pc}

08001b7a <_close>:

int _close(int file)
{
 8001b7a:	b480      	push	{r7}
 8001b7c:	b083      	sub	sp, #12
 8001b7e:	af00      	add	r7, sp, #0
 8001b80:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001b82:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001b86:	4618      	mov	r0, r3
 8001b88:	370c      	adds	r7, #12
 8001b8a:	46bd      	mov	sp, r7
 8001b8c:	bc80      	pop	{r7}
 8001b8e:	4770      	bx	lr

08001b90 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001b90:	b480      	push	{r7}
 8001b92:	b083      	sub	sp, #12
 8001b94:	af00      	add	r7, sp, #0
 8001b96:	6078      	str	r0, [r7, #4]
 8001b98:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001b9a:	683b      	ldr	r3, [r7, #0]
 8001b9c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001ba0:	605a      	str	r2, [r3, #4]
  return 0;
 8001ba2:	2300      	movs	r3, #0
}
 8001ba4:	4618      	mov	r0, r3
 8001ba6:	370c      	adds	r7, #12
 8001ba8:	46bd      	mov	sp, r7
 8001baa:	bc80      	pop	{r7}
 8001bac:	4770      	bx	lr

08001bae <_isatty>:

int _isatty(int file)
{
 8001bae:	b480      	push	{r7}
 8001bb0:	b083      	sub	sp, #12
 8001bb2:	af00      	add	r7, sp, #0
 8001bb4:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001bb6:	2301      	movs	r3, #1
}
 8001bb8:	4618      	mov	r0, r3
 8001bba:	370c      	adds	r7, #12
 8001bbc:	46bd      	mov	sp, r7
 8001bbe:	bc80      	pop	{r7}
 8001bc0:	4770      	bx	lr

08001bc2 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001bc2:	b480      	push	{r7}
 8001bc4:	b085      	sub	sp, #20
 8001bc6:	af00      	add	r7, sp, #0
 8001bc8:	60f8      	str	r0, [r7, #12]
 8001bca:	60b9      	str	r1, [r7, #8]
 8001bcc:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001bce:	2300      	movs	r3, #0
}
 8001bd0:	4618      	mov	r0, r3
 8001bd2:	3714      	adds	r7, #20
 8001bd4:	46bd      	mov	sp, r7
 8001bd6:	bc80      	pop	{r7}
 8001bd8:	4770      	bx	lr
	...

08001bdc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001bdc:	b580      	push	{r7, lr}
 8001bde:	b086      	sub	sp, #24
 8001be0:	af00      	add	r7, sp, #0
 8001be2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001be4:	4a14      	ldr	r2, [pc, #80]	@ (8001c38 <_sbrk+0x5c>)
 8001be6:	4b15      	ldr	r3, [pc, #84]	@ (8001c3c <_sbrk+0x60>)
 8001be8:	1ad3      	subs	r3, r2, r3
 8001bea:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001bec:	697b      	ldr	r3, [r7, #20]
 8001bee:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001bf0:	4b13      	ldr	r3, [pc, #76]	@ (8001c40 <_sbrk+0x64>)
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	2b00      	cmp	r3, #0
 8001bf6:	d102      	bne.n	8001bfe <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001bf8:	4b11      	ldr	r3, [pc, #68]	@ (8001c40 <_sbrk+0x64>)
 8001bfa:	4a12      	ldr	r2, [pc, #72]	@ (8001c44 <_sbrk+0x68>)
 8001bfc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001bfe:	4b10      	ldr	r3, [pc, #64]	@ (8001c40 <_sbrk+0x64>)
 8001c00:	681a      	ldr	r2, [r3, #0]
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	4413      	add	r3, r2
 8001c06:	693a      	ldr	r2, [r7, #16]
 8001c08:	429a      	cmp	r2, r3
 8001c0a:	d207      	bcs.n	8001c1c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001c0c:	f00a fe1a 	bl	800c844 <__errno>
 8001c10:	4603      	mov	r3, r0
 8001c12:	220c      	movs	r2, #12
 8001c14:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001c16:	f04f 33ff 	mov.w	r3, #4294967295
 8001c1a:	e009      	b.n	8001c30 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001c1c:	4b08      	ldr	r3, [pc, #32]	@ (8001c40 <_sbrk+0x64>)
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001c22:	4b07      	ldr	r3, [pc, #28]	@ (8001c40 <_sbrk+0x64>)
 8001c24:	681a      	ldr	r2, [r3, #0]
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	4413      	add	r3, r2
 8001c2a:	4a05      	ldr	r2, [pc, #20]	@ (8001c40 <_sbrk+0x64>)
 8001c2c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001c2e:	68fb      	ldr	r3, [r7, #12]
}
 8001c30:	4618      	mov	r0, r3
 8001c32:	3718      	adds	r7, #24
 8001c34:	46bd      	mov	sp, r7
 8001c36:	bd80      	pop	{r7, pc}
 8001c38:	20014000 	.word	0x20014000
 8001c3c:	00000400 	.word	0x00000400
 8001c40:	20000448 	.word	0x20000448
 8001c44:	20000780 	.word	0x20000780

08001c48 <SystemInit>:
  *         SystemCoreClock variable.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001c48:	b480      	push	{r7}
 8001c4a:	af00      	add	r7, sp, #0
    
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001c4c:	bf00      	nop
 8001c4e:	46bd      	mov	sp, r7
 8001c50:	bc80      	pop	{r7}
 8001c52:	4770      	bx	lr

08001c54 <Reset_Handler>:
  .type Reset_Handler, %function
Reset_Handler:


/* Call the clock system initialization function.*/
    bl  SystemInit
 8001c54:	f7ff fff8 	bl	8001c48 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001c58:	480b      	ldr	r0, [pc, #44]	@ (8001c88 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8001c5a:	490c      	ldr	r1, [pc, #48]	@ (8001c8c <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001c5c:	4a0c      	ldr	r2, [pc, #48]	@ (8001c90 <LoopFillZerobss+0x16>)
  movs r3, #0
 8001c5e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001c60:	e002      	b.n	8001c68 <LoopCopyDataInit>

08001c62 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001c62:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001c64:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001c66:	3304      	adds	r3, #4

08001c68 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001c68:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001c6a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001c6c:	d3f9      	bcc.n	8001c62 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001c6e:	4a09      	ldr	r2, [pc, #36]	@ (8001c94 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001c70:	4c09      	ldr	r4, [pc, #36]	@ (8001c98 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001c72:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001c74:	e001      	b.n	8001c7a <LoopFillZerobss>

08001c76 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001c76:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001c78:	3204      	adds	r2, #4

08001c7a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001c7a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001c7c:	d3fb      	bcc.n	8001c76 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001c7e:	f00a fde7 	bl	800c850 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001c82:	f7ff fb89 	bl	8001398 <main>
  bx lr
 8001c86:	4770      	bx	lr
  ldr r0, =_sdata
 8001c88:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001c8c:	2000038c 	.word	0x2000038c
  ldr r2, =_sidata
 8001c90:	0800e908 	.word	0x0800e908
  ldr r2, =_sbss
 8001c94:	2000038c 	.word	0x2000038c
  ldr r4, =_ebss
 8001c98:	20000780 	.word	0x20000780

08001c9c <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001c9c:	e7fe      	b.n	8001c9c <ADC1_IRQHandler>
	...

08001ca0 <HTS221_RegisterBusIO>:
  * @brief  Register Component Bus IO operations
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t HTS221_RegisterBusIO(HTS221_Object_t *pObj, HTS221_IO_t *pIO)
{
 8001ca0:	b580      	push	{r7, lr}
 8001ca2:	b084      	sub	sp, #16
 8001ca4:	af00      	add	r7, sp, #0
 8001ca6:	6078      	str	r0, [r7, #4]
 8001ca8:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if (pObj == NULL)
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	2b00      	cmp	r3, #0
 8001cae:	d103      	bne.n	8001cb8 <HTS221_RegisterBusIO+0x18>
  {
    ret = HTS221_ERROR;
 8001cb0:	f04f 33ff 	mov.w	r3, #4294967295
 8001cb4:	60fb      	str	r3, [r7, #12]
 8001cb6:	e034      	b.n	8001d22 <HTS221_RegisterBusIO+0x82>
  }
  else
  {
    pObj->IO.Init      = pIO->Init;
 8001cb8:	683b      	ldr	r3, [r7, #0]
 8001cba:	681a      	ldr	r2, [r3, #0]
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	601a      	str	r2, [r3, #0]
    pObj->IO.DeInit    = pIO->DeInit;
 8001cc0:	683b      	ldr	r3, [r7, #0]
 8001cc2:	685a      	ldr	r2, [r3, #4]
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	605a      	str	r2, [r3, #4]
    pObj->IO.BusType   = pIO->BusType;
 8001cc8:	683b      	ldr	r3, [r7, #0]
 8001cca:	689a      	ldr	r2, [r3, #8]
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	609a      	str	r2, [r3, #8]
    pObj->IO.Address   = pIO->Address;
 8001cd0:	683b      	ldr	r3, [r7, #0]
 8001cd2:	7b1a      	ldrb	r2, [r3, #12]
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	731a      	strb	r2, [r3, #12]
    pObj->IO.WriteReg  = pIO->WriteReg;
 8001cd8:	683b      	ldr	r3, [r7, #0]
 8001cda:	691a      	ldr	r2, [r3, #16]
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	611a      	str	r2, [r3, #16]
    pObj->IO.ReadReg   = pIO->ReadReg;
 8001ce0:	683b      	ldr	r3, [r7, #0]
 8001ce2:	695a      	ldr	r2, [r3, #20]
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	615a      	str	r2, [r3, #20]
    pObj->IO.GetTick   = pIO->GetTick;
 8001ce8:	683b      	ldr	r3, [r7, #0]
 8001cea:	699a      	ldr	r2, [r3, #24]
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	619a      	str	r2, [r3, #24]

    pObj->Ctx.read_reg  = ReadRegWrap;
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	4a0e      	ldr	r2, [pc, #56]	@ (8001d2c <HTS221_RegisterBusIO+0x8c>)
 8001cf4:	625a      	str	r2, [r3, #36]	@ 0x24
    pObj->Ctx.write_reg = WriteRegWrap;
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	4a0d      	ldr	r2, [pc, #52]	@ (8001d30 <HTS221_RegisterBusIO+0x90>)
 8001cfa:	621a      	str	r2, [r3, #32]
    pObj->Ctx.mdelay    = pIO->Delay;
 8001cfc:	683b      	ldr	r3, [r7, #0]
 8001cfe:	69da      	ldr	r2, [r3, #28]
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	629a      	str	r2, [r3, #40]	@ 0x28
    pObj->Ctx.handle   = pObj;
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	687a      	ldr	r2, [r7, #4]
 8001d08:	62da      	str	r2, [r3, #44]	@ 0x2c

    if (pObj->IO.Init != NULL)
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	d004      	beq.n	8001d1c <HTS221_RegisterBusIO+0x7c>
    {
      ret = pObj->IO.Init();
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	4798      	blx	r3
 8001d18:	60f8      	str	r0, [r7, #12]
 8001d1a:	e002      	b.n	8001d22 <HTS221_RegisterBusIO+0x82>
    }
    else
    {
      ret = HTS221_ERROR;
 8001d1c:	f04f 33ff 	mov.w	r3, #4294967295
 8001d20:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
 8001d22:	68fb      	ldr	r3, [r7, #12]
}
 8001d24:	4618      	mov	r0, r3
 8001d26:	3710      	adds	r7, #16
 8001d28:	46bd      	mov	sp, r7
 8001d2a:	bd80      	pop	{r7, pc}
 8001d2c:	08002369 	.word	0x08002369
 8001d30:	080023cb 	.word	0x080023cb

08001d34 <HTS221_Init>:
  * @brief  Initialize the HTS221 sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t HTS221_Init(HTS221_Object_t *pObj)
{
 8001d34:	b580      	push	{r7, lr}
 8001d36:	b082      	sub	sp, #8
 8001d38:	af00      	add	r7, sp, #0
 8001d3a:	6078      	str	r0, [r7, #4]
  if (pObj->is_initialized == 0U)
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	d108      	bne.n	8001d58 <HTS221_Init+0x24>
  {
    if (HTS221_Initialize(pObj) != HTS221_OK)
 8001d46:	6878      	ldr	r0, [r7, #4]
 8001d48:	f000 fa9e 	bl	8002288 <HTS221_Initialize>
 8001d4c:	4603      	mov	r3, r0
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	d002      	beq.n	8001d58 <HTS221_Init+0x24>
    {
      return HTS221_ERROR;
 8001d52:	f04f 33ff 	mov.w	r3, #4294967295
 8001d56:	e004      	b.n	8001d62 <HTS221_Init+0x2e>
    }
  }

  pObj->is_initialized = 1;
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	2201      	movs	r2, #1
 8001d5c:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  return HTS221_OK;
 8001d60:	2300      	movs	r3, #0
}
 8001d62:	4618      	mov	r0, r3
 8001d64:	3708      	adds	r7, #8
 8001d66:	46bd      	mov	sp, r7
 8001d68:	bd80      	pop	{r7, pc}

08001d6a <HTS221_DeInit>:
  * @brief  Deinitialize the HTS221 sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t HTS221_DeInit(HTS221_Object_t *pObj)
{
 8001d6a:	b580      	push	{r7, lr}
 8001d6c:	b082      	sub	sp, #8
 8001d6e:	af00      	add	r7, sp, #0
 8001d70:	6078      	str	r0, [r7, #4]
  if (pObj->is_initialized == 1U)
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8001d78:	2b01      	cmp	r3, #1
 8001d7a:	d111      	bne.n	8001da0 <HTS221_DeInit+0x36>
  {
    if (HTS221_HUM_Disable(pObj) != HTS221_OK)
 8001d7c:	6878      	ldr	r0, [r7, #4]
 8001d7e:	f000 f87e 	bl	8001e7e <HTS221_HUM_Disable>
 8001d82:	4603      	mov	r3, r0
 8001d84:	2b00      	cmp	r3, #0
 8001d86:	d002      	beq.n	8001d8e <HTS221_DeInit+0x24>
    {
      return HTS221_ERROR;
 8001d88:	f04f 33ff 	mov.w	r3, #4294967295
 8001d8c:	e00d      	b.n	8001daa <HTS221_DeInit+0x40>
    }

    if (HTS221_TEMP_Disable(pObj) != HTS221_OK)
 8001d8e:	6878      	ldr	r0, [r7, #4]
 8001d90:	f000 f95f 	bl	8002052 <HTS221_TEMP_Disable>
 8001d94:	4603      	mov	r3, r0
 8001d96:	2b00      	cmp	r3, #0
 8001d98:	d002      	beq.n	8001da0 <HTS221_DeInit+0x36>
    {
      return HTS221_ERROR;
 8001d9a:	f04f 33ff 	mov.w	r3, #4294967295
 8001d9e:	e004      	b.n	8001daa <HTS221_DeInit+0x40>
    }
  }

  pObj->is_initialized = 0;
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	2200      	movs	r2, #0
 8001da4:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  return HTS221_OK;
 8001da8:	2300      	movs	r3, #0
}
 8001daa:	4618      	mov	r0, r3
 8001dac:	3708      	adds	r7, #8
 8001dae:	46bd      	mov	sp, r7
 8001db0:	bd80      	pop	{r7, pc}

08001db2 <HTS221_ReadID>:
  * @param  pObj the device pObj
  * @param  Id the WHO_AM_I value
  * @retval 0 in case of success, an error code otherwise
  */
int32_t HTS221_ReadID(HTS221_Object_t *pObj, uint8_t *Id)
{
 8001db2:	b580      	push	{r7, lr}
 8001db4:	b082      	sub	sp, #8
 8001db6:	af00      	add	r7, sp, #0
 8001db8:	6078      	str	r0, [r7, #4]
 8001dba:	6039      	str	r1, [r7, #0]
  if (hts221_device_id_get(&(pObj->Ctx), Id) != HTS221_OK)
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	3320      	adds	r3, #32
 8001dc0:	6839      	ldr	r1, [r7, #0]
 8001dc2:	4618      	mov	r0, r3
 8001dc4:	f000 fc2a 	bl	800261c <hts221_device_id_get>
 8001dc8:	4603      	mov	r3, r0
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	d002      	beq.n	8001dd4 <HTS221_ReadID+0x22>
  {
    return HTS221_ERROR;
 8001dce:	f04f 33ff 	mov.w	r3, #4294967295
 8001dd2:	e000      	b.n	8001dd6 <HTS221_ReadID+0x24>
  }

  return HTS221_OK;
 8001dd4:	2300      	movs	r3, #0
}
 8001dd6:	4618      	mov	r0, r3
 8001dd8:	3708      	adds	r7, #8
 8001dda:	46bd      	mov	sp, r7
 8001ddc:	bd80      	pop	{r7, pc}
	...

08001de0 <HTS221_GetCapabilities>:
  * @param  pObj Component object pointer
  * @param  Capabilities pointer to HTS221 sensor capabilities
  * @retval 0 in case of success, an error code otherwise
  */
int32_t HTS221_GetCapabilities(HTS221_Object_t *pObj, HTS221_Capabilities_t *Capabilities)
{
 8001de0:	b480      	push	{r7}
 8001de2:	b083      	sub	sp, #12
 8001de4:	af00      	add	r7, sp, #0
 8001de6:	6078      	str	r0, [r7, #4]
 8001de8:	6039      	str	r1, [r7, #0]
  /* Prevent unused argument(s) compilation warning */
  (void)(pObj);

  Capabilities->Humidity    = 1;
 8001dea:	683b      	ldr	r3, [r7, #0]
 8001dec:	2201      	movs	r2, #1
 8001dee:	709a      	strb	r2, [r3, #2]
  Capabilities->Pressure    = 0;
 8001df0:	683b      	ldr	r3, [r7, #0]
 8001df2:	2200      	movs	r2, #0
 8001df4:	705a      	strb	r2, [r3, #1]
  Capabilities->Temperature = 1;
 8001df6:	683b      	ldr	r3, [r7, #0]
 8001df8:	2201      	movs	r2, #1
 8001dfa:	701a      	strb	r2, [r3, #0]
  Capabilities->Gas         = 0;
 8001dfc:	683b      	ldr	r3, [r7, #0]
 8001dfe:	2200      	movs	r2, #0
 8001e00:	70da      	strb	r2, [r3, #3]
  Capabilities->LowPower    = 0;
 8001e02:	683b      	ldr	r3, [r7, #0]
 8001e04:	2200      	movs	r2, #0
 8001e06:	711a      	strb	r2, [r3, #4]
  Capabilities->HumMaxOdr   = 12.5f;
 8001e08:	683b      	ldr	r3, [r7, #0]
 8001e0a:	4a09      	ldr	r2, [pc, #36]	@ (8001e30 <HTS221_GetCapabilities+0x50>)
 8001e0c:	609a      	str	r2, [r3, #8]
  Capabilities->TempMaxOdr  = 12.5f;
 8001e0e:	683b      	ldr	r3, [r7, #0]
 8001e10:	4a07      	ldr	r2, [pc, #28]	@ (8001e30 <HTS221_GetCapabilities+0x50>)
 8001e12:	60da      	str	r2, [r3, #12]
  Capabilities->PressMaxOdr = 0.0f;
 8001e14:	683b      	ldr	r3, [r7, #0]
 8001e16:	f04f 0200 	mov.w	r2, #0
 8001e1a:	611a      	str	r2, [r3, #16]
  Capabilities->GasMaxOdr   = 0.0f;
 8001e1c:	683b      	ldr	r3, [r7, #0]
 8001e1e:	f04f 0200 	mov.w	r2, #0
 8001e22:	615a      	str	r2, [r3, #20]
  return HTS221_OK;
 8001e24:	2300      	movs	r3, #0
}
 8001e26:	4618      	mov	r0, r3
 8001e28:	370c      	adds	r7, #12
 8001e2a:	46bd      	mov	sp, r7
 8001e2c:	bc80      	pop	{r7}
 8001e2e:	4770      	bx	lr
 8001e30:	41480000 	.word	0x41480000

08001e34 <HTS221_HUM_Enable>:
  * @brief  Enable the HTS221 humidity sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t HTS221_HUM_Enable(HTS221_Object_t *pObj)
{
 8001e34:	b580      	push	{r7, lr}
 8001e36:	b082      	sub	sp, #8
 8001e38:	af00      	add	r7, sp, #0
 8001e3a:	6078      	str	r0, [r7, #4]
  /* Check if the component is already enabled */
  if (pObj->hum_is_enabled == 1U)
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8001e42:	2b01      	cmp	r3, #1
 8001e44:	d101      	bne.n	8001e4a <HTS221_HUM_Enable+0x16>
  {
    return HTS221_OK;
 8001e46:	2300      	movs	r3, #0
 8001e48:	e015      	b.n	8001e76 <HTS221_HUM_Enable+0x42>
  }

  /* Check if the HTS221 temperature sensor is already enabled. */
  /* If yes, skip the enable function, if not call enable function */
  if (pObj->temp_is_enabled == 0U)
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 8001e50:	2b00      	cmp	r3, #0
 8001e52:	d10b      	bne.n	8001e6c <HTS221_HUM_Enable+0x38>
  {
    /* Power on the component. */
    if (hts221_power_on_set(&(pObj->Ctx), PROPERTY_ENABLE) != HTS221_OK)
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	3320      	adds	r3, #32
 8001e58:	2101      	movs	r1, #1
 8001e5a:	4618      	mov	r0, r3
 8001e5c:	f000 fbef 	bl	800263e <hts221_power_on_set>
 8001e60:	4603      	mov	r3, r0
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	d002      	beq.n	8001e6c <HTS221_HUM_Enable+0x38>
    {
      return HTS221_ERROR;
 8001e66:	f04f 33ff 	mov.w	r3, #4294967295
 8001e6a:	e004      	b.n	8001e76 <HTS221_HUM_Enable+0x42>
    }
  }

  pObj->hum_is_enabled = 1;
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	2201      	movs	r2, #1
 8001e70:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31

  return HTS221_OK;
 8001e74:	2300      	movs	r3, #0
}
 8001e76:	4618      	mov	r0, r3
 8001e78:	3708      	adds	r7, #8
 8001e7a:	46bd      	mov	sp, r7
 8001e7c:	bd80      	pop	{r7, pc}

08001e7e <HTS221_HUM_Disable>:
  * @brief  Disable the HTS221 humidity sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t HTS221_HUM_Disable(HTS221_Object_t *pObj)
{
 8001e7e:	b580      	push	{r7, lr}
 8001e80:	b082      	sub	sp, #8
 8001e82:	af00      	add	r7, sp, #0
 8001e84:	6078      	str	r0, [r7, #4]
  /* Check if the component is already disabled */
  if (pObj->hum_is_enabled == 0U)
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8001e8c:	2b00      	cmp	r3, #0
 8001e8e:	d101      	bne.n	8001e94 <HTS221_HUM_Disable+0x16>
  {
    return HTS221_OK;
 8001e90:	2300      	movs	r3, #0
 8001e92:	e015      	b.n	8001ec0 <HTS221_HUM_Disable+0x42>
  }

  /* Check if the HTS221 temperature sensor is still enable. */
  /* If yes, skip the disable function, if not call disable function */
  if (pObj->temp_is_enabled == 0U)
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	d10b      	bne.n	8001eb6 <HTS221_HUM_Disable+0x38>
  {
    /* Power off the component. */
    if (hts221_power_on_set(&(pObj->Ctx), PROPERTY_DISABLE) != HTS221_OK)
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	3320      	adds	r3, #32
 8001ea2:	2100      	movs	r1, #0
 8001ea4:	4618      	mov	r0, r3
 8001ea6:	f000 fbca 	bl	800263e <hts221_power_on_set>
 8001eaa:	4603      	mov	r3, r0
 8001eac:	2b00      	cmp	r3, #0
 8001eae:	d002      	beq.n	8001eb6 <HTS221_HUM_Disable+0x38>
    {
      return HTS221_ERROR;
 8001eb0:	f04f 33ff 	mov.w	r3, #4294967295
 8001eb4:	e004      	b.n	8001ec0 <HTS221_HUM_Disable+0x42>
    }
  }

  pObj->hum_is_enabled = 0;
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	2200      	movs	r2, #0
 8001eba:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31

  return HTS221_OK;
 8001ebe:	2300      	movs	r3, #0
}
 8001ec0:	4618      	mov	r0, r3
 8001ec2:	3708      	adds	r7, #8
 8001ec4:	46bd      	mov	sp, r7
 8001ec6:	bd80      	pop	{r7, pc}

08001ec8 <HTS221_HUM_GetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr pointer where the output data rate is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t HTS221_HUM_GetOutputDataRate(HTS221_Object_t *pObj, float *Odr)
{
 8001ec8:	b580      	push	{r7, lr}
 8001eca:	b082      	sub	sp, #8
 8001ecc:	af00      	add	r7, sp, #0
 8001ece:	6078      	str	r0, [r7, #4]
 8001ed0:	6039      	str	r1, [r7, #0]
  return HTS221_GetOutputDataRate(pObj, Odr);
 8001ed2:	6839      	ldr	r1, [r7, #0]
 8001ed4:	6878      	ldr	r0, [r7, #4]
 8001ed6:	f000 f965 	bl	80021a4 <HTS221_GetOutputDataRate>
 8001eda:	4603      	mov	r3, r0
}
 8001edc:	4618      	mov	r0, r3
 8001ede:	3708      	adds	r7, #8
 8001ee0:	46bd      	mov	sp, r7
 8001ee2:	bd80      	pop	{r7, pc}

08001ee4 <HTS221_HUM_SetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr the output data rate value to be set
  * @retval 0 in case of success, an error code otherwise
  */
int32_t HTS221_HUM_SetOutputDataRate(HTS221_Object_t *pObj, float Odr)
{
 8001ee4:	b580      	push	{r7, lr}
 8001ee6:	b082      	sub	sp, #8
 8001ee8:	af00      	add	r7, sp, #0
 8001eea:	6078      	str	r0, [r7, #4]
 8001eec:	6039      	str	r1, [r7, #0]
  return HTS221_SetOutputDataRate(pObj, Odr);
 8001eee:	6839      	ldr	r1, [r7, #0]
 8001ef0:	6878      	ldr	r0, [r7, #4]
 8001ef2:	f000 f99b 	bl	800222c <HTS221_SetOutputDataRate>
 8001ef6:	4603      	mov	r3, r0
}
 8001ef8:	4618      	mov	r0, r3
 8001efa:	3708      	adds	r7, #8
 8001efc:	46bd      	mov	sp, r7
 8001efe:	bd80      	pop	{r7, pc}

08001f00 <HTS221_HUM_GetHumidity>:
  * @param  pObj the device pObj
  * @param  Value pointer where the humidity value is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t HTS221_HUM_GetHumidity(HTS221_Object_t *pObj, float *Value)
{
 8001f00:	b580      	push	{r7, lr}
 8001f02:	b088      	sub	sp, #32
 8001f04:	af00      	add	r7, sp, #0
 8001f06:	6078      	str	r0, [r7, #4]
 8001f08:	6039      	str	r1, [r7, #0]
  hts221_axis1bit16_t data_raw_humidity;
  lin_t lin_hum;

  if (hts221_hum_adc_point_0_get(&(pObj->Ctx), &lin_hum.x0) != HTS221_OK)
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	3320      	adds	r3, #32
 8001f0e:	f107 020c 	add.w	r2, r7, #12
 8001f12:	4611      	mov	r1, r2
 8001f14:	4618      	mov	r0, r3
 8001f16:	f000 fc5e 	bl	80027d6 <hts221_hum_adc_point_0_get>
 8001f1a:	4603      	mov	r3, r0
 8001f1c:	2b00      	cmp	r3, #0
 8001f1e:	d002      	beq.n	8001f26 <HTS221_HUM_GetHumidity+0x26>
  {
    return HTS221_ERROR;
 8001f20:	f04f 33ff 	mov.w	r3, #4294967295
 8001f24:	e069      	b.n	8001ffa <HTS221_HUM_GetHumidity+0xfa>
  }

  if (hts221_hum_rh_point_0_get(&(pObj->Ctx), &lin_hum.y0) != HTS221_OK)
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	f103 0220 	add.w	r2, r3, #32
 8001f2c:	f107 030c 	add.w	r3, r7, #12
 8001f30:	3304      	adds	r3, #4
 8001f32:	4619      	mov	r1, r3
 8001f34:	4610      	mov	r0, r2
 8001f36:	f000 fba8 	bl	800268a <hts221_hum_rh_point_0_get>
 8001f3a:	4603      	mov	r3, r0
 8001f3c:	2b00      	cmp	r3, #0
 8001f3e:	d002      	beq.n	8001f46 <HTS221_HUM_GetHumidity+0x46>
  {
    return HTS221_ERROR;
 8001f40:	f04f 33ff 	mov.w	r3, #4294967295
 8001f44:	e059      	b.n	8001ffa <HTS221_HUM_GetHumidity+0xfa>
  }

  if (hts221_hum_adc_point_1_get(&(pObj->Ctx), &lin_hum.x1) != HTS221_OK)
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	f103 0220 	add.w	r2, r3, #32
 8001f4c:	f107 030c 	add.w	r3, r7, #12
 8001f50:	3308      	adds	r3, #8
 8001f52:	4619      	mov	r1, r3
 8001f54:	4610      	mov	r0, r2
 8001f56:	f000 fc5f 	bl	8002818 <hts221_hum_adc_point_1_get>
 8001f5a:	4603      	mov	r3, r0
 8001f5c:	2b00      	cmp	r3, #0
 8001f5e:	d002      	beq.n	8001f66 <HTS221_HUM_GetHumidity+0x66>
  {
    return HTS221_ERROR;
 8001f60:	f04f 33ff 	mov.w	r3, #4294967295
 8001f64:	e049      	b.n	8001ffa <HTS221_HUM_GetHumidity+0xfa>
  }

  if (hts221_hum_rh_point_1_get(&(pObj->Ctx), &lin_hum.y1) != HTS221_OK)
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	f103 0220 	add.w	r2, r3, #32
 8001f6c:	f107 030c 	add.w	r3, r7, #12
 8001f70:	330c      	adds	r3, #12
 8001f72:	4619      	mov	r1, r3
 8001f74:	4610      	mov	r0, r2
 8001f76:	f000 fba8 	bl	80026ca <hts221_hum_rh_point_1_get>
 8001f7a:	4603      	mov	r3, r0
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	d002      	beq.n	8001f86 <HTS221_HUM_GetHumidity+0x86>
  {
    return HTS221_ERROR;
 8001f80:	f04f 33ff 	mov.w	r3, #4294967295
 8001f84:	e039      	b.n	8001ffa <HTS221_HUM_GetHumidity+0xfa>
  }

  (void)memset(&data_raw_humidity.i16bit, 0x00, sizeof(int16_t));
 8001f86:	2300      	movs	r3, #0
 8001f88:	83bb      	strh	r3, [r7, #28]
  if (hts221_humidity_raw_get(&(pObj->Ctx), &data_raw_humidity.i16bit) != HTS221_OK)
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	3320      	adds	r3, #32
 8001f8e:	f107 021c 	add.w	r2, r7, #28
 8001f92:	4611      	mov	r1, r2
 8001f94:	4618      	mov	r0, r3
 8001f96:	f000 fafd 	bl	8002594 <hts221_humidity_raw_get>
 8001f9a:	4603      	mov	r3, r0
 8001f9c:	2b00      	cmp	r3, #0
 8001f9e:	d002      	beq.n	8001fa6 <HTS221_HUM_GetHumidity+0xa6>
  {
    return HTS221_ERROR;
 8001fa0:	f04f 33ff 	mov.w	r3, #4294967295
 8001fa4:	e029      	b.n	8001ffa <HTS221_HUM_GetHumidity+0xfa>
  }

  *Value = Linear_Interpolation(&lin_hum, (float)data_raw_humidity.i16bit);
 8001fa6:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8001faa:	4618      	mov	r0, r3
 8001fac:	f7fe fe3e 	bl	8000c2c <__aeabi_i2f>
 8001fb0:	4602      	mov	r2, r0
 8001fb2:	f107 030c 	add.w	r3, r7, #12
 8001fb6:	4611      	mov	r1, r2
 8001fb8:	4618      	mov	r0, r3
 8001fba:	f000 f991 	bl	80022e0 <Linear_Interpolation>
 8001fbe:	4602      	mov	r2, r0
 8001fc0:	683b      	ldr	r3, [r7, #0]
 8001fc2:	601a      	str	r2, [r3, #0]

  if (*Value < 0.0f)
 8001fc4:	683b      	ldr	r3, [r7, #0]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	f04f 0100 	mov.w	r1, #0
 8001fcc:	4618      	mov	r0, r3
 8001fce:	f7ff f81f 	bl	8001010 <__aeabi_fcmplt>
 8001fd2:	4603      	mov	r3, r0
 8001fd4:	2b00      	cmp	r3, #0
 8001fd6:	d003      	beq.n	8001fe0 <HTS221_HUM_GetHumidity+0xe0>
  {
    *Value = 0.0f;
 8001fd8:	683b      	ldr	r3, [r7, #0]
 8001fda:	f04f 0200 	mov.w	r2, #0
 8001fde:	601a      	str	r2, [r3, #0]
  }

  if (*Value > 100.0f)
 8001fe0:	683b      	ldr	r3, [r7, #0]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	4907      	ldr	r1, [pc, #28]	@ (8002004 <HTS221_HUM_GetHumidity+0x104>)
 8001fe6:	4618      	mov	r0, r3
 8001fe8:	f7ff f830 	bl	800104c <__aeabi_fcmpgt>
 8001fec:	4603      	mov	r3, r0
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	d002      	beq.n	8001ff8 <HTS221_HUM_GetHumidity+0xf8>
  {
    *Value = 100.0f;
 8001ff2:	683b      	ldr	r3, [r7, #0]
 8001ff4:	4a03      	ldr	r2, [pc, #12]	@ (8002004 <HTS221_HUM_GetHumidity+0x104>)
 8001ff6:	601a      	str	r2, [r3, #0]
  }

  return HTS221_OK;
 8001ff8:	2300      	movs	r3, #0
}
 8001ffa:	4618      	mov	r0, r3
 8001ffc:	3720      	adds	r7, #32
 8001ffe:	46bd      	mov	sp, r7
 8002000:	bd80      	pop	{r7, pc}
 8002002:	bf00      	nop
 8002004:	42c80000 	.word	0x42c80000

08002008 <HTS221_TEMP_Enable>:
  * @brief  Enable the HTS221 temperature sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t HTS221_TEMP_Enable(HTS221_Object_t *pObj)
{
 8002008:	b580      	push	{r7, lr}
 800200a:	b082      	sub	sp, #8
 800200c:	af00      	add	r7, sp, #0
 800200e:	6078      	str	r0, [r7, #4]
  /* Check if the component is already enabled */
  if (pObj->temp_is_enabled == 1U)
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 8002016:	2b01      	cmp	r3, #1
 8002018:	d101      	bne.n	800201e <HTS221_TEMP_Enable+0x16>
  {
    return HTS221_OK;
 800201a:	2300      	movs	r3, #0
 800201c:	e015      	b.n	800204a <HTS221_TEMP_Enable+0x42>
  }

  /* Check if the HTS221 humidity sensor is already enabled. */
  /* If yes, skip the enable function, if not call enable function */
  if (pObj->hum_is_enabled == 0U)
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8002024:	2b00      	cmp	r3, #0
 8002026:	d10b      	bne.n	8002040 <HTS221_TEMP_Enable+0x38>
  {
    /* Power on the component. */
    if (hts221_power_on_set(&(pObj->Ctx), PROPERTY_ENABLE) != HTS221_OK)
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	3320      	adds	r3, #32
 800202c:	2101      	movs	r1, #1
 800202e:	4618      	mov	r0, r3
 8002030:	f000 fb05 	bl	800263e <hts221_power_on_set>
 8002034:	4603      	mov	r3, r0
 8002036:	2b00      	cmp	r3, #0
 8002038:	d002      	beq.n	8002040 <HTS221_TEMP_Enable+0x38>
    {
      return HTS221_ERROR;
 800203a:	f04f 33ff 	mov.w	r3, #4294967295
 800203e:	e004      	b.n	800204a <HTS221_TEMP_Enable+0x42>
    }
  }

  pObj->temp_is_enabled = 1;
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	2201      	movs	r2, #1
 8002044:	f883 2032 	strb.w	r2, [r3, #50]	@ 0x32

  return HTS221_OK;
 8002048:	2300      	movs	r3, #0
}
 800204a:	4618      	mov	r0, r3
 800204c:	3708      	adds	r7, #8
 800204e:	46bd      	mov	sp, r7
 8002050:	bd80      	pop	{r7, pc}

08002052 <HTS221_TEMP_Disable>:
  * @brief  Disable the HTS221 temperature sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t HTS221_TEMP_Disable(HTS221_Object_t *pObj)
{
 8002052:	b580      	push	{r7, lr}
 8002054:	b082      	sub	sp, #8
 8002056:	af00      	add	r7, sp, #0
 8002058:	6078      	str	r0, [r7, #4]
  /* Check if the component is already disabled */
  if (pObj->temp_is_enabled == 0U)
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 8002060:	2b00      	cmp	r3, #0
 8002062:	d101      	bne.n	8002068 <HTS221_TEMP_Disable+0x16>
  {
    return HTS221_OK;
 8002064:	2300      	movs	r3, #0
 8002066:	e015      	b.n	8002094 <HTS221_TEMP_Disable+0x42>
  }

  /* Check if the HTS221 humidity sensor is still enable. */
  /* If yes, skip the disable function, if not call disable function */
  if (pObj->hum_is_enabled == 0U)
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 800206e:	2b00      	cmp	r3, #0
 8002070:	d10b      	bne.n	800208a <HTS221_TEMP_Disable+0x38>
  {
    /* Power off the component. */
    if (hts221_power_on_set(&(pObj->Ctx), PROPERTY_DISABLE) != HTS221_OK)
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	3320      	adds	r3, #32
 8002076:	2100      	movs	r1, #0
 8002078:	4618      	mov	r0, r3
 800207a:	f000 fae0 	bl	800263e <hts221_power_on_set>
 800207e:	4603      	mov	r3, r0
 8002080:	2b00      	cmp	r3, #0
 8002082:	d002      	beq.n	800208a <HTS221_TEMP_Disable+0x38>
    {
      return HTS221_ERROR;
 8002084:	f04f 33ff 	mov.w	r3, #4294967295
 8002088:	e004      	b.n	8002094 <HTS221_TEMP_Disable+0x42>
    }
  }

  pObj->temp_is_enabled = 0;
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	2200      	movs	r2, #0
 800208e:	f883 2032 	strb.w	r2, [r3, #50]	@ 0x32

  return HTS221_OK;
 8002092:	2300      	movs	r3, #0
}
 8002094:	4618      	mov	r0, r3
 8002096:	3708      	adds	r7, #8
 8002098:	46bd      	mov	sp, r7
 800209a:	bd80      	pop	{r7, pc}

0800209c <HTS221_TEMP_GetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr pointer where the output data rate is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t HTS221_TEMP_GetOutputDataRate(HTS221_Object_t *pObj, float *Odr)
{
 800209c:	b580      	push	{r7, lr}
 800209e:	b082      	sub	sp, #8
 80020a0:	af00      	add	r7, sp, #0
 80020a2:	6078      	str	r0, [r7, #4]
 80020a4:	6039      	str	r1, [r7, #0]
  return HTS221_GetOutputDataRate(pObj, Odr);
 80020a6:	6839      	ldr	r1, [r7, #0]
 80020a8:	6878      	ldr	r0, [r7, #4]
 80020aa:	f000 f87b 	bl	80021a4 <HTS221_GetOutputDataRate>
 80020ae:	4603      	mov	r3, r0
}
 80020b0:	4618      	mov	r0, r3
 80020b2:	3708      	adds	r7, #8
 80020b4:	46bd      	mov	sp, r7
 80020b6:	bd80      	pop	{r7, pc}

080020b8 <HTS221_TEMP_SetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr the output data rate value to be set
  * @retval 0 in case of success, an error code otherwise
  */
int32_t HTS221_TEMP_SetOutputDataRate(HTS221_Object_t *pObj, float Odr)
{
 80020b8:	b580      	push	{r7, lr}
 80020ba:	b082      	sub	sp, #8
 80020bc:	af00      	add	r7, sp, #0
 80020be:	6078      	str	r0, [r7, #4]
 80020c0:	6039      	str	r1, [r7, #0]
  return HTS221_SetOutputDataRate(pObj, Odr);
 80020c2:	6839      	ldr	r1, [r7, #0]
 80020c4:	6878      	ldr	r0, [r7, #4]
 80020c6:	f000 f8b1 	bl	800222c <HTS221_SetOutputDataRate>
 80020ca:	4603      	mov	r3, r0
}
 80020cc:	4618      	mov	r0, r3
 80020ce:	3708      	adds	r7, #8
 80020d0:	46bd      	mov	sp, r7
 80020d2:	bd80      	pop	{r7, pc}

080020d4 <HTS221_TEMP_GetTemperature>:
  * @param  pObj the device pObj
  * @param  Value pointer where the temperature value is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t HTS221_TEMP_GetTemperature(HTS221_Object_t *pObj, float *Value)
{
 80020d4:	b580      	push	{r7, lr}
 80020d6:	b088      	sub	sp, #32
 80020d8:	af00      	add	r7, sp, #0
 80020da:	6078      	str	r0, [r7, #4]
 80020dc:	6039      	str	r1, [r7, #0]
  hts221_axis1bit16_t data_raw_temperature;
  lin_t lin_temp;

  if (hts221_temp_adc_point_0_get(&(pObj->Ctx), &lin_temp.x0) != HTS221_OK)
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	3320      	adds	r3, #32
 80020e2:	f107 020c 	add.w	r2, r7, #12
 80020e6:	4611      	mov	r1, r2
 80020e8:	4618      	mov	r0, r3
 80020ea:	f000 fbb6 	bl	800285a <hts221_temp_adc_point_0_get>
 80020ee:	4603      	mov	r3, r0
 80020f0:	2b00      	cmp	r3, #0
 80020f2:	d002      	beq.n	80020fa <HTS221_TEMP_GetTemperature+0x26>
  {
    return HTS221_ERROR;
 80020f4:	f04f 33ff 	mov.w	r3, #4294967295
 80020f8:	e04f      	b.n	800219a <HTS221_TEMP_GetTemperature+0xc6>
  }

  if (hts221_temp_deg_point_0_get(&(pObj->Ctx), &lin_temp.y0) != HTS221_OK)
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	f103 0220 	add.w	r2, r3, #32
 8002100:	f107 030c 	add.w	r3, r7, #12
 8002104:	3304      	adds	r3, #4
 8002106:	4619      	mov	r1, r3
 8002108:	4610      	mov	r0, r2
 800210a:	f000 fafe 	bl	800270a <hts221_temp_deg_point_0_get>
 800210e:	4603      	mov	r3, r0
 8002110:	2b00      	cmp	r3, #0
 8002112:	d002      	beq.n	800211a <HTS221_TEMP_GetTemperature+0x46>
  {
    return HTS221_ERROR;
 8002114:	f04f 33ff 	mov.w	r3, #4294967295
 8002118:	e03f      	b.n	800219a <HTS221_TEMP_GetTemperature+0xc6>
  }

  if (hts221_temp_adc_point_1_get(&(pObj->Ctx), &lin_temp.x1) != HTS221_OK)
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	f103 0220 	add.w	r2, r3, #32
 8002120:	f107 030c 	add.w	r3, r7, #12
 8002124:	3308      	adds	r3, #8
 8002126:	4619      	mov	r1, r3
 8002128:	4610      	mov	r0, r2
 800212a:	f000 fbb7 	bl	800289c <hts221_temp_adc_point_1_get>
 800212e:	4603      	mov	r3, r0
 8002130:	2b00      	cmp	r3, #0
 8002132:	d002      	beq.n	800213a <HTS221_TEMP_GetTemperature+0x66>
  {
    return HTS221_ERROR;
 8002134:	f04f 33ff 	mov.w	r3, #4294967295
 8002138:	e02f      	b.n	800219a <HTS221_TEMP_GetTemperature+0xc6>
  }

  if (hts221_temp_deg_point_1_get(&(pObj->Ctx), &lin_temp.y1) != HTS221_OK)
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	f103 0220 	add.w	r2, r3, #32
 8002140:	f107 030c 	add.w	r3, r7, #12
 8002144:	330c      	adds	r3, #12
 8002146:	4619      	mov	r1, r3
 8002148:	4610      	mov	r0, r2
 800214a:	f000 fb11 	bl	8002770 <hts221_temp_deg_point_1_get>
 800214e:	4603      	mov	r3, r0
 8002150:	2b00      	cmp	r3, #0
 8002152:	d002      	beq.n	800215a <HTS221_TEMP_GetTemperature+0x86>
  {
    return HTS221_ERROR;
 8002154:	f04f 33ff 	mov.w	r3, #4294967295
 8002158:	e01f      	b.n	800219a <HTS221_TEMP_GetTemperature+0xc6>
  }

  (void)memset(&data_raw_temperature.i16bit, 0x00, sizeof(int16_t));
 800215a:	2300      	movs	r3, #0
 800215c:	83bb      	strh	r3, [r7, #28]
  if (hts221_temperature_raw_get(&(pObj->Ctx), &data_raw_temperature.i16bit) != HTS221_OK)
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	3320      	adds	r3, #32
 8002162:	f107 021c 	add.w	r2, r7, #28
 8002166:	4611      	mov	r1, r2
 8002168:	4618      	mov	r0, r3
 800216a:	f000 fa35 	bl	80025d8 <hts221_temperature_raw_get>
 800216e:	4603      	mov	r3, r0
 8002170:	2b00      	cmp	r3, #0
 8002172:	d002      	beq.n	800217a <HTS221_TEMP_GetTemperature+0xa6>
  {
    return HTS221_ERROR;
 8002174:	f04f 33ff 	mov.w	r3, #4294967295
 8002178:	e00f      	b.n	800219a <HTS221_TEMP_GetTemperature+0xc6>
  }

  *Value = Linear_Interpolation(&lin_temp, (float)data_raw_temperature.i16bit);
 800217a:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 800217e:	4618      	mov	r0, r3
 8002180:	f7fe fd54 	bl	8000c2c <__aeabi_i2f>
 8002184:	4602      	mov	r2, r0
 8002186:	f107 030c 	add.w	r3, r7, #12
 800218a:	4611      	mov	r1, r2
 800218c:	4618      	mov	r0, r3
 800218e:	f000 f8a7 	bl	80022e0 <Linear_Interpolation>
 8002192:	4602      	mov	r2, r0
 8002194:	683b      	ldr	r3, [r7, #0]
 8002196:	601a      	str	r2, [r3, #0]

  return HTS221_OK;
 8002198:	2300      	movs	r3, #0
}
 800219a:	4618      	mov	r0, r3
 800219c:	3720      	adds	r7, #32
 800219e:	46bd      	mov	sp, r7
 80021a0:	bd80      	pop	{r7, pc}
	...

080021a4 <HTS221_GetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr the output data rate value
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t HTS221_GetOutputDataRate(HTS221_Object_t *pObj, float *Odr)
{
 80021a4:	b580      	push	{r7, lr}
 80021a6:	b084      	sub	sp, #16
 80021a8:	af00      	add	r7, sp, #0
 80021aa:	6078      	str	r0, [r7, #4]
 80021ac:	6039      	str	r1, [r7, #0]
  int32_t ret = HTS221_OK;
 80021ae:	2300      	movs	r3, #0
 80021b0:	60fb      	str	r3, [r7, #12]
  hts221_odr_t odr_low_level;

  if (hts221_data_rate_get(&(pObj->Ctx), &odr_low_level) != HTS221_OK)
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	3320      	adds	r3, #32
 80021b6:	f107 020b 	add.w	r2, r7, #11
 80021ba:	4611      	mov	r1, r2
 80021bc:	4618      	mov	r0, r3
 80021be:	f000 f98b 	bl	80024d8 <hts221_data_rate_get>
 80021c2:	4603      	mov	r3, r0
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	d002      	beq.n	80021ce <HTS221_GetOutputDataRate+0x2a>
  {
    return HTS221_ERROR;
 80021c8:	f04f 33ff 	mov.w	r3, #4294967295
 80021cc:	e025      	b.n	800221a <HTS221_GetOutputDataRate+0x76>
  }

  switch (odr_low_level)
 80021ce:	7afb      	ldrb	r3, [r7, #11]
 80021d0:	2b03      	cmp	r3, #3
 80021d2:	d81d      	bhi.n	8002210 <HTS221_GetOutputDataRate+0x6c>
 80021d4:	a201      	add	r2, pc, #4	@ (adr r2, 80021dc <HTS221_GetOutputDataRate+0x38>)
 80021d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80021da:	bf00      	nop
 80021dc:	080021ed 	.word	0x080021ed
 80021e0:	080021f7 	.word	0x080021f7
 80021e4:	08002201 	.word	0x08002201
 80021e8:	08002209 	.word	0x08002209
  {
    case HTS221_ONE_SHOT:
      *Odr = 0.0f;
 80021ec:	683b      	ldr	r3, [r7, #0]
 80021ee:	f04f 0200 	mov.w	r2, #0
 80021f2:	601a      	str	r2, [r3, #0]
      break;
 80021f4:	e010      	b.n	8002218 <HTS221_GetOutputDataRate+0x74>

    case HTS221_ODR_1Hz:
      *Odr = 1.0f;
 80021f6:	683b      	ldr	r3, [r7, #0]
 80021f8:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 80021fc:	601a      	str	r2, [r3, #0]
      break;
 80021fe:	e00b      	b.n	8002218 <HTS221_GetOutputDataRate+0x74>

    case HTS221_ODR_7Hz:
      *Odr = 7.0f;
 8002200:	683b      	ldr	r3, [r7, #0]
 8002202:	4a08      	ldr	r2, [pc, #32]	@ (8002224 <HTS221_GetOutputDataRate+0x80>)
 8002204:	601a      	str	r2, [r3, #0]
      break;
 8002206:	e007      	b.n	8002218 <HTS221_GetOutputDataRate+0x74>

    case HTS221_ODR_12Hz5:
      *Odr = 12.5f;
 8002208:	683b      	ldr	r3, [r7, #0]
 800220a:	4a07      	ldr	r2, [pc, #28]	@ (8002228 <HTS221_GetOutputDataRate+0x84>)
 800220c:	601a      	str	r2, [r3, #0]
      break;
 800220e:	e003      	b.n	8002218 <HTS221_GetOutputDataRate+0x74>

    default:
      ret = HTS221_ERROR;
 8002210:	f04f 33ff 	mov.w	r3, #4294967295
 8002214:	60fb      	str	r3, [r7, #12]
      break;
 8002216:	bf00      	nop
  }

  return ret;
 8002218:	68fb      	ldr	r3, [r7, #12]
}
 800221a:	4618      	mov	r0, r3
 800221c:	3710      	adds	r7, #16
 800221e:	46bd      	mov	sp, r7
 8002220:	bd80      	pop	{r7, pc}
 8002222:	bf00      	nop
 8002224:	40e00000 	.word	0x40e00000
 8002228:	41480000 	.word	0x41480000

0800222c <HTS221_SetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr the output data rate value to be set
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t HTS221_SetOutputDataRate(HTS221_Object_t *pObj, float Odr)
{
 800222c:	b580      	push	{r7, lr}
 800222e:	b084      	sub	sp, #16
 8002230:	af00      	add	r7, sp, #0
 8002232:	6078      	str	r0, [r7, #4]
 8002234:	6039      	str	r1, [r7, #0]
  hts221_odr_t new_odr;

  new_odr = (Odr <= 1.0f) ? HTS221_ODR_1Hz
            : (Odr <= 7.0f) ? HTS221_ODR_7Hz
 8002236:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 800223a:	6838      	ldr	r0, [r7, #0]
 800223c:	f7fe fef2 	bl	8001024 <__aeabi_fcmple>
 8002240:	4603      	mov	r3, r0
 8002242:	2b00      	cmp	r3, #0
 8002244:	d001      	beq.n	800224a <HTS221_SetOutputDataRate+0x1e>
 8002246:	2301      	movs	r3, #1
 8002248:	e009      	b.n	800225e <HTS221_SetOutputDataRate+0x32>
 800224a:	490e      	ldr	r1, [pc, #56]	@ (8002284 <HTS221_SetOutputDataRate+0x58>)
 800224c:	6838      	ldr	r0, [r7, #0]
 800224e:	f7fe fee9 	bl	8001024 <__aeabi_fcmple>
 8002252:	4603      	mov	r3, r0
 8002254:	2b00      	cmp	r3, #0
 8002256:	d001      	beq.n	800225c <HTS221_SetOutputDataRate+0x30>
 8002258:	2302      	movs	r3, #2
 800225a:	e000      	b.n	800225e <HTS221_SetOutputDataRate+0x32>
 800225c:	2303      	movs	r3, #3
  new_odr = (Odr <= 1.0f) ? HTS221_ODR_1Hz
 800225e:	73fb      	strb	r3, [r7, #15]
            :                 HTS221_ODR_12Hz5;

  if (hts221_data_rate_set(&(pObj->Ctx), new_odr) != HTS221_OK)
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	3320      	adds	r3, #32
 8002264:	7bfa      	ldrb	r2, [r7, #15]
 8002266:	4611      	mov	r1, r2
 8002268:	4618      	mov	r0, r3
 800226a:	f000 f90f 	bl	800248c <hts221_data_rate_set>
 800226e:	4603      	mov	r3, r0
 8002270:	2b00      	cmp	r3, #0
 8002272:	d002      	beq.n	800227a <HTS221_SetOutputDataRate+0x4e>
  {
    return HTS221_ERROR;
 8002274:	f04f 33ff 	mov.w	r3, #4294967295
 8002278:	e000      	b.n	800227c <HTS221_SetOutputDataRate+0x50>
  }

  return HTS221_OK;
 800227a:	2300      	movs	r3, #0
}
 800227c:	4618      	mov	r0, r3
 800227e:	3710      	adds	r7, #16
 8002280:	46bd      	mov	sp, r7
 8002282:	bd80      	pop	{r7, pc}
 8002284:	40e00000 	.word	0x40e00000

08002288 <HTS221_Initialize>:
  * @brief  Initialize the HTS221 sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t HTS221_Initialize(HTS221_Object_t *pObj)
{
 8002288:	b580      	push	{r7, lr}
 800228a:	b082      	sub	sp, #8
 800228c:	af00      	add	r7, sp, #0
 800228e:	6078      	str	r0, [r7, #4]
  /* Power off the component. */
  if (hts221_power_on_set(&(pObj->Ctx), PROPERTY_DISABLE) != HTS221_OK)
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	3320      	adds	r3, #32
 8002294:	2100      	movs	r1, #0
 8002296:	4618      	mov	r0, r3
 8002298:	f000 f9d1 	bl	800263e <hts221_power_on_set>
 800229c:	4603      	mov	r3, r0
 800229e:	2b00      	cmp	r3, #0
 80022a0:	d002      	beq.n	80022a8 <HTS221_Initialize+0x20>
  {
    return HTS221_ERROR;
 80022a2:	f04f 33ff 	mov.w	r3, #4294967295
 80022a6:	e017      	b.n	80022d8 <HTS221_Initialize+0x50>
  }

  /* Enable BDU */
  if (hts221_block_data_update_set(&(pObj->Ctx), PROPERTY_ENABLE) != HTS221_OK)
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	3320      	adds	r3, #32
 80022ac:	2101      	movs	r1, #1
 80022ae:	4618      	mov	r0, r3
 80022b0:	f000 f94a 	bl	8002548 <hts221_block_data_update_set>
 80022b4:	4603      	mov	r3, r0
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	d002      	beq.n	80022c0 <HTS221_Initialize+0x38>
  {
    return HTS221_ERROR;
 80022ba:	f04f 33ff 	mov.w	r3, #4294967295
 80022be:	e00b      	b.n	80022d8 <HTS221_Initialize+0x50>
  }

  /* Set default ODR */
  if (HTS221_SetOutputDataRate(pObj, 1.0f) != HTS221_OK)
 80022c0:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 80022c4:	6878      	ldr	r0, [r7, #4]
 80022c6:	f7ff ffb1 	bl	800222c <HTS221_SetOutputDataRate>
 80022ca:	4603      	mov	r3, r0
 80022cc:	2b00      	cmp	r3, #0
 80022ce:	d002      	beq.n	80022d6 <HTS221_Initialize+0x4e>
  {
    return HTS221_ERROR;
 80022d0:	f04f 33ff 	mov.w	r3, #4294967295
 80022d4:	e000      	b.n	80022d8 <HTS221_Initialize+0x50>
  }

  return HTS221_OK;
 80022d6:	2300      	movs	r3, #0
}
 80022d8:	4618      	mov	r0, r3
 80022da:	3708      	adds	r7, #8
 80022dc:	46bd      	mov	sp, r7
 80022de:	bd80      	pop	{r7, pc}

080022e0 <Linear_Interpolation>:
  * @param  Lin the line
  * @param  Coeff the coefficient
  * @retval Calculation result
  */
static float Linear_Interpolation(lin_t *Lin, float Coeff)
{
 80022e0:	b5b0      	push	{r4, r5, r7, lr}
 80022e2:	b082      	sub	sp, #8
 80022e4:	af00      	add	r7, sp, #0
 80022e6:	6078      	str	r0, [r7, #4]
 80022e8:	6039      	str	r1, [r7, #0]
  return (((Lin->y1 - Lin->y0) * Coeff) + ((Lin->x1 * Lin->y0) - (Lin->x0 * Lin->y1))) / (Lin->x1 - Lin->x0);
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	68da      	ldr	r2, [r3, #12]
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	685b      	ldr	r3, [r3, #4]
 80022f2:	4619      	mov	r1, r3
 80022f4:	4610      	mov	r0, r2
 80022f6:	f7fe fbe3 	bl	8000ac0 <__aeabi_fsub>
 80022fa:	4603      	mov	r3, r0
 80022fc:	6839      	ldr	r1, [r7, #0]
 80022fe:	4618      	mov	r0, r3
 8002300:	f7fe fce8 	bl	8000cd4 <__aeabi_fmul>
 8002304:	4603      	mov	r3, r0
 8002306:	461c      	mov	r4, r3
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	689a      	ldr	r2, [r3, #8]
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	685b      	ldr	r3, [r3, #4]
 8002310:	4619      	mov	r1, r3
 8002312:	4610      	mov	r0, r2
 8002314:	f7fe fcde 	bl	8000cd4 <__aeabi_fmul>
 8002318:	4603      	mov	r3, r0
 800231a:	461d      	mov	r5, r3
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	681a      	ldr	r2, [r3, #0]
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	68db      	ldr	r3, [r3, #12]
 8002324:	4619      	mov	r1, r3
 8002326:	4610      	mov	r0, r2
 8002328:	f7fe fcd4 	bl	8000cd4 <__aeabi_fmul>
 800232c:	4603      	mov	r3, r0
 800232e:	4619      	mov	r1, r3
 8002330:	4628      	mov	r0, r5
 8002332:	f7fe fbc5 	bl	8000ac0 <__aeabi_fsub>
 8002336:	4603      	mov	r3, r0
 8002338:	4619      	mov	r1, r3
 800233a:	4620      	mov	r0, r4
 800233c:	f7fe fbc2 	bl	8000ac4 <__addsf3>
 8002340:	4603      	mov	r3, r0
 8002342:	461c      	mov	r4, r3
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	689a      	ldr	r2, [r3, #8]
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	4619      	mov	r1, r3
 800234e:	4610      	mov	r0, r2
 8002350:	f7fe fbb6 	bl	8000ac0 <__aeabi_fsub>
 8002354:	4603      	mov	r3, r0
 8002356:	4619      	mov	r1, r3
 8002358:	4620      	mov	r0, r4
 800235a:	f7fe fd6f 	bl	8000e3c <__aeabi_fdiv>
 800235e:	4603      	mov	r3, r0
}
 8002360:	4618      	mov	r0, r3
 8002362:	3708      	adds	r7, #8
 8002364:	46bd      	mov	sp, r7
 8002366:	bdb0      	pop	{r4, r5, r7, pc}

08002368 <ReadRegWrap>:
  * @param  pData the stored data pointer
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t ReadRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 8002368:	b590      	push	{r4, r7, lr}
 800236a:	b087      	sub	sp, #28
 800236c:	af00      	add	r7, sp, #0
 800236e:	60f8      	str	r0, [r7, #12]
 8002370:	607a      	str	r2, [r7, #4]
 8002372:	461a      	mov	r2, r3
 8002374:	460b      	mov	r3, r1
 8002376:	72fb      	strb	r3, [r7, #11]
 8002378:	4613      	mov	r3, r2
 800237a:	813b      	strh	r3, [r7, #8]
  HTS221_Object_t *pObj = (HTS221_Object_t *)Handle;
 800237c:	68fb      	ldr	r3, [r7, #12]
 800237e:	617b      	str	r3, [r7, #20]

  if (pObj->IO.BusType == (uint32_t)HTS221_I2C_BUS) /* I2C */
 8002380:	697b      	ldr	r3, [r7, #20]
 8002382:	689b      	ldr	r3, [r3, #8]
 8002384:	2b00      	cmp	r3, #0
 8002386:	d10e      	bne.n	80023a6 <ReadRegWrap+0x3e>
  {
    /* Enable Multi-byte read */
    return pObj->IO.ReadReg(pObj->IO.Address, (Reg | 0x80U), pData, Length);
 8002388:	697b      	ldr	r3, [r7, #20]
 800238a:	695c      	ldr	r4, [r3, #20]
 800238c:	697b      	ldr	r3, [r7, #20]
 800238e:	7b1b      	ldrb	r3, [r3, #12]
 8002390:	4618      	mov	r0, r3
 8002392:	7afb      	ldrb	r3, [r7, #11]
 8002394:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8002398:	b2db      	uxtb	r3, r3
 800239a:	4619      	mov	r1, r3
 800239c:	893b      	ldrh	r3, [r7, #8]
 800239e:	687a      	ldr	r2, [r7, #4]
 80023a0:	47a0      	blx	r4
 80023a2:	4603      	mov	r3, r0
 80023a4:	e00d      	b.n	80023c2 <ReadRegWrap+0x5a>
  }
  else /* SPI 3-Wires */
  {
    /* Enable Multi-byte read */
    return pObj->IO.ReadReg(pObj->IO.Address, (Reg | 0x40U), pData, Length);
 80023a6:	697b      	ldr	r3, [r7, #20]
 80023a8:	695c      	ldr	r4, [r3, #20]
 80023aa:	697b      	ldr	r3, [r7, #20]
 80023ac:	7b1b      	ldrb	r3, [r3, #12]
 80023ae:	4618      	mov	r0, r3
 80023b0:	7afb      	ldrb	r3, [r7, #11]
 80023b2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80023b6:	b2db      	uxtb	r3, r3
 80023b8:	4619      	mov	r1, r3
 80023ba:	893b      	ldrh	r3, [r7, #8]
 80023bc:	687a      	ldr	r2, [r7, #4]
 80023be:	47a0      	blx	r4
 80023c0:	4603      	mov	r3, r0
  }
}
 80023c2:	4618      	mov	r0, r3
 80023c4:	371c      	adds	r7, #28
 80023c6:	46bd      	mov	sp, r7
 80023c8:	bd90      	pop	{r4, r7, pc}

080023ca <WriteRegWrap>:
  * @param  pData the stored data pointer
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t WriteRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 80023ca:	b590      	push	{r4, r7, lr}
 80023cc:	b087      	sub	sp, #28
 80023ce:	af00      	add	r7, sp, #0
 80023d0:	60f8      	str	r0, [r7, #12]
 80023d2:	607a      	str	r2, [r7, #4]
 80023d4:	461a      	mov	r2, r3
 80023d6:	460b      	mov	r3, r1
 80023d8:	72fb      	strb	r3, [r7, #11]
 80023da:	4613      	mov	r3, r2
 80023dc:	813b      	strh	r3, [r7, #8]
  HTS221_Object_t *pObj = (HTS221_Object_t *)Handle;
 80023de:	68fb      	ldr	r3, [r7, #12]
 80023e0:	617b      	str	r3, [r7, #20]

  if (pObj->IO.BusType == (uint32_t)HTS221_I2C_BUS) /* I2C */
 80023e2:	697b      	ldr	r3, [r7, #20]
 80023e4:	689b      	ldr	r3, [r3, #8]
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	d10e      	bne.n	8002408 <WriteRegWrap+0x3e>
  {
    /* Enable Multi-byte write */
    return pObj->IO.WriteReg(pObj->IO.Address, (Reg | 0x80U), pData, Length);
 80023ea:	697b      	ldr	r3, [r7, #20]
 80023ec:	691c      	ldr	r4, [r3, #16]
 80023ee:	697b      	ldr	r3, [r7, #20]
 80023f0:	7b1b      	ldrb	r3, [r3, #12]
 80023f2:	4618      	mov	r0, r3
 80023f4:	7afb      	ldrb	r3, [r7, #11]
 80023f6:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80023fa:	b2db      	uxtb	r3, r3
 80023fc:	4619      	mov	r1, r3
 80023fe:	893b      	ldrh	r3, [r7, #8]
 8002400:	687a      	ldr	r2, [r7, #4]
 8002402:	47a0      	blx	r4
 8002404:	4603      	mov	r3, r0
 8002406:	e00d      	b.n	8002424 <WriteRegWrap+0x5a>
  }
  else /* SPI 3-Wires */
  {
    /* Enable Multi-byte write */
    return pObj->IO.WriteReg(pObj->IO.Address, (Reg | 0x40U), pData, Length);
 8002408:	697b      	ldr	r3, [r7, #20]
 800240a:	691c      	ldr	r4, [r3, #16]
 800240c:	697b      	ldr	r3, [r7, #20]
 800240e:	7b1b      	ldrb	r3, [r3, #12]
 8002410:	4618      	mov	r0, r3
 8002412:	7afb      	ldrb	r3, [r7, #11]
 8002414:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002418:	b2db      	uxtb	r3, r3
 800241a:	4619      	mov	r1, r3
 800241c:	893b      	ldrh	r3, [r7, #8]
 800241e:	687a      	ldr	r2, [r7, #4]
 8002420:	47a0      	blx	r4
 8002422:	4603      	mov	r3, r0
  }
}
 8002424:	4618      	mov	r0, r3
 8002426:	371c      	adds	r7, #28
 8002428:	46bd      	mov	sp, r7
 800242a:	bd90      	pop	{r4, r7, pc}

0800242c <hts221_read_reg>:
  * @retval       interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t __weak hts221_read_reg(stmdev_ctx_t *ctx, uint8_t reg, uint8_t *data,
                               uint16_t len)
{
 800242c:	b590      	push	{r4, r7, lr}
 800242e:	b087      	sub	sp, #28
 8002430:	af00      	add	r7, sp, #0
 8002432:	60f8      	str	r0, [r7, #12]
 8002434:	607a      	str	r2, [r7, #4]
 8002436:	461a      	mov	r2, r3
 8002438:	460b      	mov	r3, r1
 800243a:	72fb      	strb	r3, [r7, #11]
 800243c:	4613      	mov	r3, r2
 800243e:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8002440:	68fb      	ldr	r3, [r7, #12]
 8002442:	685c      	ldr	r4, [r3, #4]
 8002444:	68fb      	ldr	r3, [r7, #12]
 8002446:	68d8      	ldr	r0, [r3, #12]
 8002448:	893b      	ldrh	r3, [r7, #8]
 800244a:	7af9      	ldrb	r1, [r7, #11]
 800244c:	687a      	ldr	r2, [r7, #4]
 800244e:	47a0      	blx	r4
 8002450:	6178      	str	r0, [r7, #20]

  return ret;
 8002452:	697b      	ldr	r3, [r7, #20]
}
 8002454:	4618      	mov	r0, r3
 8002456:	371c      	adds	r7, #28
 8002458:	46bd      	mov	sp, r7
 800245a:	bd90      	pop	{r4, r7, pc}

0800245c <hts221_write_reg>:
  *
  */
int32_t __weak hts221_write_reg(stmdev_ctx_t *ctx, uint8_t reg,
                                uint8_t *data,
                                uint16_t len)
{
 800245c:	b590      	push	{r4, r7, lr}
 800245e:	b087      	sub	sp, #28
 8002460:	af00      	add	r7, sp, #0
 8002462:	60f8      	str	r0, [r7, #12]
 8002464:	607a      	str	r2, [r7, #4]
 8002466:	461a      	mov	r2, r3
 8002468:	460b      	mov	r3, r1
 800246a:	72fb      	strb	r3, [r7, #11]
 800246c:	4613      	mov	r3, r2
 800246e:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8002470:	68fb      	ldr	r3, [r7, #12]
 8002472:	681c      	ldr	r4, [r3, #0]
 8002474:	68fb      	ldr	r3, [r7, #12]
 8002476:	68d8      	ldr	r0, [r3, #12]
 8002478:	893b      	ldrh	r3, [r7, #8]
 800247a:	7af9      	ldrb	r1, [r7, #11]
 800247c:	687a      	ldr	r2, [r7, #4]
 800247e:	47a0      	blx	r4
 8002480:	6178      	str	r0, [r7, #20]

  return ret;
 8002482:	697b      	ldr	r3, [r7, #20]
}
 8002484:	4618      	mov	r0, r3
 8002486:	371c      	adds	r7, #28
 8002488:	46bd      	mov	sp, r7
 800248a:	bd90      	pop	{r4, r7, pc}

0800248c <hts221_data_rate_set>:
  * @param  val     change the values of odr in reg CTRL_REG1
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_data_rate_set(stmdev_ctx_t *ctx, hts221_odr_t val)
{
 800248c:	b580      	push	{r7, lr}
 800248e:	b084      	sub	sp, #16
 8002490:	af00      	add	r7, sp, #0
 8002492:	6078      	str	r0, [r7, #4]
 8002494:	460b      	mov	r3, r1
 8002496:	70fb      	strb	r3, [r7, #3]
  hts221_ctrl_reg1_t reg;
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_CTRL_REG1, (uint8_t *) &reg, 1);
 8002498:	f107 0208 	add.w	r2, r7, #8
 800249c:	2301      	movs	r3, #1
 800249e:	2120      	movs	r1, #32
 80024a0:	6878      	ldr	r0, [r7, #4]
 80024a2:	f7ff ffc3 	bl	800242c <hts221_read_reg>
 80024a6:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 80024a8:	68fb      	ldr	r3, [r7, #12]
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	d10f      	bne.n	80024ce <hts221_data_rate_set+0x42>
  {
    reg.odr = (uint8_t)val;
 80024ae:	78fb      	ldrb	r3, [r7, #3]
 80024b0:	f003 0303 	and.w	r3, r3, #3
 80024b4:	b2da      	uxtb	r2, r3
 80024b6:	7a3b      	ldrb	r3, [r7, #8]
 80024b8:	f362 0301 	bfi	r3, r2, #0, #2
 80024bc:	723b      	strb	r3, [r7, #8]
    ret = hts221_write_reg(ctx, HTS221_CTRL_REG1, (uint8_t *) &reg, 1);
 80024be:	f107 0208 	add.w	r2, r7, #8
 80024c2:	2301      	movs	r3, #1
 80024c4:	2120      	movs	r1, #32
 80024c6:	6878      	ldr	r0, [r7, #4]
 80024c8:	f7ff ffc8 	bl	800245c <hts221_write_reg>
 80024cc:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 80024ce:	68fb      	ldr	r3, [r7, #12]
}
 80024d0:	4618      	mov	r0, r3
 80024d2:	3710      	adds	r7, #16
 80024d4:	46bd      	mov	sp, r7
 80024d6:	bd80      	pop	{r7, pc}

080024d8 <hts221_data_rate_get>:
  * @param  val     Get the values of odr in reg CTRL_REG1
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_data_rate_get(stmdev_ctx_t *ctx, hts221_odr_t *val)
{
 80024d8:	b580      	push	{r7, lr}
 80024da:	b084      	sub	sp, #16
 80024dc:	af00      	add	r7, sp, #0
 80024de:	6078      	str	r0, [r7, #4]
 80024e0:	6039      	str	r1, [r7, #0]
  hts221_ctrl_reg1_t reg;
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_CTRL_REG1, (uint8_t *) &reg, 1);
 80024e2:	f107 0208 	add.w	r2, r7, #8
 80024e6:	2301      	movs	r3, #1
 80024e8:	2120      	movs	r1, #32
 80024ea:	6878      	ldr	r0, [r7, #4]
 80024ec:	f7ff ff9e 	bl	800242c <hts221_read_reg>
 80024f0:	60f8      	str	r0, [r7, #12]

  switch (reg.odr)
 80024f2:	7a3b      	ldrb	r3, [r7, #8]
 80024f4:	f3c3 0301 	ubfx	r3, r3, #0, #2
 80024f8:	b2db      	uxtb	r3, r3
 80024fa:	2b03      	cmp	r3, #3
 80024fc:	d81a      	bhi.n	8002534 <hts221_data_rate_get+0x5c>
 80024fe:	a201      	add	r2, pc, #4	@ (adr r2, 8002504 <hts221_data_rate_get+0x2c>)
 8002500:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002504:	08002515 	.word	0x08002515
 8002508:	0800251d 	.word	0x0800251d
 800250c:	08002525 	.word	0x08002525
 8002510:	0800252d 	.word	0x0800252d
  {
    case HTS221_ONE_SHOT:
      *val = HTS221_ONE_SHOT;
 8002514:	683b      	ldr	r3, [r7, #0]
 8002516:	2200      	movs	r2, #0
 8002518:	701a      	strb	r2, [r3, #0]
      break;
 800251a:	e00f      	b.n	800253c <hts221_data_rate_get+0x64>

    case HTS221_ODR_1Hz:
      *val = HTS221_ODR_1Hz;
 800251c:	683b      	ldr	r3, [r7, #0]
 800251e:	2201      	movs	r2, #1
 8002520:	701a      	strb	r2, [r3, #0]
      break;
 8002522:	e00b      	b.n	800253c <hts221_data_rate_get+0x64>

    case HTS221_ODR_7Hz:
      *val = HTS221_ODR_7Hz;
 8002524:	683b      	ldr	r3, [r7, #0]
 8002526:	2202      	movs	r2, #2
 8002528:	701a      	strb	r2, [r3, #0]
      break;
 800252a:	e007      	b.n	800253c <hts221_data_rate_get+0x64>

    case HTS221_ODR_12Hz5:
      *val = HTS221_ODR_12Hz5;
 800252c:	683b      	ldr	r3, [r7, #0]
 800252e:	2203      	movs	r2, #3
 8002530:	701a      	strb	r2, [r3, #0]
      break;
 8002532:	e003      	b.n	800253c <hts221_data_rate_get+0x64>

    default:
      *val = HTS221_ODR_ND;
 8002534:	683b      	ldr	r3, [r7, #0]
 8002536:	2204      	movs	r2, #4
 8002538:	701a      	strb	r2, [r3, #0]
      break;
 800253a:	bf00      	nop
  }

  return ret;
 800253c:	68fb      	ldr	r3, [r7, #12]
}
 800253e:	4618      	mov	r0, r3
 8002540:	3710      	adds	r7, #16
 8002542:	46bd      	mov	sp, r7
 8002544:	bd80      	pop	{r7, pc}
 8002546:	bf00      	nop

08002548 <hts221_block_data_update_set>:
  * @param  val     change the values of bdu in reg CTRL_REG1
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_block_data_update_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8002548:	b580      	push	{r7, lr}
 800254a:	b084      	sub	sp, #16
 800254c:	af00      	add	r7, sp, #0
 800254e:	6078      	str	r0, [r7, #4]
 8002550:	460b      	mov	r3, r1
 8002552:	70fb      	strb	r3, [r7, #3]
  hts221_ctrl_reg1_t reg;
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_CTRL_REG1, (uint8_t *) &reg, 1);
 8002554:	f107 0208 	add.w	r2, r7, #8
 8002558:	2301      	movs	r3, #1
 800255a:	2120      	movs	r1, #32
 800255c:	6878      	ldr	r0, [r7, #4]
 800255e:	f7ff ff65 	bl	800242c <hts221_read_reg>
 8002562:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8002564:	68fb      	ldr	r3, [r7, #12]
 8002566:	2b00      	cmp	r3, #0
 8002568:	d10f      	bne.n	800258a <hts221_block_data_update_set+0x42>
  {
    reg.bdu = val;
 800256a:	78fb      	ldrb	r3, [r7, #3]
 800256c:	f003 0301 	and.w	r3, r3, #1
 8002570:	b2da      	uxtb	r2, r3
 8002572:	7a3b      	ldrb	r3, [r7, #8]
 8002574:	f362 0382 	bfi	r3, r2, #2, #1
 8002578:	723b      	strb	r3, [r7, #8]
    ret = hts221_write_reg(ctx, HTS221_CTRL_REG1, (uint8_t *) &reg, 1);
 800257a:	f107 0208 	add.w	r2, r7, #8
 800257e:	2301      	movs	r3, #1
 8002580:	2120      	movs	r1, #32
 8002582:	6878      	ldr	r0, [r7, #4]
 8002584:	f7ff ff6a 	bl	800245c <hts221_write_reg>
 8002588:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 800258a:	68fb      	ldr	r3, [r7, #12]
}
 800258c:	4618      	mov	r0, r3
 800258e:	3710      	adds	r7, #16
 8002590:	46bd      	mov	sp, r7
 8002592:	bd80      	pop	{r7, pc}

08002594 <hts221_humidity_raw_get>:
  * @param  buff    buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_humidity_raw_get(stmdev_ctx_t *ctx, int16_t *val)
{
 8002594:	b580      	push	{r7, lr}
 8002596:	b084      	sub	sp, #16
 8002598:	af00      	add	r7, sp, #0
 800259a:	6078      	str	r0, [r7, #4]
 800259c:	6039      	str	r1, [r7, #0]
  uint8_t buff[2];
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_HUMIDITY_OUT_L, buff, 2);
 800259e:	f107 0208 	add.w	r2, r7, #8
 80025a2:	2302      	movs	r3, #2
 80025a4:	2128      	movs	r1, #40	@ 0x28
 80025a6:	6878      	ldr	r0, [r7, #4]
 80025a8:	f7ff ff40 	bl	800242c <hts221_read_reg>
 80025ac:	60f8      	str	r0, [r7, #12]
  *val = (int16_t)buff[1];
 80025ae:	7a7b      	ldrb	r3, [r7, #9]
 80025b0:	b21a      	sxth	r2, r3
 80025b2:	683b      	ldr	r3, [r7, #0]
 80025b4:	801a      	strh	r2, [r3, #0]
  *val = (*val * 256) + (int16_t)buff[0];
 80025b6:	683b      	ldr	r3, [r7, #0]
 80025b8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80025bc:	b29b      	uxth	r3, r3
 80025be:	021b      	lsls	r3, r3, #8
 80025c0:	b29b      	uxth	r3, r3
 80025c2:	7a3a      	ldrb	r2, [r7, #8]
 80025c4:	4413      	add	r3, r2
 80025c6:	b29b      	uxth	r3, r3
 80025c8:	b21a      	sxth	r2, r3
 80025ca:	683b      	ldr	r3, [r7, #0]
 80025cc:	801a      	strh	r2, [r3, #0]

  return ret;
 80025ce:	68fb      	ldr	r3, [r7, #12]
}
 80025d0:	4618      	mov	r0, r3
 80025d2:	3710      	adds	r7, #16
 80025d4:	46bd      	mov	sp, r7
 80025d6:	bd80      	pop	{r7, pc}

080025d8 <hts221_temperature_raw_get>:
  * @param  buff    buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_temperature_raw_get(stmdev_ctx_t *ctx, int16_t *val)
{
 80025d8:	b580      	push	{r7, lr}
 80025da:	b084      	sub	sp, #16
 80025dc:	af00      	add	r7, sp, #0
 80025de:	6078      	str	r0, [r7, #4]
 80025e0:	6039      	str	r1, [r7, #0]
  uint8_t buff[2];
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_TEMP_OUT_L, buff, 2);
 80025e2:	f107 0208 	add.w	r2, r7, #8
 80025e6:	2302      	movs	r3, #2
 80025e8:	212a      	movs	r1, #42	@ 0x2a
 80025ea:	6878      	ldr	r0, [r7, #4]
 80025ec:	f7ff ff1e 	bl	800242c <hts221_read_reg>
 80025f0:	60f8      	str	r0, [r7, #12]
  *val = (int16_t)buff[1];
 80025f2:	7a7b      	ldrb	r3, [r7, #9]
 80025f4:	b21a      	sxth	r2, r3
 80025f6:	683b      	ldr	r3, [r7, #0]
 80025f8:	801a      	strh	r2, [r3, #0]
  *val = (*val * 256) + (int16_t)buff[0];
 80025fa:	683b      	ldr	r3, [r7, #0]
 80025fc:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002600:	b29b      	uxth	r3, r3
 8002602:	021b      	lsls	r3, r3, #8
 8002604:	b29b      	uxth	r3, r3
 8002606:	7a3a      	ldrb	r2, [r7, #8]
 8002608:	4413      	add	r3, r2
 800260a:	b29b      	uxth	r3, r3
 800260c:	b21a      	sxth	r2, r3
 800260e:	683b      	ldr	r3, [r7, #0]
 8002610:	801a      	strh	r2, [r3, #0]

  return ret;
 8002612:	68fb      	ldr	r3, [r7, #12]
}
 8002614:	4618      	mov	r0, r3
 8002616:	3710      	adds	r7, #16
 8002618:	46bd      	mov	sp, r7
 800261a:	bd80      	pop	{r7, pc}

0800261c <hts221_device_id_get>:
  * @param  buff    buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_device_id_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 800261c:	b580      	push	{r7, lr}
 800261e:	b084      	sub	sp, #16
 8002620:	af00      	add	r7, sp, #0
 8002622:	6078      	str	r0, [r7, #4]
 8002624:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_WHO_AM_I, buff, 1);
 8002626:	2301      	movs	r3, #1
 8002628:	683a      	ldr	r2, [r7, #0]
 800262a:	210f      	movs	r1, #15
 800262c:	6878      	ldr	r0, [r7, #4]
 800262e:	f7ff fefd 	bl	800242c <hts221_read_reg>
 8002632:	60f8      	str	r0, [r7, #12]

  return ret;
 8002634:	68fb      	ldr	r3, [r7, #12]
}
 8002636:	4618      	mov	r0, r3
 8002638:	3710      	adds	r7, #16
 800263a:	46bd      	mov	sp, r7
 800263c:	bd80      	pop	{r7, pc}

0800263e <hts221_power_on_set>:
  * @param  val     change the values of pd in reg CTRL_REG1
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_power_on_set(stmdev_ctx_t *ctx, uint8_t val)
{
 800263e:	b580      	push	{r7, lr}
 8002640:	b084      	sub	sp, #16
 8002642:	af00      	add	r7, sp, #0
 8002644:	6078      	str	r0, [r7, #4]
 8002646:	460b      	mov	r3, r1
 8002648:	70fb      	strb	r3, [r7, #3]
  hts221_ctrl_reg1_t reg;
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_CTRL_REG1, (uint8_t *) &reg, 1);
 800264a:	f107 0208 	add.w	r2, r7, #8
 800264e:	2301      	movs	r3, #1
 8002650:	2120      	movs	r1, #32
 8002652:	6878      	ldr	r0, [r7, #4]
 8002654:	f7ff feea 	bl	800242c <hts221_read_reg>
 8002658:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 800265a:	68fb      	ldr	r3, [r7, #12]
 800265c:	2b00      	cmp	r3, #0
 800265e:	d10f      	bne.n	8002680 <hts221_power_on_set+0x42>
  {
    reg.pd = val;
 8002660:	78fb      	ldrb	r3, [r7, #3]
 8002662:	f003 0301 	and.w	r3, r3, #1
 8002666:	b2da      	uxtb	r2, r3
 8002668:	7a3b      	ldrb	r3, [r7, #8]
 800266a:	f362 13c7 	bfi	r3, r2, #7, #1
 800266e:	723b      	strb	r3, [r7, #8]
    ret = hts221_write_reg(ctx, HTS221_CTRL_REG1, (uint8_t *) &reg, 1);
 8002670:	f107 0208 	add.w	r2, r7, #8
 8002674:	2301      	movs	r3, #1
 8002676:	2120      	movs	r1, #32
 8002678:	6878      	ldr	r0, [r7, #4]
 800267a:	f7ff feef 	bl	800245c <hts221_write_reg>
 800267e:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8002680:	68fb      	ldr	r3, [r7, #12]
}
 8002682:	4618      	mov	r0, r3
 8002684:	3710      	adds	r7, #16
 8002686:	46bd      	mov	sp, r7
 8002688:	bd80      	pop	{r7, pc}

0800268a <hts221_hum_rh_point_0_get>:
  * @param  val     buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_hum_rh_point_0_get(stmdev_ctx_t *ctx, float_t *val)
{
 800268a:	b580      	push	{r7, lr}
 800268c:	b084      	sub	sp, #16
 800268e:	af00      	add	r7, sp, #0
 8002690:	6078      	str	r0, [r7, #4]
 8002692:	6039      	str	r1, [r7, #0]
  uint8_t coeff;
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_H0_RH_X2, &coeff, 1);
 8002694:	f107 020b 	add.w	r2, r7, #11
 8002698:	2301      	movs	r3, #1
 800269a:	2130      	movs	r1, #48	@ 0x30
 800269c:	6878      	ldr	r0, [r7, #4]
 800269e:	f7ff fec5 	bl	800242c <hts221_read_reg>
 80026a2:	60f8      	str	r0, [r7, #12]
  *val = coeff / 2.0f;
 80026a4:	7afb      	ldrb	r3, [r7, #11]
 80026a6:	4618      	mov	r0, r3
 80026a8:	f7fe fac0 	bl	8000c2c <__aeabi_i2f>
 80026ac:	4603      	mov	r3, r0
 80026ae:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 80026b2:	4618      	mov	r0, r3
 80026b4:	f7fe fbc2 	bl	8000e3c <__aeabi_fdiv>
 80026b8:	4603      	mov	r3, r0
 80026ba:	461a      	mov	r2, r3
 80026bc:	683b      	ldr	r3, [r7, #0]
 80026be:	601a      	str	r2, [r3, #0]

  return ret;
 80026c0:	68fb      	ldr	r3, [r7, #12]
}
 80026c2:	4618      	mov	r0, r3
 80026c4:	3710      	adds	r7, #16
 80026c6:	46bd      	mov	sp, r7
 80026c8:	bd80      	pop	{r7, pc}

080026ca <hts221_hum_rh_point_1_get>:
  * @param  val     buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_hum_rh_point_1_get(stmdev_ctx_t *ctx, float_t *val)
{
 80026ca:	b580      	push	{r7, lr}
 80026cc:	b084      	sub	sp, #16
 80026ce:	af00      	add	r7, sp, #0
 80026d0:	6078      	str	r0, [r7, #4]
 80026d2:	6039      	str	r1, [r7, #0]
  uint8_t coeff;
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_H1_RH_X2, &coeff, 1);
 80026d4:	f107 020b 	add.w	r2, r7, #11
 80026d8:	2301      	movs	r3, #1
 80026da:	2131      	movs	r1, #49	@ 0x31
 80026dc:	6878      	ldr	r0, [r7, #4]
 80026de:	f7ff fea5 	bl	800242c <hts221_read_reg>
 80026e2:	60f8      	str	r0, [r7, #12]
  *val = coeff / 2.0f;
 80026e4:	7afb      	ldrb	r3, [r7, #11]
 80026e6:	4618      	mov	r0, r3
 80026e8:	f7fe faa0 	bl	8000c2c <__aeabi_i2f>
 80026ec:	4603      	mov	r3, r0
 80026ee:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 80026f2:	4618      	mov	r0, r3
 80026f4:	f7fe fba2 	bl	8000e3c <__aeabi_fdiv>
 80026f8:	4603      	mov	r3, r0
 80026fa:	461a      	mov	r2, r3
 80026fc:	683b      	ldr	r3, [r7, #0]
 80026fe:	601a      	str	r2, [r3, #0]

  return ret;
 8002700:	68fb      	ldr	r3, [r7, #12]
}
 8002702:	4618      	mov	r0, r3
 8002704:	3710      	adds	r7, #16
 8002706:	46bd      	mov	sp, r7
 8002708:	bd80      	pop	{r7, pc}

0800270a <hts221_temp_deg_point_0_get>:
  * @param  buff    buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_temp_deg_point_0_get(stmdev_ctx_t *ctx, float_t *val)
{
 800270a:	b580      	push	{r7, lr}
 800270c:	b086      	sub	sp, #24
 800270e:	af00      	add	r7, sp, #0
 8002710:	6078      	str	r0, [r7, #4]
 8002712:	6039      	str	r1, [r7, #0]
  hts221_t1_t0_msb_t reg;
  uint8_t coeff_h, coeff_l;
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_T0_DEGC_X8, &coeff_l, 1);
 8002714:	f107 020f 	add.w	r2, r7, #15
 8002718:	2301      	movs	r3, #1
 800271a:	2132      	movs	r1, #50	@ 0x32
 800271c:	6878      	ldr	r0, [r7, #4]
 800271e:	f7ff fe85 	bl	800242c <hts221_read_reg>
 8002722:	6178      	str	r0, [r7, #20]

  if (ret == 0)
 8002724:	697b      	ldr	r3, [r7, #20]
 8002726:	2b00      	cmp	r3, #0
 8002728:	d11d      	bne.n	8002766 <hts221_temp_deg_point_0_get+0x5c>
  {
    ret = hts221_read_reg(ctx, HTS221_T1_T0_MSB, (uint8_t *) &reg, 1);
 800272a:	f107 0210 	add.w	r2, r7, #16
 800272e:	2301      	movs	r3, #1
 8002730:	2135      	movs	r1, #53	@ 0x35
 8002732:	6878      	ldr	r0, [r7, #4]
 8002734:	f7ff fe7a 	bl	800242c <hts221_read_reg>
 8002738:	6178      	str	r0, [r7, #20]
    coeff_h = reg.t0_msb;
 800273a:	7c3b      	ldrb	r3, [r7, #16]
 800273c:	f3c3 0301 	ubfx	r3, r3, #0, #2
 8002740:	b2db      	uxtb	r3, r3
 8002742:	74fb      	strb	r3, [r7, #19]
    *val = ((coeff_h * 256) + coeff_l) / 8.0f;
 8002744:	7cfb      	ldrb	r3, [r7, #19]
 8002746:	021b      	lsls	r3, r3, #8
 8002748:	7bfa      	ldrb	r2, [r7, #15]
 800274a:	4413      	add	r3, r2
 800274c:	4618      	mov	r0, r3
 800274e:	f7fe fa6d 	bl	8000c2c <__aeabi_i2f>
 8002752:	4603      	mov	r3, r0
 8002754:	f04f 4182 	mov.w	r1, #1090519040	@ 0x41000000
 8002758:	4618      	mov	r0, r3
 800275a:	f7fe fb6f 	bl	8000e3c <__aeabi_fdiv>
 800275e:	4603      	mov	r3, r0
 8002760:	461a      	mov	r2, r3
 8002762:	683b      	ldr	r3, [r7, #0]
 8002764:	601a      	str	r2, [r3, #0]
  }

  return ret;
 8002766:	697b      	ldr	r3, [r7, #20]
}
 8002768:	4618      	mov	r0, r3
 800276a:	3718      	adds	r7, #24
 800276c:	46bd      	mov	sp, r7
 800276e:	bd80      	pop	{r7, pc}

08002770 <hts221_temp_deg_point_1_get>:
  * @param  val     buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_temp_deg_point_1_get(stmdev_ctx_t *ctx, float_t *val)
{
 8002770:	b580      	push	{r7, lr}
 8002772:	b086      	sub	sp, #24
 8002774:	af00      	add	r7, sp, #0
 8002776:	6078      	str	r0, [r7, #4]
 8002778:	6039      	str	r1, [r7, #0]
  hts221_t1_t0_msb_t reg;
  uint8_t coeff_h, coeff_l;
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_T1_DEGC_X8, &coeff_l, 1);
 800277a:	f107 020f 	add.w	r2, r7, #15
 800277e:	2301      	movs	r3, #1
 8002780:	2133      	movs	r1, #51	@ 0x33
 8002782:	6878      	ldr	r0, [r7, #4]
 8002784:	f7ff fe52 	bl	800242c <hts221_read_reg>
 8002788:	6178      	str	r0, [r7, #20]

  if (ret == 0)
 800278a:	697b      	ldr	r3, [r7, #20]
 800278c:	2b00      	cmp	r3, #0
 800278e:	d11d      	bne.n	80027cc <hts221_temp_deg_point_1_get+0x5c>
  {
    ret = hts221_read_reg(ctx, HTS221_T1_T0_MSB, (uint8_t *) &reg, 1);
 8002790:	f107 0210 	add.w	r2, r7, #16
 8002794:	2301      	movs	r3, #1
 8002796:	2135      	movs	r1, #53	@ 0x35
 8002798:	6878      	ldr	r0, [r7, #4]
 800279a:	f7ff fe47 	bl	800242c <hts221_read_reg>
 800279e:	6178      	str	r0, [r7, #20]
    coeff_h = reg.t1_msb;
 80027a0:	7c3b      	ldrb	r3, [r7, #16]
 80027a2:	f3c3 0381 	ubfx	r3, r3, #2, #2
 80027a6:	b2db      	uxtb	r3, r3
 80027a8:	74fb      	strb	r3, [r7, #19]
    *val = ((coeff_h * 256) + coeff_l) / 8.0f;
 80027aa:	7cfb      	ldrb	r3, [r7, #19]
 80027ac:	021b      	lsls	r3, r3, #8
 80027ae:	7bfa      	ldrb	r2, [r7, #15]
 80027b0:	4413      	add	r3, r2
 80027b2:	4618      	mov	r0, r3
 80027b4:	f7fe fa3a 	bl	8000c2c <__aeabi_i2f>
 80027b8:	4603      	mov	r3, r0
 80027ba:	f04f 4182 	mov.w	r1, #1090519040	@ 0x41000000
 80027be:	4618      	mov	r0, r3
 80027c0:	f7fe fb3c 	bl	8000e3c <__aeabi_fdiv>
 80027c4:	4603      	mov	r3, r0
 80027c6:	461a      	mov	r2, r3
 80027c8:	683b      	ldr	r3, [r7, #0]
 80027ca:	601a      	str	r2, [r3, #0]
  }

  return ret;
 80027cc:	697b      	ldr	r3, [r7, #20]
}
 80027ce:	4618      	mov	r0, r3
 80027d0:	3718      	adds	r7, #24
 80027d2:	46bd      	mov	sp, r7
 80027d4:	bd80      	pop	{r7, pc}

080027d6 <hts221_hum_adc_point_0_get>:
  * @param  val     buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_hum_adc_point_0_get(stmdev_ctx_t *ctx, float_t *val)
{
 80027d6:	b580      	push	{r7, lr}
 80027d8:	b084      	sub	sp, #16
 80027da:	af00      	add	r7, sp, #0
 80027dc:	6078      	str	r0, [r7, #4]
 80027de:	6039      	str	r1, [r7, #0]
  uint8_t coeff_p[2];
  int16_t coeff;
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_H0_T0_OUT_L, coeff_p, 2);
 80027e0:	f107 0208 	add.w	r2, r7, #8
 80027e4:	2302      	movs	r3, #2
 80027e6:	2136      	movs	r1, #54	@ 0x36
 80027e8:	6878      	ldr	r0, [r7, #4]
 80027ea:	f7ff fe1f 	bl	800242c <hts221_read_reg>
 80027ee:	60f8      	str	r0, [r7, #12]
  coeff = (coeff_p[1] * 256) + coeff_p[0];
 80027f0:	7a7b      	ldrb	r3, [r7, #9]
 80027f2:	021b      	lsls	r3, r3, #8
 80027f4:	b29b      	uxth	r3, r3
 80027f6:	7a3a      	ldrb	r2, [r7, #8]
 80027f8:	4413      	add	r3, r2
 80027fa:	b29b      	uxth	r3, r3
 80027fc:	817b      	strh	r3, [r7, #10]
  *val = coeff * 1.0f;
 80027fe:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8002802:	4618      	mov	r0, r3
 8002804:	f7fe fa12 	bl	8000c2c <__aeabi_i2f>
 8002808:	4602      	mov	r2, r0
 800280a:	683b      	ldr	r3, [r7, #0]
 800280c:	601a      	str	r2, [r3, #0]

  return ret;
 800280e:	68fb      	ldr	r3, [r7, #12]
}
 8002810:	4618      	mov	r0, r3
 8002812:	3710      	adds	r7, #16
 8002814:	46bd      	mov	sp, r7
 8002816:	bd80      	pop	{r7, pc}

08002818 <hts221_hum_adc_point_1_get>:
  * @param  val     buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_hum_adc_point_1_get(stmdev_ctx_t *ctx, float_t *val)
{
 8002818:	b580      	push	{r7, lr}
 800281a:	b084      	sub	sp, #16
 800281c:	af00      	add	r7, sp, #0
 800281e:	6078      	str	r0, [r7, #4]
 8002820:	6039      	str	r1, [r7, #0]
  uint8_t coeff_p[2];
  int16_t coeff;
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_H1_T0_OUT_L, coeff_p, 2);
 8002822:	f107 0208 	add.w	r2, r7, #8
 8002826:	2302      	movs	r3, #2
 8002828:	213a      	movs	r1, #58	@ 0x3a
 800282a:	6878      	ldr	r0, [r7, #4]
 800282c:	f7ff fdfe 	bl	800242c <hts221_read_reg>
 8002830:	60f8      	str	r0, [r7, #12]
  coeff = (coeff_p[1] * 256) + coeff_p[0];
 8002832:	7a7b      	ldrb	r3, [r7, #9]
 8002834:	021b      	lsls	r3, r3, #8
 8002836:	b29b      	uxth	r3, r3
 8002838:	7a3a      	ldrb	r2, [r7, #8]
 800283a:	4413      	add	r3, r2
 800283c:	b29b      	uxth	r3, r3
 800283e:	817b      	strh	r3, [r7, #10]
  *val = coeff * 1.0f;
 8002840:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8002844:	4618      	mov	r0, r3
 8002846:	f7fe f9f1 	bl	8000c2c <__aeabi_i2f>
 800284a:	4602      	mov	r2, r0
 800284c:	683b      	ldr	r3, [r7, #0]
 800284e:	601a      	str	r2, [r3, #0]

  return ret;
 8002850:	68fb      	ldr	r3, [r7, #12]
}
 8002852:	4618      	mov	r0, r3
 8002854:	3710      	adds	r7, #16
 8002856:	46bd      	mov	sp, r7
 8002858:	bd80      	pop	{r7, pc}

0800285a <hts221_temp_adc_point_0_get>:
  * @param  val     buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_temp_adc_point_0_get(stmdev_ctx_t *ctx, float_t *val)
{
 800285a:	b580      	push	{r7, lr}
 800285c:	b084      	sub	sp, #16
 800285e:	af00      	add	r7, sp, #0
 8002860:	6078      	str	r0, [r7, #4]
 8002862:	6039      	str	r1, [r7, #0]
  uint8_t coeff_p[2];
  int16_t coeff;
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_T0_OUT_L, coeff_p, 2);
 8002864:	f107 0208 	add.w	r2, r7, #8
 8002868:	2302      	movs	r3, #2
 800286a:	213c      	movs	r1, #60	@ 0x3c
 800286c:	6878      	ldr	r0, [r7, #4]
 800286e:	f7ff fddd 	bl	800242c <hts221_read_reg>
 8002872:	60f8      	str	r0, [r7, #12]
  coeff = (coeff_p[1] * 256) + coeff_p[0];
 8002874:	7a7b      	ldrb	r3, [r7, #9]
 8002876:	021b      	lsls	r3, r3, #8
 8002878:	b29b      	uxth	r3, r3
 800287a:	7a3a      	ldrb	r2, [r7, #8]
 800287c:	4413      	add	r3, r2
 800287e:	b29b      	uxth	r3, r3
 8002880:	817b      	strh	r3, [r7, #10]
  *val = coeff * 1.0f;
 8002882:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8002886:	4618      	mov	r0, r3
 8002888:	f7fe f9d0 	bl	8000c2c <__aeabi_i2f>
 800288c:	4602      	mov	r2, r0
 800288e:	683b      	ldr	r3, [r7, #0]
 8002890:	601a      	str	r2, [r3, #0]

  return ret;
 8002892:	68fb      	ldr	r3, [r7, #12]
}
 8002894:	4618      	mov	r0, r3
 8002896:	3710      	adds	r7, #16
 8002898:	46bd      	mov	sp, r7
 800289a:	bd80      	pop	{r7, pc}

0800289c <hts221_temp_adc_point_1_get>:
  * @param  val     buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_temp_adc_point_1_get(stmdev_ctx_t *ctx, float_t *val)
{
 800289c:	b580      	push	{r7, lr}
 800289e:	b084      	sub	sp, #16
 80028a0:	af00      	add	r7, sp, #0
 80028a2:	6078      	str	r0, [r7, #4]
 80028a4:	6039      	str	r1, [r7, #0]
  uint8_t coeff_p[2];
  int16_t coeff;
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_T1_OUT_L, coeff_p, 2);
 80028a6:	f107 0208 	add.w	r2, r7, #8
 80028aa:	2302      	movs	r3, #2
 80028ac:	213e      	movs	r1, #62	@ 0x3e
 80028ae:	6878      	ldr	r0, [r7, #4]
 80028b0:	f7ff fdbc 	bl	800242c <hts221_read_reg>
 80028b4:	60f8      	str	r0, [r7, #12]
  coeff = (coeff_p[1] * 256) + coeff_p[0];
 80028b6:	7a7b      	ldrb	r3, [r7, #9]
 80028b8:	021b      	lsls	r3, r3, #8
 80028ba:	b29b      	uxth	r3, r3
 80028bc:	7a3a      	ldrb	r2, [r7, #8]
 80028be:	4413      	add	r3, r2
 80028c0:	b29b      	uxth	r3, r3
 80028c2:	817b      	strh	r3, [r7, #10]
  *val = coeff * 1.0f;
 80028c4:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80028c8:	4618      	mov	r0, r3
 80028ca:	f7fe f9af 	bl	8000c2c <__aeabi_i2f>
 80028ce:	4602      	mov	r2, r0
 80028d0:	683b      	ldr	r3, [r7, #0]
 80028d2:	601a      	str	r2, [r3, #0]

  return ret;
 80028d4:	68fb      	ldr	r3, [r7, #12]
}
 80028d6:	4618      	mov	r0, r3
 80028d8:	3710      	adds	r7, #16
 80028da:	46bd      	mov	sp, r7
 80028dc:	bd80      	pop	{r7, pc}
	...

080028e0 <LIS2DW12_RegisterBusIO>:
  * @brief  Register Component Bus IO operations
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2DW12_RegisterBusIO(LIS2DW12_Object_t *pObj, LIS2DW12_IO_t *pIO)
{
 80028e0:	b580      	push	{r7, lr}
 80028e2:	b084      	sub	sp, #16
 80028e4:	af00      	add	r7, sp, #0
 80028e6:	6078      	str	r0, [r7, #4]
 80028e8:	6039      	str	r1, [r7, #0]
  int32_t ret = LIS2DW12_OK;
 80028ea:	2300      	movs	r3, #0
 80028ec:	60fb      	str	r3, [r7, #12]

  if (pObj == NULL)
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	2b00      	cmp	r3, #0
 80028f2:	d103      	bne.n	80028fc <LIS2DW12_RegisterBusIO+0x1c>
  {
    ret = LIS2DW12_ERROR;
 80028f4:	f04f 33ff 	mov.w	r3, #4294967295
 80028f8:	60fb      	str	r3, [r7, #12]
 80028fa:	e051      	b.n	80029a0 <LIS2DW12_RegisterBusIO+0xc0>
  }
  else
  {
    pObj->IO.Init      = pIO->Init;
 80028fc:	683b      	ldr	r3, [r7, #0]
 80028fe:	681a      	ldr	r2, [r3, #0]
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	601a      	str	r2, [r3, #0]
    pObj->IO.DeInit    = pIO->DeInit;
 8002904:	683b      	ldr	r3, [r7, #0]
 8002906:	685a      	ldr	r2, [r3, #4]
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	605a      	str	r2, [r3, #4]
    pObj->IO.BusType   = pIO->BusType;
 800290c:	683b      	ldr	r3, [r7, #0]
 800290e:	689a      	ldr	r2, [r3, #8]
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	609a      	str	r2, [r3, #8]
    pObj->IO.Address   = pIO->Address;
 8002914:	683b      	ldr	r3, [r7, #0]
 8002916:	7b1a      	ldrb	r2, [r3, #12]
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	731a      	strb	r2, [r3, #12]
    pObj->IO.WriteReg  = pIO->WriteReg;
 800291c:	683b      	ldr	r3, [r7, #0]
 800291e:	691a      	ldr	r2, [r3, #16]
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	611a      	str	r2, [r3, #16]
    pObj->IO.ReadReg   = pIO->ReadReg;
 8002924:	683b      	ldr	r3, [r7, #0]
 8002926:	695a      	ldr	r2, [r3, #20]
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	615a      	str	r2, [r3, #20]
    pObj->IO.GetTick   = pIO->GetTick;
 800292c:	683b      	ldr	r3, [r7, #0]
 800292e:	699a      	ldr	r2, [r3, #24]
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	619a      	str	r2, [r3, #24]

    pObj->Ctx.read_reg  = ReadRegWrap;
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	4a1d      	ldr	r2, [pc, #116]	@ (80029ac <LIS2DW12_RegisterBusIO+0xcc>)
 8002938:	625a      	str	r2, [r3, #36]	@ 0x24
    pObj->Ctx.write_reg = WriteRegWrap;
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	4a1c      	ldr	r2, [pc, #112]	@ (80029b0 <LIS2DW12_RegisterBusIO+0xd0>)
 800293e:	621a      	str	r2, [r3, #32]
    pObj->Ctx.mdelay    = pIO->Delay;
 8002940:	683b      	ldr	r3, [r7, #0]
 8002942:	69da      	ldr	r2, [r3, #28]
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	629a      	str	r2, [r3, #40]	@ 0x28
    pObj->Ctx.handle   = pObj;
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	687a      	ldr	r2, [r7, #4]
 800294c:	62da      	str	r2, [r3, #44]	@ 0x2c

    if (pObj->IO.Init == NULL)
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	2b00      	cmp	r3, #0
 8002954:	d103      	bne.n	800295e <LIS2DW12_RegisterBusIO+0x7e>
    {
      ret = LIS2DW12_ERROR;
 8002956:	f04f 33ff 	mov.w	r3, #4294967295
 800295a:	60fb      	str	r3, [r7, #12]
 800295c:	e020      	b.n	80029a0 <LIS2DW12_RegisterBusIO+0xc0>
    }
    else if (pObj->IO.Init() != LIS2DW12_OK)
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	4798      	blx	r3
 8002964:	4603      	mov	r3, r0
 8002966:	2b00      	cmp	r3, #0
 8002968:	d003      	beq.n	8002972 <LIS2DW12_RegisterBusIO+0x92>
    {
      ret = LIS2DW12_ERROR;
 800296a:	f04f 33ff 	mov.w	r3, #4294967295
 800296e:	60fb      	str	r3, [r7, #12]
 8002970:	e016      	b.n	80029a0 <LIS2DW12_RegisterBusIO+0xc0>
    }
    else
    {
      if (pObj->IO.BusType == LIS2DW12_SPI_3WIRES_BUS) /* SPI 3-Wires */
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	689b      	ldr	r3, [r3, #8]
 8002976:	2b02      	cmp	r3, #2
 8002978:	d112      	bne.n	80029a0 <LIS2DW12_RegisterBusIO+0xc0>
      {
        /* Enable the SPI 3-Wires support only the first time */
        if (pObj->is_initialized == 0U)
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8002980:	2b00      	cmp	r3, #0
 8002982:	d10d      	bne.n	80029a0 <LIS2DW12_RegisterBusIO+0xc0>
        {
          /* Enable SPI 3-Wires on the component */
          uint8_t data = 0x05;
 8002984:	2305      	movs	r3, #5
 8002986:	72fb      	strb	r3, [r7, #11]

          if (LIS2DW12_Write_Reg(pObj, LIS2DW12_CTRL2, data) != LIS2DW12_OK)
 8002988:	7afb      	ldrb	r3, [r7, #11]
 800298a:	461a      	mov	r2, r3
 800298c:	2121      	movs	r1, #33	@ 0x21
 800298e:	6878      	ldr	r0, [r7, #4]
 8002990:	f000 fcbf 	bl	8003312 <LIS2DW12_Write_Reg>
 8002994:	4603      	mov	r3, r0
 8002996:	2b00      	cmp	r3, #0
 8002998:	d002      	beq.n	80029a0 <LIS2DW12_RegisterBusIO+0xc0>
          {
            ret = LIS2DW12_ERROR;
 800299a:	f04f 33ff 	mov.w	r3, #4294967295
 800299e:	60fb      	str	r3, [r7, #12]
        }
      }
    }
  }

  return ret;
 80029a0:	68fb      	ldr	r3, [r7, #12]
}
 80029a2:	4618      	mov	r0, r3
 80029a4:	3710      	adds	r7, #16
 80029a6:	46bd      	mov	sp, r7
 80029a8:	bd80      	pop	{r7, pc}
 80029aa:	bf00      	nop
 80029ac:	08003639 	.word	0x08003639
 80029b0:	0800366f 	.word	0x0800366f

080029b4 <LIS2DW12_Init>:
  * @brief  Initialize the LIS2DW12 sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2DW12_Init(LIS2DW12_Object_t *pObj)
{
 80029b4:	b580      	push	{r7, lr}
 80029b6:	b082      	sub	sp, #8
 80029b8:	af00      	add	r7, sp, #0
 80029ba:	6078      	str	r0, [r7, #4]
  /* Enable register address automatically incremented during a multiple byte
  access with a serial interface. */
  if (lis2dw12_auto_increment_set(&(pObj->Ctx), PROPERTY_ENABLE) != LIS2DW12_OK)
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	3320      	adds	r3, #32
 80029c0:	2101      	movs	r1, #1
 80029c2:	4618      	mov	r0, r3
 80029c4:	f001 f993 	bl	8003cee <lis2dw12_auto_increment_set>
 80029c8:	4603      	mov	r3, r0
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d002      	beq.n	80029d4 <LIS2DW12_Init+0x20>
  {
    return LIS2DW12_ERROR;
 80029ce:	f04f 33ff 	mov.w	r3, #4294967295
 80029d2:	e04b      	b.n	8002a6c <LIS2DW12_Init+0xb8>
  }

  /* Enable BDU */
  if (lis2dw12_block_data_update_set(&(pObj->Ctx), PROPERTY_ENABLE) != LIS2DW12_OK)
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	3320      	adds	r3, #32
 80029d8:	2101      	movs	r1, #1
 80029da:	4618      	mov	r0, r3
 80029dc:	f001 f8aa 	bl	8003b34 <lis2dw12_block_data_update_set>
 80029e0:	4603      	mov	r3, r0
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d002      	beq.n	80029ec <LIS2DW12_Init+0x38>
  {
    return LIS2DW12_ERROR;
 80029e6:	f04f 33ff 	mov.w	r3, #4294967295
 80029ea:	e03f      	b.n	8002a6c <LIS2DW12_Init+0xb8>
  }

  /* FIFO mode selection */
  if (lis2dw12_fifo_mode_set(&(pObj->Ctx), LIS2DW12_BYPASS_MODE) != LIS2DW12_OK)
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	3320      	adds	r3, #32
 80029f0:	2100      	movs	r1, #0
 80029f2:	4618      	mov	r0, r3
 80029f4:	f001 f9a1 	bl	8003d3a <lis2dw12_fifo_mode_set>
 80029f8:	4603      	mov	r3, r0
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	d002      	beq.n	8002a04 <LIS2DW12_Init+0x50>
  {
    return LIS2DW12_ERROR;
 80029fe:	f04f 33ff 	mov.w	r3, #4294967295
 8002a02:	e033      	b.n	8002a6c <LIS2DW12_Init+0xb8>
  }

  /* Power mode selection */
  if (lis2dw12_power_mode_set(&(pObj->Ctx), LIS2DW12_HIGH_PERFORMANCE) != LIS2DW12_OK)
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	3320      	adds	r3, #32
 8002a08:	2104      	movs	r1, #4
 8002a0a:	4618      	mov	r0, r3
 8002a0c:	f000 fe7a 	bl	8003704 <lis2dw12_power_mode_set>
 8002a10:	4603      	mov	r3, r0
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	d002      	beq.n	8002a1c <LIS2DW12_Init+0x68>
  {
    return LIS2DW12_ERROR;
 8002a16:	f04f 33ff 	mov.w	r3, #4294967295
 8002a1a:	e027      	b.n	8002a6c <LIS2DW12_Init+0xb8>
  }

  /* Select default output data rate. */
  pObj->acc_odr = 100.0f;
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	4a15      	ldr	r2, [pc, #84]	@ (8002a74 <LIS2DW12_Init+0xc0>)
 8002a20:	635a      	str	r2, [r3, #52]	@ 0x34
  /* Select default operating mode. */
  pObj->acc_operating_mode = LIS2DW12_HIGH_PERFORMANCE_MODE;
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	2200      	movs	r2, #0
 8002a26:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  /* Select default low noise (disabled). */
  pObj->acc_low_noise = LIS2DW12_LOW_NOISE_DISABLE;
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	2200      	movs	r2, #0
 8002a2e:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  /* Output data rate selection - power down. */
  if (lis2dw12_data_rate_set(&(pObj->Ctx), LIS2DW12_XL_ODR_OFF) != LIS2DW12_OK)
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	3320      	adds	r3, #32
 8002a36:	2100      	movs	r1, #0
 8002a38:	4618      	mov	r0, r3
 8002a3a:	f000 ff6b 	bl	8003914 <lis2dw12_data_rate_set>
 8002a3e:	4603      	mov	r3, r0
 8002a40:	2b00      	cmp	r3, #0
 8002a42:	d002      	beq.n	8002a4a <LIS2DW12_Init+0x96>
  {
    return LIS2DW12_ERROR;
 8002a44:	f04f 33ff 	mov.w	r3, #4294967295
 8002a48:	e010      	b.n	8002a6c <LIS2DW12_Init+0xb8>
  }

  /* Full scale selection. */
  if (lis2dw12_full_scale_set(&(pObj->Ctx), LIS2DW12_2g) != LIS2DW12_OK)
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	3320      	adds	r3, #32
 8002a4e:	2100      	movs	r1, #0
 8002a50:	4618      	mov	r0, r3
 8002a52:	f001 f895 	bl	8003b80 <lis2dw12_full_scale_set>
 8002a56:	4603      	mov	r3, r0
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	d002      	beq.n	8002a62 <LIS2DW12_Init+0xae>
  {
    return LIS2DW12_ERROR;
 8002a5c:	f04f 33ff 	mov.w	r3, #4294967295
 8002a60:	e004      	b.n	8002a6c <LIS2DW12_Init+0xb8>
  }

  pObj->is_initialized = 1;
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	2201      	movs	r2, #1
 8002a66:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  return LIS2DW12_OK;
 8002a6a:	2300      	movs	r3, #0
}
 8002a6c:	4618      	mov	r0, r3
 8002a6e:	3708      	adds	r7, #8
 8002a70:	46bd      	mov	sp, r7
 8002a72:	bd80      	pop	{r7, pc}
 8002a74:	42c80000 	.word	0x42c80000

08002a78 <LIS2DW12_DeInit>:
  * @brief  Deinitialize the LIS2DW12 sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2DW12_DeInit(LIS2DW12_Object_t *pObj)
{
 8002a78:	b580      	push	{r7, lr}
 8002a7a:	b082      	sub	sp, #8
 8002a7c:	af00      	add	r7, sp, #0
 8002a7e:	6078      	str	r0, [r7, #4]
  /* Disable the component */
  if (LIS2DW12_ACC_Disable(pObj) != LIS2DW12_OK)
 8002a80:	6878      	ldr	r0, [r7, #4]
 8002a82:	f000 f884 	bl	8002b8e <LIS2DW12_ACC_Disable>
 8002a86:	4603      	mov	r3, r0
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	d002      	beq.n	8002a92 <LIS2DW12_DeInit+0x1a>
  {
    return LIS2DW12_ERROR;
 8002a8c:	f04f 33ff 	mov.w	r3, #4294967295
 8002a90:	e010      	b.n	8002ab4 <LIS2DW12_DeInit+0x3c>
  }

  /* Reset output data rate. */
  pObj->acc_odr = 0.0f;
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	f04f 0200 	mov.w	r2, #0
 8002a98:	635a      	str	r2, [r3, #52]	@ 0x34
  /* Reset operating mode to default value. */
  pObj->acc_operating_mode = LIS2DW12_HIGH_PERFORMANCE_MODE;
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	2200      	movs	r2, #0
 8002a9e:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  /* Reset low noise to default value (disabled). */
  pObj->acc_low_noise = LIS2DW12_LOW_NOISE_DISABLE;
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	2200      	movs	r2, #0
 8002aa6:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  pObj->is_initialized = 0;
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	2200      	movs	r2, #0
 8002aae:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  return LIS2DW12_OK;
 8002ab2:	2300      	movs	r3, #0
}
 8002ab4:	4618      	mov	r0, r3
 8002ab6:	3708      	adds	r7, #8
 8002ab8:	46bd      	mov	sp, r7
 8002aba:	bd80      	pop	{r7, pc}

08002abc <LIS2DW12_ReadID>:
  * @param  pObj the device pObj
  * @param  Id the WHO_AM_I value
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2DW12_ReadID(LIS2DW12_Object_t *pObj, uint8_t *Id)
{
 8002abc:	b580      	push	{r7, lr}
 8002abe:	b082      	sub	sp, #8
 8002ac0:	af00      	add	r7, sp, #0
 8002ac2:	6078      	str	r0, [r7, #4]
 8002ac4:	6039      	str	r1, [r7, #0]
  if (lis2dw12_device_id_get(&(pObj->Ctx), Id) != LIS2DW12_OK)
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	3320      	adds	r3, #32
 8002aca:	6839      	ldr	r1, [r7, #0]
 8002acc:	4618      	mov	r0, r3
 8002ace:	f001 f8fd 	bl	8003ccc <lis2dw12_device_id_get>
 8002ad2:	4603      	mov	r3, r0
 8002ad4:	2b00      	cmp	r3, #0
 8002ad6:	d002      	beq.n	8002ade <LIS2DW12_ReadID+0x22>
  {
    return LIS2DW12_ERROR;
 8002ad8:	f04f 33ff 	mov.w	r3, #4294967295
 8002adc:	e000      	b.n	8002ae0 <LIS2DW12_ReadID+0x24>
  }

  return LIS2DW12_OK;
 8002ade:	2300      	movs	r3, #0
}
 8002ae0:	4618      	mov	r0, r3
 8002ae2:	3708      	adds	r7, #8
 8002ae4:	46bd      	mov	sp, r7
 8002ae6:	bd80      	pop	{r7, pc}

08002ae8 <LIS2DW12_GetCapabilities>:
  * @param  pObj Component object pointer
  * @param  Capabilities pointer to LIS2DW12 sensor capabilities
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2DW12_GetCapabilities(LIS2DW12_Object_t *pObj, LIS2DW12_Capabilities_t *Capabilities)
{
 8002ae8:	b480      	push	{r7}
 8002aea:	b083      	sub	sp, #12
 8002aec:	af00      	add	r7, sp, #0
 8002aee:	6078      	str	r0, [r7, #4]
 8002af0:	6039      	str	r1, [r7, #0]
  /* Prevent unused argument(s) compilation warning */
  (void)(pObj);

  Capabilities->Acc          = 1;
 8002af2:	683b      	ldr	r3, [r7, #0]
 8002af4:	2201      	movs	r2, #1
 8002af6:	701a      	strb	r2, [r3, #0]
  Capabilities->Gyro         = 0;
 8002af8:	683b      	ldr	r3, [r7, #0]
 8002afa:	2200      	movs	r2, #0
 8002afc:	705a      	strb	r2, [r3, #1]
  Capabilities->Magneto      = 0;
 8002afe:	683b      	ldr	r3, [r7, #0]
 8002b00:	2200      	movs	r2, #0
 8002b02:	709a      	strb	r2, [r3, #2]
  Capabilities->LowPower     = 0;
 8002b04:	683b      	ldr	r3, [r7, #0]
 8002b06:	2200      	movs	r2, #0
 8002b08:	70da      	strb	r2, [r3, #3]
  Capabilities->GyroMaxFS    = 0;
 8002b0a:	683b      	ldr	r3, [r7, #0]
 8002b0c:	2200      	movs	r2, #0
 8002b0e:	605a      	str	r2, [r3, #4]
  Capabilities->AccMaxFS     = 16;
 8002b10:	683b      	ldr	r3, [r7, #0]
 8002b12:	2210      	movs	r2, #16
 8002b14:	609a      	str	r2, [r3, #8]
  Capabilities->MagMaxFS     = 0;
 8002b16:	683b      	ldr	r3, [r7, #0]
 8002b18:	2200      	movs	r2, #0
 8002b1a:	60da      	str	r2, [r3, #12]
  Capabilities->GyroMaxOdr   = 0.0f;
 8002b1c:	683b      	ldr	r3, [r7, #0]
 8002b1e:	f04f 0200 	mov.w	r2, #0
 8002b22:	611a      	str	r2, [r3, #16]
  Capabilities->AccMaxOdr    = 1600.0f;
 8002b24:	683b      	ldr	r3, [r7, #0]
 8002b26:	4a06      	ldr	r2, [pc, #24]	@ (8002b40 <LIS2DW12_GetCapabilities+0x58>)
 8002b28:	615a      	str	r2, [r3, #20]
  Capabilities->MagMaxOdr    = 0.0f;
 8002b2a:	683b      	ldr	r3, [r7, #0]
 8002b2c:	f04f 0200 	mov.w	r2, #0
 8002b30:	619a      	str	r2, [r3, #24]
  return LIS2DW12_OK;
 8002b32:	2300      	movs	r3, #0
}
 8002b34:	4618      	mov	r0, r3
 8002b36:	370c      	adds	r7, #12
 8002b38:	46bd      	mov	sp, r7
 8002b3a:	bc80      	pop	{r7}
 8002b3c:	4770      	bx	lr
 8002b3e:	bf00      	nop
 8002b40:	44c80000 	.word	0x44c80000

08002b44 <LIS2DW12_ACC_Enable>:
  * @brief  Enable the LIS2DW12 accelerometer sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2DW12_ACC_Enable(LIS2DW12_Object_t *pObj)
{
 8002b44:	b580      	push	{r7, lr}
 8002b46:	b082      	sub	sp, #8
 8002b48:	af00      	add	r7, sp, #0
 8002b4a:	6078      	str	r0, [r7, #4]
  /* Check if the component is already enabled */
  if (pObj->acc_is_enabled == 1U)
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8002b52:	2b01      	cmp	r3, #1
 8002b54:	d101      	bne.n	8002b5a <LIS2DW12_ACC_Enable+0x16>
  {
    return LIS2DW12_OK;
 8002b56:	2300      	movs	r3, #0
 8002b58:	e015      	b.n	8002b86 <LIS2DW12_ACC_Enable+0x42>
  }

  /* Output data rate selection. */
  if (LIS2DW12_ACC_SetOutputDataRate_When_Enabled(pObj, pObj->acc_odr, pObj->acc_operating_mode,
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	f893 2038 	ldrb.w	r2, [r3, #56]	@ 0x38
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 8002b6a:	6878      	ldr	r0, [r7, #4]
 8002b6c:	f000 fbec 	bl	8003348 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled>
 8002b70:	4603      	mov	r3, r0
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	d002      	beq.n	8002b7c <LIS2DW12_ACC_Enable+0x38>
                                                  pObj->acc_low_noise) != LIS2DW12_OK)
  {
    return LIS2DW12_ERROR;
 8002b76:	f04f 33ff 	mov.w	r3, #4294967295
 8002b7a:	e004      	b.n	8002b86 <LIS2DW12_ACC_Enable+0x42>
  }

  pObj->acc_is_enabled = 1;
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	2201      	movs	r2, #1
 8002b80:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31

  return LIS2DW12_OK;
 8002b84:	2300      	movs	r3, #0
}
 8002b86:	4618      	mov	r0, r3
 8002b88:	3708      	adds	r7, #8
 8002b8a:	46bd      	mov	sp, r7
 8002b8c:	bd80      	pop	{r7, pc}

08002b8e <LIS2DW12_ACC_Disable>:
  * @brief  Disable the LIS2DW12 accelerometer sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2DW12_ACC_Disable(LIS2DW12_Object_t *pObj)
{
 8002b8e:	b580      	push	{r7, lr}
 8002b90:	b082      	sub	sp, #8
 8002b92:	af00      	add	r7, sp, #0
 8002b94:	6078      	str	r0, [r7, #4]
  /* Check if the component is already disabled */
  if (pObj->acc_is_enabled == 0U)
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	d101      	bne.n	8002ba4 <LIS2DW12_ACC_Disable+0x16>
  {
    return LIS2DW12_OK;
 8002ba0:	2300      	movs	r3, #0
 8002ba2:	e010      	b.n	8002bc6 <LIS2DW12_ACC_Disable+0x38>
  }

  /* Output data rate selection - power down. */
  if (lis2dw12_data_rate_set(&(pObj->Ctx), LIS2DW12_XL_ODR_OFF) != LIS2DW12_OK)
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	3320      	adds	r3, #32
 8002ba8:	2100      	movs	r1, #0
 8002baa:	4618      	mov	r0, r3
 8002bac:	f000 feb2 	bl	8003914 <lis2dw12_data_rate_set>
 8002bb0:	4603      	mov	r3, r0
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d002      	beq.n	8002bbc <LIS2DW12_ACC_Disable+0x2e>
  {
    return LIS2DW12_ERROR;
 8002bb6:	f04f 33ff 	mov.w	r3, #4294967295
 8002bba:	e004      	b.n	8002bc6 <LIS2DW12_ACC_Disable+0x38>
  }

  pObj->acc_is_enabled = 0;
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	2200      	movs	r2, #0
 8002bc0:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31

  return LIS2DW12_OK;
 8002bc4:	2300      	movs	r3, #0
}
 8002bc6:	4618      	mov	r0, r3
 8002bc8:	3708      	adds	r7, #8
 8002bca:	46bd      	mov	sp, r7
 8002bcc:	bd80      	pop	{r7, pc}
	...

08002bd0 <LIS2DW12_ACC_GetSensitivity>:
  * @param  pObj the device pObj
  * @param  Sensitivity pointer
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2DW12_ACC_GetSensitivity(LIS2DW12_Object_t *pObj, float *Sensitivity)
{
 8002bd0:	b580      	push	{r7, lr}
 8002bd2:	b084      	sub	sp, #16
 8002bd4:	af00      	add	r7, sp, #0
 8002bd6:	6078      	str	r0, [r7, #4]
 8002bd8:	6039      	str	r1, [r7, #0]
  int32_t ret = LIS2DW12_OK;
 8002bda:	2300      	movs	r3, #0
 8002bdc:	60fb      	str	r3, [r7, #12]
  lis2dw12_fs_t full_scale;
  lis2dw12_mode_t mode;

  /* Read actual full scale selection from sensor. */
  if (lis2dw12_full_scale_get(&(pObj->Ctx), &full_scale) != LIS2DW12_OK)
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	3320      	adds	r3, #32
 8002be2:	f107 020b 	add.w	r2, r7, #11
 8002be6:	4611      	mov	r1, r2
 8002be8:	4618      	mov	r0, r3
 8002bea:	f000 ffef 	bl	8003bcc <lis2dw12_full_scale_get>
 8002bee:	4603      	mov	r3, r0
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	d002      	beq.n	8002bfa <LIS2DW12_ACC_GetSensitivity+0x2a>
  {
    return LIS2DW12_ERROR;
 8002bf4:	f04f 33ff 	mov.w	r3, #4294967295
 8002bf8:	e080      	b.n	8002cfc <LIS2DW12_ACC_GetSensitivity+0x12c>
  }

  /* Read actual power mode selection from sensor. */
  if (lis2dw12_power_mode_get(&(pObj->Ctx), &mode) != LIS2DW12_OK)
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	3320      	adds	r3, #32
 8002bfe:	f107 020a 	add.w	r2, r7, #10
 8002c02:	4611      	mov	r1, r2
 8002c04:	4618      	mov	r0, r3
 8002c06:	f000 fdcb 	bl	80037a0 <lis2dw12_power_mode_get>
 8002c0a:	4603      	mov	r3, r0
 8002c0c:	2b00      	cmp	r3, #0
 8002c0e:	d002      	beq.n	8002c16 <LIS2DW12_ACC_GetSensitivity+0x46>
  {
    return LIS2DW12_ERROR;
 8002c10:	f04f 33ff 	mov.w	r3, #4294967295
 8002c14:	e072      	b.n	8002cfc <LIS2DW12_ACC_GetSensitivity+0x12c>
  }

  switch (mode)
 8002c16:	7abb      	ldrb	r3, [r7, #10]
 8002c18:	2b1b      	cmp	r3, #27
 8002c1a:	bf8c      	ite	hi
 8002c1c:	2201      	movhi	r2, #1
 8002c1e:	2200      	movls	r2, #0
 8002c20:	b2d2      	uxtb	r2, r2
 8002c22:	2a00      	cmp	r2, #0
 8002c24:	d162      	bne.n	8002cec <LIS2DW12_ACC_GetSensitivity+0x11c>
 8002c26:	2201      	movs	r2, #1
 8002c28:	409a      	lsls	r2, r3
 8002c2a:	f002 331e 	and.w	r3, r2, #505290270	@ 0x1e1e1e1e
 8002c2e:	f023 2310 	bic.w	r3, r3, #268439552	@ 0x10001000
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	bf14      	ite	ne
 8002c36:	2301      	movne	r3, #1
 8002c38:	2300      	moveq	r3, #0
 8002c3a:	b2db      	uxtb	r3, r3
 8002c3c:	2b00      	cmp	r3, #0
 8002c3e:	d12f      	bne.n	8002ca0 <LIS2DW12_ACC_GetSensitivity+0xd0>
 8002c40:	f002 3301 	and.w	r3, r2, #16843009	@ 0x1010101
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	bf14      	ite	ne
 8002c48:	2301      	movne	r3, #1
 8002c4a:	2300      	moveq	r3, #0
 8002c4c:	b2db      	uxtb	r3, r3
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d04c      	beq.n	8002cec <LIS2DW12_ACC_GetSensitivity+0x11c>
  {
    case LIS2DW12_CONT_LOW_PWR_12bit:
    case LIS2DW12_SINGLE_LOW_PWR_12bit:
    case LIS2DW12_CONT_LOW_PWR_LOW_NOISE_12bit:
    case LIS2DW12_SINGLE_LOW_LOW_NOISE_PWR_12bit:
      switch (full_scale)
 8002c52:	7afb      	ldrb	r3, [r7, #11]
 8002c54:	2b03      	cmp	r3, #3
 8002c56:	d81b      	bhi.n	8002c90 <LIS2DW12_ACC_GetSensitivity+0xc0>
 8002c58:	a201      	add	r2, pc, #4	@ (adr r2, 8002c60 <LIS2DW12_ACC_GetSensitivity+0x90>)
 8002c5a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002c5e:	bf00      	nop
 8002c60:	08002c71 	.word	0x08002c71
 8002c64:	08002c79 	.word	0x08002c79
 8002c68:	08002c81 	.word	0x08002c81
 8002c6c:	08002c89 	.word	0x08002c89
      {
        case LIS2DW12_2g:
          *Sensitivity = LIS2DW12_ACC_SENSITIVITY_FOR_FS_2G_LOPOW1_MODE;
 8002c70:	683b      	ldr	r3, [r7, #0]
 8002c72:	4a24      	ldr	r2, [pc, #144]	@ (8002d04 <LIS2DW12_ACC_GetSensitivity+0x134>)
 8002c74:	601a      	str	r2, [r3, #0]
          break;
 8002c76:	e012      	b.n	8002c9e <LIS2DW12_ACC_GetSensitivity+0xce>

        case LIS2DW12_4g:
          *Sensitivity = LIS2DW12_ACC_SENSITIVITY_FOR_FS_4G_LOPOW1_MODE;
 8002c78:	683b      	ldr	r3, [r7, #0]
 8002c7a:	4a23      	ldr	r2, [pc, #140]	@ (8002d08 <LIS2DW12_ACC_GetSensitivity+0x138>)
 8002c7c:	601a      	str	r2, [r3, #0]
          break;
 8002c7e:	e00e      	b.n	8002c9e <LIS2DW12_ACC_GetSensitivity+0xce>

        case LIS2DW12_8g:
          *Sensitivity = LIS2DW12_ACC_SENSITIVITY_FOR_FS_8G_LOPOW1_MODE;
 8002c80:	683b      	ldr	r3, [r7, #0]
 8002c82:	4a22      	ldr	r2, [pc, #136]	@ (8002d0c <LIS2DW12_ACC_GetSensitivity+0x13c>)
 8002c84:	601a      	str	r2, [r3, #0]
          break;
 8002c86:	e00a      	b.n	8002c9e <LIS2DW12_ACC_GetSensitivity+0xce>

        case LIS2DW12_16g:
          *Sensitivity = LIS2DW12_ACC_SENSITIVITY_FOR_FS_16G_LOPOW1_MODE;
 8002c88:	683b      	ldr	r3, [r7, #0]
 8002c8a:	4a21      	ldr	r2, [pc, #132]	@ (8002d10 <LIS2DW12_ACC_GetSensitivity+0x140>)
 8002c8c:	601a      	str	r2, [r3, #0]
          break;
 8002c8e:	e006      	b.n	8002c9e <LIS2DW12_ACC_GetSensitivity+0xce>

        default:
          *Sensitivity = -1.0f;
 8002c90:	683b      	ldr	r3, [r7, #0]
 8002c92:	4a20      	ldr	r2, [pc, #128]	@ (8002d14 <LIS2DW12_ACC_GetSensitivity+0x144>)
 8002c94:	601a      	str	r2, [r3, #0]
          ret = LIS2DW12_ERROR;
 8002c96:	f04f 33ff 	mov.w	r3, #4294967295
 8002c9a:	60fb      	str	r3, [r7, #12]
          break;
 8002c9c:	bf00      	nop
      }
      break;
 8002c9e:	e02c      	b.n	8002cfa <LIS2DW12_ACC_GetSensitivity+0x12a>
    case LIS2DW12_CONT_LOW_PWR_LOW_NOISE_3:
    case LIS2DW12_CONT_LOW_PWR_LOW_NOISE_2:
    case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_4:
    case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_3:
    case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_2:
      switch (full_scale)
 8002ca0:	7afb      	ldrb	r3, [r7, #11]
 8002ca2:	2b03      	cmp	r3, #3
 8002ca4:	d81a      	bhi.n	8002cdc <LIS2DW12_ACC_GetSensitivity+0x10c>
 8002ca6:	a201      	add	r2, pc, #4	@ (adr r2, 8002cac <LIS2DW12_ACC_GetSensitivity+0xdc>)
 8002ca8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002cac:	08002cbd 	.word	0x08002cbd
 8002cb0:	08002cc5 	.word	0x08002cc5
 8002cb4:	08002ccd 	.word	0x08002ccd
 8002cb8:	08002cd5 	.word	0x08002cd5
      {
        case LIS2DW12_2g:
          *Sensitivity = LIS2DW12_ACC_SENSITIVITY_FOR_FS_2G_OTHER_MODES;
 8002cbc:	683b      	ldr	r3, [r7, #0]
 8002cbe:	4a16      	ldr	r2, [pc, #88]	@ (8002d18 <LIS2DW12_ACC_GetSensitivity+0x148>)
 8002cc0:	601a      	str	r2, [r3, #0]
          break;
 8002cc2:	e012      	b.n	8002cea <LIS2DW12_ACC_GetSensitivity+0x11a>

        case LIS2DW12_4g:
          *Sensitivity = LIS2DW12_ACC_SENSITIVITY_FOR_FS_4G_OTHER_MODES;
 8002cc4:	683b      	ldr	r3, [r7, #0]
 8002cc6:	4a15      	ldr	r2, [pc, #84]	@ (8002d1c <LIS2DW12_ACC_GetSensitivity+0x14c>)
 8002cc8:	601a      	str	r2, [r3, #0]
          break;
 8002cca:	e00e      	b.n	8002cea <LIS2DW12_ACC_GetSensitivity+0x11a>

        case LIS2DW12_8g:
          *Sensitivity = LIS2DW12_ACC_SENSITIVITY_FOR_FS_8G_OTHER_MODES;
 8002ccc:	683b      	ldr	r3, [r7, #0]
 8002cce:	4a0d      	ldr	r2, [pc, #52]	@ (8002d04 <LIS2DW12_ACC_GetSensitivity+0x134>)
 8002cd0:	601a      	str	r2, [r3, #0]
          break;
 8002cd2:	e00a      	b.n	8002cea <LIS2DW12_ACC_GetSensitivity+0x11a>

        case LIS2DW12_16g:
          *Sensitivity = LIS2DW12_ACC_SENSITIVITY_FOR_FS_16G_OTHER_MODES;
 8002cd4:	683b      	ldr	r3, [r7, #0]
 8002cd6:	4a0c      	ldr	r2, [pc, #48]	@ (8002d08 <LIS2DW12_ACC_GetSensitivity+0x138>)
 8002cd8:	601a      	str	r2, [r3, #0]
          break;
 8002cda:	e006      	b.n	8002cea <LIS2DW12_ACC_GetSensitivity+0x11a>

        default:
          *Sensitivity = -1.0f;
 8002cdc:	683b      	ldr	r3, [r7, #0]
 8002cde:	4a0d      	ldr	r2, [pc, #52]	@ (8002d14 <LIS2DW12_ACC_GetSensitivity+0x144>)
 8002ce0:	601a      	str	r2, [r3, #0]
          ret = LIS2DW12_ERROR;
 8002ce2:	f04f 33ff 	mov.w	r3, #4294967295
 8002ce6:	60fb      	str	r3, [r7, #12]
          break;
 8002ce8:	bf00      	nop
      }
      break;
 8002cea:	e006      	b.n	8002cfa <LIS2DW12_ACC_GetSensitivity+0x12a>

    default:
      *Sensitivity = -1.0f;
 8002cec:	683b      	ldr	r3, [r7, #0]
 8002cee:	4a09      	ldr	r2, [pc, #36]	@ (8002d14 <LIS2DW12_ACC_GetSensitivity+0x144>)
 8002cf0:	601a      	str	r2, [r3, #0]
      ret = LIS2DW12_ERROR;
 8002cf2:	f04f 33ff 	mov.w	r3, #4294967295
 8002cf6:	60fb      	str	r3, [r7, #12]
      break;
 8002cf8:	bf00      	nop
  }

  return ret;
 8002cfa:	68fb      	ldr	r3, [r7, #12]
}
 8002cfc:	4618      	mov	r0, r3
 8002cfe:	3710      	adds	r7, #16
 8002d00:	46bd      	mov	sp, r7
 8002d02:	bd80      	pop	{r7, pc}
 8002d04:	3f79db23 	.word	0x3f79db23
 8002d08:	3ff9db23 	.word	0x3ff9db23
 8002d0c:	4079db23 	.word	0x4079db23
 8002d10:	40f9db23 	.word	0x40f9db23
 8002d14:	bf800000 	.word	0xbf800000
 8002d18:	3e79db23 	.word	0x3e79db23
 8002d1c:	3ef9db23 	.word	0x3ef9db23

08002d20 <LIS2DW12_ACC_GetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr pointer where the output data rate is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2DW12_ACC_GetOutputDataRate(LIS2DW12_Object_t *pObj, float *Odr)
{
 8002d20:	b580      	push	{r7, lr}
 8002d22:	b084      	sub	sp, #16
 8002d24:	af00      	add	r7, sp, #0
 8002d26:	6078      	str	r0, [r7, #4]
 8002d28:	6039      	str	r1, [r7, #0]
  int32_t ret = LIS2DW12_OK;
 8002d2a:	2300      	movs	r3, #0
 8002d2c:	60fb      	str	r3, [r7, #12]
  lis2dw12_odr_t odr_low_level;
  lis2dw12_mode_t mode;

  /* Get current output data rate. */
  if (lis2dw12_data_rate_get(&(pObj->Ctx), &odr_low_level) != LIS2DW12_OK)
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	3320      	adds	r3, #32
 8002d32:	f107 020b 	add.w	r2, r7, #11
 8002d36:	4611      	mov	r1, r2
 8002d38:	4618      	mov	r0, r3
 8002d3a:	f000 fe31 	bl	80039a0 <lis2dw12_data_rate_get>
 8002d3e:	4603      	mov	r3, r0
 8002d40:	2b00      	cmp	r3, #0
 8002d42:	d002      	beq.n	8002d4a <LIS2DW12_ACC_GetOutputDataRate+0x2a>
  {
    return LIS2DW12_ERROR;
 8002d44:	f04f 33ff 	mov.w	r3, #4294967295
 8002d48:	e14f      	b.n	8002fea <LIS2DW12_ACC_GetOutputDataRate+0x2ca>
  }

  /* Read actual power mode selection from sensor. */
  if (lis2dw12_power_mode_get(&(pObj->Ctx), &mode) != LIS2DW12_OK)
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	3320      	adds	r3, #32
 8002d4e:	f107 020a 	add.w	r2, r7, #10
 8002d52:	4611      	mov	r1, r2
 8002d54:	4618      	mov	r0, r3
 8002d56:	f000 fd23 	bl	80037a0 <lis2dw12_power_mode_get>
 8002d5a:	4603      	mov	r3, r0
 8002d5c:	2b00      	cmp	r3, #0
 8002d5e:	d002      	beq.n	8002d66 <LIS2DW12_ACC_GetOutputDataRate+0x46>
  {
    return LIS2DW12_ERROR;
 8002d60:	f04f 33ff 	mov.w	r3, #4294967295
 8002d64:	e141      	b.n	8002fea <LIS2DW12_ACC_GetOutputDataRate+0x2ca>
  }

  switch (odr_low_level)
 8002d66:	7afb      	ldrb	r3, [r7, #11]
 8002d68:	2b32      	cmp	r3, #50	@ 0x32
 8002d6a:	f200 8136 	bhi.w	8002fda <LIS2DW12_ACC_GetOutputDataRate+0x2ba>
 8002d6e:	a201      	add	r2, pc, #4	@ (adr r2, 8002d74 <LIS2DW12_ACC_GetOutputDataRate+0x54>)
 8002d70:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d74:	08002e41 	.word	0x08002e41
 8002d78:	08002e4b 	.word	0x08002e4b
 8002d7c:	08002ea5 	.word	0x08002ea5
 8002d80:	08002ead 	.word	0x08002ead
 8002d84:	08002eb5 	.word	0x08002eb5
 8002d88:	08002ebd 	.word	0x08002ebd
 8002d8c:	08002ec5 	.word	0x08002ec5
 8002d90:	08002ecd 	.word	0x08002ecd
 8002d94:	08002f27 	.word	0x08002f27
 8002d98:	08002f81 	.word	0x08002f81
 8002d9c:	08002fdb 	.word	0x08002fdb
 8002da0:	08002fdb 	.word	0x08002fdb
 8002da4:	08002fdb 	.word	0x08002fdb
 8002da8:	08002fdb 	.word	0x08002fdb
 8002dac:	08002fdb 	.word	0x08002fdb
 8002db0:	08002fdb 	.word	0x08002fdb
 8002db4:	08002fdb 	.word	0x08002fdb
 8002db8:	08002fdb 	.word	0x08002fdb
 8002dbc:	08002e41 	.word	0x08002e41
 8002dc0:	08002fdb 	.word	0x08002fdb
 8002dc4:	08002fdb 	.word	0x08002fdb
 8002dc8:	08002fdb 	.word	0x08002fdb
 8002dcc:	08002fdb 	.word	0x08002fdb
 8002dd0:	08002fdb 	.word	0x08002fdb
 8002dd4:	08002fdb 	.word	0x08002fdb
 8002dd8:	08002fdb 	.word	0x08002fdb
 8002ddc:	08002fdb 	.word	0x08002fdb
 8002de0:	08002fdb 	.word	0x08002fdb
 8002de4:	08002fdb 	.word	0x08002fdb
 8002de8:	08002fdb 	.word	0x08002fdb
 8002dec:	08002fdb 	.word	0x08002fdb
 8002df0:	08002fdb 	.word	0x08002fdb
 8002df4:	08002fdb 	.word	0x08002fdb
 8002df8:	08002fdb 	.word	0x08002fdb
 8002dfc:	08002fdb 	.word	0x08002fdb
 8002e00:	08002fdb 	.word	0x08002fdb
 8002e04:	08002fdb 	.word	0x08002fdb
 8002e08:	08002fdb 	.word	0x08002fdb
 8002e0c:	08002fdb 	.word	0x08002fdb
 8002e10:	08002fdb 	.word	0x08002fdb
 8002e14:	08002fdb 	.word	0x08002fdb
 8002e18:	08002fdb 	.word	0x08002fdb
 8002e1c:	08002fdb 	.word	0x08002fdb
 8002e20:	08002fdb 	.word	0x08002fdb
 8002e24:	08002fdb 	.word	0x08002fdb
 8002e28:	08002fdb 	.word	0x08002fdb
 8002e2c:	08002fdb 	.word	0x08002fdb
 8002e30:	08002fdb 	.word	0x08002fdb
 8002e34:	08002fdb 	.word	0x08002fdb
 8002e38:	08002fdb 	.word	0x08002fdb
 8002e3c:	08002e41 	.word	0x08002e41
  {
    case LIS2DW12_XL_ODR_OFF:
    case LIS2DW12_XL_SET_SW_TRIG:
    case LIS2DW12_XL_SET_PIN_TRIG:
      *Odr = 0.0f;
 8002e40:	683b      	ldr	r3, [r7, #0]
 8002e42:	f04f 0200 	mov.w	r2, #0
 8002e46:	601a      	str	r2, [r3, #0]
      break;
 8002e48:	e0ce      	b.n	8002fe8 <LIS2DW12_ACC_GetOutputDataRate+0x2c8>

    case LIS2DW12_XL_ODR_1Hz6_LP_ONLY:
      switch (mode)
 8002e4a:	7abb      	ldrb	r3, [r7, #10]
 8002e4c:	2b1b      	cmp	r3, #27
 8002e4e:	bf8c      	ite	hi
 8002e50:	2201      	movhi	r2, #1
 8002e52:	2200      	movls	r2, #0
 8002e54:	b2d2      	uxtb	r2, r2
 8002e56:	2a00      	cmp	r2, #0
 8002e58:	d11c      	bne.n	8002e94 <LIS2DW12_ACC_GetOutputDataRate+0x174>
 8002e5a:	2201      	movs	r2, #1
 8002e5c:	fa02 f303 	lsl.w	r3, r2, r3
 8002e60:	f003 320f 	and.w	r2, r3, #252645135	@ 0xf0f0f0f
 8002e64:	2a00      	cmp	r2, #0
 8002e66:	bf14      	ite	ne
 8002e68:	2201      	movne	r2, #1
 8002e6a:	2200      	moveq	r2, #0
 8002e6c:	b2d2      	uxtb	r2, r2
 8002e6e:	2a00      	cmp	r2, #0
 8002e70:	d10c      	bne.n	8002e8c <LIS2DW12_ACC_GetOutputDataRate+0x16c>
 8002e72:	f003 1310 	and.w	r3, r3, #1048592	@ 0x100010
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	bf14      	ite	ne
 8002e7a:	2301      	movne	r3, #1
 8002e7c:	2300      	moveq	r3, #0
 8002e7e:	b2db      	uxtb	r3, r3
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	d007      	beq.n	8002e94 <LIS2DW12_ACC_GetOutputDataRate+0x174>
      {
        case LIS2DW12_HIGH_PERFORMANCE:
        case LIS2DW12_HIGH_PERFORMANCE_LOW_NOISE:
          *Odr = 12.5f;
 8002e84:	683b      	ldr	r3, [r7, #0]
 8002e86:	4a5b      	ldr	r2, [pc, #364]	@ (8002ff4 <LIS2DW12_ACC_GetOutputDataRate+0x2d4>)
 8002e88:	601a      	str	r2, [r3, #0]
          break;
 8002e8a:	e00a      	b.n	8002ea2 <LIS2DW12_ACC_GetOutputDataRate+0x182>
        case LIS2DW12_CONT_LOW_PWR_LOW_NOISE_12bit:
        case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_4:
        case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_3:
        case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_2:
        case LIS2DW12_SINGLE_LOW_LOW_NOISE_PWR_12bit:
          *Odr = 1.6f;
 8002e8c:	683b      	ldr	r3, [r7, #0]
 8002e8e:	4a5a      	ldr	r2, [pc, #360]	@ (8002ff8 <LIS2DW12_ACC_GetOutputDataRate+0x2d8>)
 8002e90:	601a      	str	r2, [r3, #0]
          break;
 8002e92:	e006      	b.n	8002ea2 <LIS2DW12_ACC_GetOutputDataRate+0x182>

        default:
          *Odr = -1.0f;
 8002e94:	683b      	ldr	r3, [r7, #0]
 8002e96:	4a59      	ldr	r2, [pc, #356]	@ (8002ffc <LIS2DW12_ACC_GetOutputDataRate+0x2dc>)
 8002e98:	601a      	str	r2, [r3, #0]
          ret = LIS2DW12_ERROR;
 8002e9a:	f04f 33ff 	mov.w	r3, #4294967295
 8002e9e:	60fb      	str	r3, [r7, #12]
          break;
 8002ea0:	bf00      	nop
      }
      break;
 8002ea2:	e0a1      	b.n	8002fe8 <LIS2DW12_ACC_GetOutputDataRate+0x2c8>

    case LIS2DW12_XL_ODR_12Hz5:
      *Odr = 12.5f;
 8002ea4:	683b      	ldr	r3, [r7, #0]
 8002ea6:	4a53      	ldr	r2, [pc, #332]	@ (8002ff4 <LIS2DW12_ACC_GetOutputDataRate+0x2d4>)
 8002ea8:	601a      	str	r2, [r3, #0]
      break;
 8002eaa:	e09d      	b.n	8002fe8 <LIS2DW12_ACC_GetOutputDataRate+0x2c8>

    case LIS2DW12_XL_ODR_25Hz:
      *Odr = 25.0f;
 8002eac:	683b      	ldr	r3, [r7, #0]
 8002eae:	4a54      	ldr	r2, [pc, #336]	@ (8003000 <LIS2DW12_ACC_GetOutputDataRate+0x2e0>)
 8002eb0:	601a      	str	r2, [r3, #0]
      break;
 8002eb2:	e099      	b.n	8002fe8 <LIS2DW12_ACC_GetOutputDataRate+0x2c8>

    case LIS2DW12_XL_ODR_50Hz:
      *Odr = 50.0f;
 8002eb4:	683b      	ldr	r3, [r7, #0]
 8002eb6:	4a53      	ldr	r2, [pc, #332]	@ (8003004 <LIS2DW12_ACC_GetOutputDataRate+0x2e4>)
 8002eb8:	601a      	str	r2, [r3, #0]
      break;
 8002eba:	e095      	b.n	8002fe8 <LIS2DW12_ACC_GetOutputDataRate+0x2c8>

    case LIS2DW12_XL_ODR_100Hz:
      *Odr = 100.0f;
 8002ebc:	683b      	ldr	r3, [r7, #0]
 8002ebe:	4a52      	ldr	r2, [pc, #328]	@ (8003008 <LIS2DW12_ACC_GetOutputDataRate+0x2e8>)
 8002ec0:	601a      	str	r2, [r3, #0]
      break;
 8002ec2:	e091      	b.n	8002fe8 <LIS2DW12_ACC_GetOutputDataRate+0x2c8>

    case LIS2DW12_XL_ODR_200Hz:
      *Odr = 200.0f;
 8002ec4:	683b      	ldr	r3, [r7, #0]
 8002ec6:	4a51      	ldr	r2, [pc, #324]	@ (800300c <LIS2DW12_ACC_GetOutputDataRate+0x2ec>)
 8002ec8:	601a      	str	r2, [r3, #0]
      break;
 8002eca:	e08d      	b.n	8002fe8 <LIS2DW12_ACC_GetOutputDataRate+0x2c8>

    case LIS2DW12_XL_ODR_400Hz:
      switch (mode)
 8002ecc:	7abb      	ldrb	r3, [r7, #10]
 8002ece:	2b1b      	cmp	r3, #27
 8002ed0:	bf8c      	ite	hi
 8002ed2:	2201      	movhi	r2, #1
 8002ed4:	2200      	movls	r2, #0
 8002ed6:	b2d2      	uxtb	r2, r2
 8002ed8:	2a00      	cmp	r2, #0
 8002eda:	d11c      	bne.n	8002f16 <LIS2DW12_ACC_GetOutputDataRate+0x1f6>
 8002edc:	2201      	movs	r2, #1
 8002ede:	fa02 f303 	lsl.w	r3, r2, r3
 8002ee2:	f003 320f 	and.w	r2, r3, #252645135	@ 0xf0f0f0f
 8002ee6:	2a00      	cmp	r2, #0
 8002ee8:	bf14      	ite	ne
 8002eea:	2201      	movne	r2, #1
 8002eec:	2200      	moveq	r2, #0
 8002eee:	b2d2      	uxtb	r2, r2
 8002ef0:	2a00      	cmp	r2, #0
 8002ef2:	d10c      	bne.n	8002f0e <LIS2DW12_ACC_GetOutputDataRate+0x1ee>
 8002ef4:	f003 1310 	and.w	r3, r3, #1048592	@ 0x100010
 8002ef8:	2b00      	cmp	r3, #0
 8002efa:	bf14      	ite	ne
 8002efc:	2301      	movne	r3, #1
 8002efe:	2300      	moveq	r3, #0
 8002f00:	b2db      	uxtb	r3, r3
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	d007      	beq.n	8002f16 <LIS2DW12_ACC_GetOutputDataRate+0x1f6>
      {
        case LIS2DW12_HIGH_PERFORMANCE:
        case LIS2DW12_HIGH_PERFORMANCE_LOW_NOISE:
          *Odr = 400.0f;
 8002f06:	683b      	ldr	r3, [r7, #0]
 8002f08:	4a41      	ldr	r2, [pc, #260]	@ (8003010 <LIS2DW12_ACC_GetOutputDataRate+0x2f0>)
 8002f0a:	601a      	str	r2, [r3, #0]
          break;
 8002f0c:	e00a      	b.n	8002f24 <LIS2DW12_ACC_GetOutputDataRate+0x204>
        case LIS2DW12_CONT_LOW_PWR_LOW_NOISE_12bit:
        case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_4:
        case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_3:
        case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_2:
        case LIS2DW12_SINGLE_LOW_LOW_NOISE_PWR_12bit:
          *Odr = 200.0f;
 8002f0e:	683b      	ldr	r3, [r7, #0]
 8002f10:	4a3e      	ldr	r2, [pc, #248]	@ (800300c <LIS2DW12_ACC_GetOutputDataRate+0x2ec>)
 8002f12:	601a      	str	r2, [r3, #0]
          break;
 8002f14:	e006      	b.n	8002f24 <LIS2DW12_ACC_GetOutputDataRate+0x204>

        default:
          *Odr = -1.0f;
 8002f16:	683b      	ldr	r3, [r7, #0]
 8002f18:	4a38      	ldr	r2, [pc, #224]	@ (8002ffc <LIS2DW12_ACC_GetOutputDataRate+0x2dc>)
 8002f1a:	601a      	str	r2, [r3, #0]
          ret = LIS2DW12_ERROR;
 8002f1c:	f04f 33ff 	mov.w	r3, #4294967295
 8002f20:	60fb      	str	r3, [r7, #12]
          break;
 8002f22:	bf00      	nop
      }
      break;
 8002f24:	e060      	b.n	8002fe8 <LIS2DW12_ACC_GetOutputDataRate+0x2c8>

    case LIS2DW12_XL_ODR_800Hz:
      switch (mode)
 8002f26:	7abb      	ldrb	r3, [r7, #10]
 8002f28:	2b1b      	cmp	r3, #27
 8002f2a:	bf8c      	ite	hi
 8002f2c:	2201      	movhi	r2, #1
 8002f2e:	2200      	movls	r2, #0
 8002f30:	b2d2      	uxtb	r2, r2
 8002f32:	2a00      	cmp	r2, #0
 8002f34:	d11c      	bne.n	8002f70 <LIS2DW12_ACC_GetOutputDataRate+0x250>
 8002f36:	2201      	movs	r2, #1
 8002f38:	fa02 f303 	lsl.w	r3, r2, r3
 8002f3c:	f003 320f 	and.w	r2, r3, #252645135	@ 0xf0f0f0f
 8002f40:	2a00      	cmp	r2, #0
 8002f42:	bf14      	ite	ne
 8002f44:	2201      	movne	r2, #1
 8002f46:	2200      	moveq	r2, #0
 8002f48:	b2d2      	uxtb	r2, r2
 8002f4a:	2a00      	cmp	r2, #0
 8002f4c:	d10c      	bne.n	8002f68 <LIS2DW12_ACC_GetOutputDataRate+0x248>
 8002f4e:	f003 1310 	and.w	r3, r3, #1048592	@ 0x100010
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	bf14      	ite	ne
 8002f56:	2301      	movne	r3, #1
 8002f58:	2300      	moveq	r3, #0
 8002f5a:	b2db      	uxtb	r3, r3
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	d007      	beq.n	8002f70 <LIS2DW12_ACC_GetOutputDataRate+0x250>
      {
        case LIS2DW12_HIGH_PERFORMANCE:
        case LIS2DW12_HIGH_PERFORMANCE_LOW_NOISE:
          *Odr = 800.0f;
 8002f60:	683b      	ldr	r3, [r7, #0]
 8002f62:	4a2c      	ldr	r2, [pc, #176]	@ (8003014 <LIS2DW12_ACC_GetOutputDataRate+0x2f4>)
 8002f64:	601a      	str	r2, [r3, #0]
          break;
 8002f66:	e00a      	b.n	8002f7e <LIS2DW12_ACC_GetOutputDataRate+0x25e>
        case LIS2DW12_CONT_LOW_PWR_LOW_NOISE_12bit:
        case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_4:
        case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_3:
        case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_2:
        case LIS2DW12_SINGLE_LOW_LOW_NOISE_PWR_12bit:
          *Odr = 200.0f;
 8002f68:	683b      	ldr	r3, [r7, #0]
 8002f6a:	4a28      	ldr	r2, [pc, #160]	@ (800300c <LIS2DW12_ACC_GetOutputDataRate+0x2ec>)
 8002f6c:	601a      	str	r2, [r3, #0]
          break;
 8002f6e:	e006      	b.n	8002f7e <LIS2DW12_ACC_GetOutputDataRate+0x25e>

        default:
          *Odr = -1.0f;
 8002f70:	683b      	ldr	r3, [r7, #0]
 8002f72:	4a22      	ldr	r2, [pc, #136]	@ (8002ffc <LIS2DW12_ACC_GetOutputDataRate+0x2dc>)
 8002f74:	601a      	str	r2, [r3, #0]
          ret = LIS2DW12_ERROR;
 8002f76:	f04f 33ff 	mov.w	r3, #4294967295
 8002f7a:	60fb      	str	r3, [r7, #12]
          break;
 8002f7c:	bf00      	nop
      }
      break;
 8002f7e:	e033      	b.n	8002fe8 <LIS2DW12_ACC_GetOutputDataRate+0x2c8>

    case LIS2DW12_XL_ODR_1k6Hz:
      switch (mode)
 8002f80:	7abb      	ldrb	r3, [r7, #10]
 8002f82:	2b1b      	cmp	r3, #27
 8002f84:	bf8c      	ite	hi
 8002f86:	2201      	movhi	r2, #1
 8002f88:	2200      	movls	r2, #0
 8002f8a:	b2d2      	uxtb	r2, r2
 8002f8c:	2a00      	cmp	r2, #0
 8002f8e:	d11c      	bne.n	8002fca <LIS2DW12_ACC_GetOutputDataRate+0x2aa>
 8002f90:	2201      	movs	r2, #1
 8002f92:	fa02 f303 	lsl.w	r3, r2, r3
 8002f96:	f003 320f 	and.w	r2, r3, #252645135	@ 0xf0f0f0f
 8002f9a:	2a00      	cmp	r2, #0
 8002f9c:	bf14      	ite	ne
 8002f9e:	2201      	movne	r2, #1
 8002fa0:	2200      	moveq	r2, #0
 8002fa2:	b2d2      	uxtb	r2, r2
 8002fa4:	2a00      	cmp	r2, #0
 8002fa6:	d10c      	bne.n	8002fc2 <LIS2DW12_ACC_GetOutputDataRate+0x2a2>
 8002fa8:	f003 1310 	and.w	r3, r3, #1048592	@ 0x100010
 8002fac:	2b00      	cmp	r3, #0
 8002fae:	bf14      	ite	ne
 8002fb0:	2301      	movne	r3, #1
 8002fb2:	2300      	moveq	r3, #0
 8002fb4:	b2db      	uxtb	r3, r3
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	d007      	beq.n	8002fca <LIS2DW12_ACC_GetOutputDataRate+0x2aa>
      {
        case LIS2DW12_HIGH_PERFORMANCE:
        case LIS2DW12_HIGH_PERFORMANCE_LOW_NOISE:
          *Odr = 1600.0f;
 8002fba:	683b      	ldr	r3, [r7, #0]
 8002fbc:	4a16      	ldr	r2, [pc, #88]	@ (8003018 <LIS2DW12_ACC_GetOutputDataRate+0x2f8>)
 8002fbe:	601a      	str	r2, [r3, #0]
          break;
 8002fc0:	e00a      	b.n	8002fd8 <LIS2DW12_ACC_GetOutputDataRate+0x2b8>
        case LIS2DW12_CONT_LOW_PWR_LOW_NOISE_12bit:
        case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_4:
        case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_3:
        case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_2:
        case LIS2DW12_SINGLE_LOW_LOW_NOISE_PWR_12bit:
          *Odr = 200.0f;
 8002fc2:	683b      	ldr	r3, [r7, #0]
 8002fc4:	4a11      	ldr	r2, [pc, #68]	@ (800300c <LIS2DW12_ACC_GetOutputDataRate+0x2ec>)
 8002fc6:	601a      	str	r2, [r3, #0]
          break;
 8002fc8:	e006      	b.n	8002fd8 <LIS2DW12_ACC_GetOutputDataRate+0x2b8>

        default:
          *Odr = -1.0f;
 8002fca:	683b      	ldr	r3, [r7, #0]
 8002fcc:	4a0b      	ldr	r2, [pc, #44]	@ (8002ffc <LIS2DW12_ACC_GetOutputDataRate+0x2dc>)
 8002fce:	601a      	str	r2, [r3, #0]
          ret = LIS2DW12_ERROR;
 8002fd0:	f04f 33ff 	mov.w	r3, #4294967295
 8002fd4:	60fb      	str	r3, [r7, #12]
          break;
 8002fd6:	bf00      	nop
      }
      break;
 8002fd8:	e006      	b.n	8002fe8 <LIS2DW12_ACC_GetOutputDataRate+0x2c8>

    default:
      *Odr = -1.0f;
 8002fda:	683b      	ldr	r3, [r7, #0]
 8002fdc:	4a07      	ldr	r2, [pc, #28]	@ (8002ffc <LIS2DW12_ACC_GetOutputDataRate+0x2dc>)
 8002fde:	601a      	str	r2, [r3, #0]
      ret = LIS2DW12_ERROR;
 8002fe0:	f04f 33ff 	mov.w	r3, #4294967295
 8002fe4:	60fb      	str	r3, [r7, #12]
      break;
 8002fe6:	bf00      	nop
  }

  return ret;
 8002fe8:	68fb      	ldr	r3, [r7, #12]
}
 8002fea:	4618      	mov	r0, r3
 8002fec:	3710      	adds	r7, #16
 8002fee:	46bd      	mov	sp, r7
 8002ff0:	bd80      	pop	{r7, pc}
 8002ff2:	bf00      	nop
 8002ff4:	41480000 	.word	0x41480000
 8002ff8:	3fcccccd 	.word	0x3fcccccd
 8002ffc:	bf800000 	.word	0xbf800000
 8003000:	41c80000 	.word	0x41c80000
 8003004:	42480000 	.word	0x42480000
 8003008:	42c80000 	.word	0x42c80000
 800300c:	43480000 	.word	0x43480000
 8003010:	43c80000 	.word	0x43c80000
 8003014:	44480000 	.word	0x44480000
 8003018:	44c80000 	.word	0x44c80000

0800301c <LIS2DW12_ACC_SetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr the output data rate value to be set
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2DW12_ACC_SetOutputDataRate(LIS2DW12_Object_t *pObj, float Odr)
{
 800301c:	b580      	push	{r7, lr}
 800301e:	b082      	sub	sp, #8
 8003020:	af00      	add	r7, sp, #0
 8003022:	6078      	str	r0, [r7, #4]
 8003024:	6039      	str	r1, [r7, #0]
  /* By default we use High Performance mode and Low Noise disabled */
  return LIS2DW12_ACC_SetOutputDataRate_With_Mode(pObj, Odr, LIS2DW12_HIGH_PERFORMANCE_MODE, LIS2DW12_LOW_NOISE_DISABLE);
 8003026:	2300      	movs	r3, #0
 8003028:	2200      	movs	r2, #0
 800302a:	6839      	ldr	r1, [r7, #0]
 800302c:	6878      	ldr	r0, [r7, #4]
 800302e:	f000 f805 	bl	800303c <LIS2DW12_ACC_SetOutputDataRate_With_Mode>
 8003032:	4603      	mov	r3, r0
}
 8003034:	4618      	mov	r0, r3
 8003036:	3708      	adds	r7, #8
 8003038:	46bd      	mov	sp, r7
 800303a:	bd80      	pop	{r7, pc}

0800303c <LIS2DW12_ACC_SetOutputDataRate_With_Mode>:
  * @param  Noise the low noise option
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2DW12_ACC_SetOutputDataRate_With_Mode(LIS2DW12_Object_t *pObj, float Odr, LIS2DW12_Operating_Mode_t Mode,
                                                 LIS2DW12_Low_Noise_t Noise)
{
 800303c:	b580      	push	{r7, lr}
 800303e:	b084      	sub	sp, #16
 8003040:	af00      	add	r7, sp, #0
 8003042:	60f8      	str	r0, [r7, #12]
 8003044:	60b9      	str	r1, [r7, #8]
 8003046:	4611      	mov	r1, r2
 8003048:	461a      	mov	r2, r3
 800304a:	460b      	mov	r3, r1
 800304c:	71fb      	strb	r3, [r7, #7]
 800304e:	4613      	mov	r3, r2
 8003050:	71bb      	strb	r3, [r7, #6]
  /* Check if the component is enabled */
  if (pObj->acc_is_enabled == 1U)
 8003052:	68fb      	ldr	r3, [r7, #12]
 8003054:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8003058:	2b01      	cmp	r3, #1
 800305a:	d107      	bne.n	800306c <LIS2DW12_ACC_SetOutputDataRate_With_Mode+0x30>
  {
    return LIS2DW12_ACC_SetOutputDataRate_When_Enabled(pObj, Odr, Mode, Noise);
 800305c:	79bb      	ldrb	r3, [r7, #6]
 800305e:	79fa      	ldrb	r2, [r7, #7]
 8003060:	68b9      	ldr	r1, [r7, #8]
 8003062:	68f8      	ldr	r0, [r7, #12]
 8003064:	f000 f970 	bl	8003348 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled>
 8003068:	4603      	mov	r3, r0
 800306a:	e006      	b.n	800307a <LIS2DW12_ACC_SetOutputDataRate_With_Mode+0x3e>
  }
  else
  {
    return LIS2DW12_ACC_SetOutputDataRate_When_Disabled(pObj, Odr, Mode, Noise);
 800306c:	79bb      	ldrb	r3, [r7, #6]
 800306e:	79fa      	ldrb	r2, [r7, #7]
 8003070:	68b9      	ldr	r1, [r7, #8]
 8003072:	68f8      	ldr	r0, [r7, #12]
 8003074:	f000 fa6a 	bl	800354c <LIS2DW12_ACC_SetOutputDataRate_When_Disabled>
 8003078:	4603      	mov	r3, r0
  }
}
 800307a:	4618      	mov	r0, r3
 800307c:	3710      	adds	r7, #16
 800307e:	46bd      	mov	sp, r7
 8003080:	bd80      	pop	{r7, pc}
	...

08003084 <LIS2DW12_ACC_GetFullScale>:
  * @param  pObj the device pObj
  * @param  FullScale pointer where the full scale is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2DW12_ACC_GetFullScale(LIS2DW12_Object_t *pObj, int32_t *FullScale)
{
 8003084:	b580      	push	{r7, lr}
 8003086:	b084      	sub	sp, #16
 8003088:	af00      	add	r7, sp, #0
 800308a:	6078      	str	r0, [r7, #4]
 800308c:	6039      	str	r1, [r7, #0]
  int32_t ret = LIS2DW12_OK;
 800308e:	2300      	movs	r3, #0
 8003090:	60fb      	str	r3, [r7, #12]
  lis2dw12_fs_t fs_low_level;

  /* Read actual full scale selection from sensor. */
  if (lis2dw12_full_scale_get(&(pObj->Ctx), &fs_low_level) != LIS2DW12_OK)
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	3320      	adds	r3, #32
 8003096:	f107 020b 	add.w	r2, r7, #11
 800309a:	4611      	mov	r1, r2
 800309c:	4618      	mov	r0, r3
 800309e:	f000 fd95 	bl	8003bcc <lis2dw12_full_scale_get>
 80030a2:	4603      	mov	r3, r0
 80030a4:	2b00      	cmp	r3, #0
 80030a6:	d002      	beq.n	80030ae <LIS2DW12_ACC_GetFullScale+0x2a>
  {
    return LIS2DW12_ERROR;
 80030a8:	f04f 33ff 	mov.w	r3, #4294967295
 80030ac:	e027      	b.n	80030fe <LIS2DW12_ACC_GetFullScale+0x7a>
  }

  switch (fs_low_level)
 80030ae:	7afb      	ldrb	r3, [r7, #11]
 80030b0:	2b03      	cmp	r3, #3
 80030b2:	d81b      	bhi.n	80030ec <LIS2DW12_ACC_GetFullScale+0x68>
 80030b4:	a201      	add	r2, pc, #4	@ (adr r2, 80030bc <LIS2DW12_ACC_GetFullScale+0x38>)
 80030b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80030ba:	bf00      	nop
 80030bc:	080030cd 	.word	0x080030cd
 80030c0:	080030d5 	.word	0x080030d5
 80030c4:	080030dd 	.word	0x080030dd
 80030c8:	080030e5 	.word	0x080030e5
  {
    case LIS2DW12_2g:
      *FullScale =  2;
 80030cc:	683b      	ldr	r3, [r7, #0]
 80030ce:	2202      	movs	r2, #2
 80030d0:	601a      	str	r2, [r3, #0]
      break;
 80030d2:	e013      	b.n	80030fc <LIS2DW12_ACC_GetFullScale+0x78>

    case LIS2DW12_4g:
      *FullScale =  4;
 80030d4:	683b      	ldr	r3, [r7, #0]
 80030d6:	2204      	movs	r2, #4
 80030d8:	601a      	str	r2, [r3, #0]
      break;
 80030da:	e00f      	b.n	80030fc <LIS2DW12_ACC_GetFullScale+0x78>

    case LIS2DW12_8g:
      *FullScale =  8;
 80030dc:	683b      	ldr	r3, [r7, #0]
 80030de:	2208      	movs	r2, #8
 80030e0:	601a      	str	r2, [r3, #0]
      break;
 80030e2:	e00b      	b.n	80030fc <LIS2DW12_ACC_GetFullScale+0x78>

    case LIS2DW12_16g:
      *FullScale = 16;
 80030e4:	683b      	ldr	r3, [r7, #0]
 80030e6:	2210      	movs	r2, #16
 80030e8:	601a      	str	r2, [r3, #0]
      break;
 80030ea:	e007      	b.n	80030fc <LIS2DW12_ACC_GetFullScale+0x78>

    default:
      *FullScale = -1;
 80030ec:	683b      	ldr	r3, [r7, #0]
 80030ee:	f04f 32ff 	mov.w	r2, #4294967295
 80030f2:	601a      	str	r2, [r3, #0]
      ret = LIS2DW12_ERROR;
 80030f4:	f04f 33ff 	mov.w	r3, #4294967295
 80030f8:	60fb      	str	r3, [r7, #12]
      break;
 80030fa:	bf00      	nop
  }

  return ret;
 80030fc:	68fb      	ldr	r3, [r7, #12]
}
 80030fe:	4618      	mov	r0, r3
 8003100:	3710      	adds	r7, #16
 8003102:	46bd      	mov	sp, r7
 8003104:	bd80      	pop	{r7, pc}
 8003106:	bf00      	nop

08003108 <LIS2DW12_ACC_SetFullScale>:
  * @param  pObj the device pObj
  * @param  FullScale the functional full scale to be set
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2DW12_ACC_SetFullScale(LIS2DW12_Object_t *pObj, int32_t FullScale)
{
 8003108:	b580      	push	{r7, lr}
 800310a:	b084      	sub	sp, #16
 800310c:	af00      	add	r7, sp, #0
 800310e:	6078      	str	r0, [r7, #4]
 8003110:	6039      	str	r1, [r7, #0]
  lis2dw12_fs_t new_fs;

  /* Seems like MISRA C-2012 rule 14.3a violation but only from single file statical analysis point of view because
     the parameter passed to the function is not known at the moment of analysis */
  new_fs = (FullScale <= 2) ? LIS2DW12_2g
           : (FullScale <= 4) ? LIS2DW12_4g
 8003112:	683b      	ldr	r3, [r7, #0]
 8003114:	2b02      	cmp	r3, #2
 8003116:	dd0b      	ble.n	8003130 <LIS2DW12_ACC_SetFullScale+0x28>
 8003118:	683b      	ldr	r3, [r7, #0]
 800311a:	2b04      	cmp	r3, #4
 800311c:	dd06      	ble.n	800312c <LIS2DW12_ACC_SetFullScale+0x24>
 800311e:	683b      	ldr	r3, [r7, #0]
 8003120:	2b08      	cmp	r3, #8
 8003122:	dc01      	bgt.n	8003128 <LIS2DW12_ACC_SetFullScale+0x20>
 8003124:	2302      	movs	r3, #2
 8003126:	e004      	b.n	8003132 <LIS2DW12_ACC_SetFullScale+0x2a>
 8003128:	2303      	movs	r3, #3
 800312a:	e002      	b.n	8003132 <LIS2DW12_ACC_SetFullScale+0x2a>
 800312c:	2301      	movs	r3, #1
 800312e:	e000      	b.n	8003132 <LIS2DW12_ACC_SetFullScale+0x2a>
 8003130:	2300      	movs	r3, #0
  new_fs = (FullScale <= 2) ? LIS2DW12_2g
 8003132:	73fb      	strb	r3, [r7, #15]
           : (FullScale <= 8) ? LIS2DW12_8g
           :                    LIS2DW12_16g;

  if (lis2dw12_full_scale_set(&(pObj->Ctx), new_fs) != LIS2DW12_OK)
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	3320      	adds	r3, #32
 8003138:	7bfa      	ldrb	r2, [r7, #15]
 800313a:	4611      	mov	r1, r2
 800313c:	4618      	mov	r0, r3
 800313e:	f000 fd1f 	bl	8003b80 <lis2dw12_full_scale_set>
 8003142:	4603      	mov	r3, r0
 8003144:	2b00      	cmp	r3, #0
 8003146:	d002      	beq.n	800314e <LIS2DW12_ACC_SetFullScale+0x46>
  {
    return LIS2DW12_ERROR;
 8003148:	f04f 33ff 	mov.w	r3, #4294967295
 800314c:	e000      	b.n	8003150 <LIS2DW12_ACC_SetFullScale+0x48>
  }

  return LIS2DW12_OK;
 800314e:	2300      	movs	r3, #0
}
 8003150:	4618      	mov	r0, r3
 8003152:	3710      	adds	r7, #16
 8003154:	46bd      	mov	sp, r7
 8003156:	bd80      	pop	{r7, pc}

08003158 <LIS2DW12_ACC_GetAxesRaw>:
  * @param  pObj the device pObj
  * @param  Value pointer where the raw values of the axes are written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2DW12_ACC_GetAxesRaw(LIS2DW12_Object_t *pObj, LIS2DW12_AxesRaw_t *Value)
{
 8003158:	b580      	push	{r7, lr}
 800315a:	b086      	sub	sp, #24
 800315c:	af00      	add	r7, sp, #0
 800315e:	6078      	str	r0, [r7, #4]
 8003160:	6039      	str	r1, [r7, #0]
  lis2dw12_axis3bit16_t data_raw;
  lis2dw12_mode_t mode;
  int32_t ret = LIS2DW12_OK;
 8003162:	2300      	movs	r3, #0
 8003164:	617b      	str	r3, [r7, #20]

  /* Read actual power mode selection from sensor. */
  if (lis2dw12_power_mode_get(&(pObj->Ctx), &mode) != LIS2DW12_OK)
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	3320      	adds	r3, #32
 800316a:	f107 020b 	add.w	r2, r7, #11
 800316e:	4611      	mov	r1, r2
 8003170:	4618      	mov	r0, r3
 8003172:	f000 fb15 	bl	80037a0 <lis2dw12_power_mode_get>
 8003176:	4603      	mov	r3, r0
 8003178:	2b00      	cmp	r3, #0
 800317a:	d002      	beq.n	8003182 <LIS2DW12_ACC_GetAxesRaw+0x2a>
  {
    return LIS2DW12_ERROR;
 800317c:	f04f 33ff 	mov.w	r3, #4294967295
 8003180:	e068      	b.n	8003254 <LIS2DW12_ACC_GetAxesRaw+0xfc>
  }

  /* Read raw data values. */
  if (lis2dw12_acceleration_raw_get(&(pObj->Ctx), data_raw.i16bit) != LIS2DW12_OK)
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	3320      	adds	r3, #32
 8003186:	f107 020c 	add.w	r2, r7, #12
 800318a:	4611      	mov	r1, r2
 800318c:	4618      	mov	r0, r3
 800318e:	f000 fd55 	bl	8003c3c <lis2dw12_acceleration_raw_get>
 8003192:	4603      	mov	r3, r0
 8003194:	2b00      	cmp	r3, #0
 8003196:	d002      	beq.n	800319e <LIS2DW12_ACC_GetAxesRaw+0x46>
  {
    return LIS2DW12_ERROR;
 8003198:	f04f 33ff 	mov.w	r3, #4294967295
 800319c:	e05a      	b.n	8003254 <LIS2DW12_ACC_GetAxesRaw+0xfc>
  }

  switch (mode)
 800319e:	7afb      	ldrb	r3, [r7, #11]
 80031a0:	2b1b      	cmp	r3, #27
 80031a2:	bf8c      	ite	hi
 80031a4:	2201      	movhi	r2, #1
 80031a6:	2200      	movls	r2, #0
 80031a8:	b2d2      	uxtb	r2, r2
 80031aa:	2a00      	cmp	r2, #0
 80031ac:	d14d      	bne.n	800324a <LIS2DW12_ACC_GetAxesRaw+0xf2>
 80031ae:	2201      	movs	r2, #1
 80031b0:	409a      	lsls	r2, r3
 80031b2:	f002 331e 	and.w	r3, r2, #505290270	@ 0x1e1e1e1e
 80031b6:	f023 2310 	bic.w	r3, r3, #268439552	@ 0x10001000
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	bf14      	ite	ne
 80031be:	2301      	movne	r3, #1
 80031c0:	2300      	moveq	r3, #0
 80031c2:	b2db      	uxtb	r3, r3
 80031c4:	2b00      	cmp	r3, #0
 80031c6:	d124      	bne.n	8003212 <LIS2DW12_ACC_GetAxesRaw+0xba>
 80031c8:	f002 3301 	and.w	r3, r2, #16843009	@ 0x1010101
 80031cc:	2b00      	cmp	r3, #0
 80031ce:	bf14      	ite	ne
 80031d0:	2301      	movne	r3, #1
 80031d2:	2300      	moveq	r3, #0
 80031d4:	b2db      	uxtb	r3, r3
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	d037      	beq.n	800324a <LIS2DW12_ACC_GetAxesRaw+0xf2>
    case LIS2DW12_CONT_LOW_PWR_12bit:
    case LIS2DW12_SINGLE_LOW_PWR_12bit:
    case LIS2DW12_CONT_LOW_PWR_LOW_NOISE_12bit:
    case LIS2DW12_SINGLE_LOW_LOW_NOISE_PWR_12bit:
      /* Data format 12 bits. */
      Value->x = (data_raw.i16bit[0] / 16);
 80031da:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80031de:	2b00      	cmp	r3, #0
 80031e0:	da00      	bge.n	80031e4 <LIS2DW12_ACC_GetAxesRaw+0x8c>
 80031e2:	330f      	adds	r3, #15
 80031e4:	111b      	asrs	r3, r3, #4
 80031e6:	b21a      	sxth	r2, r3
 80031e8:	683b      	ldr	r3, [r7, #0]
 80031ea:	801a      	strh	r2, [r3, #0]
      Value->y = (data_raw.i16bit[1] / 16);
 80031ec:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	da00      	bge.n	80031f6 <LIS2DW12_ACC_GetAxesRaw+0x9e>
 80031f4:	330f      	adds	r3, #15
 80031f6:	111b      	asrs	r3, r3, #4
 80031f8:	b21a      	sxth	r2, r3
 80031fa:	683b      	ldr	r3, [r7, #0]
 80031fc:	805a      	strh	r2, [r3, #2]
      Value->z = (data_raw.i16bit[2] / 16);
 80031fe:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8003202:	2b00      	cmp	r3, #0
 8003204:	da00      	bge.n	8003208 <LIS2DW12_ACC_GetAxesRaw+0xb0>
 8003206:	330f      	adds	r3, #15
 8003208:	111b      	asrs	r3, r3, #4
 800320a:	b21a      	sxth	r2, r3
 800320c:	683b      	ldr	r3, [r7, #0]
 800320e:	809a      	strh	r2, [r3, #4]
      break;
 8003210:	e01f      	b.n	8003252 <LIS2DW12_ACC_GetAxesRaw+0xfa>
    case LIS2DW12_CONT_LOW_PWR_LOW_NOISE_2:
    case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_4:
    case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_3:
    case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_2:
      /* Data format 14 bits. */
      Value->x = (data_raw.i16bit[0] / 4);
 8003212:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8003216:	2b00      	cmp	r3, #0
 8003218:	da00      	bge.n	800321c <LIS2DW12_ACC_GetAxesRaw+0xc4>
 800321a:	3303      	adds	r3, #3
 800321c:	109b      	asrs	r3, r3, #2
 800321e:	b21a      	sxth	r2, r3
 8003220:	683b      	ldr	r3, [r7, #0]
 8003222:	801a      	strh	r2, [r3, #0]
      Value->y = (data_raw.i16bit[1] / 4);
 8003224:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8003228:	2b00      	cmp	r3, #0
 800322a:	da00      	bge.n	800322e <LIS2DW12_ACC_GetAxesRaw+0xd6>
 800322c:	3303      	adds	r3, #3
 800322e:	109b      	asrs	r3, r3, #2
 8003230:	b21a      	sxth	r2, r3
 8003232:	683b      	ldr	r3, [r7, #0]
 8003234:	805a      	strh	r2, [r3, #2]
      Value->z = (data_raw.i16bit[2] / 4);
 8003236:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 800323a:	2b00      	cmp	r3, #0
 800323c:	da00      	bge.n	8003240 <LIS2DW12_ACC_GetAxesRaw+0xe8>
 800323e:	3303      	adds	r3, #3
 8003240:	109b      	asrs	r3, r3, #2
 8003242:	b21a      	sxth	r2, r3
 8003244:	683b      	ldr	r3, [r7, #0]
 8003246:	809a      	strh	r2, [r3, #4]
      break;
 8003248:	e003      	b.n	8003252 <LIS2DW12_ACC_GetAxesRaw+0xfa>

    default:
      ret = LIS2DW12_ERROR;
 800324a:	f04f 33ff 	mov.w	r3, #4294967295
 800324e:	617b      	str	r3, [r7, #20]
      break;
 8003250:	bf00      	nop
  }

  return ret;
 8003252:	697b      	ldr	r3, [r7, #20]
}
 8003254:	4618      	mov	r0, r3
 8003256:	3718      	adds	r7, #24
 8003258:	46bd      	mov	sp, r7
 800325a:	bd80      	pop	{r7, pc}

0800325c <LIS2DW12_ACC_GetAxes>:
  * @param  pObj the device pObj
  * @param  Acceleration pointer where the values of the axes are written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2DW12_ACC_GetAxes(LIS2DW12_Object_t *pObj, LIS2DW12_Axes_t *Acceleration)
{
 800325c:	b580      	push	{r7, lr}
 800325e:	b086      	sub	sp, #24
 8003260:	af00      	add	r7, sp, #0
 8003262:	6078      	str	r0, [r7, #4]
 8003264:	6039      	str	r1, [r7, #0]
  LIS2DW12_AxesRaw_t data_raw;
  float sensitivity = 0.0f;
 8003266:	f04f 0300 	mov.w	r3, #0
 800326a:	60fb      	str	r3, [r7, #12]

  /* Read raw data values. */
  if (LIS2DW12_ACC_GetAxesRaw(pObj, &data_raw) != LIS2DW12_OK)
 800326c:	f107 0310 	add.w	r3, r7, #16
 8003270:	4619      	mov	r1, r3
 8003272:	6878      	ldr	r0, [r7, #4]
 8003274:	f7ff ff70 	bl	8003158 <LIS2DW12_ACC_GetAxesRaw>
 8003278:	4603      	mov	r3, r0
 800327a:	2b00      	cmp	r3, #0
 800327c:	d002      	beq.n	8003284 <LIS2DW12_ACC_GetAxes+0x28>
  {
    return LIS2DW12_ERROR;
 800327e:	f04f 33ff 	mov.w	r3, #4294967295
 8003282:	e042      	b.n	800330a <LIS2DW12_ACC_GetAxes+0xae>
  }

  /* Get LIS2DW12 actual sensitivity. */
  if (LIS2DW12_ACC_GetSensitivity(pObj, &sensitivity) != LIS2DW12_OK)
 8003284:	f107 030c 	add.w	r3, r7, #12
 8003288:	4619      	mov	r1, r3
 800328a:	6878      	ldr	r0, [r7, #4]
 800328c:	f7ff fca0 	bl	8002bd0 <LIS2DW12_ACC_GetSensitivity>
 8003290:	4603      	mov	r3, r0
 8003292:	2b00      	cmp	r3, #0
 8003294:	d002      	beq.n	800329c <LIS2DW12_ACC_GetAxes+0x40>
  {
    return LIS2DW12_ERROR;
 8003296:	f04f 33ff 	mov.w	r3, #4294967295
 800329a:	e036      	b.n	800330a <LIS2DW12_ACC_GetAxes+0xae>
  }

  /* Calculate the data. */
  Acceleration->x = (int32_t)((float)((float)data_raw.x * sensitivity));
 800329c:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 80032a0:	4618      	mov	r0, r3
 80032a2:	f7fd fcc3 	bl	8000c2c <__aeabi_i2f>
 80032a6:	4602      	mov	r2, r0
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	4619      	mov	r1, r3
 80032ac:	4610      	mov	r0, r2
 80032ae:	f7fd fd11 	bl	8000cd4 <__aeabi_fmul>
 80032b2:	4603      	mov	r3, r0
 80032b4:	4618      	mov	r0, r3
 80032b6:	f7fd fed3 	bl	8001060 <__aeabi_f2iz>
 80032ba:	4602      	mov	r2, r0
 80032bc:	683b      	ldr	r3, [r7, #0]
 80032be:	601a      	str	r2, [r3, #0]
  Acceleration->y = (int32_t)((float)((float)data_raw.y * sensitivity));
 80032c0:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80032c4:	4618      	mov	r0, r3
 80032c6:	f7fd fcb1 	bl	8000c2c <__aeabi_i2f>
 80032ca:	4602      	mov	r2, r0
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	4619      	mov	r1, r3
 80032d0:	4610      	mov	r0, r2
 80032d2:	f7fd fcff 	bl	8000cd4 <__aeabi_fmul>
 80032d6:	4603      	mov	r3, r0
 80032d8:	4618      	mov	r0, r3
 80032da:	f7fd fec1 	bl	8001060 <__aeabi_f2iz>
 80032de:	4602      	mov	r2, r0
 80032e0:	683b      	ldr	r3, [r7, #0]
 80032e2:	605a      	str	r2, [r3, #4]
  Acceleration->z = (int32_t)((float)((float)data_raw.z * sensitivity));
 80032e4:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80032e8:	4618      	mov	r0, r3
 80032ea:	f7fd fc9f 	bl	8000c2c <__aeabi_i2f>
 80032ee:	4602      	mov	r2, r0
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	4619      	mov	r1, r3
 80032f4:	4610      	mov	r0, r2
 80032f6:	f7fd fced 	bl	8000cd4 <__aeabi_fmul>
 80032fa:	4603      	mov	r3, r0
 80032fc:	4618      	mov	r0, r3
 80032fe:	f7fd feaf 	bl	8001060 <__aeabi_f2iz>
 8003302:	4602      	mov	r2, r0
 8003304:	683b      	ldr	r3, [r7, #0]
 8003306:	609a      	str	r2, [r3, #8]

  return LIS2DW12_OK;
 8003308:	2300      	movs	r3, #0
}
 800330a:	4618      	mov	r0, r3
 800330c:	3718      	adds	r7, #24
 800330e:	46bd      	mov	sp, r7
 8003310:	bd80      	pop	{r7, pc}

08003312 <LIS2DW12_Write_Reg>:
  * @param  Reg address to be written
  * @param  Data value to be written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2DW12_Write_Reg(LIS2DW12_Object_t *pObj, uint8_t Reg, uint8_t Data)
{
 8003312:	b580      	push	{r7, lr}
 8003314:	b082      	sub	sp, #8
 8003316:	af00      	add	r7, sp, #0
 8003318:	6078      	str	r0, [r7, #4]
 800331a:	460b      	mov	r3, r1
 800331c:	70fb      	strb	r3, [r7, #3]
 800331e:	4613      	mov	r3, r2
 8003320:	70bb      	strb	r3, [r7, #2]
  if (lis2dw12_write_reg(&(pObj->Ctx), Reg, &Data, 1) != LIS2DW12_OK)
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	f103 0020 	add.w	r0, r3, #32
 8003328:	1cba      	adds	r2, r7, #2
 800332a:	78f9      	ldrb	r1, [r7, #3]
 800332c:	2301      	movs	r3, #1
 800332e:	f000 f9d1 	bl	80036d4 <lis2dw12_write_reg>
 8003332:	4603      	mov	r3, r0
 8003334:	2b00      	cmp	r3, #0
 8003336:	d002      	beq.n	800333e <LIS2DW12_Write_Reg+0x2c>
  {
    return LIS2DW12_ERROR;
 8003338:	f04f 33ff 	mov.w	r3, #4294967295
 800333c:	e000      	b.n	8003340 <LIS2DW12_Write_Reg+0x2e>
  }

  return LIS2DW12_OK;
 800333e:	2300      	movs	r3, #0
}
 8003340:	4618      	mov	r0, r3
 8003342:	3708      	adds	r7, #8
 8003344:	46bd      	mov	sp, r7
 8003346:	bd80      	pop	{r7, pc}

08003348 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled>:
  * @param  Noise the low noise option
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t LIS2DW12_ACC_SetOutputDataRate_When_Enabled(LIS2DW12_Object_t *pObj, float Odr,
                                                           LIS2DW12_Operating_Mode_t Mode, LIS2DW12_Low_Noise_t Noise)
{
 8003348:	b580      	push	{r7, lr}
 800334a:	b086      	sub	sp, #24
 800334c:	af00      	add	r7, sp, #0
 800334e:	60f8      	str	r0, [r7, #12]
 8003350:	60b9      	str	r1, [r7, #8]
 8003352:	4611      	mov	r1, r2
 8003354:	461a      	mov	r2, r3
 8003356:	460b      	mov	r3, r1
 8003358:	71fb      	strb	r3, [r7, #7]
 800335a:	4613      	mov	r3, r2
 800335c:	71bb      	strb	r3, [r7, #6]
  lis2dw12_odr_t new_odr;
  lis2dw12_mode_t new_power_mode;

  switch (Mode)
 800335e:	79fb      	ldrb	r3, [r7, #7]
 8003360:	3b01      	subs	r3, #1
 8003362:	2b03      	cmp	r3, #3
 8003364:	d80a      	bhi.n	800337c <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x34>
 8003366:	a201      	add	r2, pc, #4	@ (adr r2, 800336c <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x24>)
 8003368:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800336c:	080033a5 	.word	0x080033a5
 8003370:	080033cd 	.word	0x080033cd
 8003374:	080033f5 	.word	0x080033f5
 8003378:	0800341d 	.word	0x0800341d
  {
    case LIS2DW12_HIGH_PERFORMANCE_MODE:
    default:
      switch (Noise)
 800337c:	79bb      	ldrb	r3, [r7, #6]
 800337e:	2b01      	cmp	r3, #1
 8003380:	d002      	beq.n	8003388 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x40>
      {
        case LIS2DW12_LOW_NOISE_DISABLE:
        default:
          new_power_mode = LIS2DW12_HIGH_PERFORMANCE;
 8003382:	2304      	movs	r3, #4
 8003384:	75fb      	strb	r3, [r7, #23]
          break;
 8003386:	e002      	b.n	800338e <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x46>
        case LIS2DW12_LOW_NOISE_ENABLE:
          new_power_mode = LIS2DW12_HIGH_PERFORMANCE_LOW_NOISE;
 8003388:	2314      	movs	r3, #20
 800338a:	75fb      	strb	r3, [r7, #23]
          break;
 800338c:	bf00      	nop
      }

      /* If High Performance mode minimum ODR is 12.5Hz */
      if (Odr < 12.5f)
 800338e:	4967      	ldr	r1, [pc, #412]	@ (800352c <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x1e4>)
 8003390:	68b8      	ldr	r0, [r7, #8]
 8003392:	f7fd fe3d 	bl	8001010 <__aeabi_fcmplt>
 8003396:	4603      	mov	r3, r0
 8003398:	2b00      	cmp	r3, #0
 800339a:	d100      	bne.n	800339e <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x56>
      {
        Odr = 12.5f;
      }
      break;
 800339c:	e052      	b.n	8003444 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0xfc>
        Odr = 12.5f;
 800339e:	4b63      	ldr	r3, [pc, #396]	@ (800352c <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x1e4>)
 80033a0:	60bb      	str	r3, [r7, #8]
      break;
 80033a2:	e04f      	b.n	8003444 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0xfc>
    case LIS2DW12_LOW_POWER_MODE4:
      switch (Noise)
 80033a4:	79bb      	ldrb	r3, [r7, #6]
 80033a6:	2b01      	cmp	r3, #1
 80033a8:	d002      	beq.n	80033b0 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x68>
      {
        case LIS2DW12_LOW_NOISE_DISABLE:
        default:
          new_power_mode = LIS2DW12_CONT_LOW_PWR_4;
 80033aa:	2303      	movs	r3, #3
 80033ac:	75fb      	strb	r3, [r7, #23]
          break;
 80033ae:	e002      	b.n	80033b6 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x6e>
        case LIS2DW12_LOW_NOISE_ENABLE:
          new_power_mode = LIS2DW12_CONT_LOW_PWR_LOW_NOISE_4;
 80033b0:	2313      	movs	r3, #19
 80033b2:	75fb      	strb	r3, [r7, #23]
          break;
 80033b4:	bf00      	nop
      }

      /* If Low Power mode maximum ODR is 200Hz */
      if (Odr > 200.0f)
 80033b6:	495e      	ldr	r1, [pc, #376]	@ (8003530 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x1e8>)
 80033b8:	68b8      	ldr	r0, [r7, #8]
 80033ba:	f7fd fe47 	bl	800104c <__aeabi_fcmpgt>
 80033be:	4603      	mov	r3, r0
 80033c0:	2b00      	cmp	r3, #0
 80033c2:	d100      	bne.n	80033c6 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x7e>
      {
        Odr = 200.0f;
      }
      break;
 80033c4:	e03e      	b.n	8003444 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0xfc>
        Odr = 200.0f;
 80033c6:	4b5a      	ldr	r3, [pc, #360]	@ (8003530 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x1e8>)
 80033c8:	60bb      	str	r3, [r7, #8]
      break;
 80033ca:	e03b      	b.n	8003444 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0xfc>
    case LIS2DW12_LOW_POWER_MODE3:
      switch (Noise)
 80033cc:	79bb      	ldrb	r3, [r7, #6]
 80033ce:	2b01      	cmp	r3, #1
 80033d0:	d002      	beq.n	80033d8 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x90>
      {
        case LIS2DW12_LOW_NOISE_DISABLE:
        default:
          new_power_mode = LIS2DW12_CONT_LOW_PWR_3;
 80033d2:	2302      	movs	r3, #2
 80033d4:	75fb      	strb	r3, [r7, #23]
          break;
 80033d6:	e002      	b.n	80033de <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x96>
        case LIS2DW12_LOW_NOISE_ENABLE:
          new_power_mode = LIS2DW12_CONT_LOW_PWR_LOW_NOISE_3;
 80033d8:	2312      	movs	r3, #18
 80033da:	75fb      	strb	r3, [r7, #23]
          break;
 80033dc:	bf00      	nop
      }

      /* If Low Power mode maximum ODR is 200Hz */
      if (Odr > 200.0f)
 80033de:	4954      	ldr	r1, [pc, #336]	@ (8003530 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x1e8>)
 80033e0:	68b8      	ldr	r0, [r7, #8]
 80033e2:	f7fd fe33 	bl	800104c <__aeabi_fcmpgt>
 80033e6:	4603      	mov	r3, r0
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	d100      	bne.n	80033ee <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0xa6>
      {
        Odr = 200.0f;
      }
      break;
 80033ec:	e02a      	b.n	8003444 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0xfc>
        Odr = 200.0f;
 80033ee:	4b50      	ldr	r3, [pc, #320]	@ (8003530 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x1e8>)
 80033f0:	60bb      	str	r3, [r7, #8]
      break;
 80033f2:	e027      	b.n	8003444 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0xfc>
    case LIS2DW12_LOW_POWER_MODE2:
      switch (Noise)
 80033f4:	79bb      	ldrb	r3, [r7, #6]
 80033f6:	2b01      	cmp	r3, #1
 80033f8:	d002      	beq.n	8003400 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0xb8>
      {
        case LIS2DW12_LOW_NOISE_DISABLE:
        default:
          new_power_mode = LIS2DW12_CONT_LOW_PWR_2;
 80033fa:	2301      	movs	r3, #1
 80033fc:	75fb      	strb	r3, [r7, #23]
          break;
 80033fe:	e002      	b.n	8003406 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0xbe>
        case LIS2DW12_LOW_NOISE_ENABLE:
          new_power_mode = LIS2DW12_CONT_LOW_PWR_LOW_NOISE_2;
 8003400:	2311      	movs	r3, #17
 8003402:	75fb      	strb	r3, [r7, #23]
          break;
 8003404:	bf00      	nop
      }

      /* If Low Power mode maximum ODR is 200Hz */
      if (Odr > 200.0f)
 8003406:	494a      	ldr	r1, [pc, #296]	@ (8003530 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x1e8>)
 8003408:	68b8      	ldr	r0, [r7, #8]
 800340a:	f7fd fe1f 	bl	800104c <__aeabi_fcmpgt>
 800340e:	4603      	mov	r3, r0
 8003410:	2b00      	cmp	r3, #0
 8003412:	d100      	bne.n	8003416 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0xce>
      {
        Odr = 200.0f;
      }
      break;
 8003414:	e016      	b.n	8003444 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0xfc>
        Odr = 200.0f;
 8003416:	4b46      	ldr	r3, [pc, #280]	@ (8003530 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x1e8>)
 8003418:	60bb      	str	r3, [r7, #8]
      break;
 800341a:	e013      	b.n	8003444 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0xfc>
    case LIS2DW12_LOW_POWER_MODE1:
      switch (Noise)
 800341c:	79bb      	ldrb	r3, [r7, #6]
 800341e:	2b01      	cmp	r3, #1
 8003420:	d002      	beq.n	8003428 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0xe0>
      {
        case LIS2DW12_LOW_NOISE_DISABLE:
        default:
          new_power_mode = LIS2DW12_CONT_LOW_PWR_12bit;
 8003422:	2300      	movs	r3, #0
 8003424:	75fb      	strb	r3, [r7, #23]
          break;
 8003426:	e002      	b.n	800342e <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0xe6>
        case LIS2DW12_LOW_NOISE_ENABLE:
          new_power_mode = LIS2DW12_CONT_LOW_PWR_LOW_NOISE_12bit;
 8003428:	2310      	movs	r3, #16
 800342a:	75fb      	strb	r3, [r7, #23]
          break;
 800342c:	bf00      	nop
      }

      /* If Low Power mode maximum ODR is 200Hz */
      if (Odr > 200.0f)
 800342e:	4940      	ldr	r1, [pc, #256]	@ (8003530 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x1e8>)
 8003430:	68b8      	ldr	r0, [r7, #8]
 8003432:	f7fd fe0b 	bl	800104c <__aeabi_fcmpgt>
 8003436:	4603      	mov	r3, r0
 8003438:	2b00      	cmp	r3, #0
 800343a:	d100      	bne.n	800343e <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0xf6>
      {
        Odr = 200.0f;
      }
      break;
 800343c:	e001      	b.n	8003442 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0xfa>
        Odr = 200.0f;
 800343e:	4b3c      	ldr	r3, [pc, #240]	@ (8003530 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x1e8>)
 8003440:	60bb      	str	r3, [r7, #8]
      break;
 8003442:	bf00      	nop
  }

  new_odr = (Odr <=    1.6f) ? LIS2DW12_XL_ODR_1Hz6_LP_ONLY
            : (Odr <=   12.5f) ? LIS2DW12_XL_ODR_12Hz5
 8003444:	493b      	ldr	r1, [pc, #236]	@ (8003534 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x1ec>)
 8003446:	68b8      	ldr	r0, [r7, #8]
 8003448:	f7fd fdec 	bl	8001024 <__aeabi_fcmple>
 800344c:	4603      	mov	r3, r0
 800344e:	2b00      	cmp	r3, #0
 8003450:	d001      	beq.n	8003456 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x10e>
 8003452:	2301      	movs	r3, #1
 8003454:	e03f      	b.n	80034d6 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x18e>
 8003456:	4935      	ldr	r1, [pc, #212]	@ (800352c <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x1e4>)
 8003458:	68b8      	ldr	r0, [r7, #8]
 800345a:	f7fd fde3 	bl	8001024 <__aeabi_fcmple>
 800345e:	4603      	mov	r3, r0
 8003460:	2b00      	cmp	r3, #0
 8003462:	d001      	beq.n	8003468 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x120>
 8003464:	2302      	movs	r3, #2
 8003466:	e036      	b.n	80034d6 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x18e>
 8003468:	4933      	ldr	r1, [pc, #204]	@ (8003538 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x1f0>)
 800346a:	68b8      	ldr	r0, [r7, #8]
 800346c:	f7fd fdda 	bl	8001024 <__aeabi_fcmple>
 8003470:	4603      	mov	r3, r0
 8003472:	2b00      	cmp	r3, #0
 8003474:	d001      	beq.n	800347a <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x132>
 8003476:	2303      	movs	r3, #3
 8003478:	e02d      	b.n	80034d6 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x18e>
 800347a:	4930      	ldr	r1, [pc, #192]	@ (800353c <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x1f4>)
 800347c:	68b8      	ldr	r0, [r7, #8]
 800347e:	f7fd fdd1 	bl	8001024 <__aeabi_fcmple>
 8003482:	4603      	mov	r3, r0
 8003484:	2b00      	cmp	r3, #0
 8003486:	d001      	beq.n	800348c <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x144>
 8003488:	2304      	movs	r3, #4
 800348a:	e024      	b.n	80034d6 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x18e>
 800348c:	492c      	ldr	r1, [pc, #176]	@ (8003540 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x1f8>)
 800348e:	68b8      	ldr	r0, [r7, #8]
 8003490:	f7fd fdc8 	bl	8001024 <__aeabi_fcmple>
 8003494:	4603      	mov	r3, r0
 8003496:	2b00      	cmp	r3, #0
 8003498:	d001      	beq.n	800349e <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x156>
 800349a:	2305      	movs	r3, #5
 800349c:	e01b      	b.n	80034d6 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x18e>
 800349e:	4924      	ldr	r1, [pc, #144]	@ (8003530 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x1e8>)
 80034a0:	68b8      	ldr	r0, [r7, #8]
 80034a2:	f7fd fdbf 	bl	8001024 <__aeabi_fcmple>
 80034a6:	4603      	mov	r3, r0
 80034a8:	2b00      	cmp	r3, #0
 80034aa:	d001      	beq.n	80034b0 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x168>
 80034ac:	2306      	movs	r3, #6
 80034ae:	e012      	b.n	80034d6 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x18e>
 80034b0:	4924      	ldr	r1, [pc, #144]	@ (8003544 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x1fc>)
 80034b2:	68b8      	ldr	r0, [r7, #8]
 80034b4:	f7fd fdb6 	bl	8001024 <__aeabi_fcmple>
 80034b8:	4603      	mov	r3, r0
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	d001      	beq.n	80034c2 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x17a>
 80034be:	2307      	movs	r3, #7
 80034c0:	e009      	b.n	80034d6 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x18e>
 80034c2:	4921      	ldr	r1, [pc, #132]	@ (8003548 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x200>)
 80034c4:	68b8      	ldr	r0, [r7, #8]
 80034c6:	f7fd fdad 	bl	8001024 <__aeabi_fcmple>
 80034ca:	4603      	mov	r3, r0
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	d001      	beq.n	80034d4 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x18c>
 80034d0:	2308      	movs	r3, #8
 80034d2:	e000      	b.n	80034d6 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x18e>
 80034d4:	2309      	movs	r3, #9
  new_odr = (Odr <=    1.6f) ? LIS2DW12_XL_ODR_1Hz6_LP_ONLY
 80034d6:	75bb      	strb	r3, [r7, #22]
            : (Odr <=  400.0f) ? LIS2DW12_XL_ODR_400Hz
            : (Odr <=  800.0f) ? LIS2DW12_XL_ODR_800Hz
            :                    LIS2DW12_XL_ODR_1k6Hz;

  /* Output data rate selection. */
  if (lis2dw12_data_rate_set(&(pObj->Ctx), new_odr) != LIS2DW12_OK)
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	3320      	adds	r3, #32
 80034dc:	7dba      	ldrb	r2, [r7, #22]
 80034de:	4611      	mov	r1, r2
 80034e0:	4618      	mov	r0, r3
 80034e2:	f000 fa17 	bl	8003914 <lis2dw12_data_rate_set>
 80034e6:	4603      	mov	r3, r0
 80034e8:	2b00      	cmp	r3, #0
 80034ea:	d002      	beq.n	80034f2 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x1aa>
  {
    return LIS2DW12_ERROR;
 80034ec:	f04f 33ff 	mov.w	r3, #4294967295
 80034f0:	e018      	b.n	8003524 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x1dc>
  }

  /* Power mode selection. */
  if (lis2dw12_power_mode_set(&(pObj->Ctx), new_power_mode) != LIS2DW12_OK)
 80034f2:	68fb      	ldr	r3, [r7, #12]
 80034f4:	3320      	adds	r3, #32
 80034f6:	7dfa      	ldrb	r2, [r7, #23]
 80034f8:	4611      	mov	r1, r2
 80034fa:	4618      	mov	r0, r3
 80034fc:	f000 f902 	bl	8003704 <lis2dw12_power_mode_set>
 8003500:	4603      	mov	r3, r0
 8003502:	2b00      	cmp	r3, #0
 8003504:	d002      	beq.n	800350c <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x1c4>
  {
    return LIS2DW12_ERROR;
 8003506:	f04f 33ff 	mov.w	r3, #4294967295
 800350a:	e00b      	b.n	8003524 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x1dc>
  }

  /* Store the current Odr, Mode and Noise values */
  pObj->acc_odr = Odr;
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	68ba      	ldr	r2, [r7, #8]
 8003510:	635a      	str	r2, [r3, #52]	@ 0x34
  pObj->acc_operating_mode = Mode;
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	79fa      	ldrb	r2, [r7, #7]
 8003516:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  pObj->acc_low_noise = Noise;
 800351a:	68fb      	ldr	r3, [r7, #12]
 800351c:	79ba      	ldrb	r2, [r7, #6]
 800351e:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  return LIS2DW12_OK;
 8003522:	2300      	movs	r3, #0
}
 8003524:	4618      	mov	r0, r3
 8003526:	3718      	adds	r7, #24
 8003528:	46bd      	mov	sp, r7
 800352a:	bd80      	pop	{r7, pc}
 800352c:	41480000 	.word	0x41480000
 8003530:	43480000 	.word	0x43480000
 8003534:	3fcccccd 	.word	0x3fcccccd
 8003538:	41c80000 	.word	0x41c80000
 800353c:	42480000 	.word	0x42480000
 8003540:	42c80000 	.word	0x42c80000
 8003544:	43c80000 	.word	0x43c80000
 8003548:	44480000 	.word	0x44480000

0800354c <LIS2DW12_ACC_SetOutputDataRate_When_Disabled>:
  * @param  Noise the low noise option
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t LIS2DW12_ACC_SetOutputDataRate_When_Disabled(LIS2DW12_Object_t *pObj, float Odr,
                                                            LIS2DW12_Operating_Mode_t Mode, LIS2DW12_Low_Noise_t Noise)
{
 800354c:	b580      	push	{r7, lr}
 800354e:	b084      	sub	sp, #16
 8003550:	af00      	add	r7, sp, #0
 8003552:	60f8      	str	r0, [r7, #12]
 8003554:	60b9      	str	r1, [r7, #8]
 8003556:	4611      	mov	r1, r2
 8003558:	461a      	mov	r2, r3
 800355a:	460b      	mov	r3, r1
 800355c:	71fb      	strb	r3, [r7, #7]
 800355e:	4613      	mov	r3, r2
 8003560:	71bb      	strb	r3, [r7, #6]
  /* Store the new Odr, Mode and Noise values */
  pObj->acc_operating_mode = Mode;
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	79fa      	ldrb	r2, [r7, #7]
 8003566:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  pObj->acc_low_noise = Noise;
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	79ba      	ldrb	r2, [r7, #6]
 800356e:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  pObj->acc_odr = (Odr <=    1.6f) ?    1.6f
                  : (Odr <=   12.5f) ?   12.5f
 8003572:	4928      	ldr	r1, [pc, #160]	@ (8003614 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xc8>)
 8003574:	68b8      	ldr	r0, [r7, #8]
 8003576:	f7fd fd55 	bl	8001024 <__aeabi_fcmple>
 800357a:	4603      	mov	r3, r0
 800357c:	2b00      	cmp	r3, #0
 800357e:	d001      	beq.n	8003584 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0x38>
 8003580:	4b24      	ldr	r3, [pc, #144]	@ (8003614 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xc8>)
 8003582:	e03f      	b.n	8003604 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xb8>
                  : (Odr <=   25.0f) ?   25.0f
 8003584:	4924      	ldr	r1, [pc, #144]	@ (8003618 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xcc>)
 8003586:	68b8      	ldr	r0, [r7, #8]
 8003588:	f7fd fd4c 	bl	8001024 <__aeabi_fcmple>
 800358c:	4603      	mov	r3, r0
 800358e:	2b00      	cmp	r3, #0
 8003590:	d001      	beq.n	8003596 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0x4a>
 8003592:	4b21      	ldr	r3, [pc, #132]	@ (8003618 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xcc>)
 8003594:	e036      	b.n	8003604 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xb8>
                  : (Odr <=   50.0f) ?   50.0f
 8003596:	4921      	ldr	r1, [pc, #132]	@ (800361c <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xd0>)
 8003598:	68b8      	ldr	r0, [r7, #8]
 800359a:	f7fd fd43 	bl	8001024 <__aeabi_fcmple>
 800359e:	4603      	mov	r3, r0
 80035a0:	2b00      	cmp	r3, #0
 80035a2:	d001      	beq.n	80035a8 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0x5c>
 80035a4:	4b1d      	ldr	r3, [pc, #116]	@ (800361c <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xd0>)
 80035a6:	e02d      	b.n	8003604 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xb8>
                  : (Odr <=  100.0f) ?  100.0f
 80035a8:	491d      	ldr	r1, [pc, #116]	@ (8003620 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xd4>)
 80035aa:	68b8      	ldr	r0, [r7, #8]
 80035ac:	f7fd fd3a 	bl	8001024 <__aeabi_fcmple>
 80035b0:	4603      	mov	r3, r0
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	d001      	beq.n	80035ba <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0x6e>
 80035b6:	4b1a      	ldr	r3, [pc, #104]	@ (8003620 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xd4>)
 80035b8:	e024      	b.n	8003604 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xb8>
                  : (Odr <=  200.0f) ?  200.0f
 80035ba:	491a      	ldr	r1, [pc, #104]	@ (8003624 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xd8>)
 80035bc:	68b8      	ldr	r0, [r7, #8]
 80035be:	f7fd fd31 	bl	8001024 <__aeabi_fcmple>
 80035c2:	4603      	mov	r3, r0
 80035c4:	2b00      	cmp	r3, #0
 80035c6:	d001      	beq.n	80035cc <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0x80>
 80035c8:	4b16      	ldr	r3, [pc, #88]	@ (8003624 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xd8>)
 80035ca:	e01b      	b.n	8003604 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xb8>
                  : (Odr <=  400.0f) ?  400.0f
 80035cc:	4916      	ldr	r1, [pc, #88]	@ (8003628 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xdc>)
 80035ce:	68b8      	ldr	r0, [r7, #8]
 80035d0:	f7fd fd28 	bl	8001024 <__aeabi_fcmple>
 80035d4:	4603      	mov	r3, r0
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	d001      	beq.n	80035de <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0x92>
 80035da:	4b13      	ldr	r3, [pc, #76]	@ (8003628 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xdc>)
 80035dc:	e012      	b.n	8003604 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xb8>
                  : (Odr <=  800.0f) ?  800.0f
 80035de:	4913      	ldr	r1, [pc, #76]	@ (800362c <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xe0>)
 80035e0:	68b8      	ldr	r0, [r7, #8]
 80035e2:	f7fd fd1f 	bl	8001024 <__aeabi_fcmple>
 80035e6:	4603      	mov	r3, r0
 80035e8:	2b00      	cmp	r3, #0
 80035ea:	d001      	beq.n	80035f0 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xa4>
 80035ec:	4b0f      	ldr	r3, [pc, #60]	@ (800362c <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xe0>)
 80035ee:	e009      	b.n	8003604 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xb8>
                  :                    1600.0f;
 80035f0:	490f      	ldr	r1, [pc, #60]	@ (8003630 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xe4>)
 80035f2:	68b8      	ldr	r0, [r7, #8]
 80035f4:	f7fd fd16 	bl	8001024 <__aeabi_fcmple>
 80035f8:	4603      	mov	r3, r0
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	d001      	beq.n	8003602 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xb6>
 80035fe:	4b0c      	ldr	r3, [pc, #48]	@ (8003630 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xe4>)
 8003600:	e000      	b.n	8003604 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xb8>
 8003602:	4b0c      	ldr	r3, [pc, #48]	@ (8003634 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xe8>)
  pObj->acc_odr = (Odr <=    1.6f) ?    1.6f
 8003604:	68fa      	ldr	r2, [r7, #12]
 8003606:	6353      	str	r3, [r2, #52]	@ 0x34

  return LIS2DW12_OK;
 8003608:	2300      	movs	r3, #0
}
 800360a:	4618      	mov	r0, r3
 800360c:	3710      	adds	r7, #16
 800360e:	46bd      	mov	sp, r7
 8003610:	bd80      	pop	{r7, pc}
 8003612:	bf00      	nop
 8003614:	3fcccccd 	.word	0x3fcccccd
 8003618:	41480000 	.word	0x41480000
 800361c:	41c80000 	.word	0x41c80000
 8003620:	42480000 	.word	0x42480000
 8003624:	42c80000 	.word	0x42c80000
 8003628:	43480000 	.word	0x43480000
 800362c:	43c80000 	.word	0x43c80000
 8003630:	44480000 	.word	0x44480000
 8003634:	44c80000 	.word	0x44c80000

08003638 <ReadRegWrap>:
  * @param  pData the stored data pointer
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t ReadRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 8003638:	b590      	push	{r4, r7, lr}
 800363a:	b087      	sub	sp, #28
 800363c:	af00      	add	r7, sp, #0
 800363e:	60f8      	str	r0, [r7, #12]
 8003640:	607a      	str	r2, [r7, #4]
 8003642:	461a      	mov	r2, r3
 8003644:	460b      	mov	r3, r1
 8003646:	72fb      	strb	r3, [r7, #11]
 8003648:	4613      	mov	r3, r2
 800364a:	813b      	strh	r3, [r7, #8]
  LIS2DW12_Object_t *pObj = (LIS2DW12_Object_t *)Handle;
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	617b      	str	r3, [r7, #20]

  return pObj->IO.ReadReg(pObj->IO.Address, Reg, pData, Length);
 8003650:	697b      	ldr	r3, [r7, #20]
 8003652:	695c      	ldr	r4, [r3, #20]
 8003654:	697b      	ldr	r3, [r7, #20]
 8003656:	7b1b      	ldrb	r3, [r3, #12]
 8003658:	4618      	mov	r0, r3
 800365a:	7afb      	ldrb	r3, [r7, #11]
 800365c:	b299      	uxth	r1, r3
 800365e:	893b      	ldrh	r3, [r7, #8]
 8003660:	687a      	ldr	r2, [r7, #4]
 8003662:	47a0      	blx	r4
 8003664:	4603      	mov	r3, r0
}
 8003666:	4618      	mov	r0, r3
 8003668:	371c      	adds	r7, #28
 800366a:	46bd      	mov	sp, r7
 800366c:	bd90      	pop	{r4, r7, pc}

0800366e <WriteRegWrap>:
  * @param  pData the stored data pointer
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t WriteRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 800366e:	b590      	push	{r4, r7, lr}
 8003670:	b087      	sub	sp, #28
 8003672:	af00      	add	r7, sp, #0
 8003674:	60f8      	str	r0, [r7, #12]
 8003676:	607a      	str	r2, [r7, #4]
 8003678:	461a      	mov	r2, r3
 800367a:	460b      	mov	r3, r1
 800367c:	72fb      	strb	r3, [r7, #11]
 800367e:	4613      	mov	r3, r2
 8003680:	813b      	strh	r3, [r7, #8]
  LIS2DW12_Object_t *pObj = (LIS2DW12_Object_t *)Handle;
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	617b      	str	r3, [r7, #20]

  return pObj->IO.WriteReg(pObj->IO.Address, Reg, pData, Length);
 8003686:	697b      	ldr	r3, [r7, #20]
 8003688:	691c      	ldr	r4, [r3, #16]
 800368a:	697b      	ldr	r3, [r7, #20]
 800368c:	7b1b      	ldrb	r3, [r3, #12]
 800368e:	4618      	mov	r0, r3
 8003690:	7afb      	ldrb	r3, [r7, #11]
 8003692:	b299      	uxth	r1, r3
 8003694:	893b      	ldrh	r3, [r7, #8]
 8003696:	687a      	ldr	r2, [r7, #4]
 8003698:	47a0      	blx	r4
 800369a:	4603      	mov	r3, r0
}
 800369c:	4618      	mov	r0, r3
 800369e:	371c      	adds	r7, #28
 80036a0:	46bd      	mov	sp, r7
 80036a2:	bd90      	pop	{r4, r7, pc}

080036a4 <lis2dw12_read_reg>:
  *
  */
int32_t lis2dw12_read_reg(stmdev_ctx_t *ctx, uint8_t reg,
                          uint8_t *data,
                          uint16_t len)
{
 80036a4:	b590      	push	{r4, r7, lr}
 80036a6:	b087      	sub	sp, #28
 80036a8:	af00      	add	r7, sp, #0
 80036aa:	60f8      	str	r0, [r7, #12]
 80036ac:	607a      	str	r2, [r7, #4]
 80036ae:	461a      	mov	r2, r3
 80036b0:	460b      	mov	r3, r1
 80036b2:	72fb      	strb	r3, [r7, #11]
 80036b4:	4613      	mov	r3, r2
 80036b6:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->read_reg(ctx->handle, reg, data, len);
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	685c      	ldr	r4, [r3, #4]
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	68d8      	ldr	r0, [r3, #12]
 80036c0:	893b      	ldrh	r3, [r7, #8]
 80036c2:	7af9      	ldrb	r1, [r7, #11]
 80036c4:	687a      	ldr	r2, [r7, #4]
 80036c6:	47a0      	blx	r4
 80036c8:	6178      	str	r0, [r7, #20]

  return ret;
 80036ca:	697b      	ldr	r3, [r7, #20]
}
 80036cc:	4618      	mov	r0, r3
 80036ce:	371c      	adds	r7, #28
 80036d0:	46bd      	mov	sp, r7
 80036d2:	bd90      	pop	{r4, r7, pc}

080036d4 <lis2dw12_write_reg>:
  *
  */
int32_t lis2dw12_write_reg(stmdev_ctx_t *ctx, uint8_t reg,
                           uint8_t *data,
                           uint16_t len)
{
 80036d4:	b590      	push	{r4, r7, lr}
 80036d6:	b087      	sub	sp, #28
 80036d8:	af00      	add	r7, sp, #0
 80036da:	60f8      	str	r0, [r7, #12]
 80036dc:	607a      	str	r2, [r7, #4]
 80036de:	461a      	mov	r2, r3
 80036e0:	460b      	mov	r3, r1
 80036e2:	72fb      	strb	r3, [r7, #11]
 80036e4:	4613      	mov	r3, r2
 80036e6:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->write_reg(ctx->handle, reg, data, len);
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	681c      	ldr	r4, [r3, #0]
 80036ec:	68fb      	ldr	r3, [r7, #12]
 80036ee:	68d8      	ldr	r0, [r3, #12]
 80036f0:	893b      	ldrh	r3, [r7, #8]
 80036f2:	7af9      	ldrb	r1, [r7, #11]
 80036f4:	687a      	ldr	r2, [r7, #4]
 80036f6:	47a0      	blx	r4
 80036f8:	6178      	str	r0, [r7, #20]

  return ret;
 80036fa:	697b      	ldr	r3, [r7, #20]
}
 80036fc:	4618      	mov	r0, r3
 80036fe:	371c      	adds	r7, #28
 8003700:	46bd      	mov	sp, r7
 8003702:	bd90      	pop	{r4, r7, pc}

08003704 <lis2dw12_power_mode_set>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dw12_power_mode_set(stmdev_ctx_t *ctx,
                                lis2dw12_mode_t val)
{
 8003704:	b580      	push	{r7, lr}
 8003706:	b086      	sub	sp, #24
 8003708:	af00      	add	r7, sp, #0
 800370a:	6078      	str	r0, [r7, #4]
 800370c:	460b      	mov	r3, r1
 800370e:	70fb      	strb	r3, [r7, #3]
  lis2dw12_ctrl1_t ctrl1;
  lis2dw12_ctrl6_t ctrl6;
  int32_t ret;

  ret = lis2dw12_read_reg(ctx, LIS2DW12_CTRL1, (uint8_t *) &ctrl1, 1);
 8003710:	f107 0210 	add.w	r2, r7, #16
 8003714:	2301      	movs	r3, #1
 8003716:	2120      	movs	r1, #32
 8003718:	6878      	ldr	r0, [r7, #4]
 800371a:	f7ff ffc3 	bl	80036a4 <lis2dw12_read_reg>
 800371e:	6178      	str	r0, [r7, #20]

  if (ret == 0)
 8003720:	697b      	ldr	r3, [r7, #20]
 8003722:	2b00      	cmp	r3, #0
 8003724:	d118      	bne.n	8003758 <lis2dw12_power_mode_set+0x54>
  {
    ctrl1.mode = ((uint8_t) val & 0x0CU) >> 2;
 8003726:	78fb      	ldrb	r3, [r7, #3]
 8003728:	089b      	lsrs	r3, r3, #2
 800372a:	f003 0303 	and.w	r3, r3, #3
 800372e:	b2da      	uxtb	r2, r3
 8003730:	7c3b      	ldrb	r3, [r7, #16]
 8003732:	f362 0383 	bfi	r3, r2, #2, #2
 8003736:	743b      	strb	r3, [r7, #16]
    ctrl1.lp_mode = (uint8_t) val & 0x03U ;
 8003738:	78fb      	ldrb	r3, [r7, #3]
 800373a:	f003 0303 	and.w	r3, r3, #3
 800373e:	b2da      	uxtb	r2, r3
 8003740:	7c3b      	ldrb	r3, [r7, #16]
 8003742:	f362 0301 	bfi	r3, r2, #0, #2
 8003746:	743b      	strb	r3, [r7, #16]
    ret = lis2dw12_write_reg(ctx, LIS2DW12_CTRL1, (uint8_t *) &ctrl1, 1);
 8003748:	f107 0210 	add.w	r2, r7, #16
 800374c:	2301      	movs	r3, #1
 800374e:	2120      	movs	r1, #32
 8003750:	6878      	ldr	r0, [r7, #4]
 8003752:	f7ff ffbf 	bl	80036d4 <lis2dw12_write_reg>
 8003756:	6178      	str	r0, [r7, #20]
  }

  if (ret == 0)
 8003758:	697b      	ldr	r3, [r7, #20]
 800375a:	2b00      	cmp	r3, #0
 800375c:	d107      	bne.n	800376e <lis2dw12_power_mode_set+0x6a>
  {
    ret = lis2dw12_read_reg(ctx, LIS2DW12_CTRL6, (uint8_t *) &ctrl6, 1);
 800375e:	f107 020c 	add.w	r2, r7, #12
 8003762:	2301      	movs	r3, #1
 8003764:	2125      	movs	r1, #37	@ 0x25
 8003766:	6878      	ldr	r0, [r7, #4]
 8003768:	f7ff ff9c 	bl	80036a4 <lis2dw12_read_reg>
 800376c:	6178      	str	r0, [r7, #20]
  }

  if (ret == 0)
 800376e:	697b      	ldr	r3, [r7, #20]
 8003770:	2b00      	cmp	r3, #0
 8003772:	d110      	bne.n	8003796 <lis2dw12_power_mode_set+0x92>
  {
    ctrl6.low_noise = ((uint8_t) val & 0x10U) >> 4;
 8003774:	78fb      	ldrb	r3, [r7, #3]
 8003776:	091b      	lsrs	r3, r3, #4
 8003778:	f003 0301 	and.w	r3, r3, #1
 800377c:	b2da      	uxtb	r2, r3
 800377e:	7b3b      	ldrb	r3, [r7, #12]
 8003780:	f362 0382 	bfi	r3, r2, #2, #1
 8003784:	733b      	strb	r3, [r7, #12]
    ret = lis2dw12_write_reg(ctx, LIS2DW12_CTRL6, (uint8_t *) &ctrl6, 1);
 8003786:	f107 020c 	add.w	r2, r7, #12
 800378a:	2301      	movs	r3, #1
 800378c:	2125      	movs	r1, #37	@ 0x25
 800378e:	6878      	ldr	r0, [r7, #4]
 8003790:	f7ff ffa0 	bl	80036d4 <lis2dw12_write_reg>
 8003794:	6178      	str	r0, [r7, #20]
  }

  return ret;
 8003796:	697b      	ldr	r3, [r7, #20]
}
 8003798:	4618      	mov	r0, r3
 800379a:	3718      	adds	r7, #24
 800379c:	46bd      	mov	sp, r7
 800379e:	bd80      	pop	{r7, pc}

080037a0 <lis2dw12_power_mode_get>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dw12_power_mode_get(stmdev_ctx_t *ctx,
                                lis2dw12_mode_t *val)
{
 80037a0:	b580      	push	{r7, lr}
 80037a2:	b086      	sub	sp, #24
 80037a4:	af00      	add	r7, sp, #0
 80037a6:	6078      	str	r0, [r7, #4]
 80037a8:	6039      	str	r1, [r7, #0]
  lis2dw12_ctrl1_t ctrl1;
  lis2dw12_ctrl6_t ctrl6;
  int32_t ret;

  ret = lis2dw12_read_reg(ctx, LIS2DW12_CTRL1, (uint8_t *) &ctrl1, 1);
 80037aa:	f107 0210 	add.w	r2, r7, #16
 80037ae:	2301      	movs	r3, #1
 80037b0:	2120      	movs	r1, #32
 80037b2:	6878      	ldr	r0, [r7, #4]
 80037b4:	f7ff ff76 	bl	80036a4 <lis2dw12_read_reg>
 80037b8:	6178      	str	r0, [r7, #20]

  if (ret == 0)
 80037ba:	697b      	ldr	r3, [r7, #20]
 80037bc:	2b00      	cmp	r3, #0
 80037be:	f040 80a3 	bne.w	8003908 <lis2dw12_power_mode_get+0x168>
  {
    ret = lis2dw12_read_reg(ctx, LIS2DW12_CTRL6, (uint8_t *) &ctrl6, 1);
 80037c2:	f107 020c 	add.w	r2, r7, #12
 80037c6:	2301      	movs	r3, #1
 80037c8:	2125      	movs	r1, #37	@ 0x25
 80037ca:	6878      	ldr	r0, [r7, #4]
 80037cc:	f7ff ff6a 	bl	80036a4 <lis2dw12_read_reg>
 80037d0:	6178      	str	r0, [r7, #20]

    switch (((ctrl6.low_noise << 4) + (ctrl1.mode << 2) +
 80037d2:	7b3b      	ldrb	r3, [r7, #12]
 80037d4:	f3c3 0380 	ubfx	r3, r3, #2, #1
 80037d8:	b2db      	uxtb	r3, r3
 80037da:	011a      	lsls	r2, r3, #4
 80037dc:	7c3b      	ldrb	r3, [r7, #16]
 80037de:	f3c3 0381 	ubfx	r3, r3, #2, #2
 80037e2:	b2db      	uxtb	r3, r3
 80037e4:	009b      	lsls	r3, r3, #2
 80037e6:	4413      	add	r3, r2
             ctrl1.lp_mode))
 80037e8:	7c3a      	ldrb	r2, [r7, #16]
 80037ea:	f3c2 0201 	ubfx	r2, r2, #0, #2
 80037ee:	b2d2      	uxtb	r2, r2
    switch (((ctrl6.low_noise << 4) + (ctrl1.mode << 2) +
 80037f0:	4413      	add	r3, r2
 80037f2:	2b1b      	cmp	r3, #27
 80037f4:	f200 8084 	bhi.w	8003900 <lis2dw12_power_mode_get+0x160>
 80037f8:	a201      	add	r2, pc, #4	@ (adr r2, 8003800 <lis2dw12_power_mode_get+0x60>)
 80037fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80037fe:	bf00      	nop
 8003800:	08003891 	.word	0x08003891
 8003804:	08003889 	.word	0x08003889
 8003808:	08003881 	.word	0x08003881
 800380c:	08003879 	.word	0x08003879
 8003810:	08003871 	.word	0x08003871
 8003814:	08003901 	.word	0x08003901
 8003818:	08003901 	.word	0x08003901
 800381c:	08003901 	.word	0x08003901
 8003820:	080038b1 	.word	0x080038b1
 8003824:	080038a9 	.word	0x080038a9
 8003828:	080038a1 	.word	0x080038a1
 800382c:	08003899 	.word	0x08003899
 8003830:	08003901 	.word	0x08003901
 8003834:	08003901 	.word	0x08003901
 8003838:	08003901 	.word	0x08003901
 800383c:	08003901 	.word	0x08003901
 8003840:	080038d9 	.word	0x080038d9
 8003844:	080038d1 	.word	0x080038d1
 8003848:	080038c9 	.word	0x080038c9
 800384c:	080038c1 	.word	0x080038c1
 8003850:	080038b9 	.word	0x080038b9
 8003854:	08003901 	.word	0x08003901
 8003858:	08003901 	.word	0x08003901
 800385c:	08003901 	.word	0x08003901
 8003860:	080038f9 	.word	0x080038f9
 8003864:	080038f1 	.word	0x080038f1
 8003868:	080038e9 	.word	0x080038e9
 800386c:	080038e1 	.word	0x080038e1
    {
      case LIS2DW12_HIGH_PERFORMANCE:
        *val = LIS2DW12_HIGH_PERFORMANCE;
 8003870:	683b      	ldr	r3, [r7, #0]
 8003872:	2204      	movs	r2, #4
 8003874:	701a      	strb	r2, [r3, #0]
        break;
 8003876:	e047      	b.n	8003908 <lis2dw12_power_mode_get+0x168>

      case LIS2DW12_CONT_LOW_PWR_4:
        *val = LIS2DW12_CONT_LOW_PWR_4;
 8003878:	683b      	ldr	r3, [r7, #0]
 800387a:	2203      	movs	r2, #3
 800387c:	701a      	strb	r2, [r3, #0]
        break;
 800387e:	e043      	b.n	8003908 <lis2dw12_power_mode_get+0x168>

      case LIS2DW12_CONT_LOW_PWR_3:
        *val = LIS2DW12_CONT_LOW_PWR_3;
 8003880:	683b      	ldr	r3, [r7, #0]
 8003882:	2202      	movs	r2, #2
 8003884:	701a      	strb	r2, [r3, #0]
        break;
 8003886:	e03f      	b.n	8003908 <lis2dw12_power_mode_get+0x168>

      case LIS2DW12_CONT_LOW_PWR_2:
        *val = LIS2DW12_CONT_LOW_PWR_2;
 8003888:	683b      	ldr	r3, [r7, #0]
 800388a:	2201      	movs	r2, #1
 800388c:	701a      	strb	r2, [r3, #0]
        break;
 800388e:	e03b      	b.n	8003908 <lis2dw12_power_mode_get+0x168>

      case LIS2DW12_CONT_LOW_PWR_12bit:
        *val = LIS2DW12_CONT_LOW_PWR_12bit;
 8003890:	683b      	ldr	r3, [r7, #0]
 8003892:	2200      	movs	r2, #0
 8003894:	701a      	strb	r2, [r3, #0]
        break;
 8003896:	e037      	b.n	8003908 <lis2dw12_power_mode_get+0x168>

      case LIS2DW12_SINGLE_LOW_PWR_4:
        *val = LIS2DW12_SINGLE_LOW_PWR_4;
 8003898:	683b      	ldr	r3, [r7, #0]
 800389a:	220b      	movs	r2, #11
 800389c:	701a      	strb	r2, [r3, #0]
        break;
 800389e:	e033      	b.n	8003908 <lis2dw12_power_mode_get+0x168>

      case LIS2DW12_SINGLE_LOW_PWR_3:
        *val = LIS2DW12_SINGLE_LOW_PWR_3;
 80038a0:	683b      	ldr	r3, [r7, #0]
 80038a2:	220a      	movs	r2, #10
 80038a4:	701a      	strb	r2, [r3, #0]
        break;
 80038a6:	e02f      	b.n	8003908 <lis2dw12_power_mode_get+0x168>

      case LIS2DW12_SINGLE_LOW_PWR_2:
        *val = LIS2DW12_SINGLE_LOW_PWR_2;
 80038a8:	683b      	ldr	r3, [r7, #0]
 80038aa:	2209      	movs	r2, #9
 80038ac:	701a      	strb	r2, [r3, #0]
        break;
 80038ae:	e02b      	b.n	8003908 <lis2dw12_power_mode_get+0x168>

      case LIS2DW12_SINGLE_LOW_PWR_12bit:
        *val = LIS2DW12_SINGLE_LOW_PWR_12bit;
 80038b0:	683b      	ldr	r3, [r7, #0]
 80038b2:	2208      	movs	r2, #8
 80038b4:	701a      	strb	r2, [r3, #0]
        break;
 80038b6:	e027      	b.n	8003908 <lis2dw12_power_mode_get+0x168>

      case LIS2DW12_HIGH_PERFORMANCE_LOW_NOISE:
        *val = LIS2DW12_HIGH_PERFORMANCE_LOW_NOISE;
 80038b8:	683b      	ldr	r3, [r7, #0]
 80038ba:	2214      	movs	r2, #20
 80038bc:	701a      	strb	r2, [r3, #0]
        break;
 80038be:	e023      	b.n	8003908 <lis2dw12_power_mode_get+0x168>

      case LIS2DW12_CONT_LOW_PWR_LOW_NOISE_4:
        *val = LIS2DW12_CONT_LOW_PWR_LOW_NOISE_4;
 80038c0:	683b      	ldr	r3, [r7, #0]
 80038c2:	2213      	movs	r2, #19
 80038c4:	701a      	strb	r2, [r3, #0]
        break;
 80038c6:	e01f      	b.n	8003908 <lis2dw12_power_mode_get+0x168>

      case LIS2DW12_CONT_LOW_PWR_LOW_NOISE_3:
        *val = LIS2DW12_CONT_LOW_PWR_LOW_NOISE_3;
 80038c8:	683b      	ldr	r3, [r7, #0]
 80038ca:	2212      	movs	r2, #18
 80038cc:	701a      	strb	r2, [r3, #0]
        break;
 80038ce:	e01b      	b.n	8003908 <lis2dw12_power_mode_get+0x168>

      case LIS2DW12_CONT_LOW_PWR_LOW_NOISE_2:
        *val = LIS2DW12_CONT_LOW_PWR_LOW_NOISE_2;
 80038d0:	683b      	ldr	r3, [r7, #0]
 80038d2:	2211      	movs	r2, #17
 80038d4:	701a      	strb	r2, [r3, #0]
        break;
 80038d6:	e017      	b.n	8003908 <lis2dw12_power_mode_get+0x168>

      case LIS2DW12_CONT_LOW_PWR_LOW_NOISE_12bit:
        *val = LIS2DW12_CONT_LOW_PWR_LOW_NOISE_12bit;
 80038d8:	683b      	ldr	r3, [r7, #0]
 80038da:	2210      	movs	r2, #16
 80038dc:	701a      	strb	r2, [r3, #0]
        break;
 80038de:	e013      	b.n	8003908 <lis2dw12_power_mode_get+0x168>

      case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_4:
        *val = LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_4;
 80038e0:	683b      	ldr	r3, [r7, #0]
 80038e2:	221b      	movs	r2, #27
 80038e4:	701a      	strb	r2, [r3, #0]
        break;
 80038e6:	e00f      	b.n	8003908 <lis2dw12_power_mode_get+0x168>

      case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_3:
        *val = LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_3;
 80038e8:	683b      	ldr	r3, [r7, #0]
 80038ea:	221a      	movs	r2, #26
 80038ec:	701a      	strb	r2, [r3, #0]
        break;
 80038ee:	e00b      	b.n	8003908 <lis2dw12_power_mode_get+0x168>

      case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_2:
        *val = LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_2;
 80038f0:	683b      	ldr	r3, [r7, #0]
 80038f2:	2219      	movs	r2, #25
 80038f4:	701a      	strb	r2, [r3, #0]
        break;
 80038f6:	e007      	b.n	8003908 <lis2dw12_power_mode_get+0x168>

      case LIS2DW12_SINGLE_LOW_LOW_NOISE_PWR_12bit:
        *val = LIS2DW12_SINGLE_LOW_LOW_NOISE_PWR_12bit;
 80038f8:	683b      	ldr	r3, [r7, #0]
 80038fa:	2218      	movs	r2, #24
 80038fc:	701a      	strb	r2, [r3, #0]
        break;
 80038fe:	e003      	b.n	8003908 <lis2dw12_power_mode_get+0x168>

      default:
        *val = LIS2DW12_HIGH_PERFORMANCE;
 8003900:	683b      	ldr	r3, [r7, #0]
 8003902:	2204      	movs	r2, #4
 8003904:	701a      	strb	r2, [r3, #0]
        break;
 8003906:	bf00      	nop
    }
  }

  return ret;
 8003908:	697b      	ldr	r3, [r7, #20]
}
 800390a:	4618      	mov	r0, r3
 800390c:	3718      	adds	r7, #24
 800390e:	46bd      	mov	sp, r7
 8003910:	bd80      	pop	{r7, pc}
 8003912:	bf00      	nop

08003914 <lis2dw12_data_rate_set>:
  * @param  val      change the values of odr in reg CTRL1
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dw12_data_rate_set(stmdev_ctx_t *ctx, lis2dw12_odr_t val)
{
 8003914:	b580      	push	{r7, lr}
 8003916:	b086      	sub	sp, #24
 8003918:	af00      	add	r7, sp, #0
 800391a:	6078      	str	r0, [r7, #4]
 800391c:	460b      	mov	r3, r1
 800391e:	70fb      	strb	r3, [r7, #3]
  lis2dw12_ctrl1_t ctrl1;
  lis2dw12_ctrl3_t ctrl3;
  int32_t ret;

  ret = lis2dw12_read_reg(ctx, LIS2DW12_CTRL1, (uint8_t *) &ctrl1, 1);
 8003920:	f107 0210 	add.w	r2, r7, #16
 8003924:	2301      	movs	r3, #1
 8003926:	2120      	movs	r1, #32
 8003928:	6878      	ldr	r0, [r7, #4]
 800392a:	f7ff febb 	bl	80036a4 <lis2dw12_read_reg>
 800392e:	6178      	str	r0, [r7, #20]

  if (ret == 0)
 8003930:	697b      	ldr	r3, [r7, #20]
 8003932:	2b00      	cmp	r3, #0
 8003934:	d10f      	bne.n	8003956 <lis2dw12_data_rate_set+0x42>
  {
    ctrl1.odr = (uint8_t) val;
 8003936:	78fb      	ldrb	r3, [r7, #3]
 8003938:	f003 030f 	and.w	r3, r3, #15
 800393c:	b2da      	uxtb	r2, r3
 800393e:	7c3b      	ldrb	r3, [r7, #16]
 8003940:	f362 1307 	bfi	r3, r2, #4, #4
 8003944:	743b      	strb	r3, [r7, #16]
    ret = lis2dw12_write_reg(ctx, LIS2DW12_CTRL1, (uint8_t *) &ctrl1, 1);
 8003946:	f107 0210 	add.w	r2, r7, #16
 800394a:	2301      	movs	r3, #1
 800394c:	2120      	movs	r1, #32
 800394e:	6878      	ldr	r0, [r7, #4]
 8003950:	f7ff fec0 	bl	80036d4 <lis2dw12_write_reg>
 8003954:	6178      	str	r0, [r7, #20]
  }

  if (ret == 0)
 8003956:	697b      	ldr	r3, [r7, #20]
 8003958:	2b00      	cmp	r3, #0
 800395a:	d107      	bne.n	800396c <lis2dw12_data_rate_set+0x58>
  {
    ret = lis2dw12_read_reg(ctx, LIS2DW12_CTRL3, (uint8_t *) &ctrl3, 1);
 800395c:	f107 020c 	add.w	r2, r7, #12
 8003960:	2301      	movs	r3, #1
 8003962:	2122      	movs	r1, #34	@ 0x22
 8003964:	6878      	ldr	r0, [r7, #4]
 8003966:	f7ff fe9d 	bl	80036a4 <lis2dw12_read_reg>
 800396a:	6178      	str	r0, [r7, #20]
  }

  if (ret == 0)
 800396c:	697b      	ldr	r3, [r7, #20]
 800396e:	2b00      	cmp	r3, #0
 8003970:	d110      	bne.n	8003994 <lis2dw12_data_rate_set+0x80>
  {
    ctrl3.slp_mode = ((uint8_t) val & 0x30U) >> 4;
 8003972:	78fb      	ldrb	r3, [r7, #3]
 8003974:	091b      	lsrs	r3, r3, #4
 8003976:	f003 0303 	and.w	r3, r3, #3
 800397a:	b2da      	uxtb	r2, r3
 800397c:	7b3b      	ldrb	r3, [r7, #12]
 800397e:	f362 0301 	bfi	r3, r2, #0, #2
 8003982:	733b      	strb	r3, [r7, #12]
    ret = lis2dw12_write_reg(ctx, LIS2DW12_CTRL3, (uint8_t *) &ctrl3, 1);
 8003984:	f107 020c 	add.w	r2, r7, #12
 8003988:	2301      	movs	r3, #1
 800398a:	2122      	movs	r1, #34	@ 0x22
 800398c:	6878      	ldr	r0, [r7, #4]
 800398e:	f7ff fea1 	bl	80036d4 <lis2dw12_write_reg>
 8003992:	6178      	str	r0, [r7, #20]
  }

  return ret;
 8003994:	697b      	ldr	r3, [r7, #20]
}
 8003996:	4618      	mov	r0, r3
 8003998:	3718      	adds	r7, #24
 800399a:	46bd      	mov	sp, r7
 800399c:	bd80      	pop	{r7, pc}
	...

080039a0 <lis2dw12_data_rate_get>:
  * @param  val      Get the values of odr in reg CTRL1
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dw12_data_rate_get(stmdev_ctx_t *ctx, lis2dw12_odr_t *val)
{
 80039a0:	b580      	push	{r7, lr}
 80039a2:	b086      	sub	sp, #24
 80039a4:	af00      	add	r7, sp, #0
 80039a6:	6078      	str	r0, [r7, #4]
 80039a8:	6039      	str	r1, [r7, #0]
  lis2dw12_ctrl1_t ctrl1;
  lis2dw12_ctrl3_t ctrl3;
  int32_t ret;

  ret = lis2dw12_read_reg(ctx, LIS2DW12_CTRL1, (uint8_t *) &ctrl1, 1);
 80039aa:	f107 0210 	add.w	r2, r7, #16
 80039ae:	2301      	movs	r3, #1
 80039b0:	2120      	movs	r1, #32
 80039b2:	6878      	ldr	r0, [r7, #4]
 80039b4:	f7ff fe76 	bl	80036a4 <lis2dw12_read_reg>
 80039b8:	6178      	str	r0, [r7, #20]

  if (ret == 0)
 80039ba:	697b      	ldr	r3, [r7, #20]
 80039bc:	2b00      	cmp	r3, #0
 80039be:	f040 80b3 	bne.w	8003b28 <lis2dw12_data_rate_get+0x188>
  {
    ret = lis2dw12_read_reg(ctx, LIS2DW12_CTRL3, (uint8_t *) &ctrl3, 1);
 80039c2:	f107 020c 	add.w	r2, r7, #12
 80039c6:	2301      	movs	r3, #1
 80039c8:	2122      	movs	r1, #34	@ 0x22
 80039ca:	6878      	ldr	r0, [r7, #4]
 80039cc:	f7ff fe6a 	bl	80036a4 <lis2dw12_read_reg>
 80039d0:	6178      	str	r0, [r7, #20]

    switch ((ctrl3.slp_mode << 4) + ctrl1.odr)
 80039d2:	7b3b      	ldrb	r3, [r7, #12]
 80039d4:	f3c3 0301 	ubfx	r3, r3, #0, #2
 80039d8:	b2db      	uxtb	r3, r3
 80039da:	011b      	lsls	r3, r3, #4
 80039dc:	7c3a      	ldrb	r2, [r7, #16]
 80039de:	f3c2 1203 	ubfx	r2, r2, #4, #4
 80039e2:	b2d2      	uxtb	r2, r2
 80039e4:	4413      	add	r3, r2
 80039e6:	2b32      	cmp	r3, #50	@ 0x32
 80039e8:	f200 809a 	bhi.w	8003b20 <lis2dw12_data_rate_get+0x180>
 80039ec:	a201      	add	r2, pc, #4	@ (adr r2, 80039f4 <lis2dw12_data_rate_get+0x54>)
 80039ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80039f2:	bf00      	nop
 80039f4:	08003ac1 	.word	0x08003ac1
 80039f8:	08003ac9 	.word	0x08003ac9
 80039fc:	08003ad1 	.word	0x08003ad1
 8003a00:	08003ad9 	.word	0x08003ad9
 8003a04:	08003ae1 	.word	0x08003ae1
 8003a08:	08003ae9 	.word	0x08003ae9
 8003a0c:	08003af1 	.word	0x08003af1
 8003a10:	08003af9 	.word	0x08003af9
 8003a14:	08003b01 	.word	0x08003b01
 8003a18:	08003b09 	.word	0x08003b09
 8003a1c:	08003b21 	.word	0x08003b21
 8003a20:	08003b21 	.word	0x08003b21
 8003a24:	08003b21 	.word	0x08003b21
 8003a28:	08003b21 	.word	0x08003b21
 8003a2c:	08003b21 	.word	0x08003b21
 8003a30:	08003b21 	.word	0x08003b21
 8003a34:	08003b21 	.word	0x08003b21
 8003a38:	08003b21 	.word	0x08003b21
 8003a3c:	08003b19 	.word	0x08003b19
 8003a40:	08003b21 	.word	0x08003b21
 8003a44:	08003b21 	.word	0x08003b21
 8003a48:	08003b21 	.word	0x08003b21
 8003a4c:	08003b21 	.word	0x08003b21
 8003a50:	08003b21 	.word	0x08003b21
 8003a54:	08003b21 	.word	0x08003b21
 8003a58:	08003b21 	.word	0x08003b21
 8003a5c:	08003b21 	.word	0x08003b21
 8003a60:	08003b21 	.word	0x08003b21
 8003a64:	08003b21 	.word	0x08003b21
 8003a68:	08003b21 	.word	0x08003b21
 8003a6c:	08003b21 	.word	0x08003b21
 8003a70:	08003b21 	.word	0x08003b21
 8003a74:	08003b21 	.word	0x08003b21
 8003a78:	08003b21 	.word	0x08003b21
 8003a7c:	08003b21 	.word	0x08003b21
 8003a80:	08003b21 	.word	0x08003b21
 8003a84:	08003b21 	.word	0x08003b21
 8003a88:	08003b21 	.word	0x08003b21
 8003a8c:	08003b21 	.word	0x08003b21
 8003a90:	08003b21 	.word	0x08003b21
 8003a94:	08003b21 	.word	0x08003b21
 8003a98:	08003b21 	.word	0x08003b21
 8003a9c:	08003b21 	.word	0x08003b21
 8003aa0:	08003b21 	.word	0x08003b21
 8003aa4:	08003b21 	.word	0x08003b21
 8003aa8:	08003b21 	.word	0x08003b21
 8003aac:	08003b21 	.word	0x08003b21
 8003ab0:	08003b21 	.word	0x08003b21
 8003ab4:	08003b21 	.word	0x08003b21
 8003ab8:	08003b21 	.word	0x08003b21
 8003abc:	08003b11 	.word	0x08003b11
    {
      case LIS2DW12_XL_ODR_OFF:
        *val = LIS2DW12_XL_ODR_OFF;
 8003ac0:	683b      	ldr	r3, [r7, #0]
 8003ac2:	2200      	movs	r2, #0
 8003ac4:	701a      	strb	r2, [r3, #0]
        break;
 8003ac6:	e02f      	b.n	8003b28 <lis2dw12_data_rate_get+0x188>

      case LIS2DW12_XL_ODR_1Hz6_LP_ONLY:
        *val = LIS2DW12_XL_ODR_1Hz6_LP_ONLY;
 8003ac8:	683b      	ldr	r3, [r7, #0]
 8003aca:	2201      	movs	r2, #1
 8003acc:	701a      	strb	r2, [r3, #0]
        break;
 8003ace:	e02b      	b.n	8003b28 <lis2dw12_data_rate_get+0x188>

      case LIS2DW12_XL_ODR_12Hz5:
        *val = LIS2DW12_XL_ODR_12Hz5;
 8003ad0:	683b      	ldr	r3, [r7, #0]
 8003ad2:	2202      	movs	r2, #2
 8003ad4:	701a      	strb	r2, [r3, #0]
        break;
 8003ad6:	e027      	b.n	8003b28 <lis2dw12_data_rate_get+0x188>

      case LIS2DW12_XL_ODR_25Hz:
        *val = LIS2DW12_XL_ODR_25Hz;
 8003ad8:	683b      	ldr	r3, [r7, #0]
 8003ada:	2203      	movs	r2, #3
 8003adc:	701a      	strb	r2, [r3, #0]
        break;
 8003ade:	e023      	b.n	8003b28 <lis2dw12_data_rate_get+0x188>

      case LIS2DW12_XL_ODR_50Hz:
        *val = LIS2DW12_XL_ODR_50Hz;
 8003ae0:	683b      	ldr	r3, [r7, #0]
 8003ae2:	2204      	movs	r2, #4
 8003ae4:	701a      	strb	r2, [r3, #0]
        break;
 8003ae6:	e01f      	b.n	8003b28 <lis2dw12_data_rate_get+0x188>

      case LIS2DW12_XL_ODR_100Hz:
        *val = LIS2DW12_XL_ODR_100Hz;
 8003ae8:	683b      	ldr	r3, [r7, #0]
 8003aea:	2205      	movs	r2, #5
 8003aec:	701a      	strb	r2, [r3, #0]
        break;
 8003aee:	e01b      	b.n	8003b28 <lis2dw12_data_rate_get+0x188>

      case LIS2DW12_XL_ODR_200Hz:
        *val = LIS2DW12_XL_ODR_200Hz;
 8003af0:	683b      	ldr	r3, [r7, #0]
 8003af2:	2206      	movs	r2, #6
 8003af4:	701a      	strb	r2, [r3, #0]
        break;
 8003af6:	e017      	b.n	8003b28 <lis2dw12_data_rate_get+0x188>

      case LIS2DW12_XL_ODR_400Hz:
        *val = LIS2DW12_XL_ODR_400Hz;
 8003af8:	683b      	ldr	r3, [r7, #0]
 8003afa:	2207      	movs	r2, #7
 8003afc:	701a      	strb	r2, [r3, #0]
        break;
 8003afe:	e013      	b.n	8003b28 <lis2dw12_data_rate_get+0x188>

      case LIS2DW12_XL_ODR_800Hz:
        *val = LIS2DW12_XL_ODR_800Hz;
 8003b00:	683b      	ldr	r3, [r7, #0]
 8003b02:	2208      	movs	r2, #8
 8003b04:	701a      	strb	r2, [r3, #0]
        break;
 8003b06:	e00f      	b.n	8003b28 <lis2dw12_data_rate_get+0x188>

      case LIS2DW12_XL_ODR_1k6Hz:
        *val = LIS2DW12_XL_ODR_1k6Hz;
 8003b08:	683b      	ldr	r3, [r7, #0]
 8003b0a:	2209      	movs	r2, #9
 8003b0c:	701a      	strb	r2, [r3, #0]
        break;
 8003b0e:	e00b      	b.n	8003b28 <lis2dw12_data_rate_get+0x188>

      case LIS2DW12_XL_SET_SW_TRIG:
        *val = LIS2DW12_XL_SET_SW_TRIG;
 8003b10:	683b      	ldr	r3, [r7, #0]
 8003b12:	2232      	movs	r2, #50	@ 0x32
 8003b14:	701a      	strb	r2, [r3, #0]
        break;
 8003b16:	e007      	b.n	8003b28 <lis2dw12_data_rate_get+0x188>

      case LIS2DW12_XL_SET_PIN_TRIG:
        *val = LIS2DW12_XL_SET_PIN_TRIG;
 8003b18:	683b      	ldr	r3, [r7, #0]
 8003b1a:	2212      	movs	r2, #18
 8003b1c:	701a      	strb	r2, [r3, #0]
        break;
 8003b1e:	e003      	b.n	8003b28 <lis2dw12_data_rate_get+0x188>

      default:
        *val = LIS2DW12_XL_ODR_OFF;
 8003b20:	683b      	ldr	r3, [r7, #0]
 8003b22:	2200      	movs	r2, #0
 8003b24:	701a      	strb	r2, [r3, #0]
        break;
 8003b26:	bf00      	nop
    }
  }

  return ret;
 8003b28:	697b      	ldr	r3, [r7, #20]
}
 8003b2a:	4618      	mov	r0, r3
 8003b2c:	3718      	adds	r7, #24
 8003b2e:	46bd      	mov	sp, r7
 8003b30:	bd80      	pop	{r7, pc}
 8003b32:	bf00      	nop

08003b34 <lis2dw12_block_data_update_set>:
  * @param  val      change the values of bdu in reg CTRL2
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dw12_block_data_update_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8003b34:	b580      	push	{r7, lr}
 8003b36:	b084      	sub	sp, #16
 8003b38:	af00      	add	r7, sp, #0
 8003b3a:	6078      	str	r0, [r7, #4]
 8003b3c:	460b      	mov	r3, r1
 8003b3e:	70fb      	strb	r3, [r7, #3]
  lis2dw12_ctrl2_t reg;
  int32_t ret;

  ret = lis2dw12_read_reg(ctx, LIS2DW12_CTRL2, (uint8_t *) &reg, 1);
 8003b40:	f107 0208 	add.w	r2, r7, #8
 8003b44:	2301      	movs	r3, #1
 8003b46:	2121      	movs	r1, #33	@ 0x21
 8003b48:	6878      	ldr	r0, [r7, #4]
 8003b4a:	f7ff fdab 	bl	80036a4 <lis2dw12_read_reg>
 8003b4e:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	d10f      	bne.n	8003b76 <lis2dw12_block_data_update_set+0x42>
  {
    reg.bdu = val;
 8003b56:	78fb      	ldrb	r3, [r7, #3]
 8003b58:	f003 0301 	and.w	r3, r3, #1
 8003b5c:	b2da      	uxtb	r2, r3
 8003b5e:	7a3b      	ldrb	r3, [r7, #8]
 8003b60:	f362 03c3 	bfi	r3, r2, #3, #1
 8003b64:	723b      	strb	r3, [r7, #8]
    ret = lis2dw12_write_reg(ctx, LIS2DW12_CTRL2, (uint8_t *) &reg, 1);
 8003b66:	f107 0208 	add.w	r2, r7, #8
 8003b6a:	2301      	movs	r3, #1
 8003b6c:	2121      	movs	r1, #33	@ 0x21
 8003b6e:	6878      	ldr	r0, [r7, #4]
 8003b70:	f7ff fdb0 	bl	80036d4 <lis2dw12_write_reg>
 8003b74:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8003b76:	68fb      	ldr	r3, [r7, #12]
}
 8003b78:	4618      	mov	r0, r3
 8003b7a:	3710      	adds	r7, #16
 8003b7c:	46bd      	mov	sp, r7
 8003b7e:	bd80      	pop	{r7, pc}

08003b80 <lis2dw12_full_scale_set>:
  * @param  val      change the values of fs in reg CTRL6
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dw12_full_scale_set(stmdev_ctx_t *ctx, lis2dw12_fs_t val)
{
 8003b80:	b580      	push	{r7, lr}
 8003b82:	b084      	sub	sp, #16
 8003b84:	af00      	add	r7, sp, #0
 8003b86:	6078      	str	r0, [r7, #4]
 8003b88:	460b      	mov	r3, r1
 8003b8a:	70fb      	strb	r3, [r7, #3]
  lis2dw12_ctrl6_t reg;
  int32_t ret;

  ret = lis2dw12_read_reg(ctx, LIS2DW12_CTRL6, (uint8_t *) &reg, 1);
 8003b8c:	f107 0208 	add.w	r2, r7, #8
 8003b90:	2301      	movs	r3, #1
 8003b92:	2125      	movs	r1, #37	@ 0x25
 8003b94:	6878      	ldr	r0, [r7, #4]
 8003b96:	f7ff fd85 	bl	80036a4 <lis2dw12_read_reg>
 8003b9a:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	d10f      	bne.n	8003bc2 <lis2dw12_full_scale_set+0x42>
  {
    reg.fs = (uint8_t) val;
 8003ba2:	78fb      	ldrb	r3, [r7, #3]
 8003ba4:	f003 0303 	and.w	r3, r3, #3
 8003ba8:	b2da      	uxtb	r2, r3
 8003baa:	7a3b      	ldrb	r3, [r7, #8]
 8003bac:	f362 1305 	bfi	r3, r2, #4, #2
 8003bb0:	723b      	strb	r3, [r7, #8]
    ret = lis2dw12_write_reg(ctx, LIS2DW12_CTRL6, (uint8_t *) &reg, 1);
 8003bb2:	f107 0208 	add.w	r2, r7, #8
 8003bb6:	2301      	movs	r3, #1
 8003bb8:	2125      	movs	r1, #37	@ 0x25
 8003bba:	6878      	ldr	r0, [r7, #4]
 8003bbc:	f7ff fd8a 	bl	80036d4 <lis2dw12_write_reg>
 8003bc0:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8003bc2:	68fb      	ldr	r3, [r7, #12]
}
 8003bc4:	4618      	mov	r0, r3
 8003bc6:	3710      	adds	r7, #16
 8003bc8:	46bd      	mov	sp, r7
 8003bca:	bd80      	pop	{r7, pc}

08003bcc <lis2dw12_full_scale_get>:
  * @param  val      Get the values of fs in reg CTRL6
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dw12_full_scale_get(stmdev_ctx_t *ctx, lis2dw12_fs_t *val)
{
 8003bcc:	b580      	push	{r7, lr}
 8003bce:	b084      	sub	sp, #16
 8003bd0:	af00      	add	r7, sp, #0
 8003bd2:	6078      	str	r0, [r7, #4]
 8003bd4:	6039      	str	r1, [r7, #0]
  lis2dw12_ctrl6_t reg;
  int32_t ret;

  ret = lis2dw12_read_reg(ctx, LIS2DW12_CTRL6, (uint8_t *) &reg, 1);
 8003bd6:	f107 0208 	add.w	r2, r7, #8
 8003bda:	2301      	movs	r3, #1
 8003bdc:	2125      	movs	r1, #37	@ 0x25
 8003bde:	6878      	ldr	r0, [r7, #4]
 8003be0:	f7ff fd60 	bl	80036a4 <lis2dw12_read_reg>
 8003be4:	60f8      	str	r0, [r7, #12]

  switch (reg.fs)
 8003be6:	7a3b      	ldrb	r3, [r7, #8]
 8003be8:	f3c3 1301 	ubfx	r3, r3, #4, #2
 8003bec:	b2db      	uxtb	r3, r3
 8003bee:	2b03      	cmp	r3, #3
 8003bf0:	d81a      	bhi.n	8003c28 <lis2dw12_full_scale_get+0x5c>
 8003bf2:	a201      	add	r2, pc, #4	@ (adr r2, 8003bf8 <lis2dw12_full_scale_get+0x2c>)
 8003bf4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003bf8:	08003c09 	.word	0x08003c09
 8003bfc:	08003c11 	.word	0x08003c11
 8003c00:	08003c19 	.word	0x08003c19
 8003c04:	08003c21 	.word	0x08003c21
  {
    case LIS2DW12_2g:
      *val = LIS2DW12_2g;
 8003c08:	683b      	ldr	r3, [r7, #0]
 8003c0a:	2200      	movs	r2, #0
 8003c0c:	701a      	strb	r2, [r3, #0]
      break;
 8003c0e:	e00f      	b.n	8003c30 <lis2dw12_full_scale_get+0x64>

    case LIS2DW12_4g:
      *val = LIS2DW12_4g;
 8003c10:	683b      	ldr	r3, [r7, #0]
 8003c12:	2201      	movs	r2, #1
 8003c14:	701a      	strb	r2, [r3, #0]
      break;
 8003c16:	e00b      	b.n	8003c30 <lis2dw12_full_scale_get+0x64>

    case LIS2DW12_8g:
      *val = LIS2DW12_8g;
 8003c18:	683b      	ldr	r3, [r7, #0]
 8003c1a:	2202      	movs	r2, #2
 8003c1c:	701a      	strb	r2, [r3, #0]
      break;
 8003c1e:	e007      	b.n	8003c30 <lis2dw12_full_scale_get+0x64>

    case LIS2DW12_16g:
      *val = LIS2DW12_16g;
 8003c20:	683b      	ldr	r3, [r7, #0]
 8003c22:	2203      	movs	r2, #3
 8003c24:	701a      	strb	r2, [r3, #0]
      break;
 8003c26:	e003      	b.n	8003c30 <lis2dw12_full_scale_get+0x64>

    default:
      *val = LIS2DW12_2g;
 8003c28:	683b      	ldr	r3, [r7, #0]
 8003c2a:	2200      	movs	r2, #0
 8003c2c:	701a      	strb	r2, [r3, #0]
      break;
 8003c2e:	bf00      	nop
  }

  return ret;
 8003c30:	68fb      	ldr	r3, [r7, #12]
}
 8003c32:	4618      	mov	r0, r3
 8003c34:	3710      	adds	r7, #16
 8003c36:	46bd      	mov	sp, r7
 8003c38:	bd80      	pop	{r7, pc}
 8003c3a:	bf00      	nop

08003c3c <lis2dw12_acceleration_raw_get>:
  * @param  val      buffer that stores data read
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dw12_acceleration_raw_get(stmdev_ctx_t *ctx, int16_t *val)
{
 8003c3c:	b580      	push	{r7, lr}
 8003c3e:	b086      	sub	sp, #24
 8003c40:	af00      	add	r7, sp, #0
 8003c42:	6078      	str	r0, [r7, #4]
 8003c44:	6039      	str	r1, [r7, #0]
  uint8_t buff[6];
  int32_t ret;

  ret = lis2dw12_read_reg(ctx, LIS2DW12_OUT_X_L, buff, 6);
 8003c46:	f107 020c 	add.w	r2, r7, #12
 8003c4a:	2306      	movs	r3, #6
 8003c4c:	2128      	movs	r1, #40	@ 0x28
 8003c4e:	6878      	ldr	r0, [r7, #4]
 8003c50:	f7ff fd28 	bl	80036a4 <lis2dw12_read_reg>
 8003c54:	6178      	str	r0, [r7, #20]
  val[0] = (int16_t)buff[1];
 8003c56:	7b7b      	ldrb	r3, [r7, #13]
 8003c58:	b21a      	sxth	r2, r3
 8003c5a:	683b      	ldr	r3, [r7, #0]
 8003c5c:	801a      	strh	r2, [r3, #0]
  val[0] = (val[0] * 256) + (int16_t)buff[0];
 8003c5e:	683b      	ldr	r3, [r7, #0]
 8003c60:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003c64:	b29b      	uxth	r3, r3
 8003c66:	021b      	lsls	r3, r3, #8
 8003c68:	b29b      	uxth	r3, r3
 8003c6a:	7b3a      	ldrb	r2, [r7, #12]
 8003c6c:	4413      	add	r3, r2
 8003c6e:	b29b      	uxth	r3, r3
 8003c70:	b21a      	sxth	r2, r3
 8003c72:	683b      	ldr	r3, [r7, #0]
 8003c74:	801a      	strh	r2, [r3, #0]
  val[1] = (int16_t)buff[3];
 8003c76:	7bfa      	ldrb	r2, [r7, #15]
 8003c78:	683b      	ldr	r3, [r7, #0]
 8003c7a:	3302      	adds	r3, #2
 8003c7c:	b212      	sxth	r2, r2
 8003c7e:	801a      	strh	r2, [r3, #0]
  val[1] = (val[1] * 256) + (int16_t)buff[2];
 8003c80:	683b      	ldr	r3, [r7, #0]
 8003c82:	3302      	adds	r3, #2
 8003c84:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003c88:	b29b      	uxth	r3, r3
 8003c8a:	021b      	lsls	r3, r3, #8
 8003c8c:	b29b      	uxth	r3, r3
 8003c8e:	7bba      	ldrb	r2, [r7, #14]
 8003c90:	4413      	add	r3, r2
 8003c92:	b29a      	uxth	r2, r3
 8003c94:	683b      	ldr	r3, [r7, #0]
 8003c96:	3302      	adds	r3, #2
 8003c98:	b212      	sxth	r2, r2
 8003c9a:	801a      	strh	r2, [r3, #0]
  val[2] = (int16_t)buff[5];
 8003c9c:	7c7a      	ldrb	r2, [r7, #17]
 8003c9e:	683b      	ldr	r3, [r7, #0]
 8003ca0:	3304      	adds	r3, #4
 8003ca2:	b212      	sxth	r2, r2
 8003ca4:	801a      	strh	r2, [r3, #0]
  val[2] = (val[2] * 256) + (int16_t)buff[4];
 8003ca6:	683b      	ldr	r3, [r7, #0]
 8003ca8:	3304      	adds	r3, #4
 8003caa:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003cae:	b29b      	uxth	r3, r3
 8003cb0:	021b      	lsls	r3, r3, #8
 8003cb2:	b29b      	uxth	r3, r3
 8003cb4:	7c3a      	ldrb	r2, [r7, #16]
 8003cb6:	4413      	add	r3, r2
 8003cb8:	b29a      	uxth	r2, r3
 8003cba:	683b      	ldr	r3, [r7, #0]
 8003cbc:	3304      	adds	r3, #4
 8003cbe:	b212      	sxth	r2, r2
 8003cc0:	801a      	strh	r2, [r3, #0]

  return ret;
 8003cc2:	697b      	ldr	r3, [r7, #20]
}
 8003cc4:	4618      	mov	r0, r3
 8003cc6:	3718      	adds	r7, #24
 8003cc8:	46bd      	mov	sp, r7
 8003cca:	bd80      	pop	{r7, pc}

08003ccc <lis2dw12_device_id_get>:
  * @param  buff     buffer that stores data read
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dw12_device_id_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 8003ccc:	b580      	push	{r7, lr}
 8003cce:	b084      	sub	sp, #16
 8003cd0:	af00      	add	r7, sp, #0
 8003cd2:	6078      	str	r0, [r7, #4]
 8003cd4:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret = lis2dw12_read_reg(ctx, LIS2DW12_WHO_AM_I, buff, 1);
 8003cd6:	2301      	movs	r3, #1
 8003cd8:	683a      	ldr	r2, [r7, #0]
 8003cda:	210f      	movs	r1, #15
 8003cdc:	6878      	ldr	r0, [r7, #4]
 8003cde:	f7ff fce1 	bl	80036a4 <lis2dw12_read_reg>
 8003ce2:	60f8      	str	r0, [r7, #12]

  return ret;
 8003ce4:	68fb      	ldr	r3, [r7, #12]
}
 8003ce6:	4618      	mov	r0, r3
 8003ce8:	3710      	adds	r7, #16
 8003cea:	46bd      	mov	sp, r7
 8003cec:	bd80      	pop	{r7, pc}

08003cee <lis2dw12_auto_increment_set>:
  * @param  val      change the values of if_add_inc in reg CTRL2
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dw12_auto_increment_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8003cee:	b580      	push	{r7, lr}
 8003cf0:	b084      	sub	sp, #16
 8003cf2:	af00      	add	r7, sp, #0
 8003cf4:	6078      	str	r0, [r7, #4]
 8003cf6:	460b      	mov	r3, r1
 8003cf8:	70fb      	strb	r3, [r7, #3]
  lis2dw12_ctrl2_t reg;
  int32_t ret;

  ret = lis2dw12_read_reg(ctx, LIS2DW12_CTRL2, (uint8_t *) &reg, 1);
 8003cfa:	f107 0208 	add.w	r2, r7, #8
 8003cfe:	2301      	movs	r3, #1
 8003d00:	2121      	movs	r1, #33	@ 0x21
 8003d02:	6878      	ldr	r0, [r7, #4]
 8003d04:	f7ff fcce 	bl	80036a4 <lis2dw12_read_reg>
 8003d08:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8003d0a:	68fb      	ldr	r3, [r7, #12]
 8003d0c:	2b00      	cmp	r3, #0
 8003d0e:	d10f      	bne.n	8003d30 <lis2dw12_auto_increment_set+0x42>
  {
    reg.if_add_inc = val;
 8003d10:	78fb      	ldrb	r3, [r7, #3]
 8003d12:	f003 0301 	and.w	r3, r3, #1
 8003d16:	b2da      	uxtb	r2, r3
 8003d18:	7a3b      	ldrb	r3, [r7, #8]
 8003d1a:	f362 0382 	bfi	r3, r2, #2, #1
 8003d1e:	723b      	strb	r3, [r7, #8]
    ret = lis2dw12_write_reg(ctx, LIS2DW12_CTRL2, (uint8_t *) &reg, 1);
 8003d20:	f107 0208 	add.w	r2, r7, #8
 8003d24:	2301      	movs	r3, #1
 8003d26:	2121      	movs	r1, #33	@ 0x21
 8003d28:	6878      	ldr	r0, [r7, #4]
 8003d2a:	f7ff fcd3 	bl	80036d4 <lis2dw12_write_reg>
 8003d2e:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8003d30:	68fb      	ldr	r3, [r7, #12]
}
 8003d32:	4618      	mov	r0, r3
 8003d34:	3710      	adds	r7, #16
 8003d36:	46bd      	mov	sp, r7
 8003d38:	bd80      	pop	{r7, pc}

08003d3a <lis2dw12_fifo_mode_set>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dw12_fifo_mode_set(stmdev_ctx_t *ctx,
                               lis2dw12_fmode_t val)
{
 8003d3a:	b580      	push	{r7, lr}
 8003d3c:	b084      	sub	sp, #16
 8003d3e:	af00      	add	r7, sp, #0
 8003d40:	6078      	str	r0, [r7, #4]
 8003d42:	460b      	mov	r3, r1
 8003d44:	70fb      	strb	r3, [r7, #3]
  lis2dw12_fifo_ctrl_t reg;
  int32_t ret;

  ret = lis2dw12_read_reg(ctx, LIS2DW12_FIFO_CTRL, (uint8_t *) &reg, 1);
 8003d46:	f107 0208 	add.w	r2, r7, #8
 8003d4a:	2301      	movs	r3, #1
 8003d4c:	212e      	movs	r1, #46	@ 0x2e
 8003d4e:	6878      	ldr	r0, [r7, #4]
 8003d50:	f7ff fca8 	bl	80036a4 <lis2dw12_read_reg>
 8003d54:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8003d56:	68fb      	ldr	r3, [r7, #12]
 8003d58:	2b00      	cmp	r3, #0
 8003d5a:	d10f      	bne.n	8003d7c <lis2dw12_fifo_mode_set+0x42>
  {
    reg.fmode = (uint8_t) val;
 8003d5c:	78fb      	ldrb	r3, [r7, #3]
 8003d5e:	f003 0307 	and.w	r3, r3, #7
 8003d62:	b2da      	uxtb	r2, r3
 8003d64:	7a3b      	ldrb	r3, [r7, #8]
 8003d66:	f362 1347 	bfi	r3, r2, #5, #3
 8003d6a:	723b      	strb	r3, [r7, #8]
    ret = lis2dw12_write_reg(ctx, LIS2DW12_FIFO_CTRL, (uint8_t *) &reg, 1);
 8003d6c:	f107 0208 	add.w	r2, r7, #8
 8003d70:	2301      	movs	r3, #1
 8003d72:	212e      	movs	r1, #46	@ 0x2e
 8003d74:	6878      	ldr	r0, [r7, #4]
 8003d76:	f7ff fcad 	bl	80036d4 <lis2dw12_write_reg>
 8003d7a:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8003d7c:	68fb      	ldr	r3, [r7, #12]
}
 8003d7e:	4618      	mov	r0, r3
 8003d80:	3710      	adds	r7, #16
 8003d82:	46bd      	mov	sp, r7
 8003d84:	bd80      	pop	{r7, pc}
	...

08003d88 <LIS2MDL_RegisterBusIO>:
  * @brief  Register Component Bus IO operations
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2MDL_RegisterBusIO(LIS2MDL_Object_t *pObj, LIS2MDL_IO_t *pIO)
{
 8003d88:	b580      	push	{r7, lr}
 8003d8a:	b084      	sub	sp, #16
 8003d8c:	af00      	add	r7, sp, #0
 8003d8e:	6078      	str	r0, [r7, #4]
 8003d90:	6039      	str	r1, [r7, #0]
  int32_t ret = LIS2MDL_OK;
 8003d92:	2300      	movs	r3, #0
 8003d94:	60fb      	str	r3, [r7, #12]

  if (pObj == NULL)
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	2b00      	cmp	r3, #0
 8003d9a:	d103      	bne.n	8003da4 <LIS2MDL_RegisterBusIO+0x1c>
  {
    ret = LIS2MDL_ERROR;
 8003d9c:	f04f 33ff 	mov.w	r3, #4294967295
 8003da0:	60fb      	str	r3, [r7, #12]
 8003da2:	e067      	b.n	8003e74 <LIS2MDL_RegisterBusIO+0xec>
  }
  else
  {
    pObj->IO.Init      = pIO->Init;
 8003da4:	683b      	ldr	r3, [r7, #0]
 8003da6:	681a      	ldr	r2, [r3, #0]
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	601a      	str	r2, [r3, #0]
    pObj->IO.DeInit    = pIO->DeInit;
 8003dac:	683b      	ldr	r3, [r7, #0]
 8003dae:	685a      	ldr	r2, [r3, #4]
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	605a      	str	r2, [r3, #4]
    pObj->IO.BusType   = pIO->BusType;
 8003db4:	683b      	ldr	r3, [r7, #0]
 8003db6:	689a      	ldr	r2, [r3, #8]
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	609a      	str	r2, [r3, #8]
    pObj->IO.Address   = pIO->Address;
 8003dbc:	683b      	ldr	r3, [r7, #0]
 8003dbe:	7b1a      	ldrb	r2, [r3, #12]
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	731a      	strb	r2, [r3, #12]
    pObj->IO.WriteReg  = pIO->WriteReg;
 8003dc4:	683b      	ldr	r3, [r7, #0]
 8003dc6:	691a      	ldr	r2, [r3, #16]
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	611a      	str	r2, [r3, #16]
    pObj->IO.ReadReg   = pIO->ReadReg;
 8003dcc:	683b      	ldr	r3, [r7, #0]
 8003dce:	695a      	ldr	r2, [r3, #20]
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	615a      	str	r2, [r3, #20]
    pObj->IO.GetTick   = pIO->GetTick;
 8003dd4:	683b      	ldr	r3, [r7, #0]
 8003dd6:	699a      	ldr	r2, [r3, #24]
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	619a      	str	r2, [r3, #24]

    pObj->Ctx.read_reg  = ReadMagRegWrap;
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	4a28      	ldr	r2, [pc, #160]	@ (8003e80 <LIS2MDL_RegisterBusIO+0xf8>)
 8003de0:	625a      	str	r2, [r3, #36]	@ 0x24
    pObj->Ctx.write_reg = WriteMagRegWrap;
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	4a27      	ldr	r2, [pc, #156]	@ (8003e84 <LIS2MDL_RegisterBusIO+0xfc>)
 8003de6:	621a      	str	r2, [r3, #32]
    pObj->Ctx.mdelay    = pIO->Delay;
 8003de8:	683b      	ldr	r3, [r7, #0]
 8003dea:	69da      	ldr	r2, [r3, #28]
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	629a      	str	r2, [r3, #40]	@ 0x28
    pObj->Ctx.handle    = pObj;
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	687a      	ldr	r2, [r7, #4]
 8003df4:	62da      	str	r2, [r3, #44]	@ 0x2c

    if (pObj->IO.Init == NULL)
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	2b00      	cmp	r3, #0
 8003dfc:	d103      	bne.n	8003e06 <LIS2MDL_RegisterBusIO+0x7e>
    {
      ret = LIS2MDL_ERROR;
 8003dfe:	f04f 33ff 	mov.w	r3, #4294967295
 8003e02:	60fb      	str	r3, [r7, #12]
 8003e04:	e036      	b.n	8003e74 <LIS2MDL_RegisterBusIO+0xec>
    }
    else if (pObj->IO.Init() != LIS2MDL_OK)
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	4798      	blx	r3
 8003e0c:	4603      	mov	r3, r0
 8003e0e:	2b00      	cmp	r3, #0
 8003e10:	d003      	beq.n	8003e1a <LIS2MDL_RegisterBusIO+0x92>
    {
      ret = LIS2MDL_ERROR;
 8003e12:	f04f 33ff 	mov.w	r3, #4294967295
 8003e16:	60fb      	str	r3, [r7, #12]
 8003e18:	e02c      	b.n	8003e74 <LIS2MDL_RegisterBusIO+0xec>
    }
    else
    {
      if (pObj->IO.BusType != LIS2MDL_I2C_BUS) /* If the bus type is not I2C */
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	689b      	ldr	r3, [r3, #8]
 8003e1e:	2b00      	cmp	r3, #0
 8003e20:	d028      	beq.n	8003e74 <LIS2MDL_RegisterBusIO+0xec>
      {
        /* Disable I2C interface support and enable eventually SPI 4-Wires only the first time */
        if (pObj->is_initialized == 0U)
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8003e28:	2b00      	cmp	r3, #0
 8003e2a:	d123      	bne.n	8003e74 <LIS2MDL_RegisterBusIO+0xec>
        {
          if (pObj->IO.BusType == LIS2MDL_SPI_4WIRES_BUS) /* SPI 4-Wires */
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	689b      	ldr	r3, [r3, #8]
 8003e30:	2b01      	cmp	r3, #1
 8003e32:	d10d      	bne.n	8003e50 <LIS2MDL_RegisterBusIO+0xc8>
          {
            /* Enable SPI 4-Wires and disable I2C support on the component */
            uint8_t data = 0x34;
 8003e34:	2334      	movs	r3, #52	@ 0x34
 8003e36:	72fb      	strb	r3, [r7, #11]

            if (LIS2MDL_Write_Reg(pObj, LIS2MDL_CFG_REG_C, data) != LIS2MDL_OK)
 8003e38:	7afb      	ldrb	r3, [r7, #11]
 8003e3a:	461a      	mov	r2, r3
 8003e3c:	2162      	movs	r1, #98	@ 0x62
 8003e3e:	6878      	ldr	r0, [r7, #4]
 8003e40:	f000 fb19 	bl	8004476 <LIS2MDL_Write_Reg>
 8003e44:	4603      	mov	r3, r0
 8003e46:	2b00      	cmp	r3, #0
 8003e48:	d014      	beq.n	8003e74 <LIS2MDL_RegisterBusIO+0xec>
            {
              return LIS2MDL_ERROR;
 8003e4a:	f04f 33ff 	mov.w	r3, #4294967295
 8003e4e:	e012      	b.n	8003e76 <LIS2MDL_RegisterBusIO+0xee>
            }
          }
          else if (pObj->IO.BusType == LSM6DSOX_SENSORHUB_LIS2MDL_I2C_BUS) /* LSM6DSOX SensorHub with LIS2MDL example */
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	689b      	ldr	r3, [r3, #8]
 8003e54:	2b03      	cmp	r3, #3
 8003e56:	d101      	bne.n	8003e5c <LIS2MDL_RegisterBusIO+0xd4>
          {
            /* Do nothing, just keep I2C support on the component */
            return ret;
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	e00c      	b.n	8003e76 <LIS2MDL_RegisterBusIO+0xee>
          }
          else
          {
            /* Disable I2C interface on the component */
            if (lis2mdl_i2c_interface_set(&(pObj->Ctx), LIS2MDL_I2C_DISABLE) != LIS2MDL_OK)
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	3320      	adds	r3, #32
 8003e60:	2101      	movs	r1, #1
 8003e62:	4618      	mov	r0, r3
 8003e64:	f000 ff6b 	bl	8004d3e <lis2mdl_i2c_interface_set>
 8003e68:	4603      	mov	r3, r0
 8003e6a:	2b00      	cmp	r3, #0
 8003e6c:	d002      	beq.n	8003e74 <LIS2MDL_RegisterBusIO+0xec>
            {
              return LIS2MDL_ERROR;
 8003e6e:	f04f 33ff 	mov.w	r3, #4294967295
 8003e72:	e000      	b.n	8003e76 <LIS2MDL_RegisterBusIO+0xee>
        }
      }
    }
  }

  return ret;
 8003e74:	68fb      	ldr	r3, [r7, #12]
}
 8003e76:	4618      	mov	r0, r3
 8003e78:	3710      	adds	r7, #16
 8003e7a:	46bd      	mov	sp, r7
 8003e7c:	bd80      	pop	{r7, pc}
 8003e7e:	bf00      	nop
 8003e80:	080044cd 	.word	0x080044cd
 8003e84:	0800454f 	.word	0x0800454f

08003e88 <LIS2MDL_Init>:
  * @brief  Initialize the LIS2MDL sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2MDL_Init(LIS2MDL_Object_t *pObj)
{
 8003e88:	b580      	push	{r7, lr}
 8003e8a:	b084      	sub	sp, #16
 8003e8c:	af00      	add	r7, sp, #0
 8003e8e:	6078      	str	r0, [r7, #4]
  lis2mdl_cfg_reg_a_t reg_a;
  lis2mdl_cfg_reg_c_t reg_c;

  if (pObj->IO.BusType == LSM6DSOX_SENSORHUB_LIS2MDL_I2C_BUS) /* LSM6DSOX SensorHub with LIS2MDL example */
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	689b      	ldr	r3, [r3, #8]
 8003e94:	2b03      	cmp	r3, #3
 8003e96:	d144      	bne.n	8003f22 <LIS2MDL_Init+0x9a>
  {
    /* Read configuration from CFG_REG_C & CFG_REG_A regs */
    if (LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData(pObj, LIS2MDL_CFG_REG_C, (uint8_t *)&reg_c, 1) != LIS2MDL_OK)
 8003e98:	f107 0208 	add.w	r2, r7, #8
 8003e9c:	2301      	movs	r3, #1
 8003e9e:	2162      	movs	r1, #98	@ 0x62
 8003ea0:	6878      	ldr	r0, [r7, #4]
 8003ea2:	f000 fb95 	bl	80045d0 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData>
 8003ea6:	4603      	mov	r3, r0
 8003ea8:	2b00      	cmp	r3, #0
 8003eaa:	d002      	beq.n	8003eb2 <LIS2MDL_Init+0x2a>
    {
      return LIS2MDL_ERROR;
 8003eac:	f04f 33ff 	mov.w	r3, #4294967295
 8003eb0:	e06c      	b.n	8003f8c <LIS2MDL_Init+0x104>
    }
    if (LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData(pObj, LIS2MDL_CFG_REG_A, (uint8_t *)&reg_a, 1) != LIS2MDL_OK)
 8003eb2:	f107 020c 	add.w	r2, r7, #12
 8003eb6:	2301      	movs	r3, #1
 8003eb8:	2160      	movs	r1, #96	@ 0x60
 8003eba:	6878      	ldr	r0, [r7, #4]
 8003ebc:	f000 fb88 	bl	80045d0 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData>
 8003ec0:	4603      	mov	r3, r0
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	d002      	beq.n	8003ecc <LIS2MDL_Init+0x44>
    {
      return LIS2MDL_ERROR;
 8003ec6:	f04f 33ff 	mov.w	r3, #4294967295
 8003eca:	e05f      	b.n	8003f8c <LIS2MDL_Init+0x104>
    }

    /* Enable BDU */
    reg_c.bdu = PROPERTY_ENABLE;
 8003ecc:	7a3b      	ldrb	r3, [r7, #8]
 8003ece:	f043 0310 	orr.w	r3, r3, #16
 8003ed2:	723b      	strb	r3, [r7, #8]

    /* Self Test disabled. */
    reg_c.self_test = PROPERTY_DISABLE;
 8003ed4:	7a3b      	ldrb	r3, [r7, #8]
 8003ed6:	f36f 0341 	bfc	r3, #1, #1
 8003eda:	723b      	strb	r3, [r7, #8]

    /* Operating mode selection - power down */
    reg_a.md = LIS2MDL_POWER_DOWN;
 8003edc:	7b3b      	ldrb	r3, [r7, #12]
 8003ede:	2202      	movs	r2, #2
 8003ee0:	f362 0301 	bfi	r3, r2, #0, #2
 8003ee4:	733b      	strb	r3, [r7, #12]

    /* Output data rate selection */
    reg_a.odr = LIS2MDL_ODR_100Hz;
 8003ee6:	7b3b      	ldrb	r3, [r7, #12]
 8003ee8:	f043 030c 	orr.w	r3, r3, #12
 8003eec:	733b      	strb	r3, [r7, #12]

    /* Write configuration to CFG_REG_C & CFG_REG_A regs */
    if (LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData(pObj, LIS2MDL_CFG_REG_C, (uint8_t *)&reg_c, 1) != LIS2MDL_OK)
 8003eee:	f107 0208 	add.w	r2, r7, #8
 8003ef2:	2301      	movs	r3, #1
 8003ef4:	2162      	movs	r1, #98	@ 0x62
 8003ef6:	6878      	ldr	r0, [r7, #4]
 8003ef8:	f000 fca9 	bl	800484e <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData>
 8003efc:	4603      	mov	r3, r0
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	d002      	beq.n	8003f08 <LIS2MDL_Init+0x80>
    {
      return LIS2MDL_ERROR;
 8003f02:	f04f 33ff 	mov.w	r3, #4294967295
 8003f06:	e041      	b.n	8003f8c <LIS2MDL_Init+0x104>
    }
    if (LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData(pObj, LIS2MDL_CFG_REG_A, (uint8_t *)&reg_a, 1) != LIS2MDL_OK)
 8003f08:	f107 020c 	add.w	r2, r7, #12
 8003f0c:	2301      	movs	r3, #1
 8003f0e:	2160      	movs	r1, #96	@ 0x60
 8003f10:	6878      	ldr	r0, [r7, #4]
 8003f12:	f000 fc9c 	bl	800484e <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData>
 8003f16:	4603      	mov	r3, r0
 8003f18:	2b00      	cmp	r3, #0
 8003f1a:	d032      	beq.n	8003f82 <LIS2MDL_Init+0xfa>
    {
      return LIS2MDL_ERROR;
 8003f1c:	f04f 33ff 	mov.w	r3, #4294967295
 8003f20:	e034      	b.n	8003f8c <LIS2MDL_Init+0x104>
    }
  }
  else
  {
    /* Enable BDU */
    if (lis2mdl_block_data_update_set(&(pObj->Ctx), PROPERTY_ENABLE) != LIS2MDL_OK)
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	3320      	adds	r3, #32
 8003f26:	2101      	movs	r1, #1
 8003f28:	4618      	mov	r0, r3
 8003f2a:	f000 fe63 	bl	8004bf4 <lis2mdl_block_data_update_set>
 8003f2e:	4603      	mov	r3, r0
 8003f30:	2b00      	cmp	r3, #0
 8003f32:	d002      	beq.n	8003f3a <LIS2MDL_Init+0xb2>
    {
      return LIS2MDL_ERROR;
 8003f34:	f04f 33ff 	mov.w	r3, #4294967295
 8003f38:	e028      	b.n	8003f8c <LIS2MDL_Init+0x104>
    }

    /* Operating mode selection - power down */
    if (lis2mdl_operating_mode_set(&(pObj->Ctx), LIS2MDL_POWER_DOWN) != LIS2MDL_OK)
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	3320      	adds	r3, #32
 8003f3e:	2102      	movs	r1, #2
 8003f40:	4618      	mov	r0, r3
 8003f42:	f000 fdd2 	bl	8004aea <lis2mdl_operating_mode_set>
 8003f46:	4603      	mov	r3, r0
 8003f48:	2b00      	cmp	r3, #0
 8003f4a:	d002      	beq.n	8003f52 <LIS2MDL_Init+0xca>
    {
      return LIS2MDL_ERROR;
 8003f4c:	f04f 33ff 	mov.w	r3, #4294967295
 8003f50:	e01c      	b.n	8003f8c <LIS2MDL_Init+0x104>
    }

    /* Output data rate selection */
    if (lis2mdl_data_rate_set(&(pObj->Ctx), LIS2MDL_ODR_100Hz) != LIS2MDL_OK)
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	3320      	adds	r3, #32
 8003f56:	2103      	movs	r1, #3
 8003f58:	4618      	mov	r0, r3
 8003f5a:	f000 fdec 	bl	8004b36 <lis2mdl_data_rate_set>
 8003f5e:	4603      	mov	r3, r0
 8003f60:	2b00      	cmp	r3, #0
 8003f62:	d002      	beq.n	8003f6a <LIS2MDL_Init+0xe2>
    {
      return LIS2MDL_ERROR;
 8003f64:	f04f 33ff 	mov.w	r3, #4294967295
 8003f68:	e010      	b.n	8003f8c <LIS2MDL_Init+0x104>
    }

    /* Self Test disabled. */
    if (lis2mdl_self_test_set(&(pObj->Ctx), PROPERTY_DISABLE) != LIS2MDL_OK)
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	3320      	adds	r3, #32
 8003f6e:	2100      	movs	r1, #0
 8003f70:	4618      	mov	r0, r3
 8003f72:	f000 febe 	bl	8004cf2 <lis2mdl_self_test_set>
 8003f76:	4603      	mov	r3, r0
 8003f78:	2b00      	cmp	r3, #0
 8003f7a:	d002      	beq.n	8003f82 <LIS2MDL_Init+0xfa>
    {
      return LIS2MDL_ERROR;
 8003f7c:	f04f 33ff 	mov.w	r3, #4294967295
 8003f80:	e004      	b.n	8003f8c <LIS2MDL_Init+0x104>
    }
  }

  pObj->is_initialized = 1;
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	2201      	movs	r2, #1
 8003f86:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  return LIS2MDL_OK;
 8003f8a:	2300      	movs	r3, #0
}
 8003f8c:	4618      	mov	r0, r3
 8003f8e:	3710      	adds	r7, #16
 8003f90:	46bd      	mov	sp, r7
 8003f92:	bd80      	pop	{r7, pc}

08003f94 <LIS2MDL_DeInit>:
  * @brief  Deinitialize the LIS2MDL magnetometer sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2MDL_DeInit(LIS2MDL_Object_t *pObj)
{
 8003f94:	b580      	push	{r7, lr}
 8003f96:	b082      	sub	sp, #8
 8003f98:	af00      	add	r7, sp, #0
 8003f9a:	6078      	str	r0, [r7, #4]
  /* Disable the component */
  if (LIS2MDL_MAG_Disable(pObj) != LIS2MDL_OK)
 8003f9c:	6878      	ldr	r0, [r7, #4]
 8003f9e:	f000 f8a5 	bl	80040ec <LIS2MDL_MAG_Disable>
 8003fa2:	4603      	mov	r3, r0
 8003fa4:	2b00      	cmp	r3, #0
 8003fa6:	d002      	beq.n	8003fae <LIS2MDL_DeInit+0x1a>
  {
    return LIS2MDL_ERROR;
 8003fa8:	f04f 33ff 	mov.w	r3, #4294967295
 8003fac:	e004      	b.n	8003fb8 <LIS2MDL_DeInit+0x24>
  }

  pObj->is_initialized = 0;
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	2200      	movs	r2, #0
 8003fb2:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  return LIS2MDL_OK;
 8003fb6:	2300      	movs	r3, #0
}
 8003fb8:	4618      	mov	r0, r3
 8003fba:	3708      	adds	r7, #8
 8003fbc:	46bd      	mov	sp, r7
 8003fbe:	bd80      	pop	{r7, pc}

08003fc0 <LIS2MDL_ReadID>:
  * @param  pObj the device pObj
  * @param  Id the WHO_AM_I value
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2MDL_ReadID(LIS2MDL_Object_t *pObj, uint8_t *Id)
{
 8003fc0:	b580      	push	{r7, lr}
 8003fc2:	b082      	sub	sp, #8
 8003fc4:	af00      	add	r7, sp, #0
 8003fc6:	6078      	str	r0, [r7, #4]
 8003fc8:	6039      	str	r1, [r7, #0]
  if (pObj->IO.BusType == LSM6DSOX_SENSORHUB_LIS2MDL_I2C_BUS) /* LSM6DSOX SensorHub with LIS2MDL example */
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	689b      	ldr	r3, [r3, #8]
 8003fce:	2b03      	cmp	r3, #3
 8003fd0:	d10b      	bne.n	8003fea <LIS2MDL_ReadID+0x2a>
  {
    if (LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData(pObj, LIS2MDL_WHO_AM_I, Id, 1) != LIS2MDL_OK)
 8003fd2:	2301      	movs	r3, #1
 8003fd4:	683a      	ldr	r2, [r7, #0]
 8003fd6:	214f      	movs	r1, #79	@ 0x4f
 8003fd8:	6878      	ldr	r0, [r7, #4]
 8003fda:	f000 faf9 	bl	80045d0 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData>
 8003fde:	4603      	mov	r3, r0
 8003fe0:	2b00      	cmp	r3, #0
 8003fe2:	d00e      	beq.n	8004002 <LIS2MDL_ReadID+0x42>
    {
      return LIS2MDL_ERROR;
 8003fe4:	f04f 33ff 	mov.w	r3, #4294967295
 8003fe8:	e00c      	b.n	8004004 <LIS2MDL_ReadID+0x44>
    }
  }
  else
  {
    if (lis2mdl_device_id_get(&(pObj->Ctx), Id) != LIS2MDL_OK)
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	3320      	adds	r3, #32
 8003fee:	6839      	ldr	r1, [r7, #0]
 8003ff0:	4618      	mov	r0, r3
 8003ff2:	f000 fe6d 	bl	8004cd0 <lis2mdl_device_id_get>
 8003ff6:	4603      	mov	r3, r0
 8003ff8:	2b00      	cmp	r3, #0
 8003ffa:	d002      	beq.n	8004002 <LIS2MDL_ReadID+0x42>
    {
      return LIS2MDL_ERROR;
 8003ffc:	f04f 33ff 	mov.w	r3, #4294967295
 8004000:	e000      	b.n	8004004 <LIS2MDL_ReadID+0x44>
    }
  }

  return LIS2MDL_OK;
 8004002:	2300      	movs	r3, #0
}
 8004004:	4618      	mov	r0, r3
 8004006:	3708      	adds	r7, #8
 8004008:	46bd      	mov	sp, r7
 800400a:	bd80      	pop	{r7, pc}

0800400c <LIS2MDL_GetCapabilities>:
  * @param  pObj Component object pointer
  * @param  Capabilities pointer to LIS2MDL magnetometer sensor capabilities
  * @retval Component status
  */
int32_t LIS2MDL_GetCapabilities(LIS2MDL_Object_t *pObj, LIS2MDL_Capabilities_t *Capabilities)
{
 800400c:	b480      	push	{r7}
 800400e:	b083      	sub	sp, #12
 8004010:	af00      	add	r7, sp, #0
 8004012:	6078      	str	r0, [r7, #4]
 8004014:	6039      	str	r1, [r7, #0]
  /* Prevent unused argument(s) compilation warning */
  (void)(pObj);

  Capabilities->Acc          = 0;
 8004016:	683b      	ldr	r3, [r7, #0]
 8004018:	2200      	movs	r2, #0
 800401a:	701a      	strb	r2, [r3, #0]
  Capabilities->Gyro         = 0;
 800401c:	683b      	ldr	r3, [r7, #0]
 800401e:	2200      	movs	r2, #0
 8004020:	705a      	strb	r2, [r3, #1]
  Capabilities->Magneto      = 1;
 8004022:	683b      	ldr	r3, [r7, #0]
 8004024:	2201      	movs	r2, #1
 8004026:	709a      	strb	r2, [r3, #2]
  Capabilities->LowPower     = 0;
 8004028:	683b      	ldr	r3, [r7, #0]
 800402a:	2200      	movs	r2, #0
 800402c:	70da      	strb	r2, [r3, #3]
  Capabilities->GyroMaxFS    = 0;
 800402e:	683b      	ldr	r3, [r7, #0]
 8004030:	2200      	movs	r2, #0
 8004032:	605a      	str	r2, [r3, #4]
  Capabilities->AccMaxFS     = 0;
 8004034:	683b      	ldr	r3, [r7, #0]
 8004036:	2200      	movs	r2, #0
 8004038:	609a      	str	r2, [r3, #8]
  Capabilities->MagMaxFS     = 50;
 800403a:	683b      	ldr	r3, [r7, #0]
 800403c:	2232      	movs	r2, #50	@ 0x32
 800403e:	60da      	str	r2, [r3, #12]
  Capabilities->GyroMaxOdr   = 0.0f;
 8004040:	683b      	ldr	r3, [r7, #0]
 8004042:	f04f 0200 	mov.w	r2, #0
 8004046:	611a      	str	r2, [r3, #16]
  Capabilities->AccMaxOdr    = 0.0f;
 8004048:	683b      	ldr	r3, [r7, #0]
 800404a:	f04f 0200 	mov.w	r2, #0
 800404e:	615a      	str	r2, [r3, #20]
  Capabilities->MagMaxOdr    = 100.0f;
 8004050:	683b      	ldr	r3, [r7, #0]
 8004052:	4a04      	ldr	r2, [pc, #16]	@ (8004064 <LIS2MDL_GetCapabilities+0x58>)
 8004054:	619a      	str	r2, [r3, #24]
  return LIS2MDL_OK;
 8004056:	2300      	movs	r3, #0
}
 8004058:	4618      	mov	r0, r3
 800405a:	370c      	adds	r7, #12
 800405c:	46bd      	mov	sp, r7
 800405e:	bc80      	pop	{r7}
 8004060:	4770      	bx	lr
 8004062:	bf00      	nop
 8004064:	42c80000 	.word	0x42c80000

08004068 <LIS2MDL_MAG_Enable>:
  * @brief Enable the LIS2MDL magnetometer sensor
  * @param pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2MDL_MAG_Enable(LIS2MDL_Object_t *pObj)
{
 8004068:	b580      	push	{r7, lr}
 800406a:	b084      	sub	sp, #16
 800406c:	af00      	add	r7, sp, #0
 800406e:	6078      	str	r0, [r7, #4]
  lis2mdl_cfg_reg_a_t reg_a;

  /* Check if the component is already enabled */
  if (pObj->mag_is_enabled == 1U)
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8004076:	2b01      	cmp	r3, #1
 8004078:	d101      	bne.n	800407e <LIS2MDL_MAG_Enable+0x16>
  {
    return LIS2MDL_OK;
 800407a:	2300      	movs	r3, #0
 800407c:	e032      	b.n	80040e4 <LIS2MDL_MAG_Enable+0x7c>
  }

  if (pObj->IO.BusType == LSM6DSOX_SENSORHUB_LIS2MDL_I2C_BUS) /* LSM6DSOX SensorHub with LIS2MDL example */
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	689b      	ldr	r3, [r3, #8]
 8004082:	2b03      	cmp	r3, #3
 8004084:	d11d      	bne.n	80040c2 <LIS2MDL_MAG_Enable+0x5a>
  {
    /* Read configuration from CFG_REG_A reg */
    if (LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData(pObj, LIS2MDL_CFG_REG_A, (uint8_t *)&reg_a, 1) != LIS2MDL_OK)
 8004086:	f107 020c 	add.w	r2, r7, #12
 800408a:	2301      	movs	r3, #1
 800408c:	2160      	movs	r1, #96	@ 0x60
 800408e:	6878      	ldr	r0, [r7, #4]
 8004090:	f000 fa9e 	bl	80045d0 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData>
 8004094:	4603      	mov	r3, r0
 8004096:	2b00      	cmp	r3, #0
 8004098:	d002      	beq.n	80040a0 <LIS2MDL_MAG_Enable+0x38>
    {
      return LIS2MDL_ERROR;
 800409a:	f04f 33ff 	mov.w	r3, #4294967295
 800409e:	e021      	b.n	80040e4 <LIS2MDL_MAG_Enable+0x7c>
    }

    /* Operation mode selection. */
    reg_a.md = LIS2MDL_CONTINUOUS_MODE;
 80040a0:	7b3b      	ldrb	r3, [r7, #12]
 80040a2:	f36f 0301 	bfc	r3, #0, #2
 80040a6:	733b      	strb	r3, [r7, #12]

    /* Write configuration to CFG_REG_A reg */
    if (LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData(pObj, LIS2MDL_CFG_REG_A, (uint8_t *)&reg_a, 1) != LIS2MDL_OK)
 80040a8:	f107 020c 	add.w	r2, r7, #12
 80040ac:	2301      	movs	r3, #1
 80040ae:	2160      	movs	r1, #96	@ 0x60
 80040b0:	6878      	ldr	r0, [r7, #4]
 80040b2:	f000 fbcc 	bl	800484e <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData>
 80040b6:	4603      	mov	r3, r0
 80040b8:	2b00      	cmp	r3, #0
 80040ba:	d00e      	beq.n	80040da <LIS2MDL_MAG_Enable+0x72>
    {
      return LIS2MDL_ERROR;
 80040bc:	f04f 33ff 	mov.w	r3, #4294967295
 80040c0:	e010      	b.n	80040e4 <LIS2MDL_MAG_Enable+0x7c>
    }
  }
  else
  {
    /* Operation mode selection. */
    if (lis2mdl_operating_mode_set(&(pObj->Ctx), LIS2MDL_CONTINUOUS_MODE) != LIS2MDL_OK)
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	3320      	adds	r3, #32
 80040c6:	2100      	movs	r1, #0
 80040c8:	4618      	mov	r0, r3
 80040ca:	f000 fd0e 	bl	8004aea <lis2mdl_operating_mode_set>
 80040ce:	4603      	mov	r3, r0
 80040d0:	2b00      	cmp	r3, #0
 80040d2:	d002      	beq.n	80040da <LIS2MDL_MAG_Enable+0x72>
    {
      return LIS2MDL_ERROR;
 80040d4:	f04f 33ff 	mov.w	r3, #4294967295
 80040d8:	e004      	b.n	80040e4 <LIS2MDL_MAG_Enable+0x7c>
    }
  }

  pObj->mag_is_enabled = 1;
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	2201      	movs	r2, #1
 80040de:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31

  return LIS2MDL_OK;
 80040e2:	2300      	movs	r3, #0
}
 80040e4:	4618      	mov	r0, r3
 80040e6:	3710      	adds	r7, #16
 80040e8:	46bd      	mov	sp, r7
 80040ea:	bd80      	pop	{r7, pc}

080040ec <LIS2MDL_MAG_Disable>:
  * @brief Disable the LIS2MDL magnetometer sensor
  * @param pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2MDL_MAG_Disable(LIS2MDL_Object_t *pObj)
{
 80040ec:	b580      	push	{r7, lr}
 80040ee:	b084      	sub	sp, #16
 80040f0:	af00      	add	r7, sp, #0
 80040f2:	6078      	str	r0, [r7, #4]
  lis2mdl_cfg_reg_a_t reg_a;

  /* Check if the component is already disabled */
  if (pObj->mag_is_enabled == 0U)
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 80040fa:	2b00      	cmp	r3, #0
 80040fc:	d101      	bne.n	8004102 <LIS2MDL_MAG_Disable+0x16>
  {
    return LIS2MDL_OK;
 80040fe:	2300      	movs	r3, #0
 8004100:	e033      	b.n	800416a <LIS2MDL_MAG_Disable+0x7e>
  }

  if (pObj->IO.BusType == LSM6DSOX_SENSORHUB_LIS2MDL_I2C_BUS) /* LSM6DSOX SensorHub with LIS2MDL example */
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	689b      	ldr	r3, [r3, #8]
 8004106:	2b03      	cmp	r3, #3
 8004108:	d11e      	bne.n	8004148 <LIS2MDL_MAG_Disable+0x5c>
  {
    /* Read configuration from CFG_REG_A reg */
    if (LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData(pObj, LIS2MDL_CFG_REG_A, (uint8_t *)&reg_a, 1) != LIS2MDL_OK)
 800410a:	f107 020c 	add.w	r2, r7, #12
 800410e:	2301      	movs	r3, #1
 8004110:	2160      	movs	r1, #96	@ 0x60
 8004112:	6878      	ldr	r0, [r7, #4]
 8004114:	f000 fa5c 	bl	80045d0 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData>
 8004118:	4603      	mov	r3, r0
 800411a:	2b00      	cmp	r3, #0
 800411c:	d002      	beq.n	8004124 <LIS2MDL_MAG_Disable+0x38>
    {
      return LIS2MDL_ERROR;
 800411e:	f04f 33ff 	mov.w	r3, #4294967295
 8004122:	e022      	b.n	800416a <LIS2MDL_MAG_Disable+0x7e>
    }

    /* Operation mode selection. */
    reg_a.md = LIS2MDL_POWER_DOWN;
 8004124:	7b3b      	ldrb	r3, [r7, #12]
 8004126:	2202      	movs	r2, #2
 8004128:	f362 0301 	bfi	r3, r2, #0, #2
 800412c:	733b      	strb	r3, [r7, #12]

    /* Write configuration to CFG_REG_A reg */
    if (LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData(pObj, LIS2MDL_CFG_REG_A, (uint8_t *)&reg_a, 1) != LIS2MDL_OK)
 800412e:	f107 020c 	add.w	r2, r7, #12
 8004132:	2301      	movs	r3, #1
 8004134:	2160      	movs	r1, #96	@ 0x60
 8004136:	6878      	ldr	r0, [r7, #4]
 8004138:	f000 fb89 	bl	800484e <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData>
 800413c:	4603      	mov	r3, r0
 800413e:	2b00      	cmp	r3, #0
 8004140:	d00e      	beq.n	8004160 <LIS2MDL_MAG_Disable+0x74>
    {
      return LIS2MDL_ERROR;
 8004142:	f04f 33ff 	mov.w	r3, #4294967295
 8004146:	e010      	b.n	800416a <LIS2MDL_MAG_Disable+0x7e>
    }
  }
  else
  {
    /* Operation mode selection. */
    if (lis2mdl_operating_mode_set(&(pObj->Ctx), LIS2MDL_POWER_DOWN) != LIS2MDL_OK)
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	3320      	adds	r3, #32
 800414c:	2102      	movs	r1, #2
 800414e:	4618      	mov	r0, r3
 8004150:	f000 fccb 	bl	8004aea <lis2mdl_operating_mode_set>
 8004154:	4603      	mov	r3, r0
 8004156:	2b00      	cmp	r3, #0
 8004158:	d002      	beq.n	8004160 <LIS2MDL_MAG_Disable+0x74>
    {
      return LIS2MDL_ERROR;
 800415a:	f04f 33ff 	mov.w	r3, #4294967295
 800415e:	e004      	b.n	800416a <LIS2MDL_MAG_Disable+0x7e>
    }
  }

  pObj->mag_is_enabled = 0;
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	2200      	movs	r2, #0
 8004164:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31

  return LIS2MDL_OK;
 8004168:	2300      	movs	r3, #0
}
 800416a:	4618      	mov	r0, r3
 800416c:	3710      	adds	r7, #16
 800416e:	46bd      	mov	sp, r7
 8004170:	bd80      	pop	{r7, pc}

08004172 <LIS2MDL_MAG_GetSensitivity>:
  * @param  pObj the device pObj
  * @param  Sensitivity pointer
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2MDL_MAG_GetSensitivity(LIS2MDL_Object_t *pObj, float *Sensitivity)
{
 8004172:	b480      	push	{r7}
 8004174:	b083      	sub	sp, #12
 8004176:	af00      	add	r7, sp, #0
 8004178:	6078      	str	r0, [r7, #4]
 800417a:	6039      	str	r1, [r7, #0]
  *Sensitivity = LIS2MDL_MAG_SENSITIVITY_FS_50GAUSS;
 800417c:	683b      	ldr	r3, [r7, #0]
 800417e:	f04f 527f 	mov.w	r2, #1069547520	@ 0x3fc00000
 8004182:	601a      	str	r2, [r3, #0]

  return LIS2MDL_OK;
 8004184:	2300      	movs	r3, #0
}
 8004186:	4618      	mov	r0, r3
 8004188:	370c      	adds	r7, #12
 800418a:	46bd      	mov	sp, r7
 800418c:	bc80      	pop	{r7}
 800418e:	4770      	bx	lr

08004190 <LIS2MDL_MAG_GetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr pointer where the output data rate is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2MDL_MAG_GetOutputDataRate(LIS2MDL_Object_t *pObj, float *Odr)
{
 8004190:	b580      	push	{r7, lr}
 8004192:	b084      	sub	sp, #16
 8004194:	af00      	add	r7, sp, #0
 8004196:	6078      	str	r0, [r7, #4]
 8004198:	6039      	str	r1, [r7, #0]
  int32_t ret = LIS2MDL_OK;
 800419a:	2300      	movs	r3, #0
 800419c:	60fb      	str	r3, [r7, #12]
  lis2mdl_odr_t odr_low_level;

  /* Get current output data rate. */
  if (lis2mdl_data_rate_get(&(pObj->Ctx), &odr_low_level) != LIS2MDL_OK)
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	3320      	adds	r3, #32
 80041a2:	f107 020b 	add.w	r2, r7, #11
 80041a6:	4611      	mov	r1, r2
 80041a8:	4618      	mov	r0, r3
 80041aa:	f000 fceb 	bl	8004b84 <lis2mdl_data_rate_get>
 80041ae:	4603      	mov	r3, r0
 80041b0:	2b00      	cmp	r3, #0
 80041b2:	d002      	beq.n	80041ba <LIS2MDL_MAG_GetOutputDataRate+0x2a>
  {
    return LIS2MDL_ERROR;
 80041b4:	f04f 33ff 	mov.w	r3, #4294967295
 80041b8:	e023      	b.n	8004202 <LIS2MDL_MAG_GetOutputDataRate+0x72>
  }

  switch (odr_low_level)
 80041ba:	7afb      	ldrb	r3, [r7, #11]
 80041bc:	2b03      	cmp	r3, #3
 80041be:	d81b      	bhi.n	80041f8 <LIS2MDL_MAG_GetOutputDataRate+0x68>
 80041c0:	a201      	add	r2, pc, #4	@ (adr r2, 80041c8 <LIS2MDL_MAG_GetOutputDataRate+0x38>)
 80041c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80041c6:	bf00      	nop
 80041c8:	080041d9 	.word	0x080041d9
 80041cc:	080041e1 	.word	0x080041e1
 80041d0:	080041e9 	.word	0x080041e9
 80041d4:	080041f1 	.word	0x080041f1
  {
    case LIS2MDL_ODR_10Hz:
      *Odr = 10.0f;
 80041d8:	683b      	ldr	r3, [r7, #0]
 80041da:	4a0c      	ldr	r2, [pc, #48]	@ (800420c <LIS2MDL_MAG_GetOutputDataRate+0x7c>)
 80041dc:	601a      	str	r2, [r3, #0]
      break;
 80041de:	e00f      	b.n	8004200 <LIS2MDL_MAG_GetOutputDataRate+0x70>

    case LIS2MDL_ODR_20Hz:
      *Odr = 20.0f;
 80041e0:	683b      	ldr	r3, [r7, #0]
 80041e2:	4a0b      	ldr	r2, [pc, #44]	@ (8004210 <LIS2MDL_MAG_GetOutputDataRate+0x80>)
 80041e4:	601a      	str	r2, [r3, #0]
      break;
 80041e6:	e00b      	b.n	8004200 <LIS2MDL_MAG_GetOutputDataRate+0x70>

    case LIS2MDL_ODR_50Hz:
      *Odr = 50.0f;
 80041e8:	683b      	ldr	r3, [r7, #0]
 80041ea:	4a0a      	ldr	r2, [pc, #40]	@ (8004214 <LIS2MDL_MAG_GetOutputDataRate+0x84>)
 80041ec:	601a      	str	r2, [r3, #0]
      break;
 80041ee:	e007      	b.n	8004200 <LIS2MDL_MAG_GetOutputDataRate+0x70>

    case LIS2MDL_ODR_100Hz:
      *Odr = 100.0f;
 80041f0:	683b      	ldr	r3, [r7, #0]
 80041f2:	4a09      	ldr	r2, [pc, #36]	@ (8004218 <LIS2MDL_MAG_GetOutputDataRate+0x88>)
 80041f4:	601a      	str	r2, [r3, #0]
      break;
 80041f6:	e003      	b.n	8004200 <LIS2MDL_MAG_GetOutputDataRate+0x70>

    default:
      ret = LIS2MDL_ERROR;
 80041f8:	f04f 33ff 	mov.w	r3, #4294967295
 80041fc:	60fb      	str	r3, [r7, #12]
      break;
 80041fe:	bf00      	nop
  }

  return ret;
 8004200:	68fb      	ldr	r3, [r7, #12]
}
 8004202:	4618      	mov	r0, r3
 8004204:	3710      	adds	r7, #16
 8004206:	46bd      	mov	sp, r7
 8004208:	bd80      	pop	{r7, pc}
 800420a:	bf00      	nop
 800420c:	41200000 	.word	0x41200000
 8004210:	41a00000 	.word	0x41a00000
 8004214:	42480000 	.word	0x42480000
 8004218:	42c80000 	.word	0x42c80000

0800421c <LIS2MDL_MAG_SetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr the output data rate value to be set
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2MDL_MAG_SetOutputDataRate(LIS2MDL_Object_t *pObj, float Odr)
{
 800421c:	b580      	push	{r7, lr}
 800421e:	b084      	sub	sp, #16
 8004220:	af00      	add	r7, sp, #0
 8004222:	6078      	str	r0, [r7, #4]
 8004224:	6039      	str	r1, [r7, #0]
  lis2mdl_odr_t new_odr;
  lis2mdl_cfg_reg_a_t reg_a;

  new_odr = (Odr <= 10.000f) ? LIS2MDL_ODR_10Hz
            : (Odr <= 20.000f) ? LIS2MDL_ODR_20Hz
 8004226:	492a      	ldr	r1, [pc, #168]	@ (80042d0 <LIS2MDL_MAG_SetOutputDataRate+0xb4>)
 8004228:	6838      	ldr	r0, [r7, #0]
 800422a:	f7fc fefb 	bl	8001024 <__aeabi_fcmple>
 800422e:	4603      	mov	r3, r0
 8004230:	2b00      	cmp	r3, #0
 8004232:	d001      	beq.n	8004238 <LIS2MDL_MAG_SetOutputDataRate+0x1c>
 8004234:	2300      	movs	r3, #0
 8004236:	e012      	b.n	800425e <LIS2MDL_MAG_SetOutputDataRate+0x42>
 8004238:	4926      	ldr	r1, [pc, #152]	@ (80042d4 <LIS2MDL_MAG_SetOutputDataRate+0xb8>)
 800423a:	6838      	ldr	r0, [r7, #0]
 800423c:	f7fc fef2 	bl	8001024 <__aeabi_fcmple>
 8004240:	4603      	mov	r3, r0
 8004242:	2b00      	cmp	r3, #0
 8004244:	d001      	beq.n	800424a <LIS2MDL_MAG_SetOutputDataRate+0x2e>
 8004246:	2301      	movs	r3, #1
 8004248:	e009      	b.n	800425e <LIS2MDL_MAG_SetOutputDataRate+0x42>
 800424a:	4923      	ldr	r1, [pc, #140]	@ (80042d8 <LIS2MDL_MAG_SetOutputDataRate+0xbc>)
 800424c:	6838      	ldr	r0, [r7, #0]
 800424e:	f7fc fee9 	bl	8001024 <__aeabi_fcmple>
 8004252:	4603      	mov	r3, r0
 8004254:	2b00      	cmp	r3, #0
 8004256:	d001      	beq.n	800425c <LIS2MDL_MAG_SetOutputDataRate+0x40>
 8004258:	2302      	movs	r3, #2
 800425a:	e000      	b.n	800425e <LIS2MDL_MAG_SetOutputDataRate+0x42>
 800425c:	2303      	movs	r3, #3
  new_odr = (Odr <= 10.000f) ? LIS2MDL_ODR_10Hz
 800425e:	73fb      	strb	r3, [r7, #15]
            : (Odr <= 50.000f) ? LIS2MDL_ODR_50Hz
            :                    LIS2MDL_ODR_100Hz;

  if (pObj->IO.BusType == LSM6DSOX_SENSORHUB_LIS2MDL_I2C_BUS) /* LSM6DSOX SensorHub with LIS2MDL example */
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	689b      	ldr	r3, [r3, #8]
 8004264:	2b03      	cmp	r3, #3
 8004266:	d121      	bne.n	80042ac <LIS2MDL_MAG_SetOutputDataRate+0x90>
  {
    /* Read configuration from CFG_REG_A reg */
    if (LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData(pObj, LIS2MDL_CFG_REG_A, (uint8_t *)&reg_a, 1) != LIS2MDL_OK)
 8004268:	f107 020c 	add.w	r2, r7, #12
 800426c:	2301      	movs	r3, #1
 800426e:	2160      	movs	r1, #96	@ 0x60
 8004270:	6878      	ldr	r0, [r7, #4]
 8004272:	f000 f9ad 	bl	80045d0 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData>
 8004276:	4603      	mov	r3, r0
 8004278:	2b00      	cmp	r3, #0
 800427a:	d002      	beq.n	8004282 <LIS2MDL_MAG_SetOutputDataRate+0x66>
    {
      return LIS2MDL_ERROR;
 800427c:	f04f 33ff 	mov.w	r3, #4294967295
 8004280:	e022      	b.n	80042c8 <LIS2MDL_MAG_SetOutputDataRate+0xac>
    }

    /* Output data rate selection */
    reg_a.odr = new_odr;
 8004282:	7bfb      	ldrb	r3, [r7, #15]
 8004284:	f003 0303 	and.w	r3, r3, #3
 8004288:	b2da      	uxtb	r2, r3
 800428a:	7b3b      	ldrb	r3, [r7, #12]
 800428c:	f362 0383 	bfi	r3, r2, #2, #2
 8004290:	733b      	strb	r3, [r7, #12]

    /* Write configuration to CFG_REG_A reg */
    if (LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData(pObj, LIS2MDL_CFG_REG_A, (uint8_t *)&reg_a, 1) != LIS2MDL_OK)
 8004292:	f107 020c 	add.w	r2, r7, #12
 8004296:	2301      	movs	r3, #1
 8004298:	2160      	movs	r1, #96	@ 0x60
 800429a:	6878      	ldr	r0, [r7, #4]
 800429c:	f000 fad7 	bl	800484e <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData>
 80042a0:	4603      	mov	r3, r0
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	d00f      	beq.n	80042c6 <LIS2MDL_MAG_SetOutputDataRate+0xaa>
    {
      return LIS2MDL_ERROR;
 80042a6:	f04f 33ff 	mov.w	r3, #4294967295
 80042aa:	e00d      	b.n	80042c8 <LIS2MDL_MAG_SetOutputDataRate+0xac>
    }
  }
  else
  {
    if (lis2mdl_data_rate_set(&(pObj->Ctx), new_odr) != LIS2MDL_OK)
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	3320      	adds	r3, #32
 80042b0:	7bfa      	ldrb	r2, [r7, #15]
 80042b2:	4611      	mov	r1, r2
 80042b4:	4618      	mov	r0, r3
 80042b6:	f000 fc3e 	bl	8004b36 <lis2mdl_data_rate_set>
 80042ba:	4603      	mov	r3, r0
 80042bc:	2b00      	cmp	r3, #0
 80042be:	d002      	beq.n	80042c6 <LIS2MDL_MAG_SetOutputDataRate+0xaa>
    {
      return LIS2MDL_ERROR;
 80042c0:	f04f 33ff 	mov.w	r3, #4294967295
 80042c4:	e000      	b.n	80042c8 <LIS2MDL_MAG_SetOutputDataRate+0xac>
    }
  }

  return LIS2MDL_OK;
 80042c6:	2300      	movs	r3, #0
}
 80042c8:	4618      	mov	r0, r3
 80042ca:	3710      	adds	r7, #16
 80042cc:	46bd      	mov	sp, r7
 80042ce:	bd80      	pop	{r7, pc}
 80042d0:	41200000 	.word	0x41200000
 80042d4:	41a00000 	.word	0x41a00000
 80042d8:	42480000 	.word	0x42480000

080042dc <LIS2MDL_MAG_GetFullScale>:
  * @param  pObj the device pObj
  * @param  FullScale pointer where the full scale is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2MDL_MAG_GetFullScale(LIS2MDL_Object_t *pObj, int32_t *FullScale)
{
 80042dc:	b480      	push	{r7}
 80042de:	b083      	sub	sp, #12
 80042e0:	af00      	add	r7, sp, #0
 80042e2:	6078      	str	r0, [r7, #4]
 80042e4:	6039      	str	r1, [r7, #0]
  *FullScale = 50;
 80042e6:	683b      	ldr	r3, [r7, #0]
 80042e8:	2232      	movs	r2, #50	@ 0x32
 80042ea:	601a      	str	r2, [r3, #0]

  return LIS2MDL_OK;
 80042ec:	2300      	movs	r3, #0
}
 80042ee:	4618      	mov	r0, r3
 80042f0:	370c      	adds	r7, #12
 80042f2:	46bd      	mov	sp, r7
 80042f4:	bc80      	pop	{r7}
 80042f6:	4770      	bx	lr

080042f8 <LIS2MDL_MAG_SetFullScale>:
  * @param  pObj the device pObj
  * @param  FullScale the functional full scale to be set
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2MDL_MAG_SetFullScale(LIS2MDL_Object_t *pObj, int32_t FullScale)
{
 80042f8:	b480      	push	{r7}
 80042fa:	b083      	sub	sp, #12
 80042fc:	af00      	add	r7, sp, #0
 80042fe:	6078      	str	r0, [r7, #4]
 8004300:	6039      	str	r1, [r7, #0]
  return LIS2MDL_OK;
 8004302:	2300      	movs	r3, #0
}
 8004304:	4618      	mov	r0, r3
 8004306:	370c      	adds	r7, #12
 8004308:	46bd      	mov	sp, r7
 800430a:	bc80      	pop	{r7}
 800430c:	4770      	bx	lr

0800430e <LIS2MDL_MAG_GetAxesRaw>:
  * @param  pObj the device pObj
  * @param  Value pointer where the raw values of the axes are written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2MDL_MAG_GetAxesRaw(LIS2MDL_Object_t *pObj, LIS2MDL_AxesRaw_t *Value)
{
 800430e:	b580      	push	{r7, lr}
 8004310:	b084      	sub	sp, #16
 8004312:	af00      	add	r7, sp, #0
 8004314:	6078      	str	r0, [r7, #4]
 8004316:	6039      	str	r1, [r7, #0]
  lis2mdl_axis3bit16_t data_raw;

  /* Read raw data values. */
  if (lis2mdl_magnetic_raw_get(&(pObj->Ctx), data_raw.i16bit) != LIS2MDL_OK)
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	3320      	adds	r3, #32
 800431c:	f107 0208 	add.w	r2, r7, #8
 8004320:	4611      	mov	r1, r2
 8004322:	4618      	mov	r0, r3
 8004324:	f000 fc8c 	bl	8004c40 <lis2mdl_magnetic_raw_get>
 8004328:	4603      	mov	r3, r0
 800432a:	2b00      	cmp	r3, #0
 800432c:	d002      	beq.n	8004334 <LIS2MDL_MAG_GetAxesRaw+0x26>
  {
    return LIS2MDL_ERROR;
 800432e:	f04f 33ff 	mov.w	r3, #4294967295
 8004332:	e00c      	b.n	800434e <LIS2MDL_MAG_GetAxesRaw+0x40>
  }

  /* Format the data. */
  Value->x = data_raw.i16bit[0];
 8004334:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8004338:	683b      	ldr	r3, [r7, #0]
 800433a:	801a      	strh	r2, [r3, #0]
  Value->y = data_raw.i16bit[1];
 800433c:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8004340:	683b      	ldr	r3, [r7, #0]
 8004342:	805a      	strh	r2, [r3, #2]
  Value->z = data_raw.i16bit[2];
 8004344:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8004348:	683b      	ldr	r3, [r7, #0]
 800434a:	809a      	strh	r2, [r3, #4]

  return LIS2MDL_OK;
 800434c:	2300      	movs	r3, #0
}
 800434e:	4618      	mov	r0, r3
 8004350:	3710      	adds	r7, #16
 8004352:	46bd      	mov	sp, r7
 8004354:	bd80      	pop	{r7, pc}

08004356 <LIS2MDL_MAG_GetAxes>:
  * @param  pObj the device pObj
  * @param  MagneticField pointer where the values of the axes are written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2MDL_MAG_GetAxes(LIS2MDL_Object_t *pObj, LIS2MDL_Axes_t *MagneticField)
{
 8004356:	b580      	push	{r7, lr}
 8004358:	b088      	sub	sp, #32
 800435a:	af00      	add	r7, sp, #0
 800435c:	6078      	str	r0, [r7, #4]
 800435e:	6039      	str	r1, [r7, #0]
  uint8_t buff[6];
  lis2mdl_axis3bit16_t data_raw;
  float sensitivity = 0.0f;
 8004360:	f04f 0300 	mov.w	r3, #0
 8004364:	60fb      	str	r3, [r7, #12]

  if (pObj->IO.BusType == LSM6DSOX_SENSORHUB_LIS2MDL_I2C_BUS) /* LSM6DSOX SensorHub with LIS2MDL example */
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	689b      	ldr	r3, [r3, #8]
 800436a:	2b03      	cmp	r3, #3
 800436c:	d134      	bne.n	80043d8 <LIS2MDL_MAG_GetAxes+0x82>
  {
    /* Read raw data values. */
    if (LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData(pObj, LIS2MDL_OUTX_L_REG, buff, 6) != LIS2MDL_OK)
 800436e:	f107 0218 	add.w	r2, r7, #24
 8004372:	2306      	movs	r3, #6
 8004374:	2168      	movs	r1, #104	@ 0x68
 8004376:	6878      	ldr	r0, [r7, #4]
 8004378:	f000 f92a 	bl	80045d0 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData>
 800437c:	4603      	mov	r3, r0
 800437e:	2b00      	cmp	r3, #0
 8004380:	d002      	beq.n	8004388 <LIS2MDL_MAG_GetAxes+0x32>
    {
      return LIS2MDL_ERROR;
 8004382:	f04f 33ff 	mov.w	r3, #4294967295
 8004386:	e072      	b.n	800446e <LIS2MDL_MAG_GetAxes+0x118>
    }
    data_raw.i16bit[0] = (int16_t)buff[1];
 8004388:	7e7b      	ldrb	r3, [r7, #25]
 800438a:	b21b      	sxth	r3, r3
 800438c:	823b      	strh	r3, [r7, #16]
    data_raw.i16bit[0] = (data_raw.i16bit[0] * 256) + (int16_t)buff[0];
 800438e:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8004392:	b29b      	uxth	r3, r3
 8004394:	021b      	lsls	r3, r3, #8
 8004396:	b29b      	uxth	r3, r3
 8004398:	7e3a      	ldrb	r2, [r7, #24]
 800439a:	4413      	add	r3, r2
 800439c:	b29b      	uxth	r3, r3
 800439e:	b21b      	sxth	r3, r3
 80043a0:	823b      	strh	r3, [r7, #16]
    data_raw.i16bit[1] = (int16_t)buff[3];
 80043a2:	7efb      	ldrb	r3, [r7, #27]
 80043a4:	b21b      	sxth	r3, r3
 80043a6:	827b      	strh	r3, [r7, #18]
    data_raw.i16bit[1] = (data_raw.i16bit[1] * 256) + (int16_t)buff[2];
 80043a8:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80043ac:	b29b      	uxth	r3, r3
 80043ae:	021b      	lsls	r3, r3, #8
 80043b0:	b29b      	uxth	r3, r3
 80043b2:	7eba      	ldrb	r2, [r7, #26]
 80043b4:	4413      	add	r3, r2
 80043b6:	b29b      	uxth	r3, r3
 80043b8:	b21b      	sxth	r3, r3
 80043ba:	827b      	strh	r3, [r7, #18]
    data_raw.i16bit[2] = (int16_t)buff[5];
 80043bc:	7f7b      	ldrb	r3, [r7, #29]
 80043be:	b21b      	sxth	r3, r3
 80043c0:	82bb      	strh	r3, [r7, #20]
    data_raw.i16bit[2] = (data_raw.i16bit[2] * 256) + (int16_t)buff[4];
 80043c2:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80043c6:	b29b      	uxth	r3, r3
 80043c8:	021b      	lsls	r3, r3, #8
 80043ca:	b29b      	uxth	r3, r3
 80043cc:	7f3a      	ldrb	r2, [r7, #28]
 80043ce:	4413      	add	r3, r2
 80043d0:	b29b      	uxth	r3, r3
 80043d2:	b21b      	sxth	r3, r3
 80043d4:	82bb      	strh	r3, [r7, #20]
 80043d6:	e00d      	b.n	80043f4 <LIS2MDL_MAG_GetAxes+0x9e>
  }
  else
  {
    /* Read raw data values. */
    if (lis2mdl_magnetic_raw_get(&(pObj->Ctx), data_raw.i16bit) != LIS2MDL_OK)
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	3320      	adds	r3, #32
 80043dc:	f107 0210 	add.w	r2, r7, #16
 80043e0:	4611      	mov	r1, r2
 80043e2:	4618      	mov	r0, r3
 80043e4:	f000 fc2c 	bl	8004c40 <lis2mdl_magnetic_raw_get>
 80043e8:	4603      	mov	r3, r0
 80043ea:	2b00      	cmp	r3, #0
 80043ec:	d002      	beq.n	80043f4 <LIS2MDL_MAG_GetAxes+0x9e>
    {
      return LIS2MDL_ERROR;
 80043ee:	f04f 33ff 	mov.w	r3, #4294967295
 80043f2:	e03c      	b.n	800446e <LIS2MDL_MAG_GetAxes+0x118>
    }
  }

  /* Get LIS2MDL actual sensitivity. */
  (void)LIS2MDL_MAG_GetSensitivity(pObj, &sensitivity);
 80043f4:	f107 030c 	add.w	r3, r7, #12
 80043f8:	4619      	mov	r1, r3
 80043fa:	6878      	ldr	r0, [r7, #4]
 80043fc:	f7ff feb9 	bl	8004172 <LIS2MDL_MAG_GetSensitivity>

  /* Calculate the data. */
  MagneticField->x = (int32_t)((float)((float)data_raw.i16bit[0] * sensitivity));
 8004400:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8004404:	4618      	mov	r0, r3
 8004406:	f7fc fc11 	bl	8000c2c <__aeabi_i2f>
 800440a:	4602      	mov	r2, r0
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	4619      	mov	r1, r3
 8004410:	4610      	mov	r0, r2
 8004412:	f7fc fc5f 	bl	8000cd4 <__aeabi_fmul>
 8004416:	4603      	mov	r3, r0
 8004418:	4618      	mov	r0, r3
 800441a:	f7fc fe21 	bl	8001060 <__aeabi_f2iz>
 800441e:	4602      	mov	r2, r0
 8004420:	683b      	ldr	r3, [r7, #0]
 8004422:	601a      	str	r2, [r3, #0]
  MagneticField->y = (int32_t)((float)((float)data_raw.i16bit[1] * sensitivity));
 8004424:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8004428:	4618      	mov	r0, r3
 800442a:	f7fc fbff 	bl	8000c2c <__aeabi_i2f>
 800442e:	4602      	mov	r2, r0
 8004430:	68fb      	ldr	r3, [r7, #12]
 8004432:	4619      	mov	r1, r3
 8004434:	4610      	mov	r0, r2
 8004436:	f7fc fc4d 	bl	8000cd4 <__aeabi_fmul>
 800443a:	4603      	mov	r3, r0
 800443c:	4618      	mov	r0, r3
 800443e:	f7fc fe0f 	bl	8001060 <__aeabi_f2iz>
 8004442:	4602      	mov	r2, r0
 8004444:	683b      	ldr	r3, [r7, #0]
 8004446:	605a      	str	r2, [r3, #4]
  MagneticField->z = (int32_t)((float)((float)data_raw.i16bit[2] * sensitivity));
 8004448:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800444c:	4618      	mov	r0, r3
 800444e:	f7fc fbed 	bl	8000c2c <__aeabi_i2f>
 8004452:	4602      	mov	r2, r0
 8004454:	68fb      	ldr	r3, [r7, #12]
 8004456:	4619      	mov	r1, r3
 8004458:	4610      	mov	r0, r2
 800445a:	f7fc fc3b 	bl	8000cd4 <__aeabi_fmul>
 800445e:	4603      	mov	r3, r0
 8004460:	4618      	mov	r0, r3
 8004462:	f7fc fdfd 	bl	8001060 <__aeabi_f2iz>
 8004466:	4602      	mov	r2, r0
 8004468:	683b      	ldr	r3, [r7, #0]
 800446a:	609a      	str	r2, [r3, #8]

  return LIS2MDL_OK;
 800446c:	2300      	movs	r3, #0
}
 800446e:	4618      	mov	r0, r3
 8004470:	3720      	adds	r7, #32
 8004472:	46bd      	mov	sp, r7
 8004474:	bd80      	pop	{r7, pc}

08004476 <LIS2MDL_Write_Reg>:
  * @param  Reg address to be written
  * @param  Data value to be written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2MDL_Write_Reg(LIS2MDL_Object_t *pObj, uint8_t Reg, uint8_t Data)
{
 8004476:	b580      	push	{r7, lr}
 8004478:	b082      	sub	sp, #8
 800447a:	af00      	add	r7, sp, #0
 800447c:	6078      	str	r0, [r7, #4]
 800447e:	460b      	mov	r3, r1
 8004480:	70fb      	strb	r3, [r7, #3]
 8004482:	4613      	mov	r3, r2
 8004484:	70bb      	strb	r3, [r7, #2]
  if (pObj->IO.BusType == LSM6DSOX_SENSORHUB_LIS2MDL_I2C_BUS) /* LSM6DSOX SensorHub with LIS2MDL example */
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	689b      	ldr	r3, [r3, #8]
 800448a:	2b03      	cmp	r3, #3
 800448c:	d10b      	bne.n	80044a6 <LIS2MDL_Write_Reg+0x30>
  {
    if (LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData(pObj, Reg, (uint8_t *)&Data, 1) != LIS2MDL_OK)
 800448e:	1cba      	adds	r2, r7, #2
 8004490:	78f9      	ldrb	r1, [r7, #3]
 8004492:	2301      	movs	r3, #1
 8004494:	6878      	ldr	r0, [r7, #4]
 8004496:	f000 f9da 	bl	800484e <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData>
 800449a:	4603      	mov	r3, r0
 800449c:	2b00      	cmp	r3, #0
 800449e:	d010      	beq.n	80044c2 <LIS2MDL_Write_Reg+0x4c>
    {
      return LIS2MDL_ERROR;
 80044a0:	f04f 33ff 	mov.w	r3, #4294967295
 80044a4:	e00e      	b.n	80044c4 <LIS2MDL_Write_Reg+0x4e>
    }
  }
  else
  {
    if (lis2mdl_write_reg(&(pObj->Ctx), Reg, &Data, 1) != LIS2MDL_OK)
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	f103 0020 	add.w	r0, r3, #32
 80044ac:	1cba      	adds	r2, r7, #2
 80044ae:	78f9      	ldrb	r1, [r7, #3]
 80044b0:	2301      	movs	r3, #1
 80044b2:	f000 fb02 	bl	8004aba <lis2mdl_write_reg>
 80044b6:	4603      	mov	r3, r0
 80044b8:	2b00      	cmp	r3, #0
 80044ba:	d002      	beq.n	80044c2 <LIS2MDL_Write_Reg+0x4c>
    {
      return LIS2MDL_ERROR;
 80044bc:	f04f 33ff 	mov.w	r3, #4294967295
 80044c0:	e000      	b.n	80044c4 <LIS2MDL_Write_Reg+0x4e>
    }
  }

  return LIS2MDL_OK;
 80044c2:	2300      	movs	r3, #0
}
 80044c4:	4618      	mov	r0, r3
 80044c6:	3708      	adds	r7, #8
 80044c8:	46bd      	mov	sp, r7
 80044ca:	bd80      	pop	{r7, pc}

080044cc <ReadMagRegWrap>:
  * @param  pData the stored data pointer
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t ReadMagRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 80044cc:	b590      	push	{r4, r7, lr}
 80044ce:	b087      	sub	sp, #28
 80044d0:	af00      	add	r7, sp, #0
 80044d2:	60f8      	str	r0, [r7, #12]
 80044d4:	607a      	str	r2, [r7, #4]
 80044d6:	461a      	mov	r2, r3
 80044d8:	460b      	mov	r3, r1
 80044da:	72fb      	strb	r3, [r7, #11]
 80044dc:	4613      	mov	r3, r2
 80044de:	813b      	strh	r3, [r7, #8]
  LIS2MDL_Object_t *pObj = (LIS2MDL_Object_t *)Handle;
 80044e0:	68fb      	ldr	r3, [r7, #12]
 80044e2:	617b      	str	r3, [r7, #20]

  if (pObj->IO.BusType == LIS2MDL_I2C_BUS) /* I2C */
 80044e4:	697b      	ldr	r3, [r7, #20]
 80044e6:	689b      	ldr	r3, [r3, #8]
 80044e8:	2b00      	cmp	r3, #0
 80044ea:	d10e      	bne.n	800450a <ReadMagRegWrap+0x3e>
  {
    /* Enable Multi-byte read */
    return pObj->IO.ReadReg(pObj->IO.Address, (Reg | 0x80U), pData, Length);
 80044ec:	697b      	ldr	r3, [r7, #20]
 80044ee:	695c      	ldr	r4, [r3, #20]
 80044f0:	697b      	ldr	r3, [r7, #20]
 80044f2:	7b1b      	ldrb	r3, [r3, #12]
 80044f4:	4618      	mov	r0, r3
 80044f6:	7afb      	ldrb	r3, [r7, #11]
 80044f8:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80044fc:	b2db      	uxtb	r3, r3
 80044fe:	4619      	mov	r1, r3
 8004500:	893b      	ldrh	r3, [r7, #8]
 8004502:	687a      	ldr	r2, [r7, #4]
 8004504:	47a0      	blx	r4
 8004506:	4603      	mov	r3, r0
 8004508:	e01d      	b.n	8004546 <ReadMagRegWrap+0x7a>
  }
  else if (pObj->IO.BusType == LSM6DSOX_SENSORHUB_LIS2MDL_I2C_BUS) /* LSM6DSOX SensorHub with LIS2MDL example */
 800450a:	697b      	ldr	r3, [r7, #20]
 800450c:	689b      	ldr	r3, [r3, #8]
 800450e:	2b03      	cmp	r3, #3
 8004510:	d10b      	bne.n	800452a <ReadMagRegWrap+0x5e>
  {
    return pObj->IO.ReadReg(pObj->IO.Address, Reg, pData, Length);
 8004512:	697b      	ldr	r3, [r7, #20]
 8004514:	695c      	ldr	r4, [r3, #20]
 8004516:	697b      	ldr	r3, [r7, #20]
 8004518:	7b1b      	ldrb	r3, [r3, #12]
 800451a:	4618      	mov	r0, r3
 800451c:	7afb      	ldrb	r3, [r7, #11]
 800451e:	b299      	uxth	r1, r3
 8004520:	893b      	ldrh	r3, [r7, #8]
 8004522:	687a      	ldr	r2, [r7, #4]
 8004524:	47a0      	blx	r4
 8004526:	4603      	mov	r3, r0
 8004528:	e00d      	b.n	8004546 <ReadMagRegWrap+0x7a>
  }
  else   /* SPI 3-Wires or SPI 4-Wires */
  {
    /* Enable Multi-byte read */
    return pObj->IO.ReadReg(pObj->IO.Address, (Reg | 0x40U), pData, Length);
 800452a:	697b      	ldr	r3, [r7, #20]
 800452c:	695c      	ldr	r4, [r3, #20]
 800452e:	697b      	ldr	r3, [r7, #20]
 8004530:	7b1b      	ldrb	r3, [r3, #12]
 8004532:	4618      	mov	r0, r3
 8004534:	7afb      	ldrb	r3, [r7, #11]
 8004536:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800453a:	b2db      	uxtb	r3, r3
 800453c:	4619      	mov	r1, r3
 800453e:	893b      	ldrh	r3, [r7, #8]
 8004540:	687a      	ldr	r2, [r7, #4]
 8004542:	47a0      	blx	r4
 8004544:	4603      	mov	r3, r0
  }
}
 8004546:	4618      	mov	r0, r3
 8004548:	371c      	adds	r7, #28
 800454a:	46bd      	mov	sp, r7
 800454c:	bd90      	pop	{r4, r7, pc}

0800454e <WriteMagRegWrap>:
  * @param  pData the stored data pointer
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t WriteMagRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 800454e:	b590      	push	{r4, r7, lr}
 8004550:	b087      	sub	sp, #28
 8004552:	af00      	add	r7, sp, #0
 8004554:	60f8      	str	r0, [r7, #12]
 8004556:	607a      	str	r2, [r7, #4]
 8004558:	461a      	mov	r2, r3
 800455a:	460b      	mov	r3, r1
 800455c:	72fb      	strb	r3, [r7, #11]
 800455e:	4613      	mov	r3, r2
 8004560:	813b      	strh	r3, [r7, #8]
  LIS2MDL_Object_t *pObj = (LIS2MDL_Object_t *)Handle;
 8004562:	68fb      	ldr	r3, [r7, #12]
 8004564:	617b      	str	r3, [r7, #20]

  if (pObj->IO.BusType == LIS2MDL_I2C_BUS) /* I2C */
 8004566:	697b      	ldr	r3, [r7, #20]
 8004568:	689b      	ldr	r3, [r3, #8]
 800456a:	2b00      	cmp	r3, #0
 800456c:	d10e      	bne.n	800458c <WriteMagRegWrap+0x3e>
  {
    /* Enable Multi-byte write */
    return pObj->IO.WriteReg(pObj->IO.Address, (Reg | 0x80U), pData, Length);
 800456e:	697b      	ldr	r3, [r7, #20]
 8004570:	691c      	ldr	r4, [r3, #16]
 8004572:	697b      	ldr	r3, [r7, #20]
 8004574:	7b1b      	ldrb	r3, [r3, #12]
 8004576:	4618      	mov	r0, r3
 8004578:	7afb      	ldrb	r3, [r7, #11]
 800457a:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800457e:	b2db      	uxtb	r3, r3
 8004580:	4619      	mov	r1, r3
 8004582:	893b      	ldrh	r3, [r7, #8]
 8004584:	687a      	ldr	r2, [r7, #4]
 8004586:	47a0      	blx	r4
 8004588:	4603      	mov	r3, r0
 800458a:	e01d      	b.n	80045c8 <WriteMagRegWrap+0x7a>
  }
  else if (pObj->IO.BusType == LSM6DSOX_SENSORHUB_LIS2MDL_I2C_BUS) /* LSM6DSOX SensorHub with LIS2MDL example */
 800458c:	697b      	ldr	r3, [r7, #20]
 800458e:	689b      	ldr	r3, [r3, #8]
 8004590:	2b03      	cmp	r3, #3
 8004592:	d10b      	bne.n	80045ac <WriteMagRegWrap+0x5e>
  {
    return pObj->IO.WriteReg(pObj->IO.Address, Reg, pData, Length);
 8004594:	697b      	ldr	r3, [r7, #20]
 8004596:	691c      	ldr	r4, [r3, #16]
 8004598:	697b      	ldr	r3, [r7, #20]
 800459a:	7b1b      	ldrb	r3, [r3, #12]
 800459c:	4618      	mov	r0, r3
 800459e:	7afb      	ldrb	r3, [r7, #11]
 80045a0:	b299      	uxth	r1, r3
 80045a2:	893b      	ldrh	r3, [r7, #8]
 80045a4:	687a      	ldr	r2, [r7, #4]
 80045a6:	47a0      	blx	r4
 80045a8:	4603      	mov	r3, r0
 80045aa:	e00d      	b.n	80045c8 <WriteMagRegWrap+0x7a>
  }
  else   /* SPI 3-Wires or SPI 4-Wires */
  {
    /* Enable Multi-byte write */
    return pObj->IO.WriteReg(pObj->IO.Address, (Reg | 0x40U), pData, Length);
 80045ac:	697b      	ldr	r3, [r7, #20]
 80045ae:	691c      	ldr	r4, [r3, #16]
 80045b0:	697b      	ldr	r3, [r7, #20]
 80045b2:	7b1b      	ldrb	r3, [r3, #12]
 80045b4:	4618      	mov	r0, r3
 80045b6:	7afb      	ldrb	r3, [r7, #11]
 80045b8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80045bc:	b2db      	uxtb	r3, r3
 80045be:	4619      	mov	r1, r3
 80045c0:	893b      	ldrh	r3, [r7, #8]
 80045c2:	687a      	ldr	r2, [r7, #4]
 80045c4:	47a0      	blx	r4
 80045c6:	4603      	mov	r3, r0
  }
}
 80045c8:	4618      	mov	r0, r3
 80045ca:	371c      	adds	r7, #28
 80045cc:	46bd      	mov	sp, r7
 80045ce:	bd90      	pop	{r4, r7, pc}

080045d0 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData>:
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData(LIS2MDL_Object_t *pObj, uint8_t Reg, uint8_t *pData,
                                                     uint16_t Length)
{
 80045d0:	b580      	push	{r7, lr}
 80045d2:	b08c      	sub	sp, #48	@ 0x30
 80045d4:	af00      	add	r7, sp, #0
 80045d6:	60f8      	str	r0, [r7, #12]
 80045d8:	607a      	str	r2, [r7, #4]
 80045da:	461a      	mov	r2, r3
 80045dc:	460b      	mov	r3, r1
 80045de:	72fb      	strb	r3, [r7, #11]
 80045e0:	4613      	mov	r3, r2
 80045e2:	813b      	strh	r3, [r7, #8]
  uint8_t lsm6dsox_func_cfg_access = 0x01U;
 80045e4:	2301      	movs	r3, #1
 80045e6:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  uint8_t shub_reg_access_en = 0x40U;
 80045ea:	2340      	movs	r3, #64	@ 0x40
 80045ec:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
  uint8_t shub_reg_access_dis = 0x00U;
 80045f0:	2300      	movs	r3, #0
 80045f2:	f887 3020 	strb.w	r3, [r7, #32]
  uint8_t ext_sens_addr_read = LIS2MDL_I2C_ADD | 0x01U;
 80045f6:	233d      	movs	r3, #61	@ 0x3d
 80045f8:	77fb      	strb	r3, [r7, #31]
  uint8_t slv0_add = 0x15U;
 80045fa:	2315      	movs	r3, #21
 80045fc:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
  uint8_t slv0_subadd = 0x16U;
 8004600:	2316      	movs	r3, #22
 8004602:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
  uint8_t slave0_config = 0x17U;
 8004606:	2317      	movs	r3, #23
 8004608:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
  uint8_t master_config = 0x14U;
 800460c:	2314      	movs	r3, #20
 800460e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
  uint8_t write_once_i2c_en = 0x44U;
 8004612:	2344      	movs	r3, #68	@ 0x44
 8004614:	77bb      	strb	r3, [r7, #30]
  uint8_t sensor_hub_1 = 0x02U;
 8004616:	2302      	movs	r3, #2
 8004618:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  uint8_t status_master_mainpage = 0x39U;
 800461c:	2339      	movs	r3, #57	@ 0x39
 800461e:	f887 3029 	strb.w	r3, [r7, #41]	@ 0x29
  uint8_t sens_hub_endop = 0x01U;
 8004622:	2301      	movs	r3, #1
 8004624:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
  uint8_t lsm6dsox_outx_h_a = 0x29U;
 8004628:	2329      	movs	r3, #41	@ 0x29
 800462a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint8_t lsm6dsox_status_reg = 0x1EU;
 800462e:	231e      	movs	r3, #30
 8004630:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
  uint8_t xlda = 0x01U;
 8004634:	2301      	movs	r3, #1
 8004636:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
  uint8_t len = (uint8_t)Length;
 800463a:	893b      	ldrh	r3, [r7, #8]
 800463c:	b2db      	uxtb	r3, r3
 800463e:	777b      	strb	r3, [r7, #29]
  uint8_t lsm6dsox_ctrl1_xl = 0x10U;
 8004640:	2310      	movs	r3, #16
 8004642:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
  uint8_t lsm6dsox_xl_prev_odr;
  uint8_t lsm6dsox_xl_odr_off = 0x00U;
 8004646:	2300      	movs	r3, #0
 8004648:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  uint8_t lsm6dsox_xl_odr_104hz = 0x40U;
 800464c:	2340      	movs	r3, #64	@ 0x40
 800464e:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  uint8_t data;
  uint8_t data_array[6];

  /* Enable access to sensor hub registers */
  if (lis2mdl_write_reg(&(pObj->Ctx), lsm6dsox_func_cfg_access, &shub_reg_access_en, 1) != LIS2MDL_OK)
 8004652:	68fb      	ldr	r3, [r7, #12]
 8004654:	f103 0020 	add.w	r0, r3, #32
 8004658:	f107 0221 	add.w	r2, r7, #33	@ 0x21
 800465c:	f897 102f 	ldrb.w	r1, [r7, #47]	@ 0x2f
 8004660:	2301      	movs	r3, #1
 8004662:	f000 fa2a 	bl	8004aba <lis2mdl_write_reg>
 8004666:	4603      	mov	r3, r0
 8004668:	2b00      	cmp	r3, #0
 800466a:	d002      	beq.n	8004672 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0xa2>
  {
    return LIS2MDL_ERROR;
 800466c:	f04f 33ff 	mov.w	r3, #4294967295
 8004670:	e0e9      	b.n	8004846 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x276>
  }

  /* Configure external device address, Enable read operation (rw_0 = 1) */
  if (lis2mdl_write_reg(&(pObj->Ctx), slv0_add, &ext_sens_addr_read, 1) != LIS2MDL_OK)
 8004672:	68fb      	ldr	r3, [r7, #12]
 8004674:	f103 0020 	add.w	r0, r3, #32
 8004678:	f107 021f 	add.w	r2, r7, #31
 800467c:	f897 102e 	ldrb.w	r1, [r7, #46]	@ 0x2e
 8004680:	2301      	movs	r3, #1
 8004682:	f000 fa1a 	bl	8004aba <lis2mdl_write_reg>
 8004686:	4603      	mov	r3, r0
 8004688:	2b00      	cmp	r3, #0
 800468a:	d002      	beq.n	8004692 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0xc2>
  {
    return LIS2MDL_ERROR;
 800468c:	f04f 33ff 	mov.w	r3, #4294967295
 8004690:	e0d9      	b.n	8004846 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x276>
  }

  /* Configure address of the LIS2MDL register to be read */
  if (lis2mdl_write_reg(&(pObj->Ctx), slv0_subadd, &Reg, 1) != LIS2MDL_OK)
 8004692:	68fb      	ldr	r3, [r7, #12]
 8004694:	f103 0020 	add.w	r0, r3, #32
 8004698:	f107 020b 	add.w	r2, r7, #11
 800469c:	f897 102d 	ldrb.w	r1, [r7, #45]	@ 0x2d
 80046a0:	2301      	movs	r3, #1
 80046a2:	f000 fa0a 	bl	8004aba <lis2mdl_write_reg>
 80046a6:	4603      	mov	r3, r0
 80046a8:	2b00      	cmp	r3, #0
 80046aa:	d002      	beq.n	80046b2 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0xe2>
  {
    return LIS2MDL_ERROR;
 80046ac:	f04f 33ff 	mov.w	r3, #4294967295
 80046b0:	e0c9      	b.n	8004846 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x276>
  }

  /* Read required number of bytes (up to 6), SHUB_ODR = 104 Hz */
  if (lis2mdl_write_reg(&(pObj->Ctx), slave0_config, &len, 1) != LIS2MDL_OK)
 80046b2:	68fb      	ldr	r3, [r7, #12]
 80046b4:	f103 0020 	add.w	r0, r3, #32
 80046b8:	f107 021d 	add.w	r2, r7, #29
 80046bc:	f897 102c 	ldrb.w	r1, [r7, #44]	@ 0x2c
 80046c0:	2301      	movs	r3, #1
 80046c2:	f000 f9fa 	bl	8004aba <lis2mdl_write_reg>
 80046c6:	4603      	mov	r3, r0
 80046c8:	2b00      	cmp	r3, #0
 80046ca:	d002      	beq.n	80046d2 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x102>
  {
    return LIS2MDL_ERROR;
 80046cc:	f04f 33ff 	mov.w	r3, #4294967295
 80046d0:	e0b9      	b.n	8004846 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x276>
  }

  /* WRITE_ONCE is mandatory for read, I2C master enabled using slave 0, I2C pull-ups disabled */
  if (lis2mdl_write_reg(&(pObj->Ctx), master_config, &write_once_i2c_en, 1) != LIS2MDL_OK)
 80046d2:	68fb      	ldr	r3, [r7, #12]
 80046d4:	f103 0020 	add.w	r0, r3, #32
 80046d8:	f107 021e 	add.w	r2, r7, #30
 80046dc:	f897 102b 	ldrb.w	r1, [r7, #43]	@ 0x2b
 80046e0:	2301      	movs	r3, #1
 80046e2:	f000 f9ea 	bl	8004aba <lis2mdl_write_reg>
 80046e6:	4603      	mov	r3, r0
 80046e8:	2b00      	cmp	r3, #0
 80046ea:	d002      	beq.n	80046f2 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x122>
  {
    return LIS2MDL_ERROR;
 80046ec:	f04f 33ff 	mov.w	r3, #4294967295
 80046f0:	e0a9      	b.n	8004846 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x276>
  }

  /* Disable access to sensor hub registers */
  if (lis2mdl_write_reg(&(pObj->Ctx), lsm6dsox_func_cfg_access, &shub_reg_access_dis, 1) != LIS2MDL_OK)
 80046f2:	68fb      	ldr	r3, [r7, #12]
 80046f4:	f103 0020 	add.w	r0, r3, #32
 80046f8:	f107 0220 	add.w	r2, r7, #32
 80046fc:	f897 102f 	ldrb.w	r1, [r7, #47]	@ 0x2f
 8004700:	2301      	movs	r3, #1
 8004702:	f000 f9da 	bl	8004aba <lis2mdl_write_reg>
 8004706:	4603      	mov	r3, r0
 8004708:	2b00      	cmp	r3, #0
 800470a:	d002      	beq.n	8004712 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x142>
  {
    return LIS2MDL_ERROR;
 800470c:	f04f 33ff 	mov.w	r3, #4294967295
 8004710:	e099      	b.n	8004846 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x276>
  }

  /* Read LSM6DSOX ODR */
  if (lis2mdl_read_reg(&(pObj->Ctx), lsm6dsox_ctrl1_xl, &lsm6dsox_xl_prev_odr, 1) != LIS2MDL_OK)
 8004712:	68fb      	ldr	r3, [r7, #12]
 8004714:	f103 0020 	add.w	r0, r3, #32
 8004718:	f107 021c 	add.w	r2, r7, #28
 800471c:	f897 1024 	ldrb.w	r1, [r7, #36]	@ 0x24
 8004720:	2301      	movs	r3, #1
 8004722:	f000 f9b2 	bl	8004a8a <lis2mdl_read_reg>
 8004726:	4603      	mov	r3, r0
 8004728:	2b00      	cmp	r3, #0
 800472a:	d002      	beq.n	8004732 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x162>
  {
    return LIS2MDL_ERROR;
 800472c:	f04f 33ff 	mov.w	r3, #4294967295
 8004730:	e089      	b.n	8004846 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x276>
  }

  /* Set XL_ODR_104HZ if the accelerometer is disabled */
  if (lsm6dsox_xl_prev_odr == lsm6dsox_xl_odr_off)
 8004732:	7f3b      	ldrb	r3, [r7, #28]
 8004734:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 8004738:	429a      	cmp	r2, r3
 800473a:	d102      	bne.n	8004742 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x172>
  {
    lsm6dsox_xl_prev_odr = lsm6dsox_xl_odr_104hz;
 800473c:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 8004740:	773b      	strb	r3, [r7, #28]
  }

  /* Enable accelerometer to trigger Sensor Hub operation */
  if (lis2mdl_write_reg(&(pObj->Ctx), lsm6dsox_ctrl1_xl, &lsm6dsox_xl_prev_odr, 1) != LIS2MDL_OK)
 8004742:	68fb      	ldr	r3, [r7, #12]
 8004744:	f103 0020 	add.w	r0, r3, #32
 8004748:	f107 021c 	add.w	r2, r7, #28
 800474c:	f897 1024 	ldrb.w	r1, [r7, #36]	@ 0x24
 8004750:	2301      	movs	r3, #1
 8004752:	f000 f9b2 	bl	8004aba <lis2mdl_write_reg>
 8004756:	4603      	mov	r3, r0
 8004758:	2b00      	cmp	r3, #0
 800475a:	d002      	beq.n	8004762 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x192>
  {
    return LIS2MDL_ERROR;
 800475c:	f04f 33ff 	mov.w	r3, #4294967295
 8004760:	e071      	b.n	8004846 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x276>
  }

  /* Read ACC data starting from LSM6DSOX OUTX_H_A register to clear accelerometer data-ready XLDA */
  if (lis2mdl_read_reg(&(pObj->Ctx), lsm6dsox_outx_h_a, data_array, 6) != LIS2MDL_OK)
 8004762:	68fb      	ldr	r3, [r7, #12]
 8004764:	f103 0020 	add.w	r0, r3, #32
 8004768:	f107 0214 	add.w	r2, r7, #20
 800476c:	f897 1027 	ldrb.w	r1, [r7, #39]	@ 0x27
 8004770:	2306      	movs	r3, #6
 8004772:	f000 f98a 	bl	8004a8a <lis2mdl_read_reg>
 8004776:	4603      	mov	r3, r0
 8004778:	2b00      	cmp	r3, #0
 800477a:	d002      	beq.n	8004782 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x1b2>
  {
    return LIS2MDL_ERROR;
 800477c:	f04f 33ff 	mov.w	r3, #4294967295
 8004780:	e061      	b.n	8004846 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x276>
  }

  /* Poll LSM6DSOX LSM6DSOX_STATUS_REG until XLDA = 1 (Wait for sensor hub trigger) */
  do
  {
    if (lis2mdl_read_reg(&(pObj->Ctx), lsm6dsox_status_reg, &data, 1) != LIS2MDL_OK)
 8004782:	68fb      	ldr	r3, [r7, #12]
 8004784:	f103 0020 	add.w	r0, r3, #32
 8004788:	f107 021b 	add.w	r2, r7, #27
 800478c:	f897 1026 	ldrb.w	r1, [r7, #38]	@ 0x26
 8004790:	2301      	movs	r3, #1
 8004792:	f000 f97a 	bl	8004a8a <lis2mdl_read_reg>
 8004796:	4603      	mov	r3, r0
 8004798:	2b00      	cmp	r3, #0
 800479a:	d002      	beq.n	80047a2 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x1d2>
    {
      return LIS2MDL_ERROR;
 800479c:	f04f 33ff 	mov.w	r3, #4294967295
 80047a0:	e051      	b.n	8004846 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x276>
    }
  } while ((data & xlda) != xlda);
 80047a2:	7efa      	ldrb	r2, [r7, #27]
 80047a4:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 80047a8:	4013      	ands	r3, r2
 80047aa:	b2db      	uxtb	r3, r3
 80047ac:	f897 2025 	ldrb.w	r2, [r7, #37]	@ 0x25
 80047b0:	429a      	cmp	r2, r3
 80047b2:	d1e6      	bne.n	8004782 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x1b2>

  /* Poll LSM6DSOX SensorHub SENS_HUB_ENDOP bit in STATUS_MASTER_MAINPAGE reg until the end of SW write operations */
  do
  {
    if (lis2mdl_read_reg(&(pObj->Ctx), status_master_mainpage, &data, 1) != LIS2MDL_OK)
 80047b4:	68fb      	ldr	r3, [r7, #12]
 80047b6:	f103 0020 	add.w	r0, r3, #32
 80047ba:	f107 021b 	add.w	r2, r7, #27
 80047be:	f897 1029 	ldrb.w	r1, [r7, #41]	@ 0x29
 80047c2:	2301      	movs	r3, #1
 80047c4:	f000 f961 	bl	8004a8a <lis2mdl_read_reg>
 80047c8:	4603      	mov	r3, r0
 80047ca:	2b00      	cmp	r3, #0
 80047cc:	d002      	beq.n	80047d4 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x204>
    {
      return LIS2MDL_ERROR;
 80047ce:	f04f 33ff 	mov.w	r3, #4294967295
 80047d2:	e038      	b.n	8004846 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x276>
    }
  } while ((data & sens_hub_endop) != sens_hub_endop);
 80047d4:	7efa      	ldrb	r2, [r7, #27]
 80047d6:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80047da:	4013      	ands	r3, r2
 80047dc:	b2db      	uxtb	r3, r3
 80047de:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 80047e2:	429a      	cmp	r2, r3
 80047e4:	d1e6      	bne.n	80047b4 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x1e4>

  /* Enable access to sensor hub registers */
  if (lis2mdl_write_reg(&(pObj->Ctx), lsm6dsox_func_cfg_access, &shub_reg_access_en, 1) != LIS2MDL_OK)
 80047e6:	68fb      	ldr	r3, [r7, #12]
 80047e8:	f103 0020 	add.w	r0, r3, #32
 80047ec:	f107 0221 	add.w	r2, r7, #33	@ 0x21
 80047f0:	f897 102f 	ldrb.w	r1, [r7, #47]	@ 0x2f
 80047f4:	2301      	movs	r3, #1
 80047f6:	f000 f960 	bl	8004aba <lis2mdl_write_reg>
 80047fa:	4603      	mov	r3, r0
 80047fc:	2b00      	cmp	r3, #0
 80047fe:	d002      	beq.n	8004806 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x236>
  {
    return LIS2MDL_ERROR;
 8004800:	f04f 33ff 	mov.w	r3, #4294967295
 8004804:	e01f      	b.n	8004846 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x276>
  }

  /* Read data from LSM6DSOX SensorHub regs containing values from required LIS2MDL regs */
  if (lis2mdl_read_reg(&(pObj->Ctx), sensor_hub_1, pData, Length) != LIS2MDL_OK)
 8004806:	68fb      	ldr	r3, [r7, #12]
 8004808:	f103 0020 	add.w	r0, r3, #32
 800480c:	893b      	ldrh	r3, [r7, #8]
 800480e:	f897 102a 	ldrb.w	r1, [r7, #42]	@ 0x2a
 8004812:	687a      	ldr	r2, [r7, #4]
 8004814:	f000 f939 	bl	8004a8a <lis2mdl_read_reg>
 8004818:	4603      	mov	r3, r0
 800481a:	2b00      	cmp	r3, #0
 800481c:	d002      	beq.n	8004824 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x254>
  {
    return LIS2MDL_ERROR;
 800481e:	f04f 33ff 	mov.w	r3, #4294967295
 8004822:	e010      	b.n	8004846 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x276>
  }

  /* Disable access to sensor hub registers */
  if (lis2mdl_write_reg(&(pObj->Ctx), lsm6dsox_func_cfg_access, &shub_reg_access_dis, 1) != LIS2MDL_OK)
 8004824:	68fb      	ldr	r3, [r7, #12]
 8004826:	f103 0020 	add.w	r0, r3, #32
 800482a:	f107 0220 	add.w	r2, r7, #32
 800482e:	f897 102f 	ldrb.w	r1, [r7, #47]	@ 0x2f
 8004832:	2301      	movs	r3, #1
 8004834:	f000 f941 	bl	8004aba <lis2mdl_write_reg>
 8004838:	4603      	mov	r3, r0
 800483a:	2b00      	cmp	r3, #0
 800483c:	d002      	beq.n	8004844 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x274>
  {
    return LIS2MDL_ERROR;
 800483e:	f04f 33ff 	mov.w	r3, #4294967295
 8004842:	e000      	b.n	8004846 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x276>
  }

  return LIS2MDL_OK;
 8004844:	2300      	movs	r3, #0
}
 8004846:	4618      	mov	r0, r3
 8004848:	3730      	adds	r7, #48	@ 0x30
 800484a:	46bd      	mov	sp, r7
 800484c:	bd80      	pop	{r7, pc}

0800484e <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData>:
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData(LIS2MDL_Object_t *pObj, uint8_t Reg, uint8_t *pData,
                                                      uint16_t Length)
{
 800484e:	b580      	push	{r7, lr}
 8004850:	b08c      	sub	sp, #48	@ 0x30
 8004852:	af00      	add	r7, sp, #0
 8004854:	60f8      	str	r0, [r7, #12]
 8004856:	607a      	str	r2, [r7, #4]
 8004858:	461a      	mov	r2, r3
 800485a:	460b      	mov	r3, r1
 800485c:	72fb      	strb	r3, [r7, #11]
 800485e:	4613      	mov	r3, r2
 8004860:	813b      	strh	r3, [r7, #8]
  uint8_t lsm6dsox_func_cfg_access = 0x01U;
 8004862:	2301      	movs	r3, #1
 8004864:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  uint8_t shub_reg_access_en = 0x40U;
 8004868:	2340      	movs	r3, #64	@ 0x40
 800486a:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
  uint8_t shub_reg_access_dis = 0x00U;
 800486e:	2300      	movs	r3, #0
 8004870:	f887 3020 	strb.w	r3, [r7, #32]
  uint8_t ext_sens_addr_write = LIS2MDL_I2C_ADD & 0xFEU;
 8004874:	233c      	movs	r3, #60	@ 0x3c
 8004876:	77fb      	strb	r3, [r7, #31]
  uint8_t slv0_add = 0x15U;
 8004878:	2315      	movs	r3, #21
 800487a:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
  uint8_t slv0_subadd = 0x16U;
 800487e:	2316      	movs	r3, #22
 8004880:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
  uint8_t slave0_config = 0x17U;
 8004884:	2317      	movs	r3, #23
 8004886:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
  uint8_t shub_odr_104 = 0x00U;
 800488a:	2300      	movs	r3, #0
 800488c:	77bb      	strb	r3, [r7, #30]
  uint8_t master_config = 0x14U;
 800488e:	2314      	movs	r3, #20
 8004890:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
  uint8_t write_once_i2c_en = 0x44U;
 8004894:	2344      	movs	r3, #68	@ 0x44
 8004896:	777b      	strb	r3, [r7, #29]
  uint8_t status_master_mainpage = 0x39U;
 8004898:	2339      	movs	r3, #57	@ 0x39
 800489a:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  uint8_t wr_once_done = 0x80U;
 800489e:	2380      	movs	r3, #128	@ 0x80
 80048a0:	f887 3029 	strb.w	r3, [r7, #41]	@ 0x29
  uint8_t lsm6dsox_outx_h_a = 0x29U;
 80048a4:	2329      	movs	r3, #41	@ 0x29
 80048a6:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
  uint8_t lsm6dsox_status_reg = 0x1EU;
 80048aa:	231e      	movs	r3, #30
 80048ac:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint8_t xlda = 0x01U;
 80048b0:	2301      	movs	r3, #1
 80048b2:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
  uint8_t lsm6dsox_ctrl1_xl = 0x10U;
 80048b6:	2310      	movs	r3, #16
 80048b8:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
  uint8_t lsm6dsox_xl_prev_odr;
  uint8_t lsm6dsox_xl_odr_off = 0x00U;
 80048bc:	2300      	movs	r3, #0
 80048be:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
  uint8_t lsm6dsox_xl_odr_104hz = 0x40U;
 80048c2:	2340      	movs	r3, #64	@ 0x40
 80048c4:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  uint8_t datawrite_slv0 = 0x0EU;
 80048c8:	230e      	movs	r3, #14
 80048ca:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  uint8_t data;
  uint8_t data_array[6];

  /* Enable access to sensor hub registers */
  if (lis2mdl_write_reg(&(pObj->Ctx), lsm6dsox_func_cfg_access, &shub_reg_access_en, 1) != LIS2MDL_OK)
 80048ce:	68fb      	ldr	r3, [r7, #12]
 80048d0:	f103 0020 	add.w	r0, r3, #32
 80048d4:	f107 0221 	add.w	r2, r7, #33	@ 0x21
 80048d8:	f897 102f 	ldrb.w	r1, [r7, #47]	@ 0x2f
 80048dc:	2301      	movs	r3, #1
 80048de:	f000 f8ec 	bl	8004aba <lis2mdl_write_reg>
 80048e2:	4603      	mov	r3, r0
 80048e4:	2b00      	cmp	r3, #0
 80048e6:	d002      	beq.n	80048ee <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0xa0>
  {
    return LIS2MDL_ERROR;
 80048e8:	f04f 33ff 	mov.w	r3, #4294967295
 80048ec:	e0c9      	b.n	8004a82 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x234>
  }

  /* Configure external device address, Enable write operation (rw_0 = 0) */
  if (lis2mdl_write_reg(&(pObj->Ctx), slv0_add, &ext_sens_addr_write, 1) != LIS2MDL_OK)
 80048ee:	68fb      	ldr	r3, [r7, #12]
 80048f0:	f103 0020 	add.w	r0, r3, #32
 80048f4:	f107 021f 	add.w	r2, r7, #31
 80048f8:	f897 102e 	ldrb.w	r1, [r7, #46]	@ 0x2e
 80048fc:	2301      	movs	r3, #1
 80048fe:	f000 f8dc 	bl	8004aba <lis2mdl_write_reg>
 8004902:	4603      	mov	r3, r0
 8004904:	2b00      	cmp	r3, #0
 8004906:	d002      	beq.n	800490e <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0xc0>
  {
    return LIS2MDL_ERROR;
 8004908:	f04f 33ff 	mov.w	r3, #4294967295
 800490c:	e0b9      	b.n	8004a82 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x234>
  }

  /* Configure address of the LIS2MDL register to be written to */
  if (lis2mdl_write_reg(&(pObj->Ctx), slv0_subadd, &Reg, 1) != LIS2MDL_OK)
 800490e:	68fb      	ldr	r3, [r7, #12]
 8004910:	f103 0020 	add.w	r0, r3, #32
 8004914:	f107 020b 	add.w	r2, r7, #11
 8004918:	f897 102d 	ldrb.w	r1, [r7, #45]	@ 0x2d
 800491c:	2301      	movs	r3, #1
 800491e:	f000 f8cc 	bl	8004aba <lis2mdl_write_reg>
 8004922:	4603      	mov	r3, r0
 8004924:	2b00      	cmp	r3, #0
 8004926:	d002      	beq.n	800492e <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0xe0>
  {
    return LIS2MDL_ERROR;
 8004928:	f04f 33ff 	mov.w	r3, #4294967295
 800492c:	e0a9      	b.n	8004a82 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x234>
  }

  /* Set SHUB_ODR = 104 Hz */
  if (lis2mdl_write_reg(&(pObj->Ctx), slave0_config, &shub_odr_104, 1) != LIS2MDL_OK)
 800492e:	68fb      	ldr	r3, [r7, #12]
 8004930:	f103 0020 	add.w	r0, r3, #32
 8004934:	f107 021e 	add.w	r2, r7, #30
 8004938:	f897 102c 	ldrb.w	r1, [r7, #44]	@ 0x2c
 800493c:	2301      	movs	r3, #1
 800493e:	f000 f8bc 	bl	8004aba <lis2mdl_write_reg>
 8004942:	4603      	mov	r3, r0
 8004944:	2b00      	cmp	r3, #0
 8004946:	d002      	beq.n	800494e <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x100>
  {
    return LIS2MDL_ERROR;
 8004948:	f04f 33ff 	mov.w	r3, #4294967295
 800494c:	e099      	b.n	8004a82 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x234>
  }

  /* Store data to be written to LIS2MDL in LSM6DSOX SH reg */
  if (lis2mdl_write_reg(&(pObj->Ctx), datawrite_slv0, pData, 1) != LIS2MDL_OK)
 800494e:	68fb      	ldr	r3, [r7, #12]
 8004950:	f103 0020 	add.w	r0, r3, #32
 8004954:	f897 1022 	ldrb.w	r1, [r7, #34]	@ 0x22
 8004958:	2301      	movs	r3, #1
 800495a:	687a      	ldr	r2, [r7, #4]
 800495c:	f000 f8ad 	bl	8004aba <lis2mdl_write_reg>
 8004960:	4603      	mov	r3, r0
 8004962:	2b00      	cmp	r3, #0
 8004964:	d002      	beq.n	800496c <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x11e>
  {
    return LIS2MDL_ERROR;
 8004966:	f04f 33ff 	mov.w	r3, #4294967295
 800496a:	e08a      	b.n	8004a82 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x234>
  }

  /* WRITE_ONCE enabled for single write, I2C master enabled using slave 0, I2C pull-ups disabled */
  if (lis2mdl_write_reg(&(pObj->Ctx), master_config, &write_once_i2c_en, 1) != LIS2MDL_OK)
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	f103 0020 	add.w	r0, r3, #32
 8004972:	f107 021d 	add.w	r2, r7, #29
 8004976:	f897 102b 	ldrb.w	r1, [r7, #43]	@ 0x2b
 800497a:	2301      	movs	r3, #1
 800497c:	f000 f89d 	bl	8004aba <lis2mdl_write_reg>
 8004980:	4603      	mov	r3, r0
 8004982:	2b00      	cmp	r3, #0
 8004984:	d002      	beq.n	800498c <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x13e>
  {
    return LIS2MDL_ERROR;
 8004986:	f04f 33ff 	mov.w	r3, #4294967295
 800498a:	e07a      	b.n	8004a82 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x234>
  }

  /* Disable access to sensor hub registers */
  if (lis2mdl_write_reg(&(pObj->Ctx), lsm6dsox_func_cfg_access, &shub_reg_access_dis, 1) != LIS2MDL_OK)
 800498c:	68fb      	ldr	r3, [r7, #12]
 800498e:	f103 0020 	add.w	r0, r3, #32
 8004992:	f107 0220 	add.w	r2, r7, #32
 8004996:	f897 102f 	ldrb.w	r1, [r7, #47]	@ 0x2f
 800499a:	2301      	movs	r3, #1
 800499c:	f000 f88d 	bl	8004aba <lis2mdl_write_reg>
 80049a0:	4603      	mov	r3, r0
 80049a2:	2b00      	cmp	r3, #0
 80049a4:	d002      	beq.n	80049ac <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x15e>
  {
    return LIS2MDL_ERROR;
 80049a6:	f04f 33ff 	mov.w	r3, #4294967295
 80049aa:	e06a      	b.n	8004a82 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x234>
  }

  /* Read LSM6DSOX ODR */
  if (lis2mdl_read_reg(&(pObj->Ctx), lsm6dsox_ctrl1_xl, &lsm6dsox_xl_prev_odr, 1) != LIS2MDL_OK)
 80049ac:	68fb      	ldr	r3, [r7, #12]
 80049ae:	f103 0020 	add.w	r0, r3, #32
 80049b2:	f107 021c 	add.w	r2, r7, #28
 80049b6:	f897 1025 	ldrb.w	r1, [r7, #37]	@ 0x25
 80049ba:	2301      	movs	r3, #1
 80049bc:	f000 f865 	bl	8004a8a <lis2mdl_read_reg>
 80049c0:	4603      	mov	r3, r0
 80049c2:	2b00      	cmp	r3, #0
 80049c4:	d002      	beq.n	80049cc <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x17e>
  {
    return LIS2MDL_ERROR;
 80049c6:	f04f 33ff 	mov.w	r3, #4294967295
 80049ca:	e05a      	b.n	8004a82 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x234>
  }

  /* Set XL_ODR_104HZ if the accelerometer is disabled */
  if (lsm6dsox_xl_prev_odr == lsm6dsox_xl_odr_off)
 80049cc:	7f3b      	ldrb	r3, [r7, #28]
 80049ce:	f897 2024 	ldrb.w	r2, [r7, #36]	@ 0x24
 80049d2:	429a      	cmp	r2, r3
 80049d4:	d102      	bne.n	80049dc <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x18e>
  {
    lsm6dsox_xl_prev_odr = lsm6dsox_xl_odr_104hz;
 80049d6:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80049da:	773b      	strb	r3, [r7, #28]
  }

  /* Enable accelerometer to trigger Sensor Hub operation */
  if (lis2mdl_write_reg(&(pObj->Ctx), lsm6dsox_ctrl1_xl, &lsm6dsox_xl_prev_odr, 1) != LIS2MDL_OK)
 80049dc:	68fb      	ldr	r3, [r7, #12]
 80049de:	f103 0020 	add.w	r0, r3, #32
 80049e2:	f107 021c 	add.w	r2, r7, #28
 80049e6:	f897 1025 	ldrb.w	r1, [r7, #37]	@ 0x25
 80049ea:	2301      	movs	r3, #1
 80049ec:	f000 f865 	bl	8004aba <lis2mdl_write_reg>
 80049f0:	4603      	mov	r3, r0
 80049f2:	2b00      	cmp	r3, #0
 80049f4:	d002      	beq.n	80049fc <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x1ae>
  {
    return LIS2MDL_ERROR;
 80049f6:	f04f 33ff 	mov.w	r3, #4294967295
 80049fa:	e042      	b.n	8004a82 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x234>
  }

  /* Read ACC data starting from LSM6DSOX OUTX_H_A register to clear accelerometer data-ready XLDA */
  if (lis2mdl_read_reg(&(pObj->Ctx), lsm6dsox_outx_h_a, data_array, 6) != LIS2MDL_OK)
 80049fc:	68fb      	ldr	r3, [r7, #12]
 80049fe:	f103 0020 	add.w	r0, r3, #32
 8004a02:	f107 0214 	add.w	r2, r7, #20
 8004a06:	f897 1028 	ldrb.w	r1, [r7, #40]	@ 0x28
 8004a0a:	2306      	movs	r3, #6
 8004a0c:	f000 f83d 	bl	8004a8a <lis2mdl_read_reg>
 8004a10:	4603      	mov	r3, r0
 8004a12:	2b00      	cmp	r3, #0
 8004a14:	d002      	beq.n	8004a1c <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x1ce>
  {
    return LIS2MDL_ERROR;
 8004a16:	f04f 33ff 	mov.w	r3, #4294967295
 8004a1a:	e032      	b.n	8004a82 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x234>
  }

  /* Poll LSM6DSOX LSM6DSOX_STATUS_REG until XLDA = 1 (Wait for sensor hub trigger) */
  do
  {
    if (lis2mdl_read_reg(&(pObj->Ctx), lsm6dsox_status_reg, &data, 1) != LIS2MDL_OK)
 8004a1c:	68fb      	ldr	r3, [r7, #12]
 8004a1e:	f103 0020 	add.w	r0, r3, #32
 8004a22:	f107 021b 	add.w	r2, r7, #27
 8004a26:	f897 1027 	ldrb.w	r1, [r7, #39]	@ 0x27
 8004a2a:	2301      	movs	r3, #1
 8004a2c:	f000 f82d 	bl	8004a8a <lis2mdl_read_reg>
 8004a30:	4603      	mov	r3, r0
 8004a32:	2b00      	cmp	r3, #0
 8004a34:	d002      	beq.n	8004a3c <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x1ee>
    {
      return LIS2MDL_ERROR;
 8004a36:	f04f 33ff 	mov.w	r3, #4294967295
 8004a3a:	e022      	b.n	8004a82 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x234>
    }
  } while ((data & xlda) != xlda);
 8004a3c:	7efa      	ldrb	r2, [r7, #27]
 8004a3e:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8004a42:	4013      	ands	r3, r2
 8004a44:	b2db      	uxtb	r3, r3
 8004a46:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 8004a4a:	429a      	cmp	r2, r3
 8004a4c:	d1e6      	bne.n	8004a1c <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x1ce>

  /* Poll LSM6DSOX SensorHub WR_ONCE_DONE bit in STATUS_MASTER_MAINPAGE reg until the end of SW write operations */
  do
  {
    if (lis2mdl_read_reg(&(pObj->Ctx), status_master_mainpage, &data, 1) != LIS2MDL_OK)
 8004a4e:	68fb      	ldr	r3, [r7, #12]
 8004a50:	f103 0020 	add.w	r0, r3, #32
 8004a54:	f107 021b 	add.w	r2, r7, #27
 8004a58:	f897 102a 	ldrb.w	r1, [r7, #42]	@ 0x2a
 8004a5c:	2301      	movs	r3, #1
 8004a5e:	f000 f814 	bl	8004a8a <lis2mdl_read_reg>
 8004a62:	4603      	mov	r3, r0
 8004a64:	2b00      	cmp	r3, #0
 8004a66:	d002      	beq.n	8004a6e <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x220>
    {
      return LIS2MDL_ERROR;
 8004a68:	f04f 33ff 	mov.w	r3, #4294967295
 8004a6c:	e009      	b.n	8004a82 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x234>
    }
  } while ((data & wr_once_done) != wr_once_done);
 8004a6e:	7efa      	ldrb	r2, [r7, #27]
 8004a70:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 8004a74:	4013      	ands	r3, r2
 8004a76:	b2db      	uxtb	r3, r3
 8004a78:	f897 2029 	ldrb.w	r2, [r7, #41]	@ 0x29
 8004a7c:	429a      	cmp	r2, r3
 8004a7e:	d1e6      	bne.n	8004a4e <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x200>

  return LIS2MDL_OK;
 8004a80:	2300      	movs	r3, #0
}
 8004a82:	4618      	mov	r0, r3
 8004a84:	3730      	adds	r7, #48	@ 0x30
 8004a86:	46bd      	mov	sp, r7
 8004a88:	bd80      	pop	{r7, pc}

08004a8a <lis2mdl_read_reg>:
  *
  */
int32_t lis2mdl_read_reg(stmdev_ctx_t *ctx, uint8_t reg,
                         uint8_t *data,
                         uint16_t len)
{
 8004a8a:	b590      	push	{r4, r7, lr}
 8004a8c:	b087      	sub	sp, #28
 8004a8e:	af00      	add	r7, sp, #0
 8004a90:	60f8      	str	r0, [r7, #12]
 8004a92:	607a      	str	r2, [r7, #4]
 8004a94:	461a      	mov	r2, r3
 8004a96:	460b      	mov	r3, r1
 8004a98:	72fb      	strb	r3, [r7, #11]
 8004a9a:	4613      	mov	r3, r2
 8004a9c:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8004a9e:	68fb      	ldr	r3, [r7, #12]
 8004aa0:	685c      	ldr	r4, [r3, #4]
 8004aa2:	68fb      	ldr	r3, [r7, #12]
 8004aa4:	68d8      	ldr	r0, [r3, #12]
 8004aa6:	893b      	ldrh	r3, [r7, #8]
 8004aa8:	7af9      	ldrb	r1, [r7, #11]
 8004aaa:	687a      	ldr	r2, [r7, #4]
 8004aac:	47a0      	blx	r4
 8004aae:	6178      	str	r0, [r7, #20]

  return ret;
 8004ab0:	697b      	ldr	r3, [r7, #20]
}
 8004ab2:	4618      	mov	r0, r3
 8004ab4:	371c      	adds	r7, #28
 8004ab6:	46bd      	mov	sp, r7
 8004ab8:	bd90      	pop	{r4, r7, pc}

08004aba <lis2mdl_write_reg>:
  *
  */
int32_t lis2mdl_write_reg(stmdev_ctx_t *ctx, uint8_t reg,
                          uint8_t *data,
                          uint16_t len)
{
 8004aba:	b590      	push	{r4, r7, lr}
 8004abc:	b087      	sub	sp, #28
 8004abe:	af00      	add	r7, sp, #0
 8004ac0:	60f8      	str	r0, [r7, #12]
 8004ac2:	607a      	str	r2, [r7, #4]
 8004ac4:	461a      	mov	r2, r3
 8004ac6:	460b      	mov	r3, r1
 8004ac8:	72fb      	strb	r3, [r7, #11]
 8004aca:	4613      	mov	r3, r2
 8004acc:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8004ace:	68fb      	ldr	r3, [r7, #12]
 8004ad0:	681c      	ldr	r4, [r3, #0]
 8004ad2:	68fb      	ldr	r3, [r7, #12]
 8004ad4:	68d8      	ldr	r0, [r3, #12]
 8004ad6:	893b      	ldrh	r3, [r7, #8]
 8004ad8:	7af9      	ldrb	r1, [r7, #11]
 8004ada:	687a      	ldr	r2, [r7, #4]
 8004adc:	47a0      	blx	r4
 8004ade:	6178      	str	r0, [r7, #20]

  return ret;
 8004ae0:	697b      	ldr	r3, [r7, #20]
}
 8004ae2:	4618      	mov	r0, r3
 8004ae4:	371c      	adds	r7, #28
 8004ae6:	46bd      	mov	sp, r7
 8004ae8:	bd90      	pop	{r4, r7, pc}

08004aea <lis2mdl_operating_mode_set>:
  * @retval        interface status.(MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2mdl_operating_mode_set(stmdev_ctx_t *ctx,
                                   lis2mdl_md_t val)
{
 8004aea:	b580      	push	{r7, lr}
 8004aec:	b084      	sub	sp, #16
 8004aee:	af00      	add	r7, sp, #0
 8004af0:	6078      	str	r0, [r7, #4]
 8004af2:	460b      	mov	r3, r1
 8004af4:	70fb      	strb	r3, [r7, #3]
  lis2mdl_cfg_reg_a_t reg;
  int32_t ret;

  ret = lis2mdl_read_reg(ctx, LIS2MDL_CFG_REG_A, (uint8_t *)&reg, 1);
 8004af6:	f107 0208 	add.w	r2, r7, #8
 8004afa:	2301      	movs	r3, #1
 8004afc:	2160      	movs	r1, #96	@ 0x60
 8004afe:	6878      	ldr	r0, [r7, #4]
 8004b00:	f7ff ffc3 	bl	8004a8a <lis2mdl_read_reg>
 8004b04:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8004b06:	68fb      	ldr	r3, [r7, #12]
 8004b08:	2b00      	cmp	r3, #0
 8004b0a:	d10f      	bne.n	8004b2c <lis2mdl_operating_mode_set+0x42>
  {
    reg.md = (uint8_t)val;
 8004b0c:	78fb      	ldrb	r3, [r7, #3]
 8004b0e:	f003 0303 	and.w	r3, r3, #3
 8004b12:	b2da      	uxtb	r2, r3
 8004b14:	7a3b      	ldrb	r3, [r7, #8]
 8004b16:	f362 0301 	bfi	r3, r2, #0, #2
 8004b1a:	723b      	strb	r3, [r7, #8]
    ret = lis2mdl_write_reg(ctx, LIS2MDL_CFG_REG_A, (uint8_t *)&reg, 1);
 8004b1c:	f107 0208 	add.w	r2, r7, #8
 8004b20:	2301      	movs	r3, #1
 8004b22:	2160      	movs	r1, #96	@ 0x60
 8004b24:	6878      	ldr	r0, [r7, #4]
 8004b26:	f7ff ffc8 	bl	8004aba <lis2mdl_write_reg>
 8004b2a:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8004b2c:	68fb      	ldr	r3, [r7, #12]
}
 8004b2e:	4618      	mov	r0, r3
 8004b30:	3710      	adds	r7, #16
 8004b32:	46bd      	mov	sp, r7
 8004b34:	bd80      	pop	{r7, pc}

08004b36 <lis2mdl_data_rate_set>:
  * @param  val   change the values of odr in reg CFG_REG_A
  * @retval       interface status.(MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2mdl_data_rate_set(stmdev_ctx_t *ctx, lis2mdl_odr_t val)
{
 8004b36:	b580      	push	{r7, lr}
 8004b38:	b084      	sub	sp, #16
 8004b3a:	af00      	add	r7, sp, #0
 8004b3c:	6078      	str	r0, [r7, #4]
 8004b3e:	460b      	mov	r3, r1
 8004b40:	70fb      	strb	r3, [r7, #3]
  lis2mdl_cfg_reg_a_t reg;
  int32_t ret;

  ret = lis2mdl_read_reg(ctx, LIS2MDL_CFG_REG_A, (uint8_t *)&reg, 1);
 8004b42:	f107 0208 	add.w	r2, r7, #8
 8004b46:	2301      	movs	r3, #1
 8004b48:	2160      	movs	r1, #96	@ 0x60
 8004b4a:	6878      	ldr	r0, [r7, #4]
 8004b4c:	f7ff ff9d 	bl	8004a8a <lis2mdl_read_reg>
 8004b50:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8004b52:	68fb      	ldr	r3, [r7, #12]
 8004b54:	2b00      	cmp	r3, #0
 8004b56:	d10f      	bne.n	8004b78 <lis2mdl_data_rate_set+0x42>
  {
    reg.odr = (uint8_t)val;
 8004b58:	78fb      	ldrb	r3, [r7, #3]
 8004b5a:	f003 0303 	and.w	r3, r3, #3
 8004b5e:	b2da      	uxtb	r2, r3
 8004b60:	7a3b      	ldrb	r3, [r7, #8]
 8004b62:	f362 0383 	bfi	r3, r2, #2, #2
 8004b66:	723b      	strb	r3, [r7, #8]
    ret = lis2mdl_write_reg(ctx, LIS2MDL_CFG_REG_A, (uint8_t *)&reg, 1);
 8004b68:	f107 0208 	add.w	r2, r7, #8
 8004b6c:	2301      	movs	r3, #1
 8004b6e:	2160      	movs	r1, #96	@ 0x60
 8004b70:	6878      	ldr	r0, [r7, #4]
 8004b72:	f7ff ffa2 	bl	8004aba <lis2mdl_write_reg>
 8004b76:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8004b78:	68fb      	ldr	r3, [r7, #12]
}
 8004b7a:	4618      	mov	r0, r3
 8004b7c:	3710      	adds	r7, #16
 8004b7e:	46bd      	mov	sp, r7
 8004b80:	bd80      	pop	{r7, pc}
	...

08004b84 <lis2mdl_data_rate_get>:
  * @param  val   Get the values of odr in reg CFG_REG_A.(ptr)
  * @retval       interface status.(MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2mdl_data_rate_get(stmdev_ctx_t *ctx, lis2mdl_odr_t *val)
{
 8004b84:	b580      	push	{r7, lr}
 8004b86:	b084      	sub	sp, #16
 8004b88:	af00      	add	r7, sp, #0
 8004b8a:	6078      	str	r0, [r7, #4]
 8004b8c:	6039      	str	r1, [r7, #0]
  lis2mdl_cfg_reg_a_t reg;
  int32_t ret;

  ret = lis2mdl_read_reg(ctx, LIS2MDL_CFG_REG_A, (uint8_t *)&reg, 1);
 8004b8e:	f107 0208 	add.w	r2, r7, #8
 8004b92:	2301      	movs	r3, #1
 8004b94:	2160      	movs	r1, #96	@ 0x60
 8004b96:	6878      	ldr	r0, [r7, #4]
 8004b98:	f7ff ff77 	bl	8004a8a <lis2mdl_read_reg>
 8004b9c:	60f8      	str	r0, [r7, #12]

  switch (reg.odr)
 8004b9e:	7a3b      	ldrb	r3, [r7, #8]
 8004ba0:	f3c3 0381 	ubfx	r3, r3, #2, #2
 8004ba4:	b2db      	uxtb	r3, r3
 8004ba6:	2b03      	cmp	r3, #3
 8004ba8:	d81a      	bhi.n	8004be0 <lis2mdl_data_rate_get+0x5c>
 8004baa:	a201      	add	r2, pc, #4	@ (adr r2, 8004bb0 <lis2mdl_data_rate_get+0x2c>)
 8004bac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004bb0:	08004bc1 	.word	0x08004bc1
 8004bb4:	08004bc9 	.word	0x08004bc9
 8004bb8:	08004bd1 	.word	0x08004bd1
 8004bbc:	08004bd9 	.word	0x08004bd9
  {
    case LIS2MDL_ODR_10Hz:
      *val = LIS2MDL_ODR_10Hz;
 8004bc0:	683b      	ldr	r3, [r7, #0]
 8004bc2:	2200      	movs	r2, #0
 8004bc4:	701a      	strb	r2, [r3, #0]
      break;
 8004bc6:	e00f      	b.n	8004be8 <lis2mdl_data_rate_get+0x64>

    case LIS2MDL_ODR_20Hz:
      *val = LIS2MDL_ODR_20Hz;
 8004bc8:	683b      	ldr	r3, [r7, #0]
 8004bca:	2201      	movs	r2, #1
 8004bcc:	701a      	strb	r2, [r3, #0]
      break;
 8004bce:	e00b      	b.n	8004be8 <lis2mdl_data_rate_get+0x64>

    case LIS2MDL_ODR_50Hz:
      *val = LIS2MDL_ODR_50Hz;
 8004bd0:	683b      	ldr	r3, [r7, #0]
 8004bd2:	2202      	movs	r2, #2
 8004bd4:	701a      	strb	r2, [r3, #0]
      break;
 8004bd6:	e007      	b.n	8004be8 <lis2mdl_data_rate_get+0x64>

    case LIS2MDL_ODR_100Hz:
      *val = LIS2MDL_ODR_100Hz;
 8004bd8:	683b      	ldr	r3, [r7, #0]
 8004bda:	2203      	movs	r2, #3
 8004bdc:	701a      	strb	r2, [r3, #0]
      break;
 8004bde:	e003      	b.n	8004be8 <lis2mdl_data_rate_get+0x64>

    default:
      *val = LIS2MDL_ODR_10Hz;
 8004be0:	683b      	ldr	r3, [r7, #0]
 8004be2:	2200      	movs	r2, #0
 8004be4:	701a      	strb	r2, [r3, #0]
      break;
 8004be6:	bf00      	nop
  }

  return ret;
 8004be8:	68fb      	ldr	r3, [r7, #12]
}
 8004bea:	4618      	mov	r0, r3
 8004bec:	3710      	adds	r7, #16
 8004bee:	46bd      	mov	sp, r7
 8004bf0:	bd80      	pop	{r7, pc}
 8004bf2:	bf00      	nop

08004bf4 <lis2mdl_block_data_update_set>:
  * @param  val   change the values of bdu in reg CFG_REG_C
  * @retval       interface status.(MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2mdl_block_data_update_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8004bf4:	b580      	push	{r7, lr}
 8004bf6:	b084      	sub	sp, #16
 8004bf8:	af00      	add	r7, sp, #0
 8004bfa:	6078      	str	r0, [r7, #4]
 8004bfc:	460b      	mov	r3, r1
 8004bfe:	70fb      	strb	r3, [r7, #3]
  lis2mdl_cfg_reg_c_t reg;
  int32_t ret;

  ret = lis2mdl_read_reg(ctx, LIS2MDL_CFG_REG_C, (uint8_t *)&reg, 1);
 8004c00:	f107 0208 	add.w	r2, r7, #8
 8004c04:	2301      	movs	r3, #1
 8004c06:	2162      	movs	r1, #98	@ 0x62
 8004c08:	6878      	ldr	r0, [r7, #4]
 8004c0a:	f7ff ff3e 	bl	8004a8a <lis2mdl_read_reg>
 8004c0e:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8004c10:	68fb      	ldr	r3, [r7, #12]
 8004c12:	2b00      	cmp	r3, #0
 8004c14:	d10f      	bne.n	8004c36 <lis2mdl_block_data_update_set+0x42>
  {
    reg.bdu = val;
 8004c16:	78fb      	ldrb	r3, [r7, #3]
 8004c18:	f003 0301 	and.w	r3, r3, #1
 8004c1c:	b2da      	uxtb	r2, r3
 8004c1e:	7a3b      	ldrb	r3, [r7, #8]
 8004c20:	f362 1304 	bfi	r3, r2, #4, #1
 8004c24:	723b      	strb	r3, [r7, #8]
    ret = lis2mdl_write_reg(ctx, LIS2MDL_CFG_REG_C, (uint8_t *)&reg, 1);
 8004c26:	f107 0208 	add.w	r2, r7, #8
 8004c2a:	2301      	movs	r3, #1
 8004c2c:	2162      	movs	r1, #98	@ 0x62
 8004c2e:	6878      	ldr	r0, [r7, #4]
 8004c30:	f7ff ff43 	bl	8004aba <lis2mdl_write_reg>
 8004c34:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8004c36:	68fb      	ldr	r3, [r7, #12]
}
 8004c38:	4618      	mov	r0, r3
 8004c3a:	3710      	adds	r7, #16
 8004c3c:	46bd      	mov	sp, r7
 8004c3e:	bd80      	pop	{r7, pc}

08004c40 <lis2mdl_magnetic_raw_get>:
  * @param  buff  that stores data read
  * @retval       interface status.(MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2mdl_magnetic_raw_get(stmdev_ctx_t *ctx, int16_t *val)
{
 8004c40:	b580      	push	{r7, lr}
 8004c42:	b086      	sub	sp, #24
 8004c44:	af00      	add	r7, sp, #0
 8004c46:	6078      	str	r0, [r7, #4]
 8004c48:	6039      	str	r1, [r7, #0]
  uint8_t buff[6];
  int32_t ret;

  ret = lis2mdl_read_reg(ctx, LIS2MDL_OUTX_L_REG, buff, 6);
 8004c4a:	f107 020c 	add.w	r2, r7, #12
 8004c4e:	2306      	movs	r3, #6
 8004c50:	2168      	movs	r1, #104	@ 0x68
 8004c52:	6878      	ldr	r0, [r7, #4]
 8004c54:	f7ff ff19 	bl	8004a8a <lis2mdl_read_reg>
 8004c58:	6178      	str	r0, [r7, #20]
  val[0] = (int16_t)buff[1];
 8004c5a:	7b7b      	ldrb	r3, [r7, #13]
 8004c5c:	b21a      	sxth	r2, r3
 8004c5e:	683b      	ldr	r3, [r7, #0]
 8004c60:	801a      	strh	r2, [r3, #0]
  val[0] = (val[0] * 256) + (int16_t)buff[0];
 8004c62:	683b      	ldr	r3, [r7, #0]
 8004c64:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004c68:	b29b      	uxth	r3, r3
 8004c6a:	021b      	lsls	r3, r3, #8
 8004c6c:	b29b      	uxth	r3, r3
 8004c6e:	7b3a      	ldrb	r2, [r7, #12]
 8004c70:	4413      	add	r3, r2
 8004c72:	b29b      	uxth	r3, r3
 8004c74:	b21a      	sxth	r2, r3
 8004c76:	683b      	ldr	r3, [r7, #0]
 8004c78:	801a      	strh	r2, [r3, #0]
  val[1] = (int16_t)buff[3];
 8004c7a:	7bfa      	ldrb	r2, [r7, #15]
 8004c7c:	683b      	ldr	r3, [r7, #0]
 8004c7e:	3302      	adds	r3, #2
 8004c80:	b212      	sxth	r2, r2
 8004c82:	801a      	strh	r2, [r3, #0]
  val[1] = (val[1] * 256) + (int16_t)buff[2];
 8004c84:	683b      	ldr	r3, [r7, #0]
 8004c86:	3302      	adds	r3, #2
 8004c88:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004c8c:	b29b      	uxth	r3, r3
 8004c8e:	021b      	lsls	r3, r3, #8
 8004c90:	b29b      	uxth	r3, r3
 8004c92:	7bba      	ldrb	r2, [r7, #14]
 8004c94:	4413      	add	r3, r2
 8004c96:	b29a      	uxth	r2, r3
 8004c98:	683b      	ldr	r3, [r7, #0]
 8004c9a:	3302      	adds	r3, #2
 8004c9c:	b212      	sxth	r2, r2
 8004c9e:	801a      	strh	r2, [r3, #0]
  val[2] = (int16_t)buff[5];
 8004ca0:	7c7a      	ldrb	r2, [r7, #17]
 8004ca2:	683b      	ldr	r3, [r7, #0]
 8004ca4:	3304      	adds	r3, #4
 8004ca6:	b212      	sxth	r2, r2
 8004ca8:	801a      	strh	r2, [r3, #0]
  val[2] = (val[2] * 256) + (int16_t)buff[4];
 8004caa:	683b      	ldr	r3, [r7, #0]
 8004cac:	3304      	adds	r3, #4
 8004cae:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004cb2:	b29b      	uxth	r3, r3
 8004cb4:	021b      	lsls	r3, r3, #8
 8004cb6:	b29b      	uxth	r3, r3
 8004cb8:	7c3a      	ldrb	r2, [r7, #16]
 8004cba:	4413      	add	r3, r2
 8004cbc:	b29a      	uxth	r2, r3
 8004cbe:	683b      	ldr	r3, [r7, #0]
 8004cc0:	3304      	adds	r3, #4
 8004cc2:	b212      	sxth	r2, r2
 8004cc4:	801a      	strh	r2, [r3, #0]

  return ret;
 8004cc6:	697b      	ldr	r3, [r7, #20]
}
 8004cc8:	4618      	mov	r0, r3
 8004cca:	3718      	adds	r7, #24
 8004ccc:	46bd      	mov	sp, r7
 8004cce:	bd80      	pop	{r7, pc}

08004cd0 <lis2mdl_device_id_get>:
  * @param  buff  that stores data read
  * @retval       interface status.(MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2mdl_device_id_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 8004cd0:	b580      	push	{r7, lr}
 8004cd2:	b084      	sub	sp, #16
 8004cd4:	af00      	add	r7, sp, #0
 8004cd6:	6078      	str	r0, [r7, #4]
 8004cd8:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret = lis2mdl_read_reg(ctx, LIS2MDL_WHO_AM_I, buff, 1);
 8004cda:	2301      	movs	r3, #1
 8004cdc:	683a      	ldr	r2, [r7, #0]
 8004cde:	214f      	movs	r1, #79	@ 0x4f
 8004ce0:	6878      	ldr	r0, [r7, #4]
 8004ce2:	f7ff fed2 	bl	8004a8a <lis2mdl_read_reg>
 8004ce6:	60f8      	str	r0, [r7, #12]

  return ret;
 8004ce8:	68fb      	ldr	r3, [r7, #12]
}
 8004cea:	4618      	mov	r0, r3
 8004cec:	3710      	adds	r7, #16
 8004cee:	46bd      	mov	sp, r7
 8004cf0:	bd80      	pop	{r7, pc}

08004cf2 <lis2mdl_self_test_set>:
  * @param  val   change the values of self_test in reg CFG_REG_C
  * @retval       interface status.(MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2mdl_self_test_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8004cf2:	b580      	push	{r7, lr}
 8004cf4:	b084      	sub	sp, #16
 8004cf6:	af00      	add	r7, sp, #0
 8004cf8:	6078      	str	r0, [r7, #4]
 8004cfa:	460b      	mov	r3, r1
 8004cfc:	70fb      	strb	r3, [r7, #3]
  lis2mdl_cfg_reg_c_t reg;
  int32_t ret;

  ret = lis2mdl_read_reg(ctx, LIS2MDL_CFG_REG_C, (uint8_t *)&reg, 1);
 8004cfe:	f107 0208 	add.w	r2, r7, #8
 8004d02:	2301      	movs	r3, #1
 8004d04:	2162      	movs	r1, #98	@ 0x62
 8004d06:	6878      	ldr	r0, [r7, #4]
 8004d08:	f7ff febf 	bl	8004a8a <lis2mdl_read_reg>
 8004d0c:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8004d0e:	68fb      	ldr	r3, [r7, #12]
 8004d10:	2b00      	cmp	r3, #0
 8004d12:	d10f      	bne.n	8004d34 <lis2mdl_self_test_set+0x42>
  {
    reg.self_test = val;
 8004d14:	78fb      	ldrb	r3, [r7, #3]
 8004d16:	f003 0301 	and.w	r3, r3, #1
 8004d1a:	b2da      	uxtb	r2, r3
 8004d1c:	7a3b      	ldrb	r3, [r7, #8]
 8004d1e:	f362 0341 	bfi	r3, r2, #1, #1
 8004d22:	723b      	strb	r3, [r7, #8]
    ret = lis2mdl_write_reg(ctx, LIS2MDL_CFG_REG_C, (uint8_t *)&reg, 1);
 8004d24:	f107 0208 	add.w	r2, r7, #8
 8004d28:	2301      	movs	r3, #1
 8004d2a:	2162      	movs	r1, #98	@ 0x62
 8004d2c:	6878      	ldr	r0, [r7, #4]
 8004d2e:	f7ff fec4 	bl	8004aba <lis2mdl_write_reg>
 8004d32:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8004d34:	68fb      	ldr	r3, [r7, #12]
}
 8004d36:	4618      	mov	r0, r3
 8004d38:	3710      	adds	r7, #16
 8004d3a:	46bd      	mov	sp, r7
 8004d3c:	bd80      	pop	{r7, pc}

08004d3e <lis2mdl_i2c_interface_set>:
  * @retval       interface status.(MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2mdl_i2c_interface_set(stmdev_ctx_t *ctx,
                                  lis2mdl_i2c_dis_t val)
{
 8004d3e:	b580      	push	{r7, lr}
 8004d40:	b084      	sub	sp, #16
 8004d42:	af00      	add	r7, sp, #0
 8004d44:	6078      	str	r0, [r7, #4]
 8004d46:	460b      	mov	r3, r1
 8004d48:	70fb      	strb	r3, [r7, #3]
  lis2mdl_cfg_reg_c_t reg;
  int32_t ret;

  ret = lis2mdl_read_reg(ctx, LIS2MDL_CFG_REG_C, (uint8_t *)&reg, 1);
 8004d4a:	f107 0208 	add.w	r2, r7, #8
 8004d4e:	2301      	movs	r3, #1
 8004d50:	2162      	movs	r1, #98	@ 0x62
 8004d52:	6878      	ldr	r0, [r7, #4]
 8004d54:	f7ff fe99 	bl	8004a8a <lis2mdl_read_reg>
 8004d58:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8004d5a:	68fb      	ldr	r3, [r7, #12]
 8004d5c:	2b00      	cmp	r3, #0
 8004d5e:	d10f      	bne.n	8004d80 <lis2mdl_i2c_interface_set+0x42>
  {
    reg.i2c_dis = (uint8_t)val;
 8004d60:	78fb      	ldrb	r3, [r7, #3]
 8004d62:	f003 0301 	and.w	r3, r3, #1
 8004d66:	b2da      	uxtb	r2, r3
 8004d68:	7a3b      	ldrb	r3, [r7, #8]
 8004d6a:	f362 1345 	bfi	r3, r2, #5, #1
 8004d6e:	723b      	strb	r3, [r7, #8]
    ret = lis2mdl_write_reg(ctx, LIS2MDL_CFG_REG_C, (uint8_t *)&reg, 1);
 8004d70:	f107 0208 	add.w	r2, r7, #8
 8004d74:	2301      	movs	r3, #1
 8004d76:	2162      	movs	r1, #98	@ 0x62
 8004d78:	6878      	ldr	r0, [r7, #4]
 8004d7a:	f7ff fe9e 	bl	8004aba <lis2mdl_write_reg>
 8004d7e:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8004d80:	68fb      	ldr	r3, [r7, #12]
}
 8004d82:	4618      	mov	r0, r3
 8004d84:	3710      	adds	r7, #16
 8004d86:	46bd      	mov	sp, r7
 8004d88:	bd80      	pop	{r7, pc}
	...

08004d8c <LPS22HH_RegisterBusIO>:
  * @brief  Register Component Bus IO operations
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LPS22HH_RegisterBusIO(LPS22HH_Object_t *pObj, LPS22HH_IO_t *pIO)
{
 8004d8c:	b580      	push	{r7, lr}
 8004d8e:	b084      	sub	sp, #16
 8004d90:	af00      	add	r7, sp, #0
 8004d92:	6078      	str	r0, [r7, #4]
 8004d94:	6039      	str	r1, [r7, #0]
  int32_t ret = LPS22HH_OK;
 8004d96:	2300      	movs	r3, #0
 8004d98:	60fb      	str	r3, [r7, #12]

  if (pObj == NULL)
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	2b00      	cmp	r3, #0
 8004d9e:	d103      	bne.n	8004da8 <LPS22HH_RegisterBusIO+0x1c>
  {
    ret = LPS22HH_ERROR;
 8004da0:	f04f 33ff 	mov.w	r3, #4294967295
 8004da4:	60fb      	str	r3, [r7, #12]
 8004da6:	e051      	b.n	8004e4c <LPS22HH_RegisterBusIO+0xc0>
  }
  else
  {
    pObj->IO.Init      = pIO->Init;
 8004da8:	683b      	ldr	r3, [r7, #0]
 8004daa:	681a      	ldr	r2, [r3, #0]
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	601a      	str	r2, [r3, #0]
    pObj->IO.DeInit    = pIO->DeInit;
 8004db0:	683b      	ldr	r3, [r7, #0]
 8004db2:	685a      	ldr	r2, [r3, #4]
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	605a      	str	r2, [r3, #4]
    pObj->IO.BusType   = pIO->BusType;
 8004db8:	683b      	ldr	r3, [r7, #0]
 8004dba:	689a      	ldr	r2, [r3, #8]
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	609a      	str	r2, [r3, #8]
    pObj->IO.Address   = pIO->Address;
 8004dc0:	683b      	ldr	r3, [r7, #0]
 8004dc2:	7b1a      	ldrb	r2, [r3, #12]
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	731a      	strb	r2, [r3, #12]
    pObj->IO.WriteReg  = pIO->WriteReg;
 8004dc8:	683b      	ldr	r3, [r7, #0]
 8004dca:	691a      	ldr	r2, [r3, #16]
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	611a      	str	r2, [r3, #16]
    pObj->IO.ReadReg   = pIO->ReadReg;
 8004dd0:	683b      	ldr	r3, [r7, #0]
 8004dd2:	695a      	ldr	r2, [r3, #20]
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	615a      	str	r2, [r3, #20]
    pObj->IO.GetTick   = pIO->GetTick;
 8004dd8:	683b      	ldr	r3, [r7, #0]
 8004dda:	699a      	ldr	r2, [r3, #24]
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	619a      	str	r2, [r3, #24]

    pObj->Ctx.read_reg  = ReadRegWrap;
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	4a1d      	ldr	r2, [pc, #116]	@ (8004e58 <LPS22HH_RegisterBusIO+0xcc>)
 8004de4:	625a      	str	r2, [r3, #36]	@ 0x24
    pObj->Ctx.write_reg = WriteRegWrap;
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	4a1c      	ldr	r2, [pc, #112]	@ (8004e5c <LPS22HH_RegisterBusIO+0xd0>)
 8004dea:	621a      	str	r2, [r3, #32]
    pObj->Ctx.mdelay    = pIO->Delay;
 8004dec:	683b      	ldr	r3, [r7, #0]
 8004dee:	69da      	ldr	r2, [r3, #28]
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	629a      	str	r2, [r3, #40]	@ 0x28
    pObj->Ctx.handle   = pObj;
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	687a      	ldr	r2, [r7, #4]
 8004df8:	62da      	str	r2, [r3, #44]	@ 0x2c

    if (pObj->IO.Init == NULL)
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	2b00      	cmp	r3, #0
 8004e00:	d103      	bne.n	8004e0a <LPS22HH_RegisterBusIO+0x7e>
    {
      ret = LPS22HH_ERROR;
 8004e02:	f04f 33ff 	mov.w	r3, #4294967295
 8004e06:	60fb      	str	r3, [r7, #12]
 8004e08:	e020      	b.n	8004e4c <LPS22HH_RegisterBusIO+0xc0>
    }
    else if (pObj->IO.Init() != LPS22HH_OK)
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	4798      	blx	r3
 8004e10:	4603      	mov	r3, r0
 8004e12:	2b00      	cmp	r3, #0
 8004e14:	d003      	beq.n	8004e1e <LPS22HH_RegisterBusIO+0x92>
    {
      ret = LPS22HH_ERROR;
 8004e16:	f04f 33ff 	mov.w	r3, #4294967295
 8004e1a:	60fb      	str	r3, [r7, #12]
 8004e1c:	e016      	b.n	8004e4c <LPS22HH_RegisterBusIO+0xc0>
    }
    else
    {
      if (pObj->IO.BusType == LPS22HH_SPI_3WIRES_BUS) /* SPI 3-Wires */
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	689b      	ldr	r3, [r3, #8]
 8004e22:	2b02      	cmp	r3, #2
 8004e24:	d112      	bne.n	8004e4c <LPS22HH_RegisterBusIO+0xc0>
      {
        /* Enable the SPI 3-Wires support only the first time */
        if (pObj->is_initialized == 0U)
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8004e2c:	2b00      	cmp	r3, #0
 8004e2e:	d10d      	bne.n	8004e4c <LPS22HH_RegisterBusIO+0xc0>
        {
          /* Enable SPI 3-Wires on the component */
          uint8_t data = 0x01;
 8004e30:	2301      	movs	r3, #1
 8004e32:	72fb      	strb	r3, [r7, #11]

          if (LPS22HH_Write_Reg(pObj, LPS22HH_CTRL_REG1, data) != LPS22HH_OK)
 8004e34:	7afb      	ldrb	r3, [r7, #11]
 8004e36:	461a      	mov	r2, r3
 8004e38:	2110      	movs	r1, #16
 8004e3a:	6878      	ldr	r0, [r7, #4]
 8004e3c:	f000 f9db 	bl	80051f6 <LPS22HH_Write_Reg>
 8004e40:	4603      	mov	r3, r0
 8004e42:	2b00      	cmp	r3, #0
 8004e44:	d002      	beq.n	8004e4c <LPS22HH_RegisterBusIO+0xc0>
          {
            ret = LPS22HH_ERROR;
 8004e46:	f04f 33ff 	mov.w	r3, #4294967295
 8004e4a:	60fb      	str	r3, [r7, #12]
        }
      }
    }
  }

  return ret;
 8004e4c:	68fb      	ldr	r3, [r7, #12]
}
 8004e4e:	4618      	mov	r0, r3
 8004e50:	3710      	adds	r7, #16
 8004e52:	46bd      	mov	sp, r7
 8004e54:	bd80      	pop	{r7, pc}
 8004e56:	bf00      	nop
 8004e58:	0800553b 	.word	0x0800553b
 8004e5c:	08005571 	.word	0x08005571

08004e60 <LPS22HH_Init>:
  * @brief  Initialize the LPS22HH sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LPS22HH_Init(LPS22HH_Object_t *pObj)
{
 8004e60:	b580      	push	{r7, lr}
 8004e62:	b082      	sub	sp, #8
 8004e64:	af00      	add	r7, sp, #0
 8004e66:	6078      	str	r0, [r7, #4]
  if (pObj->is_initialized == 0U)
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8004e6e:	2b00      	cmp	r3, #0
 8004e70:	d108      	bne.n	8004e84 <LPS22HH_Init+0x24>
  {
    if (LPS22HH_Initialize(pObj) != LPS22HH_OK)
 8004e72:	6878      	ldr	r0, [r7, #4]
 8004e74:	f000 fb14 	bl	80054a0 <LPS22HH_Initialize>
 8004e78:	4603      	mov	r3, r0
 8004e7a:	2b00      	cmp	r3, #0
 8004e7c:	d002      	beq.n	8004e84 <LPS22HH_Init+0x24>
    {
      return LPS22HH_ERROR;
 8004e7e:	f04f 33ff 	mov.w	r3, #4294967295
 8004e82:	e004      	b.n	8004e8e <LPS22HH_Init+0x2e>
    }
  }

  pObj->is_initialized = 1U;
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	2201      	movs	r2, #1
 8004e88:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  return LPS22HH_OK;
 8004e8c:	2300      	movs	r3, #0
}
 8004e8e:	4618      	mov	r0, r3
 8004e90:	3708      	adds	r7, #8
 8004e92:	46bd      	mov	sp, r7
 8004e94:	bd80      	pop	{r7, pc}

08004e96 <LPS22HH_DeInit>:
  * @brief  Deinitialize the LPS22HH sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LPS22HH_DeInit(LPS22HH_Object_t *pObj)
{
 8004e96:	b580      	push	{r7, lr}
 8004e98:	b082      	sub	sp, #8
 8004e9a:	af00      	add	r7, sp, #0
 8004e9c:	6078      	str	r0, [r7, #4]
  if (pObj->is_initialized == 1U)
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8004ea4:	2b01      	cmp	r3, #1
 8004ea6:	d111      	bne.n	8004ecc <LPS22HH_DeInit+0x36>
  {
    if (LPS22HH_PRESS_Disable(pObj) != LPS22HH_OK)
 8004ea8:	6878      	ldr	r0, [r7, #4]
 8004eaa:	f000 f87d 	bl	8004fa8 <LPS22HH_PRESS_Disable>
 8004eae:	4603      	mov	r3, r0
 8004eb0:	2b00      	cmp	r3, #0
 8004eb2:	d002      	beq.n	8004eba <LPS22HH_DeInit+0x24>
    {
      return LPS22HH_ERROR;
 8004eb4:	f04f 33ff 	mov.w	r3, #4294967295
 8004eb8:	e00d      	b.n	8004ed6 <LPS22HH_DeInit+0x40>
    }

    if (LPS22HH_TEMP_Disable(pObj) != LPS22HH_OK)
 8004eba:	6878      	ldr	r0, [r7, #4]
 8004ebc:	f000 f919 	bl	80050f2 <LPS22HH_TEMP_Disable>
 8004ec0:	4603      	mov	r3, r0
 8004ec2:	2b00      	cmp	r3, #0
 8004ec4:	d002      	beq.n	8004ecc <LPS22HH_DeInit+0x36>
    {
      return LPS22HH_ERROR;
 8004ec6:	f04f 33ff 	mov.w	r3, #4294967295
 8004eca:	e004      	b.n	8004ed6 <LPS22HH_DeInit+0x40>
    }
  }

  pObj->is_initialized = 0;
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	2200      	movs	r2, #0
 8004ed0:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  return LPS22HH_OK;
 8004ed4:	2300      	movs	r3, #0
}
 8004ed6:	4618      	mov	r0, r3
 8004ed8:	3708      	adds	r7, #8
 8004eda:	46bd      	mov	sp, r7
 8004edc:	bd80      	pop	{r7, pc}

08004ede <LPS22HH_ReadID>:
  * @param  pObj the device pObj
  * @param  Id the WHO_AM_I value
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LPS22HH_ReadID(LPS22HH_Object_t *pObj, uint8_t *Id)
{
 8004ede:	b580      	push	{r7, lr}
 8004ee0:	b082      	sub	sp, #8
 8004ee2:	af00      	add	r7, sp, #0
 8004ee4:	6078      	str	r0, [r7, #4]
 8004ee6:	6039      	str	r1, [r7, #0]
  if (lps22hh_device_id_get(&(pObj->Ctx), Id) != LPS22HH_OK)
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	3320      	adds	r3, #32
 8004eec:	6839      	ldr	r1, [r7, #0]
 8004eee:	4618      	mov	r0, r3
 8004ef0:	f000 fd19 	bl	8005926 <lps22hh_device_id_get>
 8004ef4:	4603      	mov	r3, r0
 8004ef6:	2b00      	cmp	r3, #0
 8004ef8:	d002      	beq.n	8004f00 <LPS22HH_ReadID+0x22>
  {
    return LPS22HH_ERROR;
 8004efa:	f04f 33ff 	mov.w	r3, #4294967295
 8004efe:	e000      	b.n	8004f02 <LPS22HH_ReadID+0x24>
  }

  return LPS22HH_OK;
 8004f00:	2300      	movs	r3, #0
}
 8004f02:	4618      	mov	r0, r3
 8004f04:	3708      	adds	r7, #8
 8004f06:	46bd      	mov	sp, r7
 8004f08:	bd80      	pop	{r7, pc}
	...

08004f0c <LPS22HH_GetCapabilities>:
  * @param  pObj Component object pointer
  * @param  Capabilities pointer to LPS22HH sensor capabilities
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LPS22HH_GetCapabilities(LPS22HH_Object_t *pObj, LPS22HH_Capabilities_t *Capabilities)
{
 8004f0c:	b480      	push	{r7}
 8004f0e:	b083      	sub	sp, #12
 8004f10:	af00      	add	r7, sp, #0
 8004f12:	6078      	str	r0, [r7, #4]
 8004f14:	6039      	str	r1, [r7, #0]
  /* Prevent unused argument(s) compilation warning */
  (void)(pObj);

  Capabilities->Humidity    = 0;
 8004f16:	683b      	ldr	r3, [r7, #0]
 8004f18:	2200      	movs	r2, #0
 8004f1a:	709a      	strb	r2, [r3, #2]
  Capabilities->Pressure    = 1;
 8004f1c:	683b      	ldr	r3, [r7, #0]
 8004f1e:	2201      	movs	r2, #1
 8004f20:	705a      	strb	r2, [r3, #1]
  Capabilities->Temperature = 1;
 8004f22:	683b      	ldr	r3, [r7, #0]
 8004f24:	2201      	movs	r2, #1
 8004f26:	701a      	strb	r2, [r3, #0]
  Capabilities->Gas         = 0;
 8004f28:	683b      	ldr	r3, [r7, #0]
 8004f2a:	2200      	movs	r2, #0
 8004f2c:	70da      	strb	r2, [r3, #3]
  Capabilities->LowPower    = 0;
 8004f2e:	683b      	ldr	r3, [r7, #0]
 8004f30:	2200      	movs	r2, #0
 8004f32:	711a      	strb	r2, [r3, #4]
  Capabilities->HumMaxOdr   = 0.0f;
 8004f34:	683b      	ldr	r3, [r7, #0]
 8004f36:	f04f 0200 	mov.w	r2, #0
 8004f3a:	609a      	str	r2, [r3, #8]
  Capabilities->TempMaxOdr  = 200.0f;
 8004f3c:	683b      	ldr	r3, [r7, #0]
 8004f3e:	4a07      	ldr	r2, [pc, #28]	@ (8004f5c <LPS22HH_GetCapabilities+0x50>)
 8004f40:	60da      	str	r2, [r3, #12]
  Capabilities->PressMaxOdr = 200.0f;
 8004f42:	683b      	ldr	r3, [r7, #0]
 8004f44:	4a05      	ldr	r2, [pc, #20]	@ (8004f5c <LPS22HH_GetCapabilities+0x50>)
 8004f46:	611a      	str	r2, [r3, #16]
  Capabilities->GasMaxOdr   = 0.0f;
 8004f48:	683b      	ldr	r3, [r7, #0]
 8004f4a:	f04f 0200 	mov.w	r2, #0
 8004f4e:	615a      	str	r2, [r3, #20]
  return LPS22HH_OK;
 8004f50:	2300      	movs	r3, #0
}
 8004f52:	4618      	mov	r0, r3
 8004f54:	370c      	adds	r7, #12
 8004f56:	46bd      	mov	sp, r7
 8004f58:	bc80      	pop	{r7}
 8004f5a:	4770      	bx	lr
 8004f5c:	43480000 	.word	0x43480000

08004f60 <LPS22HH_PRESS_Enable>:
  * @brief  Enable the LPS22HH pressure sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LPS22HH_PRESS_Enable(LPS22HH_Object_t *pObj)
{
 8004f60:	b580      	push	{r7, lr}
 8004f62:	b082      	sub	sp, #8
 8004f64:	af00      	add	r7, sp, #0
 8004f66:	6078      	str	r0, [r7, #4]
  /* Check if the component is already enabled */
  if (pObj->press_is_enabled == 1U)
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8004f6e:	2b01      	cmp	r3, #1
 8004f70:	d101      	bne.n	8004f76 <LPS22HH_PRESS_Enable+0x16>
  {
    return LPS22HH_OK;
 8004f72:	2300      	movs	r3, #0
 8004f74:	e014      	b.n	8004fa0 <LPS22HH_PRESS_Enable+0x40>
  }

  /* Output data rate selection. */
  if (lps22hh_data_rate_set(&(pObj->Ctx), pObj->last_odr) != LPS22HH_OK)
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	f103 0220 	add.w	r2, r3, #32
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	f893 3033 	ldrb.w	r3, [r3, #51]	@ 0x33
 8004f82:	4619      	mov	r1, r3
 8004f84:	4610      	mov	r0, r2
 8004f86:	f000 fb8d 	bl	80056a4 <lps22hh_data_rate_set>
 8004f8a:	4603      	mov	r3, r0
 8004f8c:	2b00      	cmp	r3, #0
 8004f8e:	d002      	beq.n	8004f96 <LPS22HH_PRESS_Enable+0x36>
  {
    return LPS22HH_ERROR;
 8004f90:	f04f 33ff 	mov.w	r3, #4294967295
 8004f94:	e004      	b.n	8004fa0 <LPS22HH_PRESS_Enable+0x40>
  }

  pObj->press_is_enabled = 1;
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	2201      	movs	r2, #1
 8004f9a:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31

  return LPS22HH_OK;
 8004f9e:	2300      	movs	r3, #0
}
 8004fa0:	4618      	mov	r0, r3
 8004fa2:	3708      	adds	r7, #8
 8004fa4:	46bd      	mov	sp, r7
 8004fa6:	bd80      	pop	{r7, pc}

08004fa8 <LPS22HH_PRESS_Disable>:
  * @brief  Disable the LPS22HH pressure sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LPS22HH_PRESS_Disable(LPS22HH_Object_t *pObj)
{
 8004fa8:	b580      	push	{r7, lr}
 8004faa:	b082      	sub	sp, #8
 8004fac:	af00      	add	r7, sp, #0
 8004fae:	6078      	str	r0, [r7, #4]
  /* Check if the component is already disabled */
  if (pObj->press_is_enabled == 0U)
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8004fb6:	2b00      	cmp	r3, #0
 8004fb8:	d101      	bne.n	8004fbe <LPS22HH_PRESS_Disable+0x16>
  {
    return LPS22HH_OK;
 8004fba:	2300      	movs	r3, #0
 8004fbc:	e024      	b.n	8005008 <LPS22HH_PRESS_Disable+0x60>
  }

  /* Check if the LPS22HH temperature sensor is still enable. */
  /* If yes, skip the disable function, if not call disable function */
  if (pObj->temp_is_enabled == 0U)
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 8004fc4:	2b00      	cmp	r3, #0
 8004fc6:	d11a      	bne.n	8004ffe <LPS22HH_PRESS_Disable+0x56>
  {
    /* Get current output data rate. */
    if (lps22hh_data_rate_get(&(pObj->Ctx), &pObj->last_odr) != LPS22HH_OK)
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	f103 0220 	add.w	r2, r3, #32
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	3333      	adds	r3, #51	@ 0x33
 8004fd2:	4619      	mov	r1, r3
 8004fd4:	4610      	mov	r0, r2
 8004fd6:	f000 fbb3 	bl	8005740 <lps22hh_data_rate_get>
 8004fda:	4603      	mov	r3, r0
 8004fdc:	2b00      	cmp	r3, #0
 8004fde:	d002      	beq.n	8004fe6 <LPS22HH_PRESS_Disable+0x3e>
    {
      return LPS22HH_ERROR;
 8004fe0:	f04f 33ff 	mov.w	r3, #4294967295
 8004fe4:	e010      	b.n	8005008 <LPS22HH_PRESS_Disable+0x60>
    }

    /* Output data rate selection - power down. */
    if (lps22hh_data_rate_set(&(pObj->Ctx), LPS22HH_POWER_DOWN) != LPS22HH_OK)
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	3320      	adds	r3, #32
 8004fea:	2100      	movs	r1, #0
 8004fec:	4618      	mov	r0, r3
 8004fee:	f000 fb59 	bl	80056a4 <lps22hh_data_rate_set>
 8004ff2:	4603      	mov	r3, r0
 8004ff4:	2b00      	cmp	r3, #0
 8004ff6:	d002      	beq.n	8004ffe <LPS22HH_PRESS_Disable+0x56>
    {
      return LPS22HH_ERROR;
 8004ff8:	f04f 33ff 	mov.w	r3, #4294967295
 8004ffc:	e004      	b.n	8005008 <LPS22HH_PRESS_Disable+0x60>
    }
  }

  pObj->press_is_enabled = 0;
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	2200      	movs	r2, #0
 8005002:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31

  return LPS22HH_OK;
 8005006:	2300      	movs	r3, #0
}
 8005008:	4618      	mov	r0, r3
 800500a:	3708      	adds	r7, #8
 800500c:	46bd      	mov	sp, r7
 800500e:	bd80      	pop	{r7, pc}

08005010 <LPS22HH_PRESS_GetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr pointer where the output data rate is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LPS22HH_PRESS_GetOutputDataRate(LPS22HH_Object_t *pObj, float *Odr)
{
 8005010:	b580      	push	{r7, lr}
 8005012:	b082      	sub	sp, #8
 8005014:	af00      	add	r7, sp, #0
 8005016:	6078      	str	r0, [r7, #4]
 8005018:	6039      	str	r1, [r7, #0]
  return LPS22HH_GetOutputDataRate(pObj, Odr);
 800501a:	6839      	ldr	r1, [r7, #0]
 800501c:	6878      	ldr	r0, [r7, #4]
 800501e:	f000 f905 	bl	800522c <LPS22HH_GetOutputDataRate>
 8005022:	4603      	mov	r3, r0
}
 8005024:	4618      	mov	r0, r3
 8005026:	3708      	adds	r7, #8
 8005028:	46bd      	mov	sp, r7
 800502a:	bd80      	pop	{r7, pc}

0800502c <LPS22HH_PRESS_SetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr the output data rate value to be set
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LPS22HH_PRESS_SetOutputDataRate(LPS22HH_Object_t *pObj, float Odr)
{
 800502c:	b580      	push	{r7, lr}
 800502e:	b082      	sub	sp, #8
 8005030:	af00      	add	r7, sp, #0
 8005032:	6078      	str	r0, [r7, #4]
 8005034:	6039      	str	r1, [r7, #0]
  /* Check if the component is enabled */
  if (pObj->press_is_enabled == 1U)
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 800503c:	2b01      	cmp	r3, #1
 800503e:	d105      	bne.n	800504c <LPS22HH_PRESS_SetOutputDataRate+0x20>
  {
    return LPS22HH_SetOutputDataRate_When_Enabled(pObj, Odr);
 8005040:	6839      	ldr	r1, [r7, #0]
 8005042:	6878      	ldr	r0, [r7, #4]
 8005044:	f000 f972 	bl	800532c <LPS22HH_SetOutputDataRate_When_Enabled>
 8005048:	4603      	mov	r3, r0
 800504a:	e004      	b.n	8005056 <LPS22HH_PRESS_SetOutputDataRate+0x2a>
  }
  else
  {
    return LPS22HH_SetOutputDataRate_When_Disabled(pObj, Odr);
 800504c:	6839      	ldr	r1, [r7, #0]
 800504e:	6878      	ldr	r0, [r7, #4]
 8005050:	f000 f9d6 	bl	8005400 <LPS22HH_SetOutputDataRate_When_Disabled>
 8005054:	4603      	mov	r3, r0
  }
}
 8005056:	4618      	mov	r0, r3
 8005058:	3708      	adds	r7, #8
 800505a:	46bd      	mov	sp, r7
 800505c:	bd80      	pop	{r7, pc}

0800505e <LPS22HH_PRESS_GetPressure>:
  * @param  pObj the device pObj
  * @param  Value pointer where the pressure value is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LPS22HH_PRESS_GetPressure(LPS22HH_Object_t *pObj, float *Value)
{
 800505e:	b580      	push	{r7, lr}
 8005060:	b084      	sub	sp, #16
 8005062:	af00      	add	r7, sp, #0
 8005064:	6078      	str	r0, [r7, #4]
 8005066:	6039      	str	r1, [r7, #0]
  lps22hh_axis1bit32_t data_raw_pressure;

  (void)memset(data_raw_pressure.u8bit, 0x00, sizeof(int32_t));
 8005068:	f107 030c 	add.w	r3, r7, #12
 800506c:	2204      	movs	r2, #4
 800506e:	2100      	movs	r1, #0
 8005070:	4618      	mov	r0, r3
 8005072:	f007 fb95 	bl	800c7a0 <memset>
  if (lps22hh_pressure_raw_get(&(pObj->Ctx), (uint32_t *)&data_raw_pressure.i32bit) != LPS22HH_OK)
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	3320      	adds	r3, #32
 800507a:	f107 020c 	add.w	r2, r7, #12
 800507e:	4611      	mov	r1, r2
 8005080:	4618      	mov	r0, r3
 8005082:	f000 fc05 	bl	8005890 <lps22hh_pressure_raw_get>
 8005086:	4603      	mov	r3, r0
 8005088:	2b00      	cmp	r3, #0
 800508a:	d002      	beq.n	8005092 <LPS22HH_PRESS_GetPressure+0x34>
  {
    return LPS22HH_ERROR;
 800508c:	f04f 33ff 	mov.w	r3, #4294967295
 8005090:	e007      	b.n	80050a2 <LPS22HH_PRESS_GetPressure+0x44>
  }

  *Value = lps22hh_from_lsb_to_hpa((uint32_t)data_raw_pressure.i32bit);
 8005092:	68fb      	ldr	r3, [r7, #12]
 8005094:	4618      	mov	r0, r3
 8005096:	f000 fab6 	bl	8005606 <lps22hh_from_lsb_to_hpa>
 800509a:	4602      	mov	r2, r0
 800509c:	683b      	ldr	r3, [r7, #0]
 800509e:	601a      	str	r2, [r3, #0]

  return LPS22HH_OK;
 80050a0:	2300      	movs	r3, #0
}
 80050a2:	4618      	mov	r0, r3
 80050a4:	3710      	adds	r7, #16
 80050a6:	46bd      	mov	sp, r7
 80050a8:	bd80      	pop	{r7, pc}

080050aa <LPS22HH_TEMP_Enable>:
  * @brief  Enable the LPS22HH temperature sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LPS22HH_TEMP_Enable(LPS22HH_Object_t *pObj)
{
 80050aa:	b580      	push	{r7, lr}
 80050ac:	b082      	sub	sp, #8
 80050ae:	af00      	add	r7, sp, #0
 80050b0:	6078      	str	r0, [r7, #4]
  /* Check if the component is already enabled */
  if (pObj->temp_is_enabled == 1U)
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 80050b8:	2b01      	cmp	r3, #1
 80050ba:	d101      	bne.n	80050c0 <LPS22HH_TEMP_Enable+0x16>
  {
    return LPS22HH_OK;
 80050bc:	2300      	movs	r3, #0
 80050be:	e014      	b.n	80050ea <LPS22HH_TEMP_Enable+0x40>
  }

  /* Output data rate selection. */
  if (lps22hh_data_rate_set(&(pObj->Ctx), pObj->last_odr) != LPS22HH_OK)
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	f103 0220 	add.w	r2, r3, #32
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	f893 3033 	ldrb.w	r3, [r3, #51]	@ 0x33
 80050cc:	4619      	mov	r1, r3
 80050ce:	4610      	mov	r0, r2
 80050d0:	f000 fae8 	bl	80056a4 <lps22hh_data_rate_set>
 80050d4:	4603      	mov	r3, r0
 80050d6:	2b00      	cmp	r3, #0
 80050d8:	d002      	beq.n	80050e0 <LPS22HH_TEMP_Enable+0x36>
  {
    return LPS22HH_ERROR;
 80050da:	f04f 33ff 	mov.w	r3, #4294967295
 80050de:	e004      	b.n	80050ea <LPS22HH_TEMP_Enable+0x40>
  }

  pObj->temp_is_enabled = 1;
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	2201      	movs	r2, #1
 80050e4:	f883 2032 	strb.w	r2, [r3, #50]	@ 0x32

  return LPS22HH_OK;
 80050e8:	2300      	movs	r3, #0
}
 80050ea:	4618      	mov	r0, r3
 80050ec:	3708      	adds	r7, #8
 80050ee:	46bd      	mov	sp, r7
 80050f0:	bd80      	pop	{r7, pc}

080050f2 <LPS22HH_TEMP_Disable>:
  * @brief  Disable the LPS22HH temperature sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LPS22HH_TEMP_Disable(LPS22HH_Object_t *pObj)
{
 80050f2:	b580      	push	{r7, lr}
 80050f4:	b082      	sub	sp, #8
 80050f6:	af00      	add	r7, sp, #0
 80050f8:	6078      	str	r0, [r7, #4]
  /* Check if the component is already disabled */
  if (pObj->temp_is_enabled == 0U)
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 8005100:	2b00      	cmp	r3, #0
 8005102:	d101      	bne.n	8005108 <LPS22HH_TEMP_Disable+0x16>
  {
    return LPS22HH_OK;
 8005104:	2300      	movs	r3, #0
 8005106:	e024      	b.n	8005152 <LPS22HH_TEMP_Disable+0x60>
  }

  /* Check if the LPS22HH pressure sensor is still enable. */
  /* If yes, skip the disable function, if not call disable function */
  if (pObj->press_is_enabled == 0U)
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 800510e:	2b00      	cmp	r3, #0
 8005110:	d11a      	bne.n	8005148 <LPS22HH_TEMP_Disable+0x56>
  {
    /* Get current output data rate. */
    if (lps22hh_data_rate_get(&(pObj->Ctx), &pObj->last_odr) != LPS22HH_OK)
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	f103 0220 	add.w	r2, r3, #32
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	3333      	adds	r3, #51	@ 0x33
 800511c:	4619      	mov	r1, r3
 800511e:	4610      	mov	r0, r2
 8005120:	f000 fb0e 	bl	8005740 <lps22hh_data_rate_get>
 8005124:	4603      	mov	r3, r0
 8005126:	2b00      	cmp	r3, #0
 8005128:	d002      	beq.n	8005130 <LPS22HH_TEMP_Disable+0x3e>
    {
      return LPS22HH_ERROR;
 800512a:	f04f 33ff 	mov.w	r3, #4294967295
 800512e:	e010      	b.n	8005152 <LPS22HH_TEMP_Disable+0x60>
    }

    /* Output data rate selection - power down. */
    if (lps22hh_data_rate_set(&(pObj->Ctx), LPS22HH_POWER_DOWN) != LPS22HH_OK)
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	3320      	adds	r3, #32
 8005134:	2100      	movs	r1, #0
 8005136:	4618      	mov	r0, r3
 8005138:	f000 fab4 	bl	80056a4 <lps22hh_data_rate_set>
 800513c:	4603      	mov	r3, r0
 800513e:	2b00      	cmp	r3, #0
 8005140:	d002      	beq.n	8005148 <LPS22HH_TEMP_Disable+0x56>
    {
      return LPS22HH_ERROR;
 8005142:	f04f 33ff 	mov.w	r3, #4294967295
 8005146:	e004      	b.n	8005152 <LPS22HH_TEMP_Disable+0x60>
    }
  }

  pObj->temp_is_enabled = 0;
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	2200      	movs	r2, #0
 800514c:	f883 2032 	strb.w	r2, [r3, #50]	@ 0x32

  return LPS22HH_OK;
 8005150:	2300      	movs	r3, #0
}
 8005152:	4618      	mov	r0, r3
 8005154:	3708      	adds	r7, #8
 8005156:	46bd      	mov	sp, r7
 8005158:	bd80      	pop	{r7, pc}

0800515a <LPS22HH_TEMP_GetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr pointer where the output data rate is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LPS22HH_TEMP_GetOutputDataRate(LPS22HH_Object_t *pObj, float *Odr)
{
 800515a:	b580      	push	{r7, lr}
 800515c:	b082      	sub	sp, #8
 800515e:	af00      	add	r7, sp, #0
 8005160:	6078      	str	r0, [r7, #4]
 8005162:	6039      	str	r1, [r7, #0]
  return LPS22HH_GetOutputDataRate(pObj, Odr);
 8005164:	6839      	ldr	r1, [r7, #0]
 8005166:	6878      	ldr	r0, [r7, #4]
 8005168:	f000 f860 	bl	800522c <LPS22HH_GetOutputDataRate>
 800516c:	4603      	mov	r3, r0
}
 800516e:	4618      	mov	r0, r3
 8005170:	3708      	adds	r7, #8
 8005172:	46bd      	mov	sp, r7
 8005174:	bd80      	pop	{r7, pc}

08005176 <LPS22HH_TEMP_SetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr the output data rate value to be set
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LPS22HH_TEMP_SetOutputDataRate(LPS22HH_Object_t *pObj, float Odr)
{
 8005176:	b580      	push	{r7, lr}
 8005178:	b082      	sub	sp, #8
 800517a:	af00      	add	r7, sp, #0
 800517c:	6078      	str	r0, [r7, #4]
 800517e:	6039      	str	r1, [r7, #0]
  /* Check if the component is enabled */
  if (pObj->temp_is_enabled == 1U)
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 8005186:	2b01      	cmp	r3, #1
 8005188:	d105      	bne.n	8005196 <LPS22HH_TEMP_SetOutputDataRate+0x20>
  {
    return LPS22HH_SetOutputDataRate_When_Enabled(pObj, Odr);
 800518a:	6839      	ldr	r1, [r7, #0]
 800518c:	6878      	ldr	r0, [r7, #4]
 800518e:	f000 f8cd 	bl	800532c <LPS22HH_SetOutputDataRate_When_Enabled>
 8005192:	4603      	mov	r3, r0
 8005194:	e004      	b.n	80051a0 <LPS22HH_TEMP_SetOutputDataRate+0x2a>
  }
  else
  {
    return LPS22HH_SetOutputDataRate_When_Disabled(pObj, Odr);
 8005196:	6839      	ldr	r1, [r7, #0]
 8005198:	6878      	ldr	r0, [r7, #4]
 800519a:	f000 f931 	bl	8005400 <LPS22HH_SetOutputDataRate_When_Disabled>
 800519e:	4603      	mov	r3, r0
  }
}
 80051a0:	4618      	mov	r0, r3
 80051a2:	3708      	adds	r7, #8
 80051a4:	46bd      	mov	sp, r7
 80051a6:	bd80      	pop	{r7, pc}

080051a8 <LPS22HH_TEMP_GetTemperature>:
  * @param  pObj the device pObj
  * @param  Value pointer where the temperature value is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LPS22HH_TEMP_GetTemperature(LPS22HH_Object_t *pObj, float *Value)
{
 80051a8:	b580      	push	{r7, lr}
 80051aa:	b084      	sub	sp, #16
 80051ac:	af00      	add	r7, sp, #0
 80051ae:	6078      	str	r0, [r7, #4]
 80051b0:	6039      	str	r1, [r7, #0]
  lps22hh_axis1bit16_t data_raw_temperature;

  (void)memset(data_raw_temperature.u8bit, 0x00, sizeof(int16_t));
 80051b2:	f107 030c 	add.w	r3, r7, #12
 80051b6:	2202      	movs	r2, #2
 80051b8:	2100      	movs	r1, #0
 80051ba:	4618      	mov	r0, r3
 80051bc:	f007 faf0 	bl	800c7a0 <memset>
  if (lps22hh_temperature_raw_get(&(pObj->Ctx), &data_raw_temperature.i16bit) != LPS22HH_OK)
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	3320      	adds	r3, #32
 80051c4:	f107 020c 	add.w	r2, r7, #12
 80051c8:	4611      	mov	r1, r2
 80051ca:	4618      	mov	r0, r3
 80051cc:	f000 fb89 	bl	80058e2 <lps22hh_temperature_raw_get>
 80051d0:	4603      	mov	r3, r0
 80051d2:	2b00      	cmp	r3, #0
 80051d4:	d002      	beq.n	80051dc <LPS22HH_TEMP_GetTemperature+0x34>
  {
    return LPS22HH_ERROR;
 80051d6:	f04f 33ff 	mov.w	r3, #4294967295
 80051da:	e008      	b.n	80051ee <LPS22HH_TEMP_GetTemperature+0x46>
  }

  *Value = lps22hh_from_lsb_to_celsius(data_raw_temperature.i16bit);
 80051dc:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80051e0:	4618      	mov	r0, r3
 80051e2:	f000 fa23 	bl	800562c <lps22hh_from_lsb_to_celsius>
 80051e6:	4602      	mov	r2, r0
 80051e8:	683b      	ldr	r3, [r7, #0]
 80051ea:	601a      	str	r2, [r3, #0]

  return LPS22HH_OK;
 80051ec:	2300      	movs	r3, #0
}
 80051ee:	4618      	mov	r0, r3
 80051f0:	3710      	adds	r7, #16
 80051f2:	46bd      	mov	sp, r7
 80051f4:	bd80      	pop	{r7, pc}

080051f6 <LPS22HH_Write_Reg>:
  * @param  Reg address to be written
  * @param  Data value to be written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LPS22HH_Write_Reg(LPS22HH_Object_t *pObj, uint8_t Reg, uint8_t Data)
{
 80051f6:	b580      	push	{r7, lr}
 80051f8:	b082      	sub	sp, #8
 80051fa:	af00      	add	r7, sp, #0
 80051fc:	6078      	str	r0, [r7, #4]
 80051fe:	460b      	mov	r3, r1
 8005200:	70fb      	strb	r3, [r7, #3]
 8005202:	4613      	mov	r3, r2
 8005204:	70bb      	strb	r3, [r7, #2]
  if (lps22hh_write_reg(&(pObj->Ctx), Reg, &Data, 1) != LPS22HH_OK)
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	f103 0020 	add.w	r0, r3, #32
 800520c:	1cba      	adds	r2, r7, #2
 800520e:	78f9      	ldrb	r1, [r7, #3]
 8005210:	2301      	movs	r3, #1
 8005212:	f000 f9e0 	bl	80055d6 <lps22hh_write_reg>
 8005216:	4603      	mov	r3, r0
 8005218:	2b00      	cmp	r3, #0
 800521a:	d002      	beq.n	8005222 <LPS22HH_Write_Reg+0x2c>
  {
    return LPS22HH_ERROR;
 800521c:	f04f 33ff 	mov.w	r3, #4294967295
 8005220:	e000      	b.n	8005224 <LPS22HH_Write_Reg+0x2e>
  }

  return LPS22HH_OK;
 8005222:	2300      	movs	r3, #0
}
 8005224:	4618      	mov	r0, r3
 8005226:	3708      	adds	r7, #8
 8005228:	46bd      	mov	sp, r7
 800522a:	bd80      	pop	{r7, pc}

0800522c <LPS22HH_GetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr the output data rate value
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t LPS22HH_GetOutputDataRate(LPS22HH_Object_t *pObj, float *Odr)
{
 800522c:	b580      	push	{r7, lr}
 800522e:	b084      	sub	sp, #16
 8005230:	af00      	add	r7, sp, #0
 8005232:	6078      	str	r0, [r7, #4]
 8005234:	6039      	str	r1, [r7, #0]
  int32_t ret = LPS22HH_OK;
 8005236:	2300      	movs	r3, #0
 8005238:	60fb      	str	r3, [r7, #12]
  lps22hh_odr_t odr_low_level;

  if (lps22hh_data_rate_get(&(pObj->Ctx), &odr_low_level) != LPS22HH_OK)
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	3320      	adds	r3, #32
 800523e:	f107 020b 	add.w	r2, r7, #11
 8005242:	4611      	mov	r1, r2
 8005244:	4618      	mov	r0, r3
 8005246:	f000 fa7b 	bl	8005740 <lps22hh_data_rate_get>
 800524a:	4603      	mov	r3, r0
 800524c:	2b00      	cmp	r3, #0
 800524e:	d002      	beq.n	8005256 <LPS22HH_GetOutputDataRate+0x2a>
  {
    return LPS22HH_ERROR;
 8005250:	f04f 33ff 	mov.w	r3, #4294967295
 8005254:	e059      	b.n	800530a <LPS22HH_GetOutputDataRate+0xde>
  }

  switch (odr_low_level)
 8005256:	7afb      	ldrb	r3, [r7, #11]
 8005258:	2b15      	cmp	r3, #21
 800525a:	d851      	bhi.n	8005300 <LPS22HH_GetOutputDataRate+0xd4>
 800525c:	a201      	add	r2, pc, #4	@ (adr r2, 8005264 <LPS22HH_GetOutputDataRate+0x38>)
 800525e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005262:	bf00      	nop
 8005264:	080052bd 	.word	0x080052bd
 8005268:	080052c7 	.word	0x080052c7
 800526c:	080052d1 	.word	0x080052d1
 8005270:	080052d9 	.word	0x080052d9
 8005274:	080052e1 	.word	0x080052e1
 8005278:	080052e9 	.word	0x080052e9
 800527c:	080052f1 	.word	0x080052f1
 8005280:	080052f9 	.word	0x080052f9
 8005284:	080052bd 	.word	0x080052bd
 8005288:	08005301 	.word	0x08005301
 800528c:	08005301 	.word	0x08005301
 8005290:	08005301 	.word	0x08005301
 8005294:	08005301 	.word	0x08005301
 8005298:	08005301 	.word	0x08005301
 800529c:	08005301 	.word	0x08005301
 80052a0:	08005301 	.word	0x08005301
 80052a4:	08005301 	.word	0x08005301
 80052a8:	080052c7 	.word	0x080052c7
 80052ac:	080052d1 	.word	0x080052d1
 80052b0:	080052d9 	.word	0x080052d9
 80052b4:	080052e1 	.word	0x080052e1
 80052b8:	080052e9 	.word	0x080052e9
  {
    case LPS22HH_POWER_DOWN:
    case LPS22HH_ONE_SHOOT:
      *Odr = 0.0f;
 80052bc:	683b      	ldr	r3, [r7, #0]
 80052be:	f04f 0200 	mov.w	r2, #0
 80052c2:	601a      	str	r2, [r3, #0]
      break;
 80052c4:	e020      	b.n	8005308 <LPS22HH_GetOutputDataRate+0xdc>

    case LPS22HH_1_Hz:
    case LPS22HH_1_Hz_LOW_NOISE:
      *Odr = 1.0f;
 80052c6:	683b      	ldr	r3, [r7, #0]
 80052c8:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 80052cc:	601a      	str	r2, [r3, #0]
      break;
 80052ce:	e01b      	b.n	8005308 <LPS22HH_GetOutputDataRate+0xdc>

    case LPS22HH_10_Hz:
    case LPS22HH_10_Hz_LOW_NOISE:
      *Odr = 10.0f;
 80052d0:	683b      	ldr	r3, [r7, #0]
 80052d2:	4a10      	ldr	r2, [pc, #64]	@ (8005314 <LPS22HH_GetOutputDataRate+0xe8>)
 80052d4:	601a      	str	r2, [r3, #0]
      break;
 80052d6:	e017      	b.n	8005308 <LPS22HH_GetOutputDataRate+0xdc>

    case LPS22HH_25_Hz:
    case LPS22HH_25_Hz_LOW_NOISE:
      *Odr = 25.0f;
 80052d8:	683b      	ldr	r3, [r7, #0]
 80052da:	4a0f      	ldr	r2, [pc, #60]	@ (8005318 <LPS22HH_GetOutputDataRate+0xec>)
 80052dc:	601a      	str	r2, [r3, #0]
      break;
 80052de:	e013      	b.n	8005308 <LPS22HH_GetOutputDataRate+0xdc>

    case LPS22HH_50_Hz:
    case LPS22HH_50_Hz_LOW_NOISE:
      *Odr = 50.0f;
 80052e0:	683b      	ldr	r3, [r7, #0]
 80052e2:	4a0e      	ldr	r2, [pc, #56]	@ (800531c <LPS22HH_GetOutputDataRate+0xf0>)
 80052e4:	601a      	str	r2, [r3, #0]
      break;
 80052e6:	e00f      	b.n	8005308 <LPS22HH_GetOutputDataRate+0xdc>

    case LPS22HH_75_Hz:
    case LPS22HH_75_Hz_LOW_NOISE:
      *Odr = 75.0f;
 80052e8:	683b      	ldr	r3, [r7, #0]
 80052ea:	4a0d      	ldr	r2, [pc, #52]	@ (8005320 <LPS22HH_GetOutputDataRate+0xf4>)
 80052ec:	601a      	str	r2, [r3, #0]
      break;
 80052ee:	e00b      	b.n	8005308 <LPS22HH_GetOutputDataRate+0xdc>

    case LPS22HH_100_Hz:
      *Odr = 100.0f;
 80052f0:	683b      	ldr	r3, [r7, #0]
 80052f2:	4a0c      	ldr	r2, [pc, #48]	@ (8005324 <LPS22HH_GetOutputDataRate+0xf8>)
 80052f4:	601a      	str	r2, [r3, #0]
      break;
 80052f6:	e007      	b.n	8005308 <LPS22HH_GetOutputDataRate+0xdc>

    case LPS22HH_200_Hz:
      *Odr = 200.0f;
 80052f8:	683b      	ldr	r3, [r7, #0]
 80052fa:	4a0b      	ldr	r2, [pc, #44]	@ (8005328 <LPS22HH_GetOutputDataRate+0xfc>)
 80052fc:	601a      	str	r2, [r3, #0]
      break;
 80052fe:	e003      	b.n	8005308 <LPS22HH_GetOutputDataRate+0xdc>

    default:
      ret = LPS22HH_ERROR;
 8005300:	f04f 33ff 	mov.w	r3, #4294967295
 8005304:	60fb      	str	r3, [r7, #12]
      break;
 8005306:	bf00      	nop
  }

  return ret;
 8005308:	68fb      	ldr	r3, [r7, #12]
}
 800530a:	4618      	mov	r0, r3
 800530c:	3710      	adds	r7, #16
 800530e:	46bd      	mov	sp, r7
 8005310:	bd80      	pop	{r7, pc}
 8005312:	bf00      	nop
 8005314:	41200000 	.word	0x41200000
 8005318:	41c80000 	.word	0x41c80000
 800531c:	42480000 	.word	0x42480000
 8005320:	42960000 	.word	0x42960000
 8005324:	42c80000 	.word	0x42c80000
 8005328:	43480000 	.word	0x43480000

0800532c <LPS22HH_SetOutputDataRate_When_Enabled>:
  * @param  pObj the device pObj
  * @param  Odr the output data rate value to be set
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t LPS22HH_SetOutputDataRate_When_Enabled(LPS22HH_Object_t *pObj, float Odr)
{
 800532c:	b580      	push	{r7, lr}
 800532e:	b084      	sub	sp, #16
 8005330:	af00      	add	r7, sp, #0
 8005332:	6078      	str	r0, [r7, #4]
 8005334:	6039      	str	r1, [r7, #0]
  lps22hh_odr_t new_odr;

  new_odr = (Odr <=   1.0f) ? LPS22HH_1_Hz
            : (Odr <=  10.0f) ? LPS22HH_10_Hz
 8005336:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 800533a:	6838      	ldr	r0, [r7, #0]
 800533c:	f7fb fe72 	bl	8001024 <__aeabi_fcmple>
 8005340:	4603      	mov	r3, r0
 8005342:	2b00      	cmp	r3, #0
 8005344:	d001      	beq.n	800534a <LPS22HH_SetOutputDataRate_When_Enabled+0x1e>
 8005346:	2301      	movs	r3, #1
 8005348:	e02d      	b.n	80053a6 <LPS22HH_SetOutputDataRate_When_Enabled+0x7a>
 800534a:	4928      	ldr	r1, [pc, #160]	@ (80053ec <LPS22HH_SetOutputDataRate_When_Enabled+0xc0>)
 800534c:	6838      	ldr	r0, [r7, #0]
 800534e:	f7fb fe69 	bl	8001024 <__aeabi_fcmple>
 8005352:	4603      	mov	r3, r0
 8005354:	2b00      	cmp	r3, #0
 8005356:	d001      	beq.n	800535c <LPS22HH_SetOutputDataRate_When_Enabled+0x30>
 8005358:	2302      	movs	r3, #2
 800535a:	e024      	b.n	80053a6 <LPS22HH_SetOutputDataRate_When_Enabled+0x7a>
 800535c:	4924      	ldr	r1, [pc, #144]	@ (80053f0 <LPS22HH_SetOutputDataRate_When_Enabled+0xc4>)
 800535e:	6838      	ldr	r0, [r7, #0]
 8005360:	f7fb fe60 	bl	8001024 <__aeabi_fcmple>
 8005364:	4603      	mov	r3, r0
 8005366:	2b00      	cmp	r3, #0
 8005368:	d001      	beq.n	800536e <LPS22HH_SetOutputDataRate_When_Enabled+0x42>
 800536a:	2303      	movs	r3, #3
 800536c:	e01b      	b.n	80053a6 <LPS22HH_SetOutputDataRate_When_Enabled+0x7a>
 800536e:	4921      	ldr	r1, [pc, #132]	@ (80053f4 <LPS22HH_SetOutputDataRate_When_Enabled+0xc8>)
 8005370:	6838      	ldr	r0, [r7, #0]
 8005372:	f7fb fe57 	bl	8001024 <__aeabi_fcmple>
 8005376:	4603      	mov	r3, r0
 8005378:	2b00      	cmp	r3, #0
 800537a:	d001      	beq.n	8005380 <LPS22HH_SetOutputDataRate_When_Enabled+0x54>
 800537c:	2304      	movs	r3, #4
 800537e:	e012      	b.n	80053a6 <LPS22HH_SetOutputDataRate_When_Enabled+0x7a>
 8005380:	491d      	ldr	r1, [pc, #116]	@ (80053f8 <LPS22HH_SetOutputDataRate_When_Enabled+0xcc>)
 8005382:	6838      	ldr	r0, [r7, #0]
 8005384:	f7fb fe4e 	bl	8001024 <__aeabi_fcmple>
 8005388:	4603      	mov	r3, r0
 800538a:	2b00      	cmp	r3, #0
 800538c:	d001      	beq.n	8005392 <LPS22HH_SetOutputDataRate_When_Enabled+0x66>
 800538e:	2305      	movs	r3, #5
 8005390:	e009      	b.n	80053a6 <LPS22HH_SetOutputDataRate_When_Enabled+0x7a>
 8005392:	491a      	ldr	r1, [pc, #104]	@ (80053fc <LPS22HH_SetOutputDataRate_When_Enabled+0xd0>)
 8005394:	6838      	ldr	r0, [r7, #0]
 8005396:	f7fb fe45 	bl	8001024 <__aeabi_fcmple>
 800539a:	4603      	mov	r3, r0
 800539c:	2b00      	cmp	r3, #0
 800539e:	d001      	beq.n	80053a4 <LPS22HH_SetOutputDataRate_When_Enabled+0x78>
 80053a0:	2306      	movs	r3, #6
 80053a2:	e000      	b.n	80053a6 <LPS22HH_SetOutputDataRate_When_Enabled+0x7a>
 80053a4:	2307      	movs	r3, #7
  new_odr = (Odr <=   1.0f) ? LPS22HH_1_Hz
 80053a6:	73fb      	strb	r3, [r7, #15]
            : (Odr <=  50.0f) ? LPS22HH_50_Hz
            : (Odr <=  75.0f) ? LPS22HH_75_Hz
            : (Odr <= 100.0f) ? LPS22HH_100_Hz
            :                   LPS22HH_200_Hz;

  if (lps22hh_data_rate_set(&(pObj->Ctx), new_odr) != LPS22HH_OK)
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	3320      	adds	r3, #32
 80053ac:	7bfa      	ldrb	r2, [r7, #15]
 80053ae:	4611      	mov	r1, r2
 80053b0:	4618      	mov	r0, r3
 80053b2:	f000 f977 	bl	80056a4 <lps22hh_data_rate_set>
 80053b6:	4603      	mov	r3, r0
 80053b8:	2b00      	cmp	r3, #0
 80053ba:	d002      	beq.n	80053c2 <LPS22HH_SetOutputDataRate_When_Enabled+0x96>
  {
    return LPS22HH_ERROR;
 80053bc:	f04f 33ff 	mov.w	r3, #4294967295
 80053c0:	e00f      	b.n	80053e2 <LPS22HH_SetOutputDataRate_When_Enabled+0xb6>
  }

  if (lps22hh_data_rate_get(&(pObj->Ctx), &pObj->last_odr) != LPS22HH_OK)
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	f103 0220 	add.w	r2, r3, #32
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	3333      	adds	r3, #51	@ 0x33
 80053cc:	4619      	mov	r1, r3
 80053ce:	4610      	mov	r0, r2
 80053d0:	f000 f9b6 	bl	8005740 <lps22hh_data_rate_get>
 80053d4:	4603      	mov	r3, r0
 80053d6:	2b00      	cmp	r3, #0
 80053d8:	d002      	beq.n	80053e0 <LPS22HH_SetOutputDataRate_When_Enabled+0xb4>
  {
    return LPS22HH_ERROR;
 80053da:	f04f 33ff 	mov.w	r3, #4294967295
 80053de:	e000      	b.n	80053e2 <LPS22HH_SetOutputDataRate_When_Enabled+0xb6>
  }

  return LPS22HH_OK;
 80053e0:	2300      	movs	r3, #0
}
 80053e2:	4618      	mov	r0, r3
 80053e4:	3710      	adds	r7, #16
 80053e6:	46bd      	mov	sp, r7
 80053e8:	bd80      	pop	{r7, pc}
 80053ea:	bf00      	nop
 80053ec:	41200000 	.word	0x41200000
 80053f0:	41c80000 	.word	0x41c80000
 80053f4:	42480000 	.word	0x42480000
 80053f8:	42960000 	.word	0x42960000
 80053fc:	42c80000 	.word	0x42c80000

08005400 <LPS22HH_SetOutputDataRate_When_Disabled>:
  * @param  pObj the device pObj
  * @param  Odr the output data rate value to be set
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t LPS22HH_SetOutputDataRate_When_Disabled(LPS22HH_Object_t *pObj, float Odr)
{
 8005400:	b580      	push	{r7, lr}
 8005402:	b082      	sub	sp, #8
 8005404:	af00      	add	r7, sp, #0
 8005406:	6078      	str	r0, [r7, #4]
 8005408:	6039      	str	r1, [r7, #0]
  pObj->last_odr = (Odr <=   1.0f) ? LPS22HH_1_Hz
                   : (Odr <=  10.0f) ? LPS22HH_10_Hz
 800540a:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 800540e:	6838      	ldr	r0, [r7, #0]
 8005410:	f7fb fe08 	bl	8001024 <__aeabi_fcmple>
 8005414:	4603      	mov	r3, r0
 8005416:	2b00      	cmp	r3, #0
 8005418:	d001      	beq.n	800541e <LPS22HH_SetOutputDataRate_When_Disabled+0x1e>
 800541a:	2301      	movs	r3, #1
 800541c:	e02d      	b.n	800547a <LPS22HH_SetOutputDataRate_When_Disabled+0x7a>
 800541e:	491b      	ldr	r1, [pc, #108]	@ (800548c <LPS22HH_SetOutputDataRate_When_Disabled+0x8c>)
 8005420:	6838      	ldr	r0, [r7, #0]
 8005422:	f7fb fdff 	bl	8001024 <__aeabi_fcmple>
 8005426:	4603      	mov	r3, r0
 8005428:	2b00      	cmp	r3, #0
 800542a:	d001      	beq.n	8005430 <LPS22HH_SetOutputDataRate_When_Disabled+0x30>
 800542c:	2302      	movs	r3, #2
 800542e:	e024      	b.n	800547a <LPS22HH_SetOutputDataRate_When_Disabled+0x7a>
 8005430:	4917      	ldr	r1, [pc, #92]	@ (8005490 <LPS22HH_SetOutputDataRate_When_Disabled+0x90>)
 8005432:	6838      	ldr	r0, [r7, #0]
 8005434:	f7fb fdf6 	bl	8001024 <__aeabi_fcmple>
 8005438:	4603      	mov	r3, r0
 800543a:	2b00      	cmp	r3, #0
 800543c:	d001      	beq.n	8005442 <LPS22HH_SetOutputDataRate_When_Disabled+0x42>
 800543e:	2303      	movs	r3, #3
 8005440:	e01b      	b.n	800547a <LPS22HH_SetOutputDataRate_When_Disabled+0x7a>
 8005442:	4914      	ldr	r1, [pc, #80]	@ (8005494 <LPS22HH_SetOutputDataRate_When_Disabled+0x94>)
 8005444:	6838      	ldr	r0, [r7, #0]
 8005446:	f7fb fded 	bl	8001024 <__aeabi_fcmple>
 800544a:	4603      	mov	r3, r0
 800544c:	2b00      	cmp	r3, #0
 800544e:	d001      	beq.n	8005454 <LPS22HH_SetOutputDataRate_When_Disabled+0x54>
 8005450:	2304      	movs	r3, #4
 8005452:	e012      	b.n	800547a <LPS22HH_SetOutputDataRate_When_Disabled+0x7a>
 8005454:	4910      	ldr	r1, [pc, #64]	@ (8005498 <LPS22HH_SetOutputDataRate_When_Disabled+0x98>)
 8005456:	6838      	ldr	r0, [r7, #0]
 8005458:	f7fb fde4 	bl	8001024 <__aeabi_fcmple>
 800545c:	4603      	mov	r3, r0
 800545e:	2b00      	cmp	r3, #0
 8005460:	d001      	beq.n	8005466 <LPS22HH_SetOutputDataRate_When_Disabled+0x66>
 8005462:	2305      	movs	r3, #5
 8005464:	e009      	b.n	800547a <LPS22HH_SetOutputDataRate_When_Disabled+0x7a>
 8005466:	490d      	ldr	r1, [pc, #52]	@ (800549c <LPS22HH_SetOutputDataRate_When_Disabled+0x9c>)
 8005468:	6838      	ldr	r0, [r7, #0]
 800546a:	f7fb fddb 	bl	8001024 <__aeabi_fcmple>
 800546e:	4603      	mov	r3, r0
 8005470:	2b00      	cmp	r3, #0
 8005472:	d001      	beq.n	8005478 <LPS22HH_SetOutputDataRate_When_Disabled+0x78>
 8005474:	2306      	movs	r3, #6
 8005476:	e000      	b.n	800547a <LPS22HH_SetOutputDataRate_When_Disabled+0x7a>
 8005478:	2307      	movs	r3, #7
  pObj->last_odr = (Odr <=   1.0f) ? LPS22HH_1_Hz
 800547a:	687a      	ldr	r2, [r7, #4]
 800547c:	f882 3033 	strb.w	r3, [r2, #51]	@ 0x33
                   : (Odr <=  50.0f) ? LPS22HH_50_Hz
                   : (Odr <=  75.0f) ? LPS22HH_75_Hz
                   : (Odr <= 100.0f) ? LPS22HH_100_Hz
                   :                   LPS22HH_200_Hz;

  return LPS22HH_OK;
 8005480:	2300      	movs	r3, #0
}
 8005482:	4618      	mov	r0, r3
 8005484:	3708      	adds	r7, #8
 8005486:	46bd      	mov	sp, r7
 8005488:	bd80      	pop	{r7, pc}
 800548a:	bf00      	nop
 800548c:	41200000 	.word	0x41200000
 8005490:	41c80000 	.word	0x41c80000
 8005494:	42480000 	.word	0x42480000
 8005498:	42960000 	.word	0x42960000
 800549c:	42c80000 	.word	0x42c80000

080054a0 <LPS22HH_Initialize>:
  * @brief  Initialize the LPS22HH sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t LPS22HH_Initialize(LPS22HH_Object_t *pObj)
{
 80054a0:	b580      	push	{r7, lr}
 80054a2:	b082      	sub	sp, #8
 80054a4:	af00      	add	r7, sp, #0
 80054a6:	6078      	str	r0, [r7, #4]
  if(pObj->IO.BusType != LPS22HH_I3C_BUS)
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	689b      	ldr	r3, [r3, #8]
 80054ac:	2b03      	cmp	r3, #3
 80054ae:	d00b      	beq.n	80054c8 <LPS22HH_Initialize+0x28>
  {
    /* Disable MIPI I3C(SM) interface */
    if (lps22hh_i3c_interface_set(&(pObj->Ctx), LPS22HH_I3C_DISABLE) != LPS22HH_OK)
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	3320      	adds	r3, #32
 80054b4:	2111      	movs	r1, #17
 80054b6:	4618      	mov	r0, r3
 80054b8:	f000 fa92 	bl	80059e0 <lps22hh_i3c_interface_set>
 80054bc:	4603      	mov	r3, r0
 80054be:	2b00      	cmp	r3, #0
 80054c0:	d002      	beq.n	80054c8 <LPS22HH_Initialize+0x28>
    {
      return LPS22HH_ERROR;
 80054c2:	f04f 33ff 	mov.w	r3, #4294967295
 80054c6:	e034      	b.n	8005532 <LPS22HH_Initialize+0x92>
    }
  }

  /* Power down the device, set Low Noise Enable (bit 5), clear One Shot (bit 4) */
  if (lps22hh_data_rate_set(&(pObj->Ctx), (lps22hh_odr_t)(LPS22HH_POWER_DOWN | 0x10)) != LPS22HH_OK)
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	3320      	adds	r3, #32
 80054cc:	2110      	movs	r1, #16
 80054ce:	4618      	mov	r0, r3
 80054d0:	f000 f8e8 	bl	80056a4 <lps22hh_data_rate_set>
 80054d4:	4603      	mov	r3, r0
 80054d6:	2b00      	cmp	r3, #0
 80054d8:	d002      	beq.n	80054e0 <LPS22HH_Initialize+0x40>
  {
    return LPS22HH_ERROR;
 80054da:	f04f 33ff 	mov.w	r3, #4294967295
 80054de:	e028      	b.n	8005532 <LPS22HH_Initialize+0x92>
  }

  /* Disable low-pass filter on LPS22HH pressure data */
  if (lps22hh_lp_bandwidth_set(&(pObj->Ctx), LPS22HH_LPF_ODR_DIV_2) != LPS22HH_OK)
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	3320      	adds	r3, #32
 80054e4:	2100      	movs	r1, #0
 80054e6:	4618      	mov	r0, r3
 80054e8:	f000 fa54 	bl	8005994 <lps22hh_lp_bandwidth_set>
 80054ec:	4603      	mov	r3, r0
 80054ee:	2b00      	cmp	r3, #0
 80054f0:	d002      	beq.n	80054f8 <LPS22HH_Initialize+0x58>
  {
    return LPS22HH_ERROR;
 80054f2:	f04f 33ff 	mov.w	r3, #4294967295
 80054f6:	e01c      	b.n	8005532 <LPS22HH_Initialize+0x92>
  }

  /* Set block data update mode */
  if (lps22hh_block_data_update_set(&(pObj->Ctx), PROPERTY_ENABLE) != LPS22HH_OK)
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	3320      	adds	r3, #32
 80054fc:	2101      	movs	r1, #1
 80054fe:	4618      	mov	r0, r3
 8005500:	f000 f8aa 	bl	8005658 <lps22hh_block_data_update_set>
 8005504:	4603      	mov	r3, r0
 8005506:	2b00      	cmp	r3, #0
 8005508:	d002      	beq.n	8005510 <LPS22HH_Initialize+0x70>
  {
    return LPS22HH_ERROR;
 800550a:	f04f 33ff 	mov.w	r3, #4294967295
 800550e:	e010      	b.n	8005532 <LPS22HH_Initialize+0x92>
  }

  /* Set autoincrement for multi-byte read/write */
  if (lps22hh_auto_increment_set(&(pObj->Ctx), PROPERTY_ENABLE) != LPS22HH_OK)
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	3320      	adds	r3, #32
 8005514:	2101      	movs	r1, #1
 8005516:	4618      	mov	r0, r3
 8005518:	f000 fa16 	bl	8005948 <lps22hh_auto_increment_set>
 800551c:	4603      	mov	r3, r0
 800551e:	2b00      	cmp	r3, #0
 8005520:	d002      	beq.n	8005528 <LPS22HH_Initialize+0x88>
  {
    return LPS22HH_ERROR;
 8005522:	f04f 33ff 	mov.w	r3, #4294967295
 8005526:	e004      	b.n	8005532 <LPS22HH_Initialize+0x92>
  }

  pObj->last_odr = LPS22HH_25_Hz;
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	2203      	movs	r2, #3
 800552c:	f883 2033 	strb.w	r2, [r3, #51]	@ 0x33

  return LPS22HH_OK;
 8005530:	2300      	movs	r3, #0
}
 8005532:	4618      	mov	r0, r3
 8005534:	3708      	adds	r7, #8
 8005536:	46bd      	mov	sp, r7
 8005538:	bd80      	pop	{r7, pc}

0800553a <ReadRegWrap>:
  * @param  pData the stored data pointer
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t ReadRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 800553a:	b590      	push	{r4, r7, lr}
 800553c:	b087      	sub	sp, #28
 800553e:	af00      	add	r7, sp, #0
 8005540:	60f8      	str	r0, [r7, #12]
 8005542:	607a      	str	r2, [r7, #4]
 8005544:	461a      	mov	r2, r3
 8005546:	460b      	mov	r3, r1
 8005548:	72fb      	strb	r3, [r7, #11]
 800554a:	4613      	mov	r3, r2
 800554c:	813b      	strh	r3, [r7, #8]
  LPS22HH_Object_t *pObj = (LPS22HH_Object_t *)Handle;
 800554e:	68fb      	ldr	r3, [r7, #12]
 8005550:	617b      	str	r3, [r7, #20]

  return pObj->IO.ReadReg(pObj->IO.Address, Reg, pData, Length);
 8005552:	697b      	ldr	r3, [r7, #20]
 8005554:	695c      	ldr	r4, [r3, #20]
 8005556:	697b      	ldr	r3, [r7, #20]
 8005558:	7b1b      	ldrb	r3, [r3, #12]
 800555a:	4618      	mov	r0, r3
 800555c:	7afb      	ldrb	r3, [r7, #11]
 800555e:	b299      	uxth	r1, r3
 8005560:	893b      	ldrh	r3, [r7, #8]
 8005562:	687a      	ldr	r2, [r7, #4]
 8005564:	47a0      	blx	r4
 8005566:	4603      	mov	r3, r0
}
 8005568:	4618      	mov	r0, r3
 800556a:	371c      	adds	r7, #28
 800556c:	46bd      	mov	sp, r7
 800556e:	bd90      	pop	{r4, r7, pc}

08005570 <WriteRegWrap>:
  * @param  pData the stored data pointer
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t WriteRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 8005570:	b590      	push	{r4, r7, lr}
 8005572:	b087      	sub	sp, #28
 8005574:	af00      	add	r7, sp, #0
 8005576:	60f8      	str	r0, [r7, #12]
 8005578:	607a      	str	r2, [r7, #4]
 800557a:	461a      	mov	r2, r3
 800557c:	460b      	mov	r3, r1
 800557e:	72fb      	strb	r3, [r7, #11]
 8005580:	4613      	mov	r3, r2
 8005582:	813b      	strh	r3, [r7, #8]
  LPS22HH_Object_t *pObj = (LPS22HH_Object_t *)Handle;
 8005584:	68fb      	ldr	r3, [r7, #12]
 8005586:	617b      	str	r3, [r7, #20]

  return pObj->IO.WriteReg(pObj->IO.Address, Reg, pData, Length);
 8005588:	697b      	ldr	r3, [r7, #20]
 800558a:	691c      	ldr	r4, [r3, #16]
 800558c:	697b      	ldr	r3, [r7, #20]
 800558e:	7b1b      	ldrb	r3, [r3, #12]
 8005590:	4618      	mov	r0, r3
 8005592:	7afb      	ldrb	r3, [r7, #11]
 8005594:	b299      	uxth	r1, r3
 8005596:	893b      	ldrh	r3, [r7, #8]
 8005598:	687a      	ldr	r2, [r7, #4]
 800559a:	47a0      	blx	r4
 800559c:	4603      	mov	r3, r0
}
 800559e:	4618      	mov	r0, r3
 80055a0:	371c      	adds	r7, #28
 80055a2:	46bd      	mov	sp, r7
 80055a4:	bd90      	pop	{r4, r7, pc}

080055a6 <lps22hh_read_reg>:
  *
  */
int32_t __weak lps22hh_read_reg(stmdev_ctx_t *ctx, uint8_t reg,
                                uint8_t *data,
                                uint16_t len)
{
 80055a6:	b590      	push	{r4, r7, lr}
 80055a8:	b087      	sub	sp, #28
 80055aa:	af00      	add	r7, sp, #0
 80055ac:	60f8      	str	r0, [r7, #12]
 80055ae:	607a      	str	r2, [r7, #4]
 80055b0:	461a      	mov	r2, r3
 80055b2:	460b      	mov	r3, r1
 80055b4:	72fb      	strb	r3, [r7, #11]
 80055b6:	4613      	mov	r3, r2
 80055b8:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->read_reg(ctx->handle, reg, data, len);
 80055ba:	68fb      	ldr	r3, [r7, #12]
 80055bc:	685c      	ldr	r4, [r3, #4]
 80055be:	68fb      	ldr	r3, [r7, #12]
 80055c0:	68d8      	ldr	r0, [r3, #12]
 80055c2:	893b      	ldrh	r3, [r7, #8]
 80055c4:	7af9      	ldrb	r1, [r7, #11]
 80055c6:	687a      	ldr	r2, [r7, #4]
 80055c8:	47a0      	blx	r4
 80055ca:	6178      	str	r0, [r7, #20]

  return ret;
 80055cc:	697b      	ldr	r3, [r7, #20]
}
 80055ce:	4618      	mov	r0, r3
 80055d0:	371c      	adds	r7, #28
 80055d2:	46bd      	mov	sp, r7
 80055d4:	bd90      	pop	{r4, r7, pc}

080055d6 <lps22hh_write_reg>:
  *
  */
int32_t __weak lps22hh_write_reg(stmdev_ctx_t *ctx, uint8_t reg,
                                 uint8_t *data,
                                 uint16_t len)
{
 80055d6:	b590      	push	{r4, r7, lr}
 80055d8:	b087      	sub	sp, #28
 80055da:	af00      	add	r7, sp, #0
 80055dc:	60f8      	str	r0, [r7, #12]
 80055de:	607a      	str	r2, [r7, #4]
 80055e0:	461a      	mov	r2, r3
 80055e2:	460b      	mov	r3, r1
 80055e4:	72fb      	strb	r3, [r7, #11]
 80055e6:	4613      	mov	r3, r2
 80055e8:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->write_reg(ctx->handle, reg, data, len);
 80055ea:	68fb      	ldr	r3, [r7, #12]
 80055ec:	681c      	ldr	r4, [r3, #0]
 80055ee:	68fb      	ldr	r3, [r7, #12]
 80055f0:	68d8      	ldr	r0, [r3, #12]
 80055f2:	893b      	ldrh	r3, [r7, #8]
 80055f4:	7af9      	ldrb	r1, [r7, #11]
 80055f6:	687a      	ldr	r2, [r7, #4]
 80055f8:	47a0      	blx	r4
 80055fa:	6178      	str	r0, [r7, #20]

  return ret;
 80055fc:	697b      	ldr	r3, [r7, #20]
}
 80055fe:	4618      	mov	r0, r3
 8005600:	371c      	adds	r7, #28
 8005602:	46bd      	mov	sp, r7
 8005604:	bd90      	pop	{r4, r7, pc}

08005606 <lps22hh_from_lsb_to_hpa>:
  * @brief       These functions convert raw-data into engineering units.
  * @{
  *
  */
float_t lps22hh_from_lsb_to_hpa(uint32_t lsb)
{
 8005606:	b580      	push	{r7, lr}
 8005608:	b082      	sub	sp, #8
 800560a:	af00      	add	r7, sp, #0
 800560c:	6078      	str	r0, [r7, #4]
  return ((float_t) lsb / 1048576.0f);
 800560e:	6878      	ldr	r0, [r7, #4]
 8005610:	f7fb fb08 	bl	8000c24 <__aeabi_ui2f>
 8005614:	4603      	mov	r3, r0
 8005616:	f04f 4193 	mov.w	r1, #1233125376	@ 0x49800000
 800561a:	4618      	mov	r0, r3
 800561c:	f7fb fc0e 	bl	8000e3c <__aeabi_fdiv>
 8005620:	4603      	mov	r3, r0
}
 8005622:	4618      	mov	r0, r3
 8005624:	3708      	adds	r7, #8
 8005626:	46bd      	mov	sp, r7
 8005628:	bd80      	pop	{r7, pc}
	...

0800562c <lps22hh_from_lsb_to_celsius>:

float_t lps22hh_from_lsb_to_celsius(int16_t lsb)
{
 800562c:	b580      	push	{r7, lr}
 800562e:	b082      	sub	sp, #8
 8005630:	af00      	add	r7, sp, #0
 8005632:	4603      	mov	r3, r0
 8005634:	80fb      	strh	r3, [r7, #6]
  return ((float_t) lsb / 100.0f);
 8005636:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800563a:	4618      	mov	r0, r3
 800563c:	f7fb faf6 	bl	8000c2c <__aeabi_i2f>
 8005640:	4603      	mov	r3, r0
 8005642:	4904      	ldr	r1, [pc, #16]	@ (8005654 <lps22hh_from_lsb_to_celsius+0x28>)
 8005644:	4618      	mov	r0, r3
 8005646:	f7fb fbf9 	bl	8000e3c <__aeabi_fdiv>
 800564a:	4603      	mov	r3, r0
}
 800564c:	4618      	mov	r0, r3
 800564e:	3708      	adds	r7, #8
 8005650:	46bd      	mov	sp, r7
 8005652:	bd80      	pop	{r7, pc}
 8005654:	42c80000 	.word	0x42c80000

08005658 <lps22hh_block_data_update_set>:
  * @param  val      change the values of bdu in reg CTRL_REG1
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22hh_block_data_update_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8005658:	b580      	push	{r7, lr}
 800565a:	b084      	sub	sp, #16
 800565c:	af00      	add	r7, sp, #0
 800565e:	6078      	str	r0, [r7, #4]
 8005660:	460b      	mov	r3, r1
 8005662:	70fb      	strb	r3, [r7, #3]
  lps22hh_ctrl_reg1_t reg;
  int32_t ret;

  ret = lps22hh_read_reg(ctx, LPS22HH_CTRL_REG1, (uint8_t *) &reg, 1);
 8005664:	f107 0208 	add.w	r2, r7, #8
 8005668:	2301      	movs	r3, #1
 800566a:	2110      	movs	r1, #16
 800566c:	6878      	ldr	r0, [r7, #4]
 800566e:	f7ff ff9a 	bl	80055a6 <lps22hh_read_reg>
 8005672:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8005674:	68fb      	ldr	r3, [r7, #12]
 8005676:	2b00      	cmp	r3, #0
 8005678:	d10f      	bne.n	800569a <lps22hh_block_data_update_set+0x42>
  {
    reg.bdu = val;
 800567a:	78fb      	ldrb	r3, [r7, #3]
 800567c:	f003 0301 	and.w	r3, r3, #1
 8005680:	b2da      	uxtb	r2, r3
 8005682:	7a3b      	ldrb	r3, [r7, #8]
 8005684:	f362 0341 	bfi	r3, r2, #1, #1
 8005688:	723b      	strb	r3, [r7, #8]
    ret = lps22hh_write_reg(ctx, LPS22HH_CTRL_REG1, (uint8_t *) &reg, 1);
 800568a:	f107 0208 	add.w	r2, r7, #8
 800568e:	2301      	movs	r3, #1
 8005690:	2110      	movs	r1, #16
 8005692:	6878      	ldr	r0, [r7, #4]
 8005694:	f7ff ff9f 	bl	80055d6 <lps22hh_write_reg>
 8005698:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 800569a:	68fb      	ldr	r3, [r7, #12]
}
 800569c:	4618      	mov	r0, r3
 800569e:	3710      	adds	r7, #16
 80056a0:	46bd      	mov	sp, r7
 80056a2:	bd80      	pop	{r7, pc}

080056a4 <lps22hh_data_rate_set>:
  * @param  val      change the values of odr in reg CTRL_REG1
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22hh_data_rate_set(stmdev_ctx_t *ctx, lps22hh_odr_t val)
{
 80056a4:	b580      	push	{r7, lr}
 80056a6:	b086      	sub	sp, #24
 80056a8:	af00      	add	r7, sp, #0
 80056aa:	6078      	str	r0, [r7, #4]
 80056ac:	460b      	mov	r3, r1
 80056ae:	70fb      	strb	r3, [r7, #3]
  lps22hh_ctrl_reg1_t ctrl_reg1;
  lps22hh_ctrl_reg2_t ctrl_reg2;
  int32_t ret;

  ret = lps22hh_read_reg(ctx, LPS22HH_CTRL_REG1, (uint8_t *)&ctrl_reg1, 1);
 80056b0:	f107 0210 	add.w	r2, r7, #16
 80056b4:	2301      	movs	r3, #1
 80056b6:	2110      	movs	r1, #16
 80056b8:	6878      	ldr	r0, [r7, #4]
 80056ba:	f7ff ff74 	bl	80055a6 <lps22hh_read_reg>
 80056be:	6178      	str	r0, [r7, #20]

  if (ret == 0)
 80056c0:	697b      	ldr	r3, [r7, #20]
 80056c2:	2b00      	cmp	r3, #0
 80056c4:	d107      	bne.n	80056d6 <lps22hh_data_rate_set+0x32>
  {
    ret = lps22hh_read_reg(ctx, LPS22HH_CTRL_REG2, (uint8_t *)&ctrl_reg2, 1);
 80056c6:	f107 020c 	add.w	r2, r7, #12
 80056ca:	2301      	movs	r3, #1
 80056cc:	2111      	movs	r1, #17
 80056ce:	6878      	ldr	r0, [r7, #4]
 80056d0:	f7ff ff69 	bl	80055a6 <lps22hh_read_reg>
 80056d4:	6178      	str	r0, [r7, #20]
  }

  if (ret == 0)
 80056d6:	697b      	ldr	r3, [r7, #20]
 80056d8:	2b00      	cmp	r3, #0
 80056da:	d10f      	bne.n	80056fc <lps22hh_data_rate_set+0x58>
  {
    ctrl_reg1.odr = (uint8_t)val & 0x07U;
 80056dc:	78fb      	ldrb	r3, [r7, #3]
 80056de:	f003 0307 	and.w	r3, r3, #7
 80056e2:	b2da      	uxtb	r2, r3
 80056e4:	7c3b      	ldrb	r3, [r7, #16]
 80056e6:	f362 1306 	bfi	r3, r2, #4, #3
 80056ea:	743b      	strb	r3, [r7, #16]
    ret = lps22hh_write_reg(ctx, LPS22HH_CTRL_REG1, (uint8_t *)&ctrl_reg1, 1);
 80056ec:	f107 0210 	add.w	r2, r7, #16
 80056f0:	2301      	movs	r3, #1
 80056f2:	2110      	movs	r1, #16
 80056f4:	6878      	ldr	r0, [r7, #4]
 80056f6:	f7ff ff6e 	bl	80055d6 <lps22hh_write_reg>
 80056fa:	6178      	str	r0, [r7, #20]
  }

  if (ret == 0)
 80056fc:	697b      	ldr	r3, [r7, #20]
 80056fe:	2b00      	cmp	r3, #0
 8005700:	d119      	bne.n	8005736 <lps22hh_data_rate_set+0x92>
  {
    ctrl_reg2.low_noise_en = ((uint8_t)val & 0x10U) >> 4;
 8005702:	78fb      	ldrb	r3, [r7, #3]
 8005704:	091b      	lsrs	r3, r3, #4
 8005706:	f003 0301 	and.w	r3, r3, #1
 800570a:	b2da      	uxtb	r2, r3
 800570c:	7b3b      	ldrb	r3, [r7, #12]
 800570e:	f362 0341 	bfi	r3, r2, #1, #1
 8005712:	733b      	strb	r3, [r7, #12]
    ctrl_reg2.one_shot = ((uint8_t)val & 0x08U) >> 3;
 8005714:	78fb      	ldrb	r3, [r7, #3]
 8005716:	08db      	lsrs	r3, r3, #3
 8005718:	f003 0301 	and.w	r3, r3, #1
 800571c:	b2da      	uxtb	r2, r3
 800571e:	7b3b      	ldrb	r3, [r7, #12]
 8005720:	f362 0300 	bfi	r3, r2, #0, #1
 8005724:	733b      	strb	r3, [r7, #12]
    ret = lps22hh_write_reg(ctx, LPS22HH_CTRL_REG2, (uint8_t *)&ctrl_reg2, 1);
 8005726:	f107 020c 	add.w	r2, r7, #12
 800572a:	2301      	movs	r3, #1
 800572c:	2111      	movs	r1, #17
 800572e:	6878      	ldr	r0, [r7, #4]
 8005730:	f7ff ff51 	bl	80055d6 <lps22hh_write_reg>
 8005734:	6178      	str	r0, [r7, #20]
  }

  return ret;
 8005736:	697b      	ldr	r3, [r7, #20]
}
 8005738:	4618      	mov	r0, r3
 800573a:	3718      	adds	r7, #24
 800573c:	46bd      	mov	sp, r7
 800573e:	bd80      	pop	{r7, pc}

08005740 <lps22hh_data_rate_get>:
  * @param  val      Get the values of odr in reg CTRL_REG1
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22hh_data_rate_get(stmdev_ctx_t *ctx, lps22hh_odr_t *val)
{
 8005740:	b580      	push	{r7, lr}
 8005742:	b086      	sub	sp, #24
 8005744:	af00      	add	r7, sp, #0
 8005746:	6078      	str	r0, [r7, #4]
 8005748:	6039      	str	r1, [r7, #0]
  lps22hh_ctrl_reg1_t ctrl_reg1;
  lps22hh_ctrl_reg2_t ctrl_reg2;
  int32_t ret;

  ret = lps22hh_read_reg(ctx, LPS22HH_CTRL_REG1, (uint8_t *)&ctrl_reg1, 1);
 800574a:	f107 0210 	add.w	r2, r7, #16
 800574e:	2301      	movs	r3, #1
 8005750:	2110      	movs	r1, #16
 8005752:	6878      	ldr	r0, [r7, #4]
 8005754:	f7ff ff27 	bl	80055a6 <lps22hh_read_reg>
 8005758:	6178      	str	r0, [r7, #20]

  if (ret == 0)
 800575a:	697b      	ldr	r3, [r7, #20]
 800575c:	2b00      	cmp	r3, #0
 800575e:	d107      	bne.n	8005770 <lps22hh_data_rate_get+0x30>
  {
    ret = lps22hh_read_reg(ctx, LPS22HH_CTRL_REG2, (uint8_t *)&ctrl_reg2, 1);
 8005760:	f107 020c 	add.w	r2, r7, #12
 8005764:	2301      	movs	r3, #1
 8005766:	2111      	movs	r1, #17
 8005768:	6878      	ldr	r0, [r7, #4]
 800576a:	f7ff ff1c 	bl	80055a6 <lps22hh_read_reg>
 800576e:	6178      	str	r0, [r7, #20]
  }

  if (ret == 0)
 8005770:	697b      	ldr	r3, [r7, #20]
 8005772:	2b00      	cmp	r3, #0
 8005774:	f040 8086 	bne.w	8005884 <lps22hh_data_rate_get+0x144>
  {
    ret = lps22hh_read_reg(ctx, LPS22HH_CTRL_REG2, (uint8_t *)&ctrl_reg2, 1);
 8005778:	f107 020c 	add.w	r2, r7, #12
 800577c:	2301      	movs	r3, #1
 800577e:	2111      	movs	r1, #17
 8005780:	6878      	ldr	r0, [r7, #4]
 8005782:	f7ff ff10 	bl	80055a6 <lps22hh_read_reg>
 8005786:	6178      	str	r0, [r7, #20]

    switch (((ctrl_reg2.low_noise_en << 4) + (ctrl_reg2.one_shot << 3) +
 8005788:	7b3b      	ldrb	r3, [r7, #12]
 800578a:	f3c3 0340 	ubfx	r3, r3, #1, #1
 800578e:	b2db      	uxtb	r3, r3
 8005790:	011a      	lsls	r2, r3, #4
 8005792:	7b3b      	ldrb	r3, [r7, #12]
 8005794:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8005798:	b2db      	uxtb	r3, r3
 800579a:	00db      	lsls	r3, r3, #3
 800579c:	4413      	add	r3, r2
             ctrl_reg1.odr))
 800579e:	7c3a      	ldrb	r2, [r7, #16]
 80057a0:	f3c2 1202 	ubfx	r2, r2, #4, #3
 80057a4:	b2d2      	uxtb	r2, r2
    switch (((ctrl_reg2.low_noise_en << 4) + (ctrl_reg2.one_shot << 3) +
 80057a6:	4413      	add	r3, r2
 80057a8:	2b15      	cmp	r3, #21
 80057aa:	d867      	bhi.n	800587c <lps22hh_data_rate_get+0x13c>
 80057ac:	a201      	add	r2, pc, #4	@ (adr r2, 80057b4 <lps22hh_data_rate_get+0x74>)
 80057ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80057b2:	bf00      	nop
 80057b4:	0800580d 	.word	0x0800580d
 80057b8:	0800581d 	.word	0x0800581d
 80057bc:	08005825 	.word	0x08005825
 80057c0:	0800582d 	.word	0x0800582d
 80057c4:	08005835 	.word	0x08005835
 80057c8:	0800583d 	.word	0x0800583d
 80057cc:	0800586d 	.word	0x0800586d
 80057d0:	08005875 	.word	0x08005875
 80057d4:	08005815 	.word	0x08005815
 80057d8:	0800587d 	.word	0x0800587d
 80057dc:	0800587d 	.word	0x0800587d
 80057e0:	0800587d 	.word	0x0800587d
 80057e4:	0800587d 	.word	0x0800587d
 80057e8:	0800587d 	.word	0x0800587d
 80057ec:	0800587d 	.word	0x0800587d
 80057f0:	0800587d 	.word	0x0800587d
 80057f4:	0800587d 	.word	0x0800587d
 80057f8:	08005845 	.word	0x08005845
 80057fc:	0800584d 	.word	0x0800584d
 8005800:	08005855 	.word	0x08005855
 8005804:	0800585d 	.word	0x0800585d
 8005808:	08005865 	.word	0x08005865
    {
      case LPS22HH_POWER_DOWN:
        *val = LPS22HH_POWER_DOWN;
 800580c:	683b      	ldr	r3, [r7, #0]
 800580e:	2200      	movs	r2, #0
 8005810:	701a      	strb	r2, [r3, #0]
        break;
 8005812:	e037      	b.n	8005884 <lps22hh_data_rate_get+0x144>

      case LPS22HH_ONE_SHOOT:
        *val = LPS22HH_ONE_SHOOT;
 8005814:	683b      	ldr	r3, [r7, #0]
 8005816:	2208      	movs	r2, #8
 8005818:	701a      	strb	r2, [r3, #0]
        break;
 800581a:	e033      	b.n	8005884 <lps22hh_data_rate_get+0x144>

      case LPS22HH_1_Hz:
        *val = LPS22HH_1_Hz;
 800581c:	683b      	ldr	r3, [r7, #0]
 800581e:	2201      	movs	r2, #1
 8005820:	701a      	strb	r2, [r3, #0]
        break;
 8005822:	e02f      	b.n	8005884 <lps22hh_data_rate_get+0x144>

      case LPS22HH_10_Hz:
        *val = LPS22HH_10_Hz;
 8005824:	683b      	ldr	r3, [r7, #0]
 8005826:	2202      	movs	r2, #2
 8005828:	701a      	strb	r2, [r3, #0]
        break;
 800582a:	e02b      	b.n	8005884 <lps22hh_data_rate_get+0x144>

      case LPS22HH_25_Hz:
        *val = LPS22HH_25_Hz;
 800582c:	683b      	ldr	r3, [r7, #0]
 800582e:	2203      	movs	r2, #3
 8005830:	701a      	strb	r2, [r3, #0]
        break;
 8005832:	e027      	b.n	8005884 <lps22hh_data_rate_get+0x144>

      case LPS22HH_50_Hz:
        *val = LPS22HH_50_Hz;
 8005834:	683b      	ldr	r3, [r7, #0]
 8005836:	2204      	movs	r2, #4
 8005838:	701a      	strb	r2, [r3, #0]
        break;
 800583a:	e023      	b.n	8005884 <lps22hh_data_rate_get+0x144>

      case LPS22HH_75_Hz:
        *val = LPS22HH_75_Hz;
 800583c:	683b      	ldr	r3, [r7, #0]
 800583e:	2205      	movs	r2, #5
 8005840:	701a      	strb	r2, [r3, #0]
        break;
 8005842:	e01f      	b.n	8005884 <lps22hh_data_rate_get+0x144>

      case LPS22HH_1_Hz_LOW_NOISE:
        *val = LPS22HH_1_Hz_LOW_NOISE;
 8005844:	683b      	ldr	r3, [r7, #0]
 8005846:	2211      	movs	r2, #17
 8005848:	701a      	strb	r2, [r3, #0]
        break;
 800584a:	e01b      	b.n	8005884 <lps22hh_data_rate_get+0x144>

      case LPS22HH_10_Hz_LOW_NOISE:
        *val = LPS22HH_10_Hz_LOW_NOISE;
 800584c:	683b      	ldr	r3, [r7, #0]
 800584e:	2212      	movs	r2, #18
 8005850:	701a      	strb	r2, [r3, #0]
        break;
 8005852:	e017      	b.n	8005884 <lps22hh_data_rate_get+0x144>

      case LPS22HH_25_Hz_LOW_NOISE:
        *val = LPS22HH_25_Hz_LOW_NOISE;
 8005854:	683b      	ldr	r3, [r7, #0]
 8005856:	2213      	movs	r2, #19
 8005858:	701a      	strb	r2, [r3, #0]
        break;
 800585a:	e013      	b.n	8005884 <lps22hh_data_rate_get+0x144>

      case LPS22HH_50_Hz_LOW_NOISE:
        *val = LPS22HH_50_Hz_LOW_NOISE;
 800585c:	683b      	ldr	r3, [r7, #0]
 800585e:	2214      	movs	r2, #20
 8005860:	701a      	strb	r2, [r3, #0]
        break;
 8005862:	e00f      	b.n	8005884 <lps22hh_data_rate_get+0x144>

      case LPS22HH_75_Hz_LOW_NOISE:
        *val = LPS22HH_75_Hz_LOW_NOISE;
 8005864:	683b      	ldr	r3, [r7, #0]
 8005866:	2215      	movs	r2, #21
 8005868:	701a      	strb	r2, [r3, #0]
        break;
 800586a:	e00b      	b.n	8005884 <lps22hh_data_rate_get+0x144>

      case LPS22HH_100_Hz:
        *val = LPS22HH_100_Hz;
 800586c:	683b      	ldr	r3, [r7, #0]
 800586e:	2206      	movs	r2, #6
 8005870:	701a      	strb	r2, [r3, #0]
        break;
 8005872:	e007      	b.n	8005884 <lps22hh_data_rate_get+0x144>

      case LPS22HH_200_Hz:
        *val = LPS22HH_200_Hz;
 8005874:	683b      	ldr	r3, [r7, #0]
 8005876:	2207      	movs	r2, #7
 8005878:	701a      	strb	r2, [r3, #0]
        break;
 800587a:	e003      	b.n	8005884 <lps22hh_data_rate_get+0x144>

      default:
        *val = LPS22HH_POWER_DOWN;
 800587c:	683b      	ldr	r3, [r7, #0]
 800587e:	2200      	movs	r2, #0
 8005880:	701a      	strb	r2, [r3, #0]
        break;
 8005882:	bf00      	nop
    }
  }

  return ret;
 8005884:	697b      	ldr	r3, [r7, #20]
}
 8005886:	4618      	mov	r0, r3
 8005888:	3718      	adds	r7, #24
 800588a:	46bd      	mov	sp, r7
 800588c:	bd80      	pop	{r7, pc}
 800588e:	bf00      	nop

08005890 <lps22hh_pressure_raw_get>:
  * @param  buff     buffer that stores data read
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22hh_pressure_raw_get(stmdev_ctx_t *ctx, uint32_t *buff)
{
 8005890:	b580      	push	{r7, lr}
 8005892:	b084      	sub	sp, #16
 8005894:	af00      	add	r7, sp, #0
 8005896:	6078      	str	r0, [r7, #4]
 8005898:	6039      	str	r1, [r7, #0]
  int32_t ret;

  uint8_t reg[3];
  ret =  lps22hh_read_reg(ctx, LPS22HH_PRESS_OUT_XL, reg, 3);
 800589a:	f107 0208 	add.w	r2, r7, #8
 800589e:	2303      	movs	r3, #3
 80058a0:	2128      	movs	r1, #40	@ 0x28
 80058a2:	6878      	ldr	r0, [r7, #4]
 80058a4:	f7ff fe7f 	bl	80055a6 <lps22hh_read_reg>
 80058a8:	60f8      	str	r0, [r7, #12]
  *buff = reg[2];
 80058aa:	7abb      	ldrb	r3, [r7, #10]
 80058ac:	461a      	mov	r2, r3
 80058ae:	683b      	ldr	r3, [r7, #0]
 80058b0:	601a      	str	r2, [r3, #0]
  *buff = (*buff * 256) + reg[1];
 80058b2:	683b      	ldr	r3, [r7, #0]
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	021b      	lsls	r3, r3, #8
 80058b8:	7a7a      	ldrb	r2, [r7, #9]
 80058ba:	441a      	add	r2, r3
 80058bc:	683b      	ldr	r3, [r7, #0]
 80058be:	601a      	str	r2, [r3, #0]
  *buff = (*buff * 256) + reg[0];
 80058c0:	683b      	ldr	r3, [r7, #0]
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	021b      	lsls	r3, r3, #8
 80058c6:	7a3a      	ldrb	r2, [r7, #8]
 80058c8:	441a      	add	r2, r3
 80058ca:	683b      	ldr	r3, [r7, #0]
 80058cc:	601a      	str	r2, [r3, #0]
  *buff *= 256;
 80058ce:	683b      	ldr	r3, [r7, #0]
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	021a      	lsls	r2, r3, #8
 80058d4:	683b      	ldr	r3, [r7, #0]
 80058d6:	601a      	str	r2, [r3, #0]

  return ret;
 80058d8:	68fb      	ldr	r3, [r7, #12]
}
 80058da:	4618      	mov	r0, r3
 80058dc:	3710      	adds	r7, #16
 80058de:	46bd      	mov	sp, r7
 80058e0:	bd80      	pop	{r7, pc}

080058e2 <lps22hh_temperature_raw_get>:
  * @param  buff     buffer that stores data read
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22hh_temperature_raw_get(stmdev_ctx_t *ctx, int16_t *buff)
{
 80058e2:	b580      	push	{r7, lr}
 80058e4:	b084      	sub	sp, #16
 80058e6:	af00      	add	r7, sp, #0
 80058e8:	6078      	str	r0, [r7, #4]
 80058ea:	6039      	str	r1, [r7, #0]
  int32_t ret;

  uint8_t reg[2];
  ret =  lps22hh_read_reg(ctx, LPS22HH_TEMP_OUT_L, reg, 2);
 80058ec:	f107 0208 	add.w	r2, r7, #8
 80058f0:	2302      	movs	r3, #2
 80058f2:	212b      	movs	r1, #43	@ 0x2b
 80058f4:	6878      	ldr	r0, [r7, #4]
 80058f6:	f7ff fe56 	bl	80055a6 <lps22hh_read_reg>
 80058fa:	60f8      	str	r0, [r7, #12]
  *buff = reg[1];
 80058fc:	7a7b      	ldrb	r3, [r7, #9]
 80058fe:	b21a      	sxth	r2, r3
 8005900:	683b      	ldr	r3, [r7, #0]
 8005902:	801a      	strh	r2, [r3, #0]
  *buff = (*buff * 256) + reg[0];
 8005904:	683b      	ldr	r3, [r7, #0]
 8005906:	f9b3 3000 	ldrsh.w	r3, [r3]
 800590a:	b29b      	uxth	r3, r3
 800590c:	021b      	lsls	r3, r3, #8
 800590e:	b29b      	uxth	r3, r3
 8005910:	7a3a      	ldrb	r2, [r7, #8]
 8005912:	4413      	add	r3, r2
 8005914:	b29b      	uxth	r3, r3
 8005916:	b21a      	sxth	r2, r3
 8005918:	683b      	ldr	r3, [r7, #0]
 800591a:	801a      	strh	r2, [r3, #0]

  return ret;
 800591c:	68fb      	ldr	r3, [r7, #12]
}
 800591e:	4618      	mov	r0, r3
 8005920:	3710      	adds	r7, #16
 8005922:	46bd      	mov	sp, r7
 8005924:	bd80      	pop	{r7, pc}

08005926 <lps22hh_device_id_get>:
  * @param  buff     buffer that stores data read
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22hh_device_id_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 8005926:	b580      	push	{r7, lr}
 8005928:	b084      	sub	sp, #16
 800592a:	af00      	add	r7, sp, #0
 800592c:	6078      	str	r0, [r7, #4]
 800592e:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret =  lps22hh_read_reg(ctx, LPS22HH_WHO_AM_I, buff, 1);
 8005930:	2301      	movs	r3, #1
 8005932:	683a      	ldr	r2, [r7, #0]
 8005934:	210f      	movs	r1, #15
 8005936:	6878      	ldr	r0, [r7, #4]
 8005938:	f7ff fe35 	bl	80055a6 <lps22hh_read_reg>
 800593c:	60f8      	str	r0, [r7, #12]

  return ret;
 800593e:	68fb      	ldr	r3, [r7, #12]
}
 8005940:	4618      	mov	r0, r3
 8005942:	3710      	adds	r7, #16
 8005944:	46bd      	mov	sp, r7
 8005946:	bd80      	pop	{r7, pc}

08005948 <lps22hh_auto_increment_set>:
  * @param  val      change the values of if_add_inc in reg CTRL_REG2
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22hh_auto_increment_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8005948:	b580      	push	{r7, lr}
 800594a:	b084      	sub	sp, #16
 800594c:	af00      	add	r7, sp, #0
 800594e:	6078      	str	r0, [r7, #4]
 8005950:	460b      	mov	r3, r1
 8005952:	70fb      	strb	r3, [r7, #3]
  lps22hh_ctrl_reg2_t reg;
  int32_t ret;

  ret = lps22hh_read_reg(ctx, LPS22HH_CTRL_REG2, (uint8_t *) &reg, 1);
 8005954:	f107 0208 	add.w	r2, r7, #8
 8005958:	2301      	movs	r3, #1
 800595a:	2111      	movs	r1, #17
 800595c:	6878      	ldr	r0, [r7, #4]
 800595e:	f7ff fe22 	bl	80055a6 <lps22hh_read_reg>
 8005962:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8005964:	68fb      	ldr	r3, [r7, #12]
 8005966:	2b00      	cmp	r3, #0
 8005968:	d10f      	bne.n	800598a <lps22hh_auto_increment_set+0x42>
  {
    reg.if_add_inc = val;
 800596a:	78fb      	ldrb	r3, [r7, #3]
 800596c:	f003 0301 	and.w	r3, r3, #1
 8005970:	b2da      	uxtb	r2, r3
 8005972:	7a3b      	ldrb	r3, [r7, #8]
 8005974:	f362 1304 	bfi	r3, r2, #4, #1
 8005978:	723b      	strb	r3, [r7, #8]
    ret = lps22hh_write_reg(ctx, LPS22HH_CTRL_REG2, (uint8_t *) &reg, 1);
 800597a:	f107 0208 	add.w	r2, r7, #8
 800597e:	2301      	movs	r3, #1
 8005980:	2111      	movs	r1, #17
 8005982:	6878      	ldr	r0, [r7, #4]
 8005984:	f7ff fe27 	bl	80055d6 <lps22hh_write_reg>
 8005988:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 800598a:	68fb      	ldr	r3, [r7, #12]
}
 800598c:	4618      	mov	r0, r3
 800598e:	3710      	adds	r7, #16
 8005990:	46bd      	mov	sp, r7
 8005992:	bd80      	pop	{r7, pc}

08005994 <lps22hh_lp_bandwidth_set>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22hh_lp_bandwidth_set(stmdev_ctx_t *ctx,
                                 lps22hh_lpfp_cfg_t val)
{
 8005994:	b580      	push	{r7, lr}
 8005996:	b084      	sub	sp, #16
 8005998:	af00      	add	r7, sp, #0
 800599a:	6078      	str	r0, [r7, #4]
 800599c:	460b      	mov	r3, r1
 800599e:	70fb      	strb	r3, [r7, #3]
  lps22hh_ctrl_reg1_t reg;
  int32_t ret;

  ret = lps22hh_read_reg(ctx, LPS22HH_CTRL_REG1, (uint8_t *) &reg, 1);
 80059a0:	f107 0208 	add.w	r2, r7, #8
 80059a4:	2301      	movs	r3, #1
 80059a6:	2110      	movs	r1, #16
 80059a8:	6878      	ldr	r0, [r7, #4]
 80059aa:	f7ff fdfc 	bl	80055a6 <lps22hh_read_reg>
 80059ae:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 80059b0:	68fb      	ldr	r3, [r7, #12]
 80059b2:	2b00      	cmp	r3, #0
 80059b4:	d10f      	bne.n	80059d6 <lps22hh_lp_bandwidth_set+0x42>
  {
    reg.lpfp_cfg = (uint8_t)val;
 80059b6:	78fb      	ldrb	r3, [r7, #3]
 80059b8:	f003 0303 	and.w	r3, r3, #3
 80059bc:	b2da      	uxtb	r2, r3
 80059be:	7a3b      	ldrb	r3, [r7, #8]
 80059c0:	f362 0383 	bfi	r3, r2, #2, #2
 80059c4:	723b      	strb	r3, [r7, #8]
    ret = lps22hh_write_reg(ctx, LPS22HH_CTRL_REG1, (uint8_t *) &reg, 1);
 80059c6:	f107 0208 	add.w	r2, r7, #8
 80059ca:	2301      	movs	r3, #1
 80059cc:	2110      	movs	r1, #16
 80059ce:	6878      	ldr	r0, [r7, #4]
 80059d0:	f7ff fe01 	bl	80055d6 <lps22hh_write_reg>
 80059d4:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 80059d6:	68fb      	ldr	r3, [r7, #12]
}
 80059d8:	4618      	mov	r0, r3
 80059da:	3710      	adds	r7, #16
 80059dc:	46bd      	mov	sp, r7
 80059de:	bd80      	pop	{r7, pc}

080059e0 <lps22hh_i3c_interface_set>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22hh_i3c_interface_set(stmdev_ctx_t *ctx,
                                  lps22hh_i3c_disable_t val)
{
 80059e0:	b580      	push	{r7, lr}
 80059e2:	b084      	sub	sp, #16
 80059e4:	af00      	add	r7, sp, #0
 80059e6:	6078      	str	r0, [r7, #4]
 80059e8:	460b      	mov	r3, r1
 80059ea:	70fb      	strb	r3, [r7, #3]
  lps22hh_if_ctrl_t reg;
  int32_t ret;

  ret = lps22hh_read_reg(ctx, LPS22HH_IF_CTRL, (uint8_t *) &reg, 1);
 80059ec:	f107 0208 	add.w	r2, r7, #8
 80059f0:	2301      	movs	r3, #1
 80059f2:	210e      	movs	r1, #14
 80059f4:	6878      	ldr	r0, [r7, #4]
 80059f6:	f7ff fdd6 	bl	80055a6 <lps22hh_read_reg>
 80059fa:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 80059fc:	68fb      	ldr	r3, [r7, #12]
 80059fe:	2b00      	cmp	r3, #0
 8005a00:	d118      	bne.n	8005a34 <lps22hh_i3c_interface_set+0x54>
  {
    reg.i3c_disable = ((uint8_t)val & 0x01u);
 8005a02:	78fb      	ldrb	r3, [r7, #3]
 8005a04:	f003 0301 	and.w	r3, r3, #1
 8005a08:	b2da      	uxtb	r2, r3
 8005a0a:	7a3b      	ldrb	r3, [r7, #8]
 8005a0c:	f362 0341 	bfi	r3, r2, #1, #1
 8005a10:	723b      	strb	r3, [r7, #8]
    reg.int_en_i3c = ((uint8_t)val & 0x10U) >> 4;
 8005a12:	78fb      	ldrb	r3, [r7, #3]
 8005a14:	091b      	lsrs	r3, r3, #4
 8005a16:	f003 0301 	and.w	r3, r3, #1
 8005a1a:	b2da      	uxtb	r2, r3
 8005a1c:	7a3b      	ldrb	r3, [r7, #8]
 8005a1e:	f362 13c7 	bfi	r3, r2, #7, #1
 8005a22:	723b      	strb	r3, [r7, #8]
    ret = lps22hh_write_reg(ctx, LPS22HH_IF_CTRL, (uint8_t *) &reg, 1);
 8005a24:	f107 0208 	add.w	r2, r7, #8
 8005a28:	2301      	movs	r3, #1
 8005a2a:	210e      	movs	r1, #14
 8005a2c:	6878      	ldr	r0, [r7, #4]
 8005a2e:	f7ff fdd2 	bl	80055d6 <lps22hh_write_reg>
 8005a32:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8005a34:	68fb      	ldr	r3, [r7, #12]
}
 8005a36:	4618      	mov	r0, r3
 8005a38:	3710      	adds	r7, #16
 8005a3a:	46bd      	mov	sp, r7
 8005a3c:	bd80      	pop	{r7, pc}
	...

08005a40 <LSM6DSO_RegisterBusIO>:
  * @brief  Register Component Bus IO operations
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_RegisterBusIO(LSM6DSO_Object_t *pObj, LSM6DSO_IO_t *pIO)
{
 8005a40:	b580      	push	{r7, lr}
 8005a42:	b084      	sub	sp, #16
 8005a44:	af00      	add	r7, sp, #0
 8005a46:	6078      	str	r0, [r7, #4]
 8005a48:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSO_OK;
 8005a4a:	2300      	movs	r3, #0
 8005a4c:	60fb      	str	r3, [r7, #12]

  if (pObj == NULL)
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	2b00      	cmp	r3, #0
 8005a52:	d103      	bne.n	8005a5c <LSM6DSO_RegisterBusIO+0x1c>
  {
    ret = LSM6DSO_ERROR;
 8005a54:	f04f 33ff 	mov.w	r3, #4294967295
 8005a58:	60fb      	str	r3, [r7, #12]
 8005a5a:	e051      	b.n	8005b00 <LSM6DSO_RegisterBusIO+0xc0>
  }
  else
  {
    pObj->IO.Init      = pIO->Init;
 8005a5c:	683b      	ldr	r3, [r7, #0]
 8005a5e:	681a      	ldr	r2, [r3, #0]
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	601a      	str	r2, [r3, #0]
    pObj->IO.DeInit    = pIO->DeInit;
 8005a64:	683b      	ldr	r3, [r7, #0]
 8005a66:	685a      	ldr	r2, [r3, #4]
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	605a      	str	r2, [r3, #4]
    pObj->IO.BusType   = pIO->BusType;
 8005a6c:	683b      	ldr	r3, [r7, #0]
 8005a6e:	689a      	ldr	r2, [r3, #8]
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	609a      	str	r2, [r3, #8]
    pObj->IO.Address   = pIO->Address;
 8005a74:	683b      	ldr	r3, [r7, #0]
 8005a76:	7b1a      	ldrb	r2, [r3, #12]
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	731a      	strb	r2, [r3, #12]
    pObj->IO.WriteReg  = pIO->WriteReg;
 8005a7c:	683b      	ldr	r3, [r7, #0]
 8005a7e:	691a      	ldr	r2, [r3, #16]
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	611a      	str	r2, [r3, #16]
    pObj->IO.ReadReg   = pIO->ReadReg;
 8005a84:	683b      	ldr	r3, [r7, #0]
 8005a86:	695a      	ldr	r2, [r3, #20]
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	615a      	str	r2, [r3, #20]
    pObj->IO.GetTick   = pIO->GetTick;
 8005a8c:	683b      	ldr	r3, [r7, #0]
 8005a8e:	699a      	ldr	r2, [r3, #24]
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	619a      	str	r2, [r3, #24]

    pObj->Ctx.read_reg  = ReadRegWrap;
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	4a1d      	ldr	r2, [pc, #116]	@ (8005b0c <LSM6DSO_RegisterBusIO+0xcc>)
 8005a98:	625a      	str	r2, [r3, #36]	@ 0x24
    pObj->Ctx.write_reg = WriteRegWrap;
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	4a1c      	ldr	r2, [pc, #112]	@ (8005b10 <LSM6DSO_RegisterBusIO+0xd0>)
 8005a9e:	621a      	str	r2, [r3, #32]
    pObj->Ctx.mdelay    = pIO->Delay;
 8005aa0:	683b      	ldr	r3, [r7, #0]
 8005aa2:	69da      	ldr	r2, [r3, #28]
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	629a      	str	r2, [r3, #40]	@ 0x28
    pObj->Ctx.handle   = pObj;
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	687a      	ldr	r2, [r7, #4]
 8005aac:	62da      	str	r2, [r3, #44]	@ 0x2c

    if (pObj->IO.Init == NULL)
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	681b      	ldr	r3, [r3, #0]
 8005ab2:	2b00      	cmp	r3, #0
 8005ab4:	d103      	bne.n	8005abe <LSM6DSO_RegisterBusIO+0x7e>
    {
      ret = LSM6DSO_ERROR;
 8005ab6:	f04f 33ff 	mov.w	r3, #4294967295
 8005aba:	60fb      	str	r3, [r7, #12]
 8005abc:	e020      	b.n	8005b00 <LSM6DSO_RegisterBusIO+0xc0>
    }
    else if (pObj->IO.Init() != LSM6DSO_OK)
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	4798      	blx	r3
 8005ac4:	4603      	mov	r3, r0
 8005ac6:	2b00      	cmp	r3, #0
 8005ac8:	d003      	beq.n	8005ad2 <LSM6DSO_RegisterBusIO+0x92>
    {
      ret = LSM6DSO_ERROR;
 8005aca:	f04f 33ff 	mov.w	r3, #4294967295
 8005ace:	60fb      	str	r3, [r7, #12]
 8005ad0:	e016      	b.n	8005b00 <LSM6DSO_RegisterBusIO+0xc0>
    }
    else
    {
      if (pObj->IO.BusType == LSM6DSO_SPI_3WIRES_BUS) /* SPI 3-Wires */
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	689b      	ldr	r3, [r3, #8]
 8005ad6:	2b02      	cmp	r3, #2
 8005ad8:	d112      	bne.n	8005b00 <LSM6DSO_RegisterBusIO+0xc0>
      {
        /* Enable the SPI 3-Wires support only the first time */
        if (pObj->is_initialized == 0U)
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8005ae0:	2b00      	cmp	r3, #0
 8005ae2:	d10d      	bne.n	8005b00 <LSM6DSO_RegisterBusIO+0xc0>
        {
          /* Enable SPI 3-Wires on the component */
          uint8_t data = 0x0C;
 8005ae4:	230c      	movs	r3, #12
 8005ae6:	72fb      	strb	r3, [r7, #11]

          if (LSM6DSO_Write_Reg(pObj, LSM6DSO_CTRL3_C, data) != LSM6DSO_OK)
 8005ae8:	7afb      	ldrb	r3, [r7, #11]
 8005aea:	461a      	mov	r2, r3
 8005aec:	2112      	movs	r1, #18
 8005aee:	6878      	ldr	r0, [r7, #4]
 8005af0:	f000 ff62 	bl	80069b8 <LSM6DSO_Write_Reg>
 8005af4:	4603      	mov	r3, r0
 8005af6:	2b00      	cmp	r3, #0
 8005af8:	d002      	beq.n	8005b00 <LSM6DSO_RegisterBusIO+0xc0>
          {
            ret = LSM6DSO_ERROR;
 8005afa:	f04f 33ff 	mov.w	r3, #4294967295
 8005afe:	60fb      	str	r3, [r7, #12]
        }
      }
    }
  }

  return ret;
 8005b00:	68fb      	ldr	r3, [r7, #12]
}
 8005b02:	4618      	mov	r0, r3
 8005b04:	3710      	adds	r7, #16
 8005b06:	46bd      	mov	sp, r7
 8005b08:	bd80      	pop	{r7, pc}
 8005b0a:	bf00      	nop
 8005b0c:	08006e21 	.word	0x08006e21
 8005b10:	08006e57 	.word	0x08006e57

08005b14 <LSM6DSO_Init>:
  * @brief  Initialize the LSM6DSO sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_Init(LSM6DSO_Object_t *pObj)
{
 8005b14:	b580      	push	{r7, lr}
 8005b16:	b082      	sub	sp, #8
 8005b18:	af00      	add	r7, sp, #0
 8005b1a:	6078      	str	r0, [r7, #4]
  if(pObj->IO.BusType != LSM6DSO_I3C_BUS)
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	689b      	ldr	r3, [r3, #8]
 8005b20:	2b03      	cmp	r3, #3
 8005b22:	d00b      	beq.n	8005b3c <LSM6DSO_Init+0x28>
  {
    /* Disable I3C */
    if (lsm6dso_i3c_disable_set(&(pObj->Ctx), LSM6DSO_I3C_DISABLE) != LSM6DSO_OK)
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	3320      	adds	r3, #32
 8005b28:	2180      	movs	r1, #128	@ 0x80
 8005b2a:	4618      	mov	r0, r3
 8005b2c:	f001 fe6c 	bl	8007808 <lsm6dso_i3c_disable_set>
 8005b30:	4603      	mov	r3, r0
 8005b32:	2b00      	cmp	r3, #0
 8005b34:	d002      	beq.n	8005b3c <LSM6DSO_Init+0x28>
    {
      return LSM6DSO_ERROR;
 8005b36:	f04f 33ff 	mov.w	r3, #4294967295
 8005b3a:	e06a      	b.n	8005c12 <LSM6DSO_Init+0xfe>
    }
  }

  /* Set main memory bank */
  if (LSM6DSO_Set_Mem_Bank(pObj, (uint8_t)LSM6DSO_USER_BANK) != LSM6DSO_OK)
 8005b3c:	2100      	movs	r1, #0
 8005b3e:	6878      	ldr	r0, [r7, #4]
 8005b40:	f000 ff55 	bl	80069ee <LSM6DSO_Set_Mem_Bank>
 8005b44:	4603      	mov	r3, r0
 8005b46:	2b00      	cmp	r3, #0
 8005b48:	d002      	beq.n	8005b50 <LSM6DSO_Init+0x3c>
  {
    return LSM6DSO_ERROR;
 8005b4a:	f04f 33ff 	mov.w	r3, #4294967295
 8005b4e:	e060      	b.n	8005c12 <LSM6DSO_Init+0xfe>
  }

  /* Enable register address automatically incremented during a multiple byte
  access with a serial interface. */
  if (lsm6dso_auto_increment_set(&(pObj->Ctx), PROPERTY_ENABLE) != LSM6DSO_OK)
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	3320      	adds	r3, #32
 8005b54:	2101      	movs	r1, #1
 8005b56:	4618      	mov	r0, r3
 8005b58:	f001 fe30 	bl	80077bc <lsm6dso_auto_increment_set>
 8005b5c:	4603      	mov	r3, r0
 8005b5e:	2b00      	cmp	r3, #0
 8005b60:	d002      	beq.n	8005b68 <LSM6DSO_Init+0x54>
  {
    return LSM6DSO_ERROR;
 8005b62:	f04f 33ff 	mov.w	r3, #4294967295
 8005b66:	e054      	b.n	8005c12 <LSM6DSO_Init+0xfe>
  }

  /* Enable BDU */
  if (lsm6dso_block_data_update_set(&(pObj->Ctx), PROPERTY_ENABLE) != LSM6DSO_OK)
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	3320      	adds	r3, #32
 8005b6c:	2101      	movs	r1, #1
 8005b6e:	4618      	mov	r0, r3
 8005b70:	f001 fd40 	bl	80075f4 <lsm6dso_block_data_update_set>
 8005b74:	4603      	mov	r3, r0
 8005b76:	2b00      	cmp	r3, #0
 8005b78:	d002      	beq.n	8005b80 <LSM6DSO_Init+0x6c>
  {
    return LSM6DSO_ERROR;
 8005b7a:	f04f 33ff 	mov.w	r3, #4294967295
 8005b7e:	e048      	b.n	8005c12 <LSM6DSO_Init+0xfe>
  }

  /* FIFO mode selection */
  if (lsm6dso_fifo_mode_set(&(pObj->Ctx), LSM6DSO_BYPASS_MODE) != LSM6DSO_OK)
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	3320      	adds	r3, #32
 8005b84:	2100      	movs	r1, #0
 8005b86:	4618      	mov	r0, r3
 8005b88:	f001 fe86 	bl	8007898 <lsm6dso_fifo_mode_set>
 8005b8c:	4603      	mov	r3, r0
 8005b8e:	2b00      	cmp	r3, #0
 8005b90:	d002      	beq.n	8005b98 <LSM6DSO_Init+0x84>
  {
    return LSM6DSO_ERROR;
 8005b92:	f04f 33ff 	mov.w	r3, #4294967295
 8005b96:	e03c      	b.n	8005c12 <LSM6DSO_Init+0xfe>
  }

  /* Select default output data rate. */
  pObj->acc_odr = LSM6DSO_XL_ODR_104Hz;
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	2204      	movs	r2, #4
 8005b9c:	f883 2033 	strb.w	r2, [r3, #51]	@ 0x33

  /* Output data rate selection - power down. */
  if (lsm6dso_xl_data_rate_set(&(pObj->Ctx), LSM6DSO_XL_ODR_OFF) != LSM6DSO_OK)
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	3320      	adds	r3, #32
 8005ba4:	2100      	movs	r1, #0
 8005ba6:	4618      	mov	r0, r3
 8005ba8:	f001 f9fe 	bl	8006fa8 <lsm6dso_xl_data_rate_set>
 8005bac:	4603      	mov	r3, r0
 8005bae:	2b00      	cmp	r3, #0
 8005bb0:	d002      	beq.n	8005bb8 <LSM6DSO_Init+0xa4>
  {
    return LSM6DSO_ERROR;
 8005bb2:	f04f 33ff 	mov.w	r3, #4294967295
 8005bb6:	e02c      	b.n	8005c12 <LSM6DSO_Init+0xfe>
  }

  /* Full scale selection. */
  if (lsm6dso_xl_full_scale_set(&(pObj->Ctx), LSM6DSO_2g) != LSM6DSO_OK)
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	3320      	adds	r3, #32
 8005bbc:	2100      	movs	r1, #0
 8005bbe:	4618      	mov	r0, r3
 8005bc0:	f001 f994 	bl	8006eec <lsm6dso_xl_full_scale_set>
 8005bc4:	4603      	mov	r3, r0
 8005bc6:	2b00      	cmp	r3, #0
 8005bc8:	d002      	beq.n	8005bd0 <LSM6DSO_Init+0xbc>
  {
    return LSM6DSO_ERROR;
 8005bca:	f04f 33ff 	mov.w	r3, #4294967295
 8005bce:	e020      	b.n	8005c12 <LSM6DSO_Init+0xfe>
  }

  /* Select default output data rate. */
  pObj->gyro_odr = LSM6DSO_GY_ODR_104Hz;
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	2204      	movs	r2, #4
 8005bd4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  /* Output data rate selection - power down. */
  if (lsm6dso_gy_data_rate_set(&(pObj->Ctx), LSM6DSO_GY_ODR_OFF) != LSM6DSO_OK)
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	3320      	adds	r3, #32
 8005bdc:	2100      	movs	r1, #0
 8005bde:	4618      	mov	r0, r3
 8005be0:	f001 fbac 	bl	800733c <lsm6dso_gy_data_rate_set>
 8005be4:	4603      	mov	r3, r0
 8005be6:	2b00      	cmp	r3, #0
 8005be8:	d002      	beq.n	8005bf0 <LSM6DSO_Init+0xdc>
  {
    return LSM6DSO_ERROR;
 8005bea:	f04f 33ff 	mov.w	r3, #4294967295
 8005bee:	e010      	b.n	8005c12 <LSM6DSO_Init+0xfe>
  }

  /* Full scale selection. */
  if (lsm6dso_gy_full_scale_set(&(pObj->Ctx), LSM6DSO_2000dps) != LSM6DSO_OK)
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	3320      	adds	r3, #32
 8005bf4:	2106      	movs	r1, #6
 8005bf6:	4618      	mov	r0, r3
 8005bf8:	f001 fb38 	bl	800726c <lsm6dso_gy_full_scale_set>
 8005bfc:	4603      	mov	r3, r0
 8005bfe:	2b00      	cmp	r3, #0
 8005c00:	d002      	beq.n	8005c08 <LSM6DSO_Init+0xf4>
  {
    return LSM6DSO_ERROR;
 8005c02:	f04f 33ff 	mov.w	r3, #4294967295
 8005c06:	e004      	b.n	8005c12 <LSM6DSO_Init+0xfe>
  }

  pObj->is_initialized = 1;
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	2201      	movs	r2, #1
 8005c0c:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  return LSM6DSO_OK;
 8005c10:	2300      	movs	r3, #0
}
 8005c12:	4618      	mov	r0, r3
 8005c14:	3708      	adds	r7, #8
 8005c16:	46bd      	mov	sp, r7
 8005c18:	bd80      	pop	{r7, pc}

08005c1a <LSM6DSO_DeInit>:
  * @brief  Deinitialize the LSM6DSO sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_DeInit(LSM6DSO_Object_t *pObj)
{
 8005c1a:	b580      	push	{r7, lr}
 8005c1c:	b082      	sub	sp, #8
 8005c1e:	af00      	add	r7, sp, #0
 8005c20:	6078      	str	r0, [r7, #4]
  /* Disable the component */
  if (LSM6DSO_ACC_Disable(pObj) != LSM6DSO_OK)
 8005c22:	6878      	ldr	r0, [r7, #4]
 8005c24:	f000 f888 	bl	8005d38 <LSM6DSO_ACC_Disable>
 8005c28:	4603      	mov	r3, r0
 8005c2a:	2b00      	cmp	r3, #0
 8005c2c:	d002      	beq.n	8005c34 <LSM6DSO_DeInit+0x1a>
  {
    return LSM6DSO_ERROR;
 8005c2e:	f04f 33ff 	mov.w	r3, #4294967295
 8005c32:	e015      	b.n	8005c60 <LSM6DSO_DeInit+0x46>
  }

  if (LSM6DSO_GYRO_Disable(pObj) != LSM6DSO_OK)
 8005c34:	6878      	ldr	r0, [r7, #4]
 8005c36:	f000 fc28 	bl	800648a <LSM6DSO_GYRO_Disable>
 8005c3a:	4603      	mov	r3, r0
 8005c3c:	2b00      	cmp	r3, #0
 8005c3e:	d002      	beq.n	8005c46 <LSM6DSO_DeInit+0x2c>
  {
    return LSM6DSO_ERROR;
 8005c40:	f04f 33ff 	mov.w	r3, #4294967295
 8005c44:	e00c      	b.n	8005c60 <LSM6DSO_DeInit+0x46>
  }

  /* Reset output data rate. */
  pObj->acc_odr = LSM6DSO_XL_ODR_OFF;
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	2200      	movs	r2, #0
 8005c4a:	f883 2033 	strb.w	r2, [r3, #51]	@ 0x33
  pObj->gyro_odr = LSM6DSO_GY_ODR_OFF;
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	2200      	movs	r2, #0
 8005c52:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  pObj->is_initialized = 0;
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	2200      	movs	r2, #0
 8005c5a:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  return LSM6DSO_OK;
 8005c5e:	2300      	movs	r3, #0
}
 8005c60:	4618      	mov	r0, r3
 8005c62:	3708      	adds	r7, #8
 8005c64:	46bd      	mov	sp, r7
 8005c66:	bd80      	pop	{r7, pc}

08005c68 <LSM6DSO_ReadID>:
  * @param  pObj the device pObj
  * @param  Id the WHO_AM_I value
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_ReadID(LSM6DSO_Object_t *pObj, uint8_t *Id)
{
 8005c68:	b580      	push	{r7, lr}
 8005c6a:	b082      	sub	sp, #8
 8005c6c:	af00      	add	r7, sp, #0
 8005c6e:	6078      	str	r0, [r7, #4]
 8005c70:	6039      	str	r1, [r7, #0]
  if (lsm6dso_device_id_get(&(pObj->Ctx), Id) != LSM6DSO_OK)
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	3320      	adds	r3, #32
 8005c76:	6839      	ldr	r1, [r7, #0]
 8005c78:	4618      	mov	r0, r3
 8005c7a:	f001 fd8e 	bl	800779a <lsm6dso_device_id_get>
 8005c7e:	4603      	mov	r3, r0
 8005c80:	2b00      	cmp	r3, #0
 8005c82:	d002      	beq.n	8005c8a <LSM6DSO_ReadID+0x22>
  {
    return LSM6DSO_ERROR;
 8005c84:	f04f 33ff 	mov.w	r3, #4294967295
 8005c88:	e000      	b.n	8005c8c <LSM6DSO_ReadID+0x24>
  }

  return LSM6DSO_OK;
 8005c8a:	2300      	movs	r3, #0
}
 8005c8c:	4618      	mov	r0, r3
 8005c8e:	3708      	adds	r7, #8
 8005c90:	46bd      	mov	sp, r7
 8005c92:	bd80      	pop	{r7, pc}

08005c94 <LSM6DSO_GetCapabilities>:
  * @param  pObj Component object pointer
  * @param  Capabilities pointer to LSM6DSO sensor capabilities
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_GetCapabilities(LSM6DSO_Object_t *pObj, LSM6DSO_Capabilities_t *Capabilities)
{
 8005c94:	b480      	push	{r7}
 8005c96:	b083      	sub	sp, #12
 8005c98:	af00      	add	r7, sp, #0
 8005c9a:	6078      	str	r0, [r7, #4]
 8005c9c:	6039      	str	r1, [r7, #0]
  /* Prevent unused argument(s) compilation warning */
  (void)(pObj);

  Capabilities->Acc          = 1;
 8005c9e:	683b      	ldr	r3, [r7, #0]
 8005ca0:	2201      	movs	r2, #1
 8005ca2:	701a      	strb	r2, [r3, #0]
  Capabilities->Gyro         = 1;
 8005ca4:	683b      	ldr	r3, [r7, #0]
 8005ca6:	2201      	movs	r2, #1
 8005ca8:	705a      	strb	r2, [r3, #1]
  Capabilities->Magneto      = 0;
 8005caa:	683b      	ldr	r3, [r7, #0]
 8005cac:	2200      	movs	r2, #0
 8005cae:	709a      	strb	r2, [r3, #2]
  Capabilities->LowPower     = 0;
 8005cb0:	683b      	ldr	r3, [r7, #0]
 8005cb2:	2200      	movs	r2, #0
 8005cb4:	70da      	strb	r2, [r3, #3]
  Capabilities->GyroMaxFS    = 2000;
 8005cb6:	683b      	ldr	r3, [r7, #0]
 8005cb8:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 8005cbc:	605a      	str	r2, [r3, #4]
  Capabilities->AccMaxFS     = 16;
 8005cbe:	683b      	ldr	r3, [r7, #0]
 8005cc0:	2210      	movs	r2, #16
 8005cc2:	609a      	str	r2, [r3, #8]
  Capabilities->MagMaxFS     = 0;
 8005cc4:	683b      	ldr	r3, [r7, #0]
 8005cc6:	2200      	movs	r2, #0
 8005cc8:	60da      	str	r2, [r3, #12]
  Capabilities->GyroMaxOdr   = 6660.0f;
 8005cca:	683b      	ldr	r3, [r7, #0]
 8005ccc:	4a07      	ldr	r2, [pc, #28]	@ (8005cec <LSM6DSO_GetCapabilities+0x58>)
 8005cce:	611a      	str	r2, [r3, #16]
  Capabilities->AccMaxOdr    = 6660.0f;
 8005cd0:	683b      	ldr	r3, [r7, #0]
 8005cd2:	4a06      	ldr	r2, [pc, #24]	@ (8005cec <LSM6DSO_GetCapabilities+0x58>)
 8005cd4:	615a      	str	r2, [r3, #20]
  Capabilities->MagMaxOdr    = 0.0f;
 8005cd6:	683b      	ldr	r3, [r7, #0]
 8005cd8:	f04f 0200 	mov.w	r2, #0
 8005cdc:	619a      	str	r2, [r3, #24]
  return LSM6DSO_OK;
 8005cde:	2300      	movs	r3, #0
}
 8005ce0:	4618      	mov	r0, r3
 8005ce2:	370c      	adds	r7, #12
 8005ce4:	46bd      	mov	sp, r7
 8005ce6:	bc80      	pop	{r7}
 8005ce8:	4770      	bx	lr
 8005cea:	bf00      	nop
 8005cec:	45d02000 	.word	0x45d02000

08005cf0 <LSM6DSO_ACC_Enable>:
  * @brief  Enable the LSM6DSO accelerometer sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_ACC_Enable(LSM6DSO_Object_t *pObj)
{
 8005cf0:	b580      	push	{r7, lr}
 8005cf2:	b082      	sub	sp, #8
 8005cf4:	af00      	add	r7, sp, #0
 8005cf6:	6078      	str	r0, [r7, #4]
  /* Check if the component is already enabled */
  if (pObj->acc_is_enabled == 1U)
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8005cfe:	2b01      	cmp	r3, #1
 8005d00:	d101      	bne.n	8005d06 <LSM6DSO_ACC_Enable+0x16>
  {
    return LSM6DSO_OK;
 8005d02:	2300      	movs	r3, #0
 8005d04:	e014      	b.n	8005d30 <LSM6DSO_ACC_Enable+0x40>
  }

  /* Output data rate selection. */
  if (lsm6dso_xl_data_rate_set(&(pObj->Ctx), pObj->acc_odr) != LSM6DSO_OK)
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	f103 0220 	add.w	r2, r3, #32
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	f893 3033 	ldrb.w	r3, [r3, #51]	@ 0x33
 8005d12:	4619      	mov	r1, r3
 8005d14:	4610      	mov	r0, r2
 8005d16:	f001 f947 	bl	8006fa8 <lsm6dso_xl_data_rate_set>
 8005d1a:	4603      	mov	r3, r0
 8005d1c:	2b00      	cmp	r3, #0
 8005d1e:	d002      	beq.n	8005d26 <LSM6DSO_ACC_Enable+0x36>
  {
    return LSM6DSO_ERROR;
 8005d20:	f04f 33ff 	mov.w	r3, #4294967295
 8005d24:	e004      	b.n	8005d30 <LSM6DSO_ACC_Enable+0x40>
  }

  pObj->acc_is_enabled = 1;
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	2201      	movs	r2, #1
 8005d2a:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31

  return LSM6DSO_OK;
 8005d2e:	2300      	movs	r3, #0
}
 8005d30:	4618      	mov	r0, r3
 8005d32:	3708      	adds	r7, #8
 8005d34:	46bd      	mov	sp, r7
 8005d36:	bd80      	pop	{r7, pc}

08005d38 <LSM6DSO_ACC_Disable>:
  * @brief  Disable the LSM6DSO accelerometer sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_ACC_Disable(LSM6DSO_Object_t *pObj)
{
 8005d38:	b580      	push	{r7, lr}
 8005d3a:	b082      	sub	sp, #8
 8005d3c:	af00      	add	r7, sp, #0
 8005d3e:	6078      	str	r0, [r7, #4]
  /* Check if the component is already disabled */
  if (pObj->acc_is_enabled == 0U)
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8005d46:	2b00      	cmp	r3, #0
 8005d48:	d101      	bne.n	8005d4e <LSM6DSO_ACC_Disable+0x16>
  {
    return LSM6DSO_OK;
 8005d4a:	2300      	movs	r3, #0
 8005d4c:	e01f      	b.n	8005d8e <LSM6DSO_ACC_Disable+0x56>
  }

  /* Get current output data rate. */
  if (lsm6dso_xl_data_rate_get(&(pObj->Ctx), &pObj->acc_odr) != LSM6DSO_OK)
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	f103 0220 	add.w	r2, r3, #32
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	3333      	adds	r3, #51	@ 0x33
 8005d58:	4619      	mov	r1, r3
 8005d5a:	4610      	mov	r0, r2
 8005d5c:	f001 fa1e 	bl	800719c <lsm6dso_xl_data_rate_get>
 8005d60:	4603      	mov	r3, r0
 8005d62:	2b00      	cmp	r3, #0
 8005d64:	d002      	beq.n	8005d6c <LSM6DSO_ACC_Disable+0x34>
  {
    return LSM6DSO_ERROR;
 8005d66:	f04f 33ff 	mov.w	r3, #4294967295
 8005d6a:	e010      	b.n	8005d8e <LSM6DSO_ACC_Disable+0x56>
  }

  /* Output data rate selection - power down. */
  if (lsm6dso_xl_data_rate_set(&(pObj->Ctx), LSM6DSO_XL_ODR_OFF) != LSM6DSO_OK)
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	3320      	adds	r3, #32
 8005d70:	2100      	movs	r1, #0
 8005d72:	4618      	mov	r0, r3
 8005d74:	f001 f918 	bl	8006fa8 <lsm6dso_xl_data_rate_set>
 8005d78:	4603      	mov	r3, r0
 8005d7a:	2b00      	cmp	r3, #0
 8005d7c:	d002      	beq.n	8005d84 <LSM6DSO_ACC_Disable+0x4c>
  {
    return LSM6DSO_ERROR;
 8005d7e:	f04f 33ff 	mov.w	r3, #4294967295
 8005d82:	e004      	b.n	8005d8e <LSM6DSO_ACC_Disable+0x56>
  }

  pObj->acc_is_enabled = 0;
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	2200      	movs	r2, #0
 8005d88:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31

  return LSM6DSO_OK;
 8005d8c:	2300      	movs	r3, #0
}
 8005d8e:	4618      	mov	r0, r3
 8005d90:	3708      	adds	r7, #8
 8005d92:	46bd      	mov	sp, r7
 8005d94:	bd80      	pop	{r7, pc}
	...

08005d98 <LSM6DSO_ACC_GetSensitivity>:
  * @param  pObj the device pObj
  * @param  Sensitivity pointer
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_ACC_GetSensitivity(LSM6DSO_Object_t *pObj, float_t *Sensitivity)
{
 8005d98:	b580      	push	{r7, lr}
 8005d9a:	b084      	sub	sp, #16
 8005d9c:	af00      	add	r7, sp, #0
 8005d9e:	6078      	str	r0, [r7, #4]
 8005da0:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSO_OK;
 8005da2:	2300      	movs	r3, #0
 8005da4:	60fb      	str	r3, [r7, #12]
  lsm6dso_fs_xl_t full_scale;

  /* Read actual full scale selection from sensor. */
  if (lsm6dso_xl_full_scale_get(&(pObj->Ctx), &full_scale) != LSM6DSO_OK)
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	3320      	adds	r3, #32
 8005daa:	f107 020b 	add.w	r2, r7, #11
 8005dae:	4611      	mov	r1, r2
 8005db0:	4618      	mov	r0, r3
 8005db2:	f001 f8c1 	bl	8006f38 <lsm6dso_xl_full_scale_get>
 8005db6:	4603      	mov	r3, r0
 8005db8:	2b00      	cmp	r3, #0
 8005dba:	d002      	beq.n	8005dc2 <LSM6DSO_ACC_GetSensitivity+0x2a>
  {
    return LSM6DSO_ERROR;
 8005dbc:	f04f 33ff 	mov.w	r3, #4294967295
 8005dc0:	e023      	b.n	8005e0a <LSM6DSO_ACC_GetSensitivity+0x72>
  }

  /* Store the Sensitivity based on actual full scale. */
  switch (full_scale)
 8005dc2:	7afb      	ldrb	r3, [r7, #11]
 8005dc4:	2b03      	cmp	r3, #3
 8005dc6:	d81b      	bhi.n	8005e00 <LSM6DSO_ACC_GetSensitivity+0x68>
 8005dc8:	a201      	add	r2, pc, #4	@ (adr r2, 8005dd0 <LSM6DSO_ACC_GetSensitivity+0x38>)
 8005dca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005dce:	bf00      	nop
 8005dd0:	08005de1 	.word	0x08005de1
 8005dd4:	08005df9 	.word	0x08005df9
 8005dd8:	08005de9 	.word	0x08005de9
 8005ddc:	08005df1 	.word	0x08005df1
  {
    case LSM6DSO_2g:
      *Sensitivity = LSM6DSO_ACC_SENSITIVITY_FS_2G;
 8005de0:	683b      	ldr	r3, [r7, #0]
 8005de2:	4a0c      	ldr	r2, [pc, #48]	@ (8005e14 <LSM6DSO_ACC_GetSensitivity+0x7c>)
 8005de4:	601a      	str	r2, [r3, #0]
      break;
 8005de6:	e00f      	b.n	8005e08 <LSM6DSO_ACC_GetSensitivity+0x70>

    case LSM6DSO_4g:
      *Sensitivity = LSM6DSO_ACC_SENSITIVITY_FS_4G;
 8005de8:	683b      	ldr	r3, [r7, #0]
 8005dea:	4a0b      	ldr	r2, [pc, #44]	@ (8005e18 <LSM6DSO_ACC_GetSensitivity+0x80>)
 8005dec:	601a      	str	r2, [r3, #0]
      break;
 8005dee:	e00b      	b.n	8005e08 <LSM6DSO_ACC_GetSensitivity+0x70>

    case LSM6DSO_8g:
      *Sensitivity = LSM6DSO_ACC_SENSITIVITY_FS_8G;
 8005df0:	683b      	ldr	r3, [r7, #0]
 8005df2:	4a0a      	ldr	r2, [pc, #40]	@ (8005e1c <LSM6DSO_ACC_GetSensitivity+0x84>)
 8005df4:	601a      	str	r2, [r3, #0]
      break;
 8005df6:	e007      	b.n	8005e08 <LSM6DSO_ACC_GetSensitivity+0x70>

    case LSM6DSO_16g:
      *Sensitivity = LSM6DSO_ACC_SENSITIVITY_FS_16G;
 8005df8:	683b      	ldr	r3, [r7, #0]
 8005dfa:	4a09      	ldr	r2, [pc, #36]	@ (8005e20 <LSM6DSO_ACC_GetSensitivity+0x88>)
 8005dfc:	601a      	str	r2, [r3, #0]
      break;
 8005dfe:	e003      	b.n	8005e08 <LSM6DSO_ACC_GetSensitivity+0x70>

    default:
      ret = LSM6DSO_ERROR;
 8005e00:	f04f 33ff 	mov.w	r3, #4294967295
 8005e04:	60fb      	str	r3, [r7, #12]
      break;
 8005e06:	bf00      	nop
  }

  return ret;
 8005e08:	68fb      	ldr	r3, [r7, #12]
}
 8005e0a:	4618      	mov	r0, r3
 8005e0c:	3710      	adds	r7, #16
 8005e0e:	46bd      	mov	sp, r7
 8005e10:	bd80      	pop	{r7, pc}
 8005e12:	bf00      	nop
 8005e14:	3d79db23 	.word	0x3d79db23
 8005e18:	3df9db23 	.word	0x3df9db23
 8005e1c:	3e79db23 	.word	0x3e79db23
 8005e20:	3ef9db23 	.word	0x3ef9db23

08005e24 <LSM6DSO_ACC_GetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr pointer where the output data rate is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_ACC_GetOutputDataRate(LSM6DSO_Object_t *pObj, float_t *Odr)
{
 8005e24:	b580      	push	{r7, lr}
 8005e26:	b084      	sub	sp, #16
 8005e28:	af00      	add	r7, sp, #0
 8005e2a:	6078      	str	r0, [r7, #4]
 8005e2c:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSO_OK;
 8005e2e:	2300      	movs	r3, #0
 8005e30:	60fb      	str	r3, [r7, #12]
  lsm6dso_odr_xl_t odr_low_level;

  /* Get current output data rate. */
  if (lsm6dso_xl_data_rate_get(&(pObj->Ctx), &odr_low_level) != LSM6DSO_OK)
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	3320      	adds	r3, #32
 8005e36:	f107 020b 	add.w	r2, r7, #11
 8005e3a:	4611      	mov	r1, r2
 8005e3c:	4618      	mov	r0, r3
 8005e3e:	f001 f9ad 	bl	800719c <lsm6dso_xl_data_rate_get>
 8005e42:	4603      	mov	r3, r0
 8005e44:	2b00      	cmp	r3, #0
 8005e46:	d002      	beq.n	8005e4e <LSM6DSO_ACC_GetOutputDataRate+0x2a>
  {
    return LSM6DSO_ERROR;
 8005e48:	f04f 33ff 	mov.w	r3, #4294967295
 8005e4c:	e054      	b.n	8005ef8 <LSM6DSO_ACC_GetOutputDataRate+0xd4>
  }

  switch (odr_low_level)
 8005e4e:	7afb      	ldrb	r3, [r7, #11]
 8005e50:	2b0b      	cmp	r3, #11
 8005e52:	d84c      	bhi.n	8005eee <LSM6DSO_ACC_GetOutputDataRate+0xca>
 8005e54:	a201      	add	r2, pc, #4	@ (adr r2, 8005e5c <LSM6DSO_ACC_GetOutputDataRate+0x38>)
 8005e56:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e5a:	bf00      	nop
 8005e5c:	08005e8d 	.word	0x08005e8d
 8005e60:	08005e9f 	.word	0x08005e9f
 8005e64:	08005ea7 	.word	0x08005ea7
 8005e68:	08005eaf 	.word	0x08005eaf
 8005e6c:	08005eb7 	.word	0x08005eb7
 8005e70:	08005ebf 	.word	0x08005ebf
 8005e74:	08005ec7 	.word	0x08005ec7
 8005e78:	08005ecf 	.word	0x08005ecf
 8005e7c:	08005ed7 	.word	0x08005ed7
 8005e80:	08005edf 	.word	0x08005edf
 8005e84:	08005ee7 	.word	0x08005ee7
 8005e88:	08005e97 	.word	0x08005e97
  {
    case LSM6DSO_XL_ODR_OFF:
      *Odr = 0.0f;
 8005e8c:	683b      	ldr	r3, [r7, #0]
 8005e8e:	f04f 0200 	mov.w	r2, #0
 8005e92:	601a      	str	r2, [r3, #0]
      break;
 8005e94:	e02f      	b.n	8005ef6 <LSM6DSO_ACC_GetOutputDataRate+0xd2>

    case LSM6DSO_XL_ODR_1Hz6:
      *Odr = 1.6f;
 8005e96:	683b      	ldr	r3, [r7, #0]
 8005e98:	4a19      	ldr	r2, [pc, #100]	@ (8005f00 <LSM6DSO_ACC_GetOutputDataRate+0xdc>)
 8005e9a:	601a      	str	r2, [r3, #0]
      break;
 8005e9c:	e02b      	b.n	8005ef6 <LSM6DSO_ACC_GetOutputDataRate+0xd2>

    case LSM6DSO_XL_ODR_12Hz5:
      *Odr = 12.5f;
 8005e9e:	683b      	ldr	r3, [r7, #0]
 8005ea0:	4a18      	ldr	r2, [pc, #96]	@ (8005f04 <LSM6DSO_ACC_GetOutputDataRate+0xe0>)
 8005ea2:	601a      	str	r2, [r3, #0]
      break;
 8005ea4:	e027      	b.n	8005ef6 <LSM6DSO_ACC_GetOutputDataRate+0xd2>

    case LSM6DSO_XL_ODR_26Hz:
      *Odr = 26.0f;
 8005ea6:	683b      	ldr	r3, [r7, #0]
 8005ea8:	4a17      	ldr	r2, [pc, #92]	@ (8005f08 <LSM6DSO_ACC_GetOutputDataRate+0xe4>)
 8005eaa:	601a      	str	r2, [r3, #0]
      break;
 8005eac:	e023      	b.n	8005ef6 <LSM6DSO_ACC_GetOutputDataRate+0xd2>

    case LSM6DSO_XL_ODR_52Hz:
      *Odr = 52.0f;
 8005eae:	683b      	ldr	r3, [r7, #0]
 8005eb0:	4a16      	ldr	r2, [pc, #88]	@ (8005f0c <LSM6DSO_ACC_GetOutputDataRate+0xe8>)
 8005eb2:	601a      	str	r2, [r3, #0]
      break;
 8005eb4:	e01f      	b.n	8005ef6 <LSM6DSO_ACC_GetOutputDataRate+0xd2>

    case LSM6DSO_XL_ODR_104Hz:
      *Odr = 104.0f;
 8005eb6:	683b      	ldr	r3, [r7, #0]
 8005eb8:	4a15      	ldr	r2, [pc, #84]	@ (8005f10 <LSM6DSO_ACC_GetOutputDataRate+0xec>)
 8005eba:	601a      	str	r2, [r3, #0]
      break;
 8005ebc:	e01b      	b.n	8005ef6 <LSM6DSO_ACC_GetOutputDataRate+0xd2>

    case LSM6DSO_XL_ODR_208Hz:
      *Odr = 208.0f;
 8005ebe:	683b      	ldr	r3, [r7, #0]
 8005ec0:	4a14      	ldr	r2, [pc, #80]	@ (8005f14 <LSM6DSO_ACC_GetOutputDataRate+0xf0>)
 8005ec2:	601a      	str	r2, [r3, #0]
      break;
 8005ec4:	e017      	b.n	8005ef6 <LSM6DSO_ACC_GetOutputDataRate+0xd2>

    case LSM6DSO_XL_ODR_417Hz:
      *Odr = 417.0f;
 8005ec6:	683b      	ldr	r3, [r7, #0]
 8005ec8:	4a13      	ldr	r2, [pc, #76]	@ (8005f18 <LSM6DSO_ACC_GetOutputDataRate+0xf4>)
 8005eca:	601a      	str	r2, [r3, #0]
      break;
 8005ecc:	e013      	b.n	8005ef6 <LSM6DSO_ACC_GetOutputDataRate+0xd2>

    case LSM6DSO_XL_ODR_833Hz:
      *Odr = 833.0f;
 8005ece:	683b      	ldr	r3, [r7, #0]
 8005ed0:	4a12      	ldr	r2, [pc, #72]	@ (8005f1c <LSM6DSO_ACC_GetOutputDataRate+0xf8>)
 8005ed2:	601a      	str	r2, [r3, #0]
      break;
 8005ed4:	e00f      	b.n	8005ef6 <LSM6DSO_ACC_GetOutputDataRate+0xd2>

    case LSM6DSO_XL_ODR_1667Hz:
      *Odr = 1667.0f;
 8005ed6:	683b      	ldr	r3, [r7, #0]
 8005ed8:	4a11      	ldr	r2, [pc, #68]	@ (8005f20 <LSM6DSO_ACC_GetOutputDataRate+0xfc>)
 8005eda:	601a      	str	r2, [r3, #0]
      break;
 8005edc:	e00b      	b.n	8005ef6 <LSM6DSO_ACC_GetOutputDataRate+0xd2>

    case LSM6DSO_XL_ODR_3333Hz:
      *Odr = 3333.0f;
 8005ede:	683b      	ldr	r3, [r7, #0]
 8005ee0:	4a10      	ldr	r2, [pc, #64]	@ (8005f24 <LSM6DSO_ACC_GetOutputDataRate+0x100>)
 8005ee2:	601a      	str	r2, [r3, #0]
      break;
 8005ee4:	e007      	b.n	8005ef6 <LSM6DSO_ACC_GetOutputDataRate+0xd2>

    case LSM6DSO_XL_ODR_6667Hz:
      *Odr = 6667.0f;
 8005ee6:	683b      	ldr	r3, [r7, #0]
 8005ee8:	4a0f      	ldr	r2, [pc, #60]	@ (8005f28 <LSM6DSO_ACC_GetOutputDataRate+0x104>)
 8005eea:	601a      	str	r2, [r3, #0]
      break;
 8005eec:	e003      	b.n	8005ef6 <LSM6DSO_ACC_GetOutputDataRate+0xd2>

    default:
      ret = LSM6DSO_ERROR;
 8005eee:	f04f 33ff 	mov.w	r3, #4294967295
 8005ef2:	60fb      	str	r3, [r7, #12]
      break;
 8005ef4:	bf00      	nop
  }

  return ret;
 8005ef6:	68fb      	ldr	r3, [r7, #12]
}
 8005ef8:	4618      	mov	r0, r3
 8005efa:	3710      	adds	r7, #16
 8005efc:	46bd      	mov	sp, r7
 8005efe:	bd80      	pop	{r7, pc}
 8005f00:	3fcccccd 	.word	0x3fcccccd
 8005f04:	41480000 	.word	0x41480000
 8005f08:	41d00000 	.word	0x41d00000
 8005f0c:	42500000 	.word	0x42500000
 8005f10:	42d00000 	.word	0x42d00000
 8005f14:	43500000 	.word	0x43500000
 8005f18:	43d08000 	.word	0x43d08000
 8005f1c:	44504000 	.word	0x44504000
 8005f20:	44d06000 	.word	0x44d06000
 8005f24:	45505000 	.word	0x45505000
 8005f28:	45d05800 	.word	0x45d05800

08005f2c <LSM6DSO_ACC_SetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr the output data rate value to be set
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_ACC_SetOutputDataRate(LSM6DSO_Object_t *pObj, float_t Odr)
{
 8005f2c:	b580      	push	{r7, lr}
 8005f2e:	b082      	sub	sp, #8
 8005f30:	af00      	add	r7, sp, #0
 8005f32:	6078      	str	r0, [r7, #4]
 8005f34:	6039      	str	r1, [r7, #0]
  return LSM6DSO_ACC_SetOutputDataRate_With_Mode(pObj, Odr, LSM6DSO_ACC_HIGH_PERFORMANCE_MODE);
 8005f36:	2200      	movs	r2, #0
 8005f38:	6839      	ldr	r1, [r7, #0]
 8005f3a:	6878      	ldr	r0, [r7, #4]
 8005f3c:	f000 f806 	bl	8005f4c <LSM6DSO_ACC_SetOutputDataRate_With_Mode>
 8005f40:	4603      	mov	r3, r0
}
 8005f42:	4618      	mov	r0, r3
 8005f44:	3708      	adds	r7, #8
 8005f46:	46bd      	mov	sp, r7
 8005f48:	bd80      	pop	{r7, pc}
	...

08005f4c <LSM6DSO_ACC_SetOutputDataRate_With_Mode>:
  * @param  Mode the accelerometer operating mode
  * @note   This function switches off the gyroscope if Ultra Low Power Mode is set
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_ACC_SetOutputDataRate_With_Mode(LSM6DSO_Object_t *pObj, float_t Odr, LSM6DSO_ACC_Operating_Mode_t Mode)
{
 8005f4c:	b580      	push	{r7, lr}
 8005f4e:	b08c      	sub	sp, #48	@ 0x30
 8005f50:	af00      	add	r7, sp, #0
 8005f52:	60f8      	str	r0, [r7, #12]
 8005f54:	60b9      	str	r1, [r7, #8]
 8005f56:	4613      	mov	r3, r2
 8005f58:	71fb      	strb	r3, [r7, #7]
  int32_t ret = LSM6DSO_OK;
 8005f5a:	2300      	movs	r3, #0
 8005f5c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  float_t newOdr = Odr;
 8005f5e:	68bb      	ldr	r3, [r7, #8]
 8005f60:	62bb      	str	r3, [r7, #40]	@ 0x28

  switch (Mode)
 8005f62:	79fb      	ldrb	r3, [r7, #7]
 8005f64:	2b02      	cmp	r3, #2
 8005f66:	f000 80e6 	beq.w	8006136 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x1ea>
 8005f6a:	2b02      	cmp	r3, #2
 8005f6c:	f300 815d 	bgt.w	800622a <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x2de>
 8005f70:	2b00      	cmp	r3, #0
 8005f72:	d002      	beq.n	8005f7a <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x2e>
 8005f74:	2b01      	cmp	r3, #1
 8005f76:	d072      	beq.n	800605e <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x112>
 8005f78:	e157      	b.n	800622a <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x2de>
    {
      /* We must uncheck Low Power and Ultra Low Power bits if they are enabled */
      lsm6dso_ctrl5_c_t val1;
      lsm6dso_ctrl6_c_t val2;

      if (lsm6dso_read_reg(&(pObj->Ctx), LSM6DSO_CTRL5_C, (uint8_t *)&val1, 1) != LSM6DSO_OK)
 8005f7a:	68fb      	ldr	r3, [r7, #12]
 8005f7c:	f103 0020 	add.w	r0, r3, #32
 8005f80:	f107 0224 	add.w	r2, r7, #36	@ 0x24
 8005f84:	2301      	movs	r3, #1
 8005f86:	2114      	movs	r1, #20
 8005f88:	f000 ff80 	bl	8006e8c <lsm6dso_read_reg>
 8005f8c:	4603      	mov	r3, r0
 8005f8e:	2b00      	cmp	r3, #0
 8005f90:	d002      	beq.n	8005f98 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x4c>
      {
        return LSM6DSO_ERROR;
 8005f92:	f04f 33ff 	mov.w	r3, #4294967295
 8005f96:	e164      	b.n	8006262 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x316>
      }

      if (val1.xl_ulp_en != 0U)
 8005f98:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8005f9c:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8005fa0:	b2db      	uxtb	r3, r3
 8005fa2:	2b00      	cmp	r3, #0
 8005fa4:	d025      	beq.n	8005ff2 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0xa6>
      {
        /* Power off the accelerometer */
        if (pObj->acc_is_enabled == 1U)
 8005fa6:	68fb      	ldr	r3, [r7, #12]
 8005fa8:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8005fac:	2b01      	cmp	r3, #1
 8005fae:	d10b      	bne.n	8005fc8 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x7c>
        {
          if (lsm6dso_xl_data_rate_set(&(pObj->Ctx), LSM6DSO_XL_ODR_OFF) != LSM6DSO_OK)
 8005fb0:	68fb      	ldr	r3, [r7, #12]
 8005fb2:	3320      	adds	r3, #32
 8005fb4:	2100      	movs	r1, #0
 8005fb6:	4618      	mov	r0, r3
 8005fb8:	f000 fff6 	bl	8006fa8 <lsm6dso_xl_data_rate_set>
 8005fbc:	4603      	mov	r3, r0
 8005fbe:	2b00      	cmp	r3, #0
 8005fc0:	d002      	beq.n	8005fc8 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x7c>
          {
            return LSM6DSO_ERROR;
 8005fc2:	f04f 33ff 	mov.w	r3, #4294967295
 8005fc6:	e14c      	b.n	8006262 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x316>
          }
        }

        val1.xl_ulp_en = 0;
 8005fc8:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8005fcc:	f36f 13c7 	bfc	r3, #7, #1
 8005fd0:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
        if (lsm6dso_write_reg(&(pObj->Ctx), LSM6DSO_CTRL5_C, (uint8_t *)&val1, 1) != LSM6DSO_OK)
 8005fd4:	68fb      	ldr	r3, [r7, #12]
 8005fd6:	f103 0020 	add.w	r0, r3, #32
 8005fda:	f107 0224 	add.w	r2, r7, #36	@ 0x24
 8005fde:	2301      	movs	r3, #1
 8005fe0:	2114      	movs	r1, #20
 8005fe2:	f000 ff6b 	bl	8006ebc <lsm6dso_write_reg>
 8005fe6:	4603      	mov	r3, r0
 8005fe8:	2b00      	cmp	r3, #0
 8005fea:	d002      	beq.n	8005ff2 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0xa6>
        {
          return LSM6DSO_ERROR;
 8005fec:	f04f 33ff 	mov.w	r3, #4294967295
 8005ff0:	e137      	b.n	8006262 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x316>
        }
      }

      if (lsm6dso_read_reg(&(pObj->Ctx), LSM6DSO_CTRL6_C, (uint8_t *)&val2, 1) != LSM6DSO_OK)
 8005ff2:	68fb      	ldr	r3, [r7, #12]
 8005ff4:	f103 0020 	add.w	r0, r3, #32
 8005ff8:	f107 0220 	add.w	r2, r7, #32
 8005ffc:	2301      	movs	r3, #1
 8005ffe:	2115      	movs	r1, #21
 8006000:	f000 ff44 	bl	8006e8c <lsm6dso_read_reg>
 8006004:	4603      	mov	r3, r0
 8006006:	2b00      	cmp	r3, #0
 8006008:	d002      	beq.n	8006010 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0xc4>
      {
        return LSM6DSO_ERROR;
 800600a:	f04f 33ff 	mov.w	r3, #4294967295
 800600e:	e128      	b.n	8006262 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x316>
      }

      if (val2.xl_hm_mode != 0U)
 8006010:	f897 3020 	ldrb.w	r3, [r7, #32]
 8006014:	f003 0310 	and.w	r3, r3, #16
 8006018:	b2db      	uxtb	r3, r3
 800601a:	2b00      	cmp	r3, #0
 800601c:	d014      	beq.n	8006048 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0xfc>
      {
        val2.xl_hm_mode = 0U;
 800601e:	f897 3020 	ldrb.w	r3, [r7, #32]
 8006022:	f36f 1304 	bfc	r3, #4, #1
 8006026:	f887 3020 	strb.w	r3, [r7, #32]
        if (lsm6dso_write_reg(&(pObj->Ctx), LSM6DSO_CTRL6_C, (uint8_t *)&val2, 1) != LSM6DSO_OK)
 800602a:	68fb      	ldr	r3, [r7, #12]
 800602c:	f103 0020 	add.w	r0, r3, #32
 8006030:	f107 0220 	add.w	r2, r7, #32
 8006034:	2301      	movs	r3, #1
 8006036:	2115      	movs	r1, #21
 8006038:	f000 ff40 	bl	8006ebc <lsm6dso_write_reg>
 800603c:	4603      	mov	r3, r0
 800603e:	2b00      	cmp	r3, #0
 8006040:	d002      	beq.n	8006048 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0xfc>
        {
          return LSM6DSO_ERROR;
 8006042:	f04f 33ff 	mov.w	r3, #4294967295
 8006046:	e10c      	b.n	8006262 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x316>
        }
      }

      /* ODR should be at least 12.5Hz */
      if (newOdr < 12.5f)
 8006048:	4988      	ldr	r1, [pc, #544]	@ (800626c <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x320>)
 800604a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800604c:	f7fa ffe0 	bl	8001010 <__aeabi_fcmplt>
 8006050:	4603      	mov	r3, r0
 8006052:	2b00      	cmp	r3, #0
 8006054:	d100      	bne.n	8006058 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x10c>
      {
        newOdr = 12.5f;
      }
      break;
 8006056:	e0ec      	b.n	8006232 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x2e6>
        newOdr = 12.5f;
 8006058:	4b84      	ldr	r3, [pc, #528]	@ (800626c <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x320>)
 800605a:	62bb      	str	r3, [r7, #40]	@ 0x28
 800605c:	e0e9      	b.n	8006232 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x2e6>
      /* We must uncheck Ultra Low Power bit if it is enabled */
      /* and check the Low Power bit if it is unchecked       */
      lsm6dso_ctrl5_c_t val1;
      lsm6dso_ctrl6_c_t val2;

      if (lsm6dso_read_reg(&(pObj->Ctx), LSM6DSO_CTRL5_C, (uint8_t *)&val1, 1) != LSM6DSO_OK)
 800605e:	68fb      	ldr	r3, [r7, #12]
 8006060:	f103 0020 	add.w	r0, r3, #32
 8006064:	f107 021c 	add.w	r2, r7, #28
 8006068:	2301      	movs	r3, #1
 800606a:	2114      	movs	r1, #20
 800606c:	f000 ff0e 	bl	8006e8c <lsm6dso_read_reg>
 8006070:	4603      	mov	r3, r0
 8006072:	2b00      	cmp	r3, #0
 8006074:	d002      	beq.n	800607c <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x130>
      {
        return LSM6DSO_ERROR;
 8006076:	f04f 33ff 	mov.w	r3, #4294967295
 800607a:	e0f2      	b.n	8006262 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x316>
      }

      if (val1.xl_ulp_en != 0U)
 800607c:	7f3b      	ldrb	r3, [r7, #28]
 800607e:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8006082:	b2db      	uxtb	r3, r3
 8006084:	2b00      	cmp	r3, #0
 8006086:	d023      	beq.n	80060d0 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x184>
      {
        /* Power off the accelerometer */
        if (pObj->acc_is_enabled == 1U)
 8006088:	68fb      	ldr	r3, [r7, #12]
 800608a:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 800608e:	2b01      	cmp	r3, #1
 8006090:	d10b      	bne.n	80060aa <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x15e>
        {
          if (lsm6dso_xl_data_rate_set(&(pObj->Ctx), LSM6DSO_XL_ODR_OFF) != LSM6DSO_OK)
 8006092:	68fb      	ldr	r3, [r7, #12]
 8006094:	3320      	adds	r3, #32
 8006096:	2100      	movs	r1, #0
 8006098:	4618      	mov	r0, r3
 800609a:	f000 ff85 	bl	8006fa8 <lsm6dso_xl_data_rate_set>
 800609e:	4603      	mov	r3, r0
 80060a0:	2b00      	cmp	r3, #0
 80060a2:	d002      	beq.n	80060aa <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x15e>
          {
            return LSM6DSO_ERROR;
 80060a4:	f04f 33ff 	mov.w	r3, #4294967295
 80060a8:	e0db      	b.n	8006262 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x316>
          }
        }

        val1.xl_ulp_en = 0;
 80060aa:	7f3b      	ldrb	r3, [r7, #28]
 80060ac:	f36f 13c7 	bfc	r3, #7, #1
 80060b0:	773b      	strb	r3, [r7, #28]
        if (lsm6dso_write_reg(&(pObj->Ctx), LSM6DSO_CTRL5_C, (uint8_t *)&val1, 1) != LSM6DSO_OK)
 80060b2:	68fb      	ldr	r3, [r7, #12]
 80060b4:	f103 0020 	add.w	r0, r3, #32
 80060b8:	f107 021c 	add.w	r2, r7, #28
 80060bc:	2301      	movs	r3, #1
 80060be:	2114      	movs	r1, #20
 80060c0:	f000 fefc 	bl	8006ebc <lsm6dso_write_reg>
 80060c4:	4603      	mov	r3, r0
 80060c6:	2b00      	cmp	r3, #0
 80060c8:	d002      	beq.n	80060d0 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x184>
        {
          return LSM6DSO_ERROR;
 80060ca:	f04f 33ff 	mov.w	r3, #4294967295
 80060ce:	e0c8      	b.n	8006262 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x316>
        }
      }

      if (lsm6dso_read_reg(&(pObj->Ctx), LSM6DSO_CTRL6_C, (uint8_t *)&val2, 1) != LSM6DSO_OK)
 80060d0:	68fb      	ldr	r3, [r7, #12]
 80060d2:	f103 0020 	add.w	r0, r3, #32
 80060d6:	f107 0218 	add.w	r2, r7, #24
 80060da:	2301      	movs	r3, #1
 80060dc:	2115      	movs	r1, #21
 80060de:	f000 fed5 	bl	8006e8c <lsm6dso_read_reg>
 80060e2:	4603      	mov	r3, r0
 80060e4:	2b00      	cmp	r3, #0
 80060e6:	d002      	beq.n	80060ee <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x1a2>
      {
        return LSM6DSO_ERROR;
 80060e8:	f04f 33ff 	mov.w	r3, #4294967295
 80060ec:	e0b9      	b.n	8006262 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x316>
      }

      if (val2.xl_hm_mode == 0U)
 80060ee:	7e3b      	ldrb	r3, [r7, #24]
 80060f0:	f003 0310 	and.w	r3, r3, #16
 80060f4:	b2db      	uxtb	r3, r3
 80060f6:	2b00      	cmp	r3, #0
 80060f8:	d112      	bne.n	8006120 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x1d4>
      {
        val2.xl_hm_mode = 1U;
 80060fa:	7e3b      	ldrb	r3, [r7, #24]
 80060fc:	f043 0310 	orr.w	r3, r3, #16
 8006100:	763b      	strb	r3, [r7, #24]
        if (lsm6dso_write_reg(&(pObj->Ctx), LSM6DSO_CTRL6_C, (uint8_t *)&val2, 1) != LSM6DSO_OK)
 8006102:	68fb      	ldr	r3, [r7, #12]
 8006104:	f103 0020 	add.w	r0, r3, #32
 8006108:	f107 0218 	add.w	r2, r7, #24
 800610c:	2301      	movs	r3, #1
 800610e:	2115      	movs	r1, #21
 8006110:	f000 fed4 	bl	8006ebc <lsm6dso_write_reg>
 8006114:	4603      	mov	r3, r0
 8006116:	2b00      	cmp	r3, #0
 8006118:	d002      	beq.n	8006120 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x1d4>
        {
          return LSM6DSO_ERROR;
 800611a:	f04f 33ff 	mov.w	r3, #4294967295
 800611e:	e0a0      	b.n	8006262 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x316>
        }
      }

      /* Now we need to limit the ODR to 208 Hz if it is higher */
      if (newOdr > 208.0f)
 8006120:	4953      	ldr	r1, [pc, #332]	@ (8006270 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x324>)
 8006122:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006124:	f7fa ff92 	bl	800104c <__aeabi_fcmpgt>
 8006128:	4603      	mov	r3, r0
 800612a:	2b00      	cmp	r3, #0
 800612c:	d100      	bne.n	8006130 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x1e4>
      {
        newOdr = 208.0f;
      }
      break;
 800612e:	e080      	b.n	8006232 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x2e6>
        newOdr = 208.0f;
 8006130:	4b4f      	ldr	r3, [pc, #316]	@ (8006270 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x324>)
 8006132:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006134:	e07d      	b.n	8006232 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x2e6>
      /* and check the Ultra Low Power bit if it is unchecked             */
      /* We must switch off gyro otherwise Ultra Low Power does not work  */
      lsm6dso_ctrl5_c_t val1;
      lsm6dso_ctrl6_c_t val2;

      if (lsm6dso_read_reg(&(pObj->Ctx), LSM6DSO_CTRL6_C, (uint8_t *)&val2, 1) != LSM6DSO_OK)
 8006136:	68fb      	ldr	r3, [r7, #12]
 8006138:	f103 0020 	add.w	r0, r3, #32
 800613c:	f107 0210 	add.w	r2, r7, #16
 8006140:	2301      	movs	r3, #1
 8006142:	2115      	movs	r1, #21
 8006144:	f000 fea2 	bl	8006e8c <lsm6dso_read_reg>
 8006148:	4603      	mov	r3, r0
 800614a:	2b00      	cmp	r3, #0
 800614c:	d002      	beq.n	8006154 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x208>
      {
        return LSM6DSO_ERROR;
 800614e:	f04f 33ff 	mov.w	r3, #4294967295
 8006152:	e086      	b.n	8006262 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x316>
      }

      if (val2.xl_hm_mode != 0U)
 8006154:	7c3b      	ldrb	r3, [r7, #16]
 8006156:	f003 0310 	and.w	r3, r3, #16
 800615a:	b2db      	uxtb	r3, r3
 800615c:	2b00      	cmp	r3, #0
 800615e:	d012      	beq.n	8006186 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x23a>
      {
        val2.xl_hm_mode = 0U;
 8006160:	7c3b      	ldrb	r3, [r7, #16]
 8006162:	f36f 1304 	bfc	r3, #4, #1
 8006166:	743b      	strb	r3, [r7, #16]
        if (lsm6dso_write_reg(&(pObj->Ctx), LSM6DSO_CTRL6_C, (uint8_t *)&val2, 1) != LSM6DSO_OK)
 8006168:	68fb      	ldr	r3, [r7, #12]
 800616a:	f103 0020 	add.w	r0, r3, #32
 800616e:	f107 0210 	add.w	r2, r7, #16
 8006172:	2301      	movs	r3, #1
 8006174:	2115      	movs	r1, #21
 8006176:	f000 fea1 	bl	8006ebc <lsm6dso_write_reg>
 800617a:	4603      	mov	r3, r0
 800617c:	2b00      	cmp	r3, #0
 800617e:	d002      	beq.n	8006186 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x23a>
        {
          return LSM6DSO_ERROR;
 8006180:	f04f 33ff 	mov.w	r3, #4294967295
 8006184:	e06d      	b.n	8006262 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x316>
        }
      }

      /* Disable Gyro */
      if (pObj->gyro_is_enabled == 1U)
 8006186:	68fb      	ldr	r3, [r7, #12]
 8006188:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 800618c:	2b01      	cmp	r3, #1
 800618e:	d108      	bne.n	80061a2 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x256>
      {
        if (LSM6DSO_GYRO_Disable(pObj) != LSM6DSO_OK)
 8006190:	68f8      	ldr	r0, [r7, #12]
 8006192:	f000 f97a 	bl	800648a <LSM6DSO_GYRO_Disable>
 8006196:	4603      	mov	r3, r0
 8006198:	2b00      	cmp	r3, #0
 800619a:	d002      	beq.n	80061a2 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x256>
        {
          return LSM6DSO_ERROR;
 800619c:	f04f 33ff 	mov.w	r3, #4294967295
 80061a0:	e05f      	b.n	8006262 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x316>
        }
      }

      if (lsm6dso_read_reg(&(pObj->Ctx), LSM6DSO_CTRL5_C, (uint8_t *)&val1, 1) != LSM6DSO_OK)
 80061a2:	68fb      	ldr	r3, [r7, #12]
 80061a4:	f103 0020 	add.w	r0, r3, #32
 80061a8:	f107 0214 	add.w	r2, r7, #20
 80061ac:	2301      	movs	r3, #1
 80061ae:	2114      	movs	r1, #20
 80061b0:	f000 fe6c 	bl	8006e8c <lsm6dso_read_reg>
 80061b4:	4603      	mov	r3, r0
 80061b6:	2b00      	cmp	r3, #0
 80061b8:	d002      	beq.n	80061c0 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x274>
      {
        return LSM6DSO_ERROR;
 80061ba:	f04f 33ff 	mov.w	r3, #4294967295
 80061be:	e050      	b.n	8006262 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x316>
      }

      if (val1.xl_ulp_en == 0U)
 80061c0:	7d3b      	ldrb	r3, [r7, #20]
 80061c2:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 80061c6:	b2db      	uxtb	r3, r3
 80061c8:	2b00      	cmp	r3, #0
 80061ca:	d123      	bne.n	8006214 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x2c8>
      {
        /* Power off the accelerometer */
        if (pObj->acc_is_enabled == 1U)
 80061cc:	68fb      	ldr	r3, [r7, #12]
 80061ce:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 80061d2:	2b01      	cmp	r3, #1
 80061d4:	d10b      	bne.n	80061ee <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x2a2>
        {
          if (lsm6dso_xl_data_rate_set(&(pObj->Ctx), LSM6DSO_XL_ODR_OFF) != LSM6DSO_OK)
 80061d6:	68fb      	ldr	r3, [r7, #12]
 80061d8:	3320      	adds	r3, #32
 80061da:	2100      	movs	r1, #0
 80061dc:	4618      	mov	r0, r3
 80061de:	f000 fee3 	bl	8006fa8 <lsm6dso_xl_data_rate_set>
 80061e2:	4603      	mov	r3, r0
 80061e4:	2b00      	cmp	r3, #0
 80061e6:	d002      	beq.n	80061ee <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x2a2>
          {
            return LSM6DSO_ERROR;
 80061e8:	f04f 33ff 	mov.w	r3, #4294967295
 80061ec:	e039      	b.n	8006262 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x316>
          }
        }

        val1.xl_ulp_en = 1U;
 80061ee:	7d3b      	ldrb	r3, [r7, #20]
 80061f0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80061f4:	753b      	strb	r3, [r7, #20]
        if (lsm6dso_write_reg(&(pObj->Ctx), LSM6DSO_CTRL5_C, (uint8_t *)&val1, 1) != LSM6DSO_OK)
 80061f6:	68fb      	ldr	r3, [r7, #12]
 80061f8:	f103 0020 	add.w	r0, r3, #32
 80061fc:	f107 0214 	add.w	r2, r7, #20
 8006200:	2301      	movs	r3, #1
 8006202:	2114      	movs	r1, #20
 8006204:	f000 fe5a 	bl	8006ebc <lsm6dso_write_reg>
 8006208:	4603      	mov	r3, r0
 800620a:	2b00      	cmp	r3, #0
 800620c:	d002      	beq.n	8006214 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x2c8>
        {
          return LSM6DSO_ERROR;
 800620e:	f04f 33ff 	mov.w	r3, #4294967295
 8006212:	e026      	b.n	8006262 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x316>
        }
      }

      /* Now we need to limit the ODR to 208 Hz if it is higher */
      if (newOdr > 208.0f)
 8006214:	4916      	ldr	r1, [pc, #88]	@ (8006270 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x324>)
 8006216:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006218:	f7fa ff18 	bl	800104c <__aeabi_fcmpgt>
 800621c:	4603      	mov	r3, r0
 800621e:	2b00      	cmp	r3, #0
 8006220:	d100      	bne.n	8006224 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x2d8>
      {
        newOdr = 208.0f;
      }
      break;
 8006222:	e006      	b.n	8006232 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x2e6>
        newOdr = 208.0f;
 8006224:	4b12      	ldr	r3, [pc, #72]	@ (8006270 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x324>)
 8006226:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006228:	e003      	b.n	8006232 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x2e6>
    }
    default:
      ret = LSM6DSO_ERROR;
 800622a:	f04f 33ff 	mov.w	r3, #4294967295
 800622e:	62fb      	str	r3, [r7, #44]	@ 0x2c
      break;
 8006230:	bf00      	nop
  }

  if (ret == LSM6DSO_ERROR)
 8006232:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006234:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006238:	d102      	bne.n	8006240 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x2f4>
  {
    return LSM6DSO_ERROR;
 800623a:	f04f 33ff 	mov.w	r3, #4294967295
 800623e:	e010      	b.n	8006262 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x316>
  }

  if (pObj->acc_is_enabled == 1U)
 8006240:	68fb      	ldr	r3, [r7, #12]
 8006242:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8006246:	2b01      	cmp	r3, #1
 8006248:	d105      	bne.n	8006256 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x30a>
  {
    ret = LSM6DSO_ACC_SetOutputDataRate_When_Enabled(pObj, newOdr);
 800624a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800624c:	68f8      	ldr	r0, [r7, #12]
 800624e:	f000 fbf5 	bl	8006a3c <LSM6DSO_ACC_SetOutputDataRate_When_Enabled>
 8006252:	62f8      	str	r0, [r7, #44]	@ 0x2c
 8006254:	e004      	b.n	8006260 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x314>
  }
  else
  {
    ret = LSM6DSO_ACC_SetOutputDataRate_When_Disabled(pObj, newOdr);
 8006256:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006258:	68f8      	ldr	r0, [r7, #12]
 800625a:	f000 fc77 	bl	8006b4c <LSM6DSO_ACC_SetOutputDataRate_When_Disabled>
 800625e:	62f8      	str	r0, [r7, #44]	@ 0x2c
  }

  return ret;
 8006260:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 8006262:	4618      	mov	r0, r3
 8006264:	3730      	adds	r7, #48	@ 0x30
 8006266:	46bd      	mov	sp, r7
 8006268:	bd80      	pop	{r7, pc}
 800626a:	bf00      	nop
 800626c:	41480000 	.word	0x41480000
 8006270:	43500000 	.word	0x43500000

08006274 <LSM6DSO_ACC_GetFullScale>:
  * @param  pObj the device pObj
  * @param  FullScale pointer where the full scale is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_ACC_GetFullScale(LSM6DSO_Object_t *pObj, int32_t *FullScale)
{
 8006274:	b580      	push	{r7, lr}
 8006276:	b084      	sub	sp, #16
 8006278:	af00      	add	r7, sp, #0
 800627a:	6078      	str	r0, [r7, #4]
 800627c:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSO_OK;
 800627e:	2300      	movs	r3, #0
 8006280:	60fb      	str	r3, [r7, #12]
  lsm6dso_fs_xl_t fs_low_level;

  /* Read actual full scale selection from sensor. */
  if (lsm6dso_xl_full_scale_get(&(pObj->Ctx), &fs_low_level) != LSM6DSO_OK)
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	3320      	adds	r3, #32
 8006286:	f107 020b 	add.w	r2, r7, #11
 800628a:	4611      	mov	r1, r2
 800628c:	4618      	mov	r0, r3
 800628e:	f000 fe53 	bl	8006f38 <lsm6dso_xl_full_scale_get>
 8006292:	4603      	mov	r3, r0
 8006294:	2b00      	cmp	r3, #0
 8006296:	d002      	beq.n	800629e <LSM6DSO_ACC_GetFullScale+0x2a>
  {
    return LSM6DSO_ERROR;
 8006298:	f04f 33ff 	mov.w	r3, #4294967295
 800629c:	e023      	b.n	80062e6 <LSM6DSO_ACC_GetFullScale+0x72>
  }

  switch (fs_low_level)
 800629e:	7afb      	ldrb	r3, [r7, #11]
 80062a0:	2b03      	cmp	r3, #3
 80062a2:	d81b      	bhi.n	80062dc <LSM6DSO_ACC_GetFullScale+0x68>
 80062a4:	a201      	add	r2, pc, #4	@ (adr r2, 80062ac <LSM6DSO_ACC_GetFullScale+0x38>)
 80062a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80062aa:	bf00      	nop
 80062ac:	080062bd 	.word	0x080062bd
 80062b0:	080062d5 	.word	0x080062d5
 80062b4:	080062c5 	.word	0x080062c5
 80062b8:	080062cd 	.word	0x080062cd
  {
    case LSM6DSO_2g:
      *FullScale =  2;
 80062bc:	683b      	ldr	r3, [r7, #0]
 80062be:	2202      	movs	r2, #2
 80062c0:	601a      	str	r2, [r3, #0]
      break;
 80062c2:	e00f      	b.n	80062e4 <LSM6DSO_ACC_GetFullScale+0x70>

    case LSM6DSO_4g:
      *FullScale =  4;
 80062c4:	683b      	ldr	r3, [r7, #0]
 80062c6:	2204      	movs	r2, #4
 80062c8:	601a      	str	r2, [r3, #0]
      break;
 80062ca:	e00b      	b.n	80062e4 <LSM6DSO_ACC_GetFullScale+0x70>

    case LSM6DSO_8g:
      *FullScale =  8;
 80062cc:	683b      	ldr	r3, [r7, #0]
 80062ce:	2208      	movs	r2, #8
 80062d0:	601a      	str	r2, [r3, #0]
      break;
 80062d2:	e007      	b.n	80062e4 <LSM6DSO_ACC_GetFullScale+0x70>

    case LSM6DSO_16g:
      *FullScale = 16;
 80062d4:	683b      	ldr	r3, [r7, #0]
 80062d6:	2210      	movs	r2, #16
 80062d8:	601a      	str	r2, [r3, #0]
      break;
 80062da:	e003      	b.n	80062e4 <LSM6DSO_ACC_GetFullScale+0x70>

    default:
      ret = LSM6DSO_ERROR;
 80062dc:	f04f 33ff 	mov.w	r3, #4294967295
 80062e0:	60fb      	str	r3, [r7, #12]
      break;
 80062e2:	bf00      	nop
  }

  return ret;
 80062e4:	68fb      	ldr	r3, [r7, #12]
}
 80062e6:	4618      	mov	r0, r3
 80062e8:	3710      	adds	r7, #16
 80062ea:	46bd      	mov	sp, r7
 80062ec:	bd80      	pop	{r7, pc}
 80062ee:	bf00      	nop

080062f0 <LSM6DSO_ACC_SetFullScale>:
  * @param  pObj the device pObj
  * @param  FullScale the functional full scale to be set
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_ACC_SetFullScale(LSM6DSO_Object_t *pObj, int32_t FullScale)
{
 80062f0:	b580      	push	{r7, lr}
 80062f2:	b084      	sub	sp, #16
 80062f4:	af00      	add	r7, sp, #0
 80062f6:	6078      	str	r0, [r7, #4]
 80062f8:	6039      	str	r1, [r7, #0]
  lsm6dso_fs_xl_t new_fs;

  /* Seems like MISRA C-2012 rule 14.3a violation but only from single file statical analysis point of view because
     the parameter passed to the function is not known at the moment of analysis */
  new_fs = (FullScale <= 2) ? LSM6DSO_2g
           : (FullScale <= 4) ? LSM6DSO_4g
 80062fa:	683b      	ldr	r3, [r7, #0]
 80062fc:	2b02      	cmp	r3, #2
 80062fe:	dd0b      	ble.n	8006318 <LSM6DSO_ACC_SetFullScale+0x28>
 8006300:	683b      	ldr	r3, [r7, #0]
 8006302:	2b04      	cmp	r3, #4
 8006304:	dd06      	ble.n	8006314 <LSM6DSO_ACC_SetFullScale+0x24>
 8006306:	683b      	ldr	r3, [r7, #0]
 8006308:	2b08      	cmp	r3, #8
 800630a:	dc01      	bgt.n	8006310 <LSM6DSO_ACC_SetFullScale+0x20>
 800630c:	2303      	movs	r3, #3
 800630e:	e004      	b.n	800631a <LSM6DSO_ACC_SetFullScale+0x2a>
 8006310:	2301      	movs	r3, #1
 8006312:	e002      	b.n	800631a <LSM6DSO_ACC_SetFullScale+0x2a>
 8006314:	2302      	movs	r3, #2
 8006316:	e000      	b.n	800631a <LSM6DSO_ACC_SetFullScale+0x2a>
 8006318:	2300      	movs	r3, #0
  new_fs = (FullScale <= 2) ? LSM6DSO_2g
 800631a:	73fb      	strb	r3, [r7, #15]
           : (FullScale <= 8) ? LSM6DSO_8g
           :                    LSM6DSO_16g;

  if (lsm6dso_xl_full_scale_set(&(pObj->Ctx), new_fs) != LSM6DSO_OK)
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	3320      	adds	r3, #32
 8006320:	7bfa      	ldrb	r2, [r7, #15]
 8006322:	4611      	mov	r1, r2
 8006324:	4618      	mov	r0, r3
 8006326:	f000 fde1 	bl	8006eec <lsm6dso_xl_full_scale_set>
 800632a:	4603      	mov	r3, r0
 800632c:	2b00      	cmp	r3, #0
 800632e:	d002      	beq.n	8006336 <LSM6DSO_ACC_SetFullScale+0x46>
  {
    return LSM6DSO_ERROR;
 8006330:	f04f 33ff 	mov.w	r3, #4294967295
 8006334:	e000      	b.n	8006338 <LSM6DSO_ACC_SetFullScale+0x48>
  }

  return LSM6DSO_OK;
 8006336:	2300      	movs	r3, #0
}
 8006338:	4618      	mov	r0, r3
 800633a:	3710      	adds	r7, #16
 800633c:	46bd      	mov	sp, r7
 800633e:	bd80      	pop	{r7, pc}

08006340 <LSM6DSO_ACC_GetAxesRaw>:
  * @param  pObj the device pObj
  * @param  Value pointer where the raw values of the axes are written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_ACC_GetAxesRaw(LSM6DSO_Object_t *pObj, LSM6DSO_AxesRaw_t *Value)
{
 8006340:	b580      	push	{r7, lr}
 8006342:	b084      	sub	sp, #16
 8006344:	af00      	add	r7, sp, #0
 8006346:	6078      	str	r0, [r7, #4]
 8006348:	6039      	str	r1, [r7, #0]
  lsm6dso_axis3bit16_t data_raw;

  /* Read raw data values. */
  if (lsm6dso_acceleration_raw_get(&(pObj->Ctx), data_raw.i16bit) != LSM6DSO_OK)
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	3320      	adds	r3, #32
 800634e:	f107 0208 	add.w	r2, r7, #8
 8006352:	4611      	mov	r1, r2
 8006354:	4618      	mov	r0, r3
 8006356:	f001 f9bb 	bl	80076d0 <lsm6dso_acceleration_raw_get>
 800635a:	4603      	mov	r3, r0
 800635c:	2b00      	cmp	r3, #0
 800635e:	d002      	beq.n	8006366 <LSM6DSO_ACC_GetAxesRaw+0x26>
  {
    return LSM6DSO_ERROR;
 8006360:	f04f 33ff 	mov.w	r3, #4294967295
 8006364:	e00c      	b.n	8006380 <LSM6DSO_ACC_GetAxesRaw+0x40>
  }

  /* Format the data. */
  Value->x = data_raw.i16bit[0];
 8006366:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 800636a:	683b      	ldr	r3, [r7, #0]
 800636c:	801a      	strh	r2, [r3, #0]
  Value->y = data_raw.i16bit[1];
 800636e:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8006372:	683b      	ldr	r3, [r7, #0]
 8006374:	805a      	strh	r2, [r3, #2]
  Value->z = data_raw.i16bit[2];
 8006376:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 800637a:	683b      	ldr	r3, [r7, #0]
 800637c:	809a      	strh	r2, [r3, #4]

  return LSM6DSO_OK;
 800637e:	2300      	movs	r3, #0
}
 8006380:	4618      	mov	r0, r3
 8006382:	3710      	adds	r7, #16
 8006384:	46bd      	mov	sp, r7
 8006386:	bd80      	pop	{r7, pc}

08006388 <LSM6DSO_ACC_GetAxes>:
  * @param  pObj the device pObj
  * @param  Acceleration pointer where the values of the axes are written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_ACC_GetAxes(LSM6DSO_Object_t *pObj, LSM6DSO_Axes_t *Acceleration)
{
 8006388:	b580      	push	{r7, lr}
 800638a:	b086      	sub	sp, #24
 800638c:	af00      	add	r7, sp, #0
 800638e:	6078      	str	r0, [r7, #4]
 8006390:	6039      	str	r1, [r7, #0]
  lsm6dso_axis3bit16_t data_raw;
  float_t sensitivity = 0.0f;
 8006392:	f04f 0300 	mov.w	r3, #0
 8006396:	60fb      	str	r3, [r7, #12]

  /* Read raw data values. */
  if (lsm6dso_acceleration_raw_get(&(pObj->Ctx), data_raw.i16bit) != LSM6DSO_OK)
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	3320      	adds	r3, #32
 800639c:	f107 0210 	add.w	r2, r7, #16
 80063a0:	4611      	mov	r1, r2
 80063a2:	4618      	mov	r0, r3
 80063a4:	f001 f994 	bl	80076d0 <lsm6dso_acceleration_raw_get>
 80063a8:	4603      	mov	r3, r0
 80063aa:	2b00      	cmp	r3, #0
 80063ac:	d002      	beq.n	80063b4 <LSM6DSO_ACC_GetAxes+0x2c>
  {
    return LSM6DSO_ERROR;
 80063ae:	f04f 33ff 	mov.w	r3, #4294967295
 80063b2:	e042      	b.n	800643a <LSM6DSO_ACC_GetAxes+0xb2>
  }

  /* Get LSM6DSO actual sensitivity. */
  if (LSM6DSO_ACC_GetSensitivity(pObj, &sensitivity) != LSM6DSO_OK)
 80063b4:	f107 030c 	add.w	r3, r7, #12
 80063b8:	4619      	mov	r1, r3
 80063ba:	6878      	ldr	r0, [r7, #4]
 80063bc:	f7ff fcec 	bl	8005d98 <LSM6DSO_ACC_GetSensitivity>
 80063c0:	4603      	mov	r3, r0
 80063c2:	2b00      	cmp	r3, #0
 80063c4:	d002      	beq.n	80063cc <LSM6DSO_ACC_GetAxes+0x44>
  {
    return LSM6DSO_ERROR;
 80063c6:	f04f 33ff 	mov.w	r3, #4294967295
 80063ca:	e036      	b.n	800643a <LSM6DSO_ACC_GetAxes+0xb2>
  }

  /* Calculate the data. */
  Acceleration->x = (int32_t)((float_t)((float_t)data_raw.i16bit[0] * sensitivity));
 80063cc:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 80063d0:	4618      	mov	r0, r3
 80063d2:	f7fa fc2b 	bl	8000c2c <__aeabi_i2f>
 80063d6:	4602      	mov	r2, r0
 80063d8:	68fb      	ldr	r3, [r7, #12]
 80063da:	4619      	mov	r1, r3
 80063dc:	4610      	mov	r0, r2
 80063de:	f7fa fc79 	bl	8000cd4 <__aeabi_fmul>
 80063e2:	4603      	mov	r3, r0
 80063e4:	4618      	mov	r0, r3
 80063e6:	f7fa fe3b 	bl	8001060 <__aeabi_f2iz>
 80063ea:	4602      	mov	r2, r0
 80063ec:	683b      	ldr	r3, [r7, #0]
 80063ee:	601a      	str	r2, [r3, #0]
  Acceleration->y = (int32_t)((float_t)((float_t)data_raw.i16bit[1] * sensitivity));
 80063f0:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80063f4:	4618      	mov	r0, r3
 80063f6:	f7fa fc19 	bl	8000c2c <__aeabi_i2f>
 80063fa:	4602      	mov	r2, r0
 80063fc:	68fb      	ldr	r3, [r7, #12]
 80063fe:	4619      	mov	r1, r3
 8006400:	4610      	mov	r0, r2
 8006402:	f7fa fc67 	bl	8000cd4 <__aeabi_fmul>
 8006406:	4603      	mov	r3, r0
 8006408:	4618      	mov	r0, r3
 800640a:	f7fa fe29 	bl	8001060 <__aeabi_f2iz>
 800640e:	4602      	mov	r2, r0
 8006410:	683b      	ldr	r3, [r7, #0]
 8006412:	605a      	str	r2, [r3, #4]
  Acceleration->z = (int32_t)((float_t)((float_t)data_raw.i16bit[2] * sensitivity));
 8006414:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8006418:	4618      	mov	r0, r3
 800641a:	f7fa fc07 	bl	8000c2c <__aeabi_i2f>
 800641e:	4602      	mov	r2, r0
 8006420:	68fb      	ldr	r3, [r7, #12]
 8006422:	4619      	mov	r1, r3
 8006424:	4610      	mov	r0, r2
 8006426:	f7fa fc55 	bl	8000cd4 <__aeabi_fmul>
 800642a:	4603      	mov	r3, r0
 800642c:	4618      	mov	r0, r3
 800642e:	f7fa fe17 	bl	8001060 <__aeabi_f2iz>
 8006432:	4602      	mov	r2, r0
 8006434:	683b      	ldr	r3, [r7, #0]
 8006436:	609a      	str	r2, [r3, #8]

  return LSM6DSO_OK;
 8006438:	2300      	movs	r3, #0
}
 800643a:	4618      	mov	r0, r3
 800643c:	3718      	adds	r7, #24
 800643e:	46bd      	mov	sp, r7
 8006440:	bd80      	pop	{r7, pc}

08006442 <LSM6DSO_GYRO_Enable>:
  * @brief  Enable the LSM6DSO gyroscope sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_GYRO_Enable(LSM6DSO_Object_t *pObj)
{
 8006442:	b580      	push	{r7, lr}
 8006444:	b082      	sub	sp, #8
 8006446:	af00      	add	r7, sp, #0
 8006448:	6078      	str	r0, [r7, #4]
  /* Check if the component is already enabled */
  if (pObj->gyro_is_enabled == 1U)
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 8006450:	2b01      	cmp	r3, #1
 8006452:	d101      	bne.n	8006458 <LSM6DSO_GYRO_Enable+0x16>
  {
    return LSM6DSO_OK;
 8006454:	2300      	movs	r3, #0
 8006456:	e014      	b.n	8006482 <LSM6DSO_GYRO_Enable+0x40>
  }

  /* Output data rate selection. */
  if (lsm6dso_gy_data_rate_set(&(pObj->Ctx), pObj->gyro_odr) != LSM6DSO_OK)
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	f103 0220 	add.w	r2, r3, #32
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8006464:	4619      	mov	r1, r3
 8006466:	4610      	mov	r0, r2
 8006468:	f000 ff68 	bl	800733c <lsm6dso_gy_data_rate_set>
 800646c:	4603      	mov	r3, r0
 800646e:	2b00      	cmp	r3, #0
 8006470:	d002      	beq.n	8006478 <LSM6DSO_GYRO_Enable+0x36>
  {
    return LSM6DSO_ERROR;
 8006472:	f04f 33ff 	mov.w	r3, #4294967295
 8006476:	e004      	b.n	8006482 <LSM6DSO_GYRO_Enable+0x40>
  }

  pObj->gyro_is_enabled = 1;
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	2201      	movs	r2, #1
 800647c:	f883 2032 	strb.w	r2, [r3, #50]	@ 0x32

  return LSM6DSO_OK;
 8006480:	2300      	movs	r3, #0
}
 8006482:	4618      	mov	r0, r3
 8006484:	3708      	adds	r7, #8
 8006486:	46bd      	mov	sp, r7
 8006488:	bd80      	pop	{r7, pc}

0800648a <LSM6DSO_GYRO_Disable>:
  * @brief  Disable the LSM6DSO gyroscope sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_GYRO_Disable(LSM6DSO_Object_t *pObj)
{
 800648a:	b580      	push	{r7, lr}
 800648c:	b082      	sub	sp, #8
 800648e:	af00      	add	r7, sp, #0
 8006490:	6078      	str	r0, [r7, #4]
  /* Check if the component is already disabled */
  if (pObj->gyro_is_enabled == 0U)
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 8006498:	2b00      	cmp	r3, #0
 800649a:	d101      	bne.n	80064a0 <LSM6DSO_GYRO_Disable+0x16>
  {
    return LSM6DSO_OK;
 800649c:	2300      	movs	r3, #0
 800649e:	e01f      	b.n	80064e0 <LSM6DSO_GYRO_Disable+0x56>
  }

  /* Get current output data rate. */
  if (lsm6dso_gy_data_rate_get(&(pObj->Ctx), &pObj->gyro_odr) != LSM6DSO_OK)
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	f103 0220 	add.w	r2, r3, #32
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	3334      	adds	r3, #52	@ 0x34
 80064aa:	4619      	mov	r1, r3
 80064ac:	4610      	mov	r0, r2
 80064ae:	f001 f83f 	bl	8007530 <lsm6dso_gy_data_rate_get>
 80064b2:	4603      	mov	r3, r0
 80064b4:	2b00      	cmp	r3, #0
 80064b6:	d002      	beq.n	80064be <LSM6DSO_GYRO_Disable+0x34>
  {
    return LSM6DSO_ERROR;
 80064b8:	f04f 33ff 	mov.w	r3, #4294967295
 80064bc:	e010      	b.n	80064e0 <LSM6DSO_GYRO_Disable+0x56>
  }

  /* Output data rate selection - power down. */
  if (lsm6dso_gy_data_rate_set(&(pObj->Ctx), LSM6DSO_GY_ODR_OFF) != LSM6DSO_OK)
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	3320      	adds	r3, #32
 80064c2:	2100      	movs	r1, #0
 80064c4:	4618      	mov	r0, r3
 80064c6:	f000 ff39 	bl	800733c <lsm6dso_gy_data_rate_set>
 80064ca:	4603      	mov	r3, r0
 80064cc:	2b00      	cmp	r3, #0
 80064ce:	d002      	beq.n	80064d6 <LSM6DSO_GYRO_Disable+0x4c>
  {
    return LSM6DSO_ERROR;
 80064d0:	f04f 33ff 	mov.w	r3, #4294967295
 80064d4:	e004      	b.n	80064e0 <LSM6DSO_GYRO_Disable+0x56>
  }

  pObj->gyro_is_enabled = 0;
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	2200      	movs	r2, #0
 80064da:	f883 2032 	strb.w	r2, [r3, #50]	@ 0x32

  return LSM6DSO_OK;
 80064de:	2300      	movs	r3, #0
}
 80064e0:	4618      	mov	r0, r3
 80064e2:	3708      	adds	r7, #8
 80064e4:	46bd      	mov	sp, r7
 80064e6:	bd80      	pop	{r7, pc}

080064e8 <LSM6DSO_GYRO_GetSensitivity>:
  * @param  pObj the device pObj
  * @param  Sensitivity pointer
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_GYRO_GetSensitivity(LSM6DSO_Object_t *pObj, float_t *Sensitivity)
{
 80064e8:	b580      	push	{r7, lr}
 80064ea:	b084      	sub	sp, #16
 80064ec:	af00      	add	r7, sp, #0
 80064ee:	6078      	str	r0, [r7, #4]
 80064f0:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSO_OK;
 80064f2:	2300      	movs	r3, #0
 80064f4:	60fb      	str	r3, [r7, #12]
  lsm6dso_fs_g_t full_scale;

  /* Read actual full scale selection from sensor. */
  if (lsm6dso_gy_full_scale_get(&(pObj->Ctx), &full_scale) != LSM6DSO_OK)
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	3320      	adds	r3, #32
 80064fa:	f107 020b 	add.w	r2, r7, #11
 80064fe:	4611      	mov	r1, r2
 8006500:	4618      	mov	r0, r3
 8006502:	f000 fed9 	bl	80072b8 <lsm6dso_gy_full_scale_get>
 8006506:	4603      	mov	r3, r0
 8006508:	2b00      	cmp	r3, #0
 800650a:	d002      	beq.n	8006512 <LSM6DSO_GYRO_GetSensitivity+0x2a>
  {
    return LSM6DSO_ERROR;
 800650c:	f04f 33ff 	mov.w	r3, #4294967295
 8006510:	e02d      	b.n	800656e <LSM6DSO_GYRO_GetSensitivity+0x86>
  }

  /* Store the sensitivity based on actual full scale. */
  switch (full_scale)
 8006512:	7afb      	ldrb	r3, [r7, #11]
 8006514:	2b06      	cmp	r3, #6
 8006516:	d825      	bhi.n	8006564 <LSM6DSO_GYRO_GetSensitivity+0x7c>
 8006518:	a201      	add	r2, pc, #4	@ (adr r2, 8006520 <LSM6DSO_GYRO_GetSensitivity+0x38>)
 800651a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800651e:	bf00      	nop
 8006520:	08006545 	.word	0x08006545
 8006524:	0800653d 	.word	0x0800653d
 8006528:	0800654d 	.word	0x0800654d
 800652c:	08006565 	.word	0x08006565
 8006530:	08006555 	.word	0x08006555
 8006534:	08006565 	.word	0x08006565
 8006538:	0800655d 	.word	0x0800655d
  {
    case LSM6DSO_125dps:
      *Sensitivity = LSM6DSO_GYRO_SENSITIVITY_FS_125DPS;
 800653c:	683b      	ldr	r3, [r7, #0]
 800653e:	4a0e      	ldr	r2, [pc, #56]	@ (8006578 <LSM6DSO_GYRO_GetSensitivity+0x90>)
 8006540:	601a      	str	r2, [r3, #0]
      break;
 8006542:	e013      	b.n	800656c <LSM6DSO_GYRO_GetSensitivity+0x84>

    case LSM6DSO_250dps:
      *Sensitivity = LSM6DSO_GYRO_SENSITIVITY_FS_250DPS;
 8006544:	683b      	ldr	r3, [r7, #0]
 8006546:	4a0d      	ldr	r2, [pc, #52]	@ (800657c <LSM6DSO_GYRO_GetSensitivity+0x94>)
 8006548:	601a      	str	r2, [r3, #0]
      break;
 800654a:	e00f      	b.n	800656c <LSM6DSO_GYRO_GetSensitivity+0x84>

    case LSM6DSO_500dps:
      *Sensitivity = LSM6DSO_GYRO_SENSITIVITY_FS_500DPS;
 800654c:	683b      	ldr	r3, [r7, #0]
 800654e:	4a0c      	ldr	r2, [pc, #48]	@ (8006580 <LSM6DSO_GYRO_GetSensitivity+0x98>)
 8006550:	601a      	str	r2, [r3, #0]
      break;
 8006552:	e00b      	b.n	800656c <LSM6DSO_GYRO_GetSensitivity+0x84>

    case LSM6DSO_1000dps:
      *Sensitivity = LSM6DSO_GYRO_SENSITIVITY_FS_1000DPS;
 8006554:	683b      	ldr	r3, [r7, #0]
 8006556:	4a0b      	ldr	r2, [pc, #44]	@ (8006584 <LSM6DSO_GYRO_GetSensitivity+0x9c>)
 8006558:	601a      	str	r2, [r3, #0]
      break;
 800655a:	e007      	b.n	800656c <LSM6DSO_GYRO_GetSensitivity+0x84>

    case LSM6DSO_2000dps:
      *Sensitivity = LSM6DSO_GYRO_SENSITIVITY_FS_2000DPS;
 800655c:	683b      	ldr	r3, [r7, #0]
 800655e:	4a0a      	ldr	r2, [pc, #40]	@ (8006588 <LSM6DSO_GYRO_GetSensitivity+0xa0>)
 8006560:	601a      	str	r2, [r3, #0]
      break;
 8006562:	e003      	b.n	800656c <LSM6DSO_GYRO_GetSensitivity+0x84>

    default:
      ret = LSM6DSO_ERROR;
 8006564:	f04f 33ff 	mov.w	r3, #4294967295
 8006568:	60fb      	str	r3, [r7, #12]
      break;
 800656a:	bf00      	nop
  }

  return ret;
 800656c:	68fb      	ldr	r3, [r7, #12]
}
 800656e:	4618      	mov	r0, r3
 8006570:	3710      	adds	r7, #16
 8006572:	46bd      	mov	sp, r7
 8006574:	bd80      	pop	{r7, pc}
 8006576:	bf00      	nop
 8006578:	408c0000 	.word	0x408c0000
 800657c:	410c0000 	.word	0x410c0000
 8006580:	418c0000 	.word	0x418c0000
 8006584:	420c0000 	.word	0x420c0000
 8006588:	428c0000 	.word	0x428c0000

0800658c <LSM6DSO_GYRO_GetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr pointer where the output data rate is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_GYRO_GetOutputDataRate(LSM6DSO_Object_t *pObj, float_t *Odr)
{
 800658c:	b580      	push	{r7, lr}
 800658e:	b084      	sub	sp, #16
 8006590:	af00      	add	r7, sp, #0
 8006592:	6078      	str	r0, [r7, #4]
 8006594:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSO_OK;
 8006596:	2300      	movs	r3, #0
 8006598:	60fb      	str	r3, [r7, #12]
  lsm6dso_odr_g_t odr_low_level;

  /* Get current output data rate. */
  if (lsm6dso_gy_data_rate_get(&(pObj->Ctx), &odr_low_level) != LSM6DSO_OK)
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	3320      	adds	r3, #32
 800659e:	f107 020b 	add.w	r2, r7, #11
 80065a2:	4611      	mov	r1, r2
 80065a4:	4618      	mov	r0, r3
 80065a6:	f000 ffc3 	bl	8007530 <lsm6dso_gy_data_rate_get>
 80065aa:	4603      	mov	r3, r0
 80065ac:	2b00      	cmp	r3, #0
 80065ae:	d002      	beq.n	80065b6 <LSM6DSO_GYRO_GetOutputDataRate+0x2a>
  {
    return LSM6DSO_ERROR;
 80065b0:	f04f 33ff 	mov.w	r3, #4294967295
 80065b4:	e04e      	b.n	8006654 <LSM6DSO_GYRO_GetOutputDataRate+0xc8>
  }

  switch (odr_low_level)
 80065b6:	7afb      	ldrb	r3, [r7, #11]
 80065b8:	2b0a      	cmp	r3, #10
 80065ba:	d846      	bhi.n	800664a <LSM6DSO_GYRO_GetOutputDataRate+0xbe>
 80065bc:	a201      	add	r2, pc, #4	@ (adr r2, 80065c4 <LSM6DSO_GYRO_GetOutputDataRate+0x38>)
 80065be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80065c2:	bf00      	nop
 80065c4:	080065f1 	.word	0x080065f1
 80065c8:	080065fb 	.word	0x080065fb
 80065cc:	08006603 	.word	0x08006603
 80065d0:	0800660b 	.word	0x0800660b
 80065d4:	08006613 	.word	0x08006613
 80065d8:	0800661b 	.word	0x0800661b
 80065dc:	08006623 	.word	0x08006623
 80065e0:	0800662b 	.word	0x0800662b
 80065e4:	08006633 	.word	0x08006633
 80065e8:	0800663b 	.word	0x0800663b
 80065ec:	08006643 	.word	0x08006643
  {
    case LSM6DSO_GY_ODR_OFF:
      *Odr = 0.0f;
 80065f0:	683b      	ldr	r3, [r7, #0]
 80065f2:	f04f 0200 	mov.w	r2, #0
 80065f6:	601a      	str	r2, [r3, #0]
      break;
 80065f8:	e02b      	b.n	8006652 <LSM6DSO_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSO_GY_ODR_12Hz5:
      *Odr = 12.5f;
 80065fa:	683b      	ldr	r3, [r7, #0]
 80065fc:	4a17      	ldr	r2, [pc, #92]	@ (800665c <LSM6DSO_GYRO_GetOutputDataRate+0xd0>)
 80065fe:	601a      	str	r2, [r3, #0]
      break;
 8006600:	e027      	b.n	8006652 <LSM6DSO_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSO_GY_ODR_26Hz:
      *Odr = 26.0f;
 8006602:	683b      	ldr	r3, [r7, #0]
 8006604:	4a16      	ldr	r2, [pc, #88]	@ (8006660 <LSM6DSO_GYRO_GetOutputDataRate+0xd4>)
 8006606:	601a      	str	r2, [r3, #0]
      break;
 8006608:	e023      	b.n	8006652 <LSM6DSO_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSO_GY_ODR_52Hz:
      *Odr = 52.0f;
 800660a:	683b      	ldr	r3, [r7, #0]
 800660c:	4a15      	ldr	r2, [pc, #84]	@ (8006664 <LSM6DSO_GYRO_GetOutputDataRate+0xd8>)
 800660e:	601a      	str	r2, [r3, #0]
      break;
 8006610:	e01f      	b.n	8006652 <LSM6DSO_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSO_GY_ODR_104Hz:
      *Odr = 104.0f;
 8006612:	683b      	ldr	r3, [r7, #0]
 8006614:	4a14      	ldr	r2, [pc, #80]	@ (8006668 <LSM6DSO_GYRO_GetOutputDataRate+0xdc>)
 8006616:	601a      	str	r2, [r3, #0]
      break;
 8006618:	e01b      	b.n	8006652 <LSM6DSO_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSO_GY_ODR_208Hz:
      *Odr = 208.0f;
 800661a:	683b      	ldr	r3, [r7, #0]
 800661c:	4a13      	ldr	r2, [pc, #76]	@ (800666c <LSM6DSO_GYRO_GetOutputDataRate+0xe0>)
 800661e:	601a      	str	r2, [r3, #0]
      break;
 8006620:	e017      	b.n	8006652 <LSM6DSO_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSO_GY_ODR_417Hz:
      *Odr = 417.0f;
 8006622:	683b      	ldr	r3, [r7, #0]
 8006624:	4a12      	ldr	r2, [pc, #72]	@ (8006670 <LSM6DSO_GYRO_GetOutputDataRate+0xe4>)
 8006626:	601a      	str	r2, [r3, #0]
      break;
 8006628:	e013      	b.n	8006652 <LSM6DSO_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSO_GY_ODR_833Hz:
      *Odr = 833.0f;
 800662a:	683b      	ldr	r3, [r7, #0]
 800662c:	4a11      	ldr	r2, [pc, #68]	@ (8006674 <LSM6DSO_GYRO_GetOutputDataRate+0xe8>)
 800662e:	601a      	str	r2, [r3, #0]
      break;
 8006630:	e00f      	b.n	8006652 <LSM6DSO_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSO_GY_ODR_1667Hz:
      *Odr = 1667.0f;
 8006632:	683b      	ldr	r3, [r7, #0]
 8006634:	4a10      	ldr	r2, [pc, #64]	@ (8006678 <LSM6DSO_GYRO_GetOutputDataRate+0xec>)
 8006636:	601a      	str	r2, [r3, #0]
      break;
 8006638:	e00b      	b.n	8006652 <LSM6DSO_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSO_GY_ODR_3333Hz:
      *Odr = 3333.0f;
 800663a:	683b      	ldr	r3, [r7, #0]
 800663c:	4a0f      	ldr	r2, [pc, #60]	@ (800667c <LSM6DSO_GYRO_GetOutputDataRate+0xf0>)
 800663e:	601a      	str	r2, [r3, #0]
      break;
 8006640:	e007      	b.n	8006652 <LSM6DSO_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSO_GY_ODR_6667Hz:
      *Odr = 6667.0f;
 8006642:	683b      	ldr	r3, [r7, #0]
 8006644:	4a0e      	ldr	r2, [pc, #56]	@ (8006680 <LSM6DSO_GYRO_GetOutputDataRate+0xf4>)
 8006646:	601a      	str	r2, [r3, #0]
      break;
 8006648:	e003      	b.n	8006652 <LSM6DSO_GYRO_GetOutputDataRate+0xc6>

    default:
      ret = LSM6DSO_ERROR;
 800664a:	f04f 33ff 	mov.w	r3, #4294967295
 800664e:	60fb      	str	r3, [r7, #12]
      break;
 8006650:	bf00      	nop
  }

  return ret;
 8006652:	68fb      	ldr	r3, [r7, #12]
}
 8006654:	4618      	mov	r0, r3
 8006656:	3710      	adds	r7, #16
 8006658:	46bd      	mov	sp, r7
 800665a:	bd80      	pop	{r7, pc}
 800665c:	41480000 	.word	0x41480000
 8006660:	41d00000 	.word	0x41d00000
 8006664:	42500000 	.word	0x42500000
 8006668:	42d00000 	.word	0x42d00000
 800666c:	43500000 	.word	0x43500000
 8006670:	43d08000 	.word	0x43d08000
 8006674:	44504000 	.word	0x44504000
 8006678:	44d06000 	.word	0x44d06000
 800667c:	45505000 	.word	0x45505000
 8006680:	45d05800 	.word	0x45d05800

08006684 <LSM6DSO_GYRO_SetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr the output data rate value to be set
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_GYRO_SetOutputDataRate(LSM6DSO_Object_t *pObj, float_t Odr)
{
 8006684:	b580      	push	{r7, lr}
 8006686:	b082      	sub	sp, #8
 8006688:	af00      	add	r7, sp, #0
 800668a:	6078      	str	r0, [r7, #4]
 800668c:	6039      	str	r1, [r7, #0]
  return LSM6DSO_GYRO_SetOutputDataRate_With_Mode(pObj, Odr, LSM6DSO_GYRO_HIGH_PERFORMANCE_MODE);
 800668e:	2200      	movs	r2, #0
 8006690:	6839      	ldr	r1, [r7, #0]
 8006692:	6878      	ldr	r0, [r7, #4]
 8006694:	f000 f806 	bl	80066a4 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode>
 8006698:	4603      	mov	r3, r0
}
 800669a:	4618      	mov	r0, r3
 800669c:	3708      	adds	r7, #8
 800669e:	46bd      	mov	sp, r7
 80066a0:	bd80      	pop	{r7, pc}
	...

080066a4 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode>:
  * @param  Mode the gyroscope operating mode
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_GYRO_SetOutputDataRate_With_Mode(LSM6DSO_Object_t *pObj, float_t Odr,
                                                 LSM6DSO_GYRO_Operating_Mode_t Mode)
{
 80066a4:	b580      	push	{r7, lr}
 80066a6:	b088      	sub	sp, #32
 80066a8:	af00      	add	r7, sp, #0
 80066aa:	60f8      	str	r0, [r7, #12]
 80066ac:	60b9      	str	r1, [r7, #8]
 80066ae:	4613      	mov	r3, r2
 80066b0:	71fb      	strb	r3, [r7, #7]
  int32_t ret = LSM6DSO_OK;
 80066b2:	2300      	movs	r3, #0
 80066b4:	61fb      	str	r3, [r7, #28]
  float_t newOdr = Odr;
 80066b6:	68bb      	ldr	r3, [r7, #8]
 80066b8:	61bb      	str	r3, [r7, #24]

  switch (Mode)
 80066ba:	79fb      	ldrb	r3, [r7, #7]
 80066bc:	2b00      	cmp	r3, #0
 80066be:	d002      	beq.n	80066c6 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0x22>
 80066c0:	2b01      	cmp	r3, #1
 80066c2:	d028      	beq.n	8006716 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0x72>
 80066c4:	e05a      	b.n	800677c <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0xd8>
    case LSM6DSO_GYRO_HIGH_PERFORMANCE_MODE:
    {
      /* We must uncheck Low Power bit if it is enabled */
      lsm6dso_ctrl7_g_t val1;

      if (lsm6dso_read_reg(&(pObj->Ctx), LSM6DSO_CTRL7_G, (uint8_t *)&val1, 1) != LSM6DSO_OK)
 80066c6:	68fb      	ldr	r3, [r7, #12]
 80066c8:	f103 0020 	add.w	r0, r3, #32
 80066cc:	f107 0214 	add.w	r2, r7, #20
 80066d0:	2301      	movs	r3, #1
 80066d2:	2116      	movs	r1, #22
 80066d4:	f000 fbda 	bl	8006e8c <lsm6dso_read_reg>
 80066d8:	4603      	mov	r3, r0
 80066da:	2b00      	cmp	r3, #0
 80066dc:	d002      	beq.n	80066e4 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0x40>
      {
        return LSM6DSO_ERROR;
 80066de:	f04f 33ff 	mov.w	r3, #4294967295
 80066e2:	e068      	b.n	80067b6 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0x112>
      }

      if (val1.g_hm_mode != 0U)
 80066e4:	7d3b      	ldrb	r3, [r7, #20]
 80066e6:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 80066ea:	b2db      	uxtb	r3, r3
 80066ec:	2b00      	cmp	r3, #0
 80066ee:	d049      	beq.n	8006784 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0xe0>
      {
        val1.g_hm_mode = 0U;
 80066f0:	7d3b      	ldrb	r3, [r7, #20]
 80066f2:	f36f 13c7 	bfc	r3, #7, #1
 80066f6:	753b      	strb	r3, [r7, #20]
        if (lsm6dso_write_reg(&(pObj->Ctx), LSM6DSO_CTRL7_G, (uint8_t *)&val1, 1) != LSM6DSO_OK)
 80066f8:	68fb      	ldr	r3, [r7, #12]
 80066fa:	f103 0020 	add.w	r0, r3, #32
 80066fe:	f107 0214 	add.w	r2, r7, #20
 8006702:	2301      	movs	r3, #1
 8006704:	2116      	movs	r1, #22
 8006706:	f000 fbd9 	bl	8006ebc <lsm6dso_write_reg>
 800670a:	4603      	mov	r3, r0
 800670c:	2b00      	cmp	r3, #0
 800670e:	d039      	beq.n	8006784 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0xe0>
        {
          return LSM6DSO_ERROR;
 8006710:	f04f 33ff 	mov.w	r3, #4294967295
 8006714:	e04f      	b.n	80067b6 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0x112>
    case LSM6DSO_GYRO_LOW_POWER_NORMAL_MODE:
    {
      /* We must check the Low Power bit if it is unchecked */
      lsm6dso_ctrl7_g_t val1;

      if (lsm6dso_read_reg(&(pObj->Ctx), LSM6DSO_CTRL7_G, (uint8_t *)&val1, 1) != LSM6DSO_OK)
 8006716:	68fb      	ldr	r3, [r7, #12]
 8006718:	f103 0020 	add.w	r0, r3, #32
 800671c:	f107 0210 	add.w	r2, r7, #16
 8006720:	2301      	movs	r3, #1
 8006722:	2116      	movs	r1, #22
 8006724:	f000 fbb2 	bl	8006e8c <lsm6dso_read_reg>
 8006728:	4603      	mov	r3, r0
 800672a:	2b00      	cmp	r3, #0
 800672c:	d002      	beq.n	8006734 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0x90>
      {
        return LSM6DSO_ERROR;
 800672e:	f04f 33ff 	mov.w	r3, #4294967295
 8006732:	e040      	b.n	80067b6 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0x112>
      }

      if (val1.g_hm_mode == 0U)
 8006734:	7c3b      	ldrb	r3, [r7, #16]
 8006736:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800673a:	b2db      	uxtb	r3, r3
 800673c:	2b00      	cmp	r3, #0
 800673e:	d112      	bne.n	8006766 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0xc2>
      {
        val1.g_hm_mode = 1U;
 8006740:	7c3b      	ldrb	r3, [r7, #16]
 8006742:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006746:	743b      	strb	r3, [r7, #16]
        if (lsm6dso_write_reg(&(pObj->Ctx), LSM6DSO_CTRL7_G, (uint8_t *)&val1, 1) != LSM6DSO_OK)
 8006748:	68fb      	ldr	r3, [r7, #12]
 800674a:	f103 0020 	add.w	r0, r3, #32
 800674e:	f107 0210 	add.w	r2, r7, #16
 8006752:	2301      	movs	r3, #1
 8006754:	2116      	movs	r1, #22
 8006756:	f000 fbb1 	bl	8006ebc <lsm6dso_write_reg>
 800675a:	4603      	mov	r3, r0
 800675c:	2b00      	cmp	r3, #0
 800675e:	d002      	beq.n	8006766 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0xc2>
        {
          return LSM6DSO_ERROR;
 8006760:	f04f 33ff 	mov.w	r3, #4294967295
 8006764:	e027      	b.n	80067b6 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0x112>
        }
      }

      /* Now we need to limit the ODR to 208 Hz if it is higher */
      if (newOdr > 208.0f)
 8006766:	4916      	ldr	r1, [pc, #88]	@ (80067c0 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0x11c>)
 8006768:	69b8      	ldr	r0, [r7, #24]
 800676a:	f7fa fc6f 	bl	800104c <__aeabi_fcmpgt>
 800676e:	4603      	mov	r3, r0
 8006770:	2b00      	cmp	r3, #0
 8006772:	d100      	bne.n	8006776 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0xd2>
      {
        newOdr = 208.0f;
      }
      break;
 8006774:	e007      	b.n	8006786 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0xe2>
        newOdr = 208.0f;
 8006776:	4b12      	ldr	r3, [pc, #72]	@ (80067c0 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0x11c>)
 8006778:	61bb      	str	r3, [r7, #24]
 800677a:	e004      	b.n	8006786 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0xe2>
    }
    default:
      ret = LSM6DSO_ERROR;
 800677c:	f04f 33ff 	mov.w	r3, #4294967295
 8006780:	61fb      	str	r3, [r7, #28]
      break;
 8006782:	e000      	b.n	8006786 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0xe2>
      break;
 8006784:	bf00      	nop
  }

  if (ret == LSM6DSO_ERROR)
 8006786:	69fb      	ldr	r3, [r7, #28]
 8006788:	f1b3 3fff 	cmp.w	r3, #4294967295
 800678c:	d102      	bne.n	8006794 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0xf0>
  {
    return LSM6DSO_ERROR;
 800678e:	f04f 33ff 	mov.w	r3, #4294967295
 8006792:	e010      	b.n	80067b6 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0x112>
  }

  if (pObj->gyro_is_enabled == 1U)
 8006794:	68fb      	ldr	r3, [r7, #12]
 8006796:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 800679a:	2b01      	cmp	r3, #1
 800679c:	d105      	bne.n	80067aa <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0x106>
  {
    ret = LSM6DSO_GYRO_SetOutputDataRate_When_Enabled(pObj, newOdr);
 800679e:	69b9      	ldr	r1, [r7, #24]
 80067a0:	68f8      	ldr	r0, [r7, #12]
 80067a2:	f000 fa4f 	bl	8006c44 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled>
 80067a6:	61f8      	str	r0, [r7, #28]
 80067a8:	e004      	b.n	80067b4 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0x110>
  }
  else
  {
    ret = LSM6DSO_GYRO_SetOutputDataRate_When_Disabled(pObj, newOdr);
 80067aa:	69b9      	ldr	r1, [r7, #24]
 80067ac:	68f8      	ldr	r0, [r7, #12]
 80067ae:	f000 fac5 	bl	8006d3c <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled>
 80067b2:	61f8      	str	r0, [r7, #28]
  }

  return ret;
 80067b4:	69fb      	ldr	r3, [r7, #28]
}
 80067b6:	4618      	mov	r0, r3
 80067b8:	3720      	adds	r7, #32
 80067ba:	46bd      	mov	sp, r7
 80067bc:	bd80      	pop	{r7, pc}
 80067be:	bf00      	nop
 80067c0:	43500000 	.word	0x43500000

080067c4 <LSM6DSO_GYRO_GetFullScale>:
  * @param  pObj the device pObj
  * @param  FullScale pointer where the full scale is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_GYRO_GetFullScale(LSM6DSO_Object_t *pObj, int32_t  *FullScale)
{
 80067c4:	b580      	push	{r7, lr}
 80067c6:	b084      	sub	sp, #16
 80067c8:	af00      	add	r7, sp, #0
 80067ca:	6078      	str	r0, [r7, #4]
 80067cc:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSO_OK;
 80067ce:	2300      	movs	r3, #0
 80067d0:	60fb      	str	r3, [r7, #12]
  lsm6dso_fs_g_t fs_low_level;

  /* Read actual full scale selection from sensor. */
  if (lsm6dso_gy_full_scale_get(&(pObj->Ctx), &fs_low_level) != LSM6DSO_OK)
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	3320      	adds	r3, #32
 80067d6:	f107 020b 	add.w	r2, r7, #11
 80067da:	4611      	mov	r1, r2
 80067dc:	4618      	mov	r0, r3
 80067de:	f000 fd6b 	bl	80072b8 <lsm6dso_gy_full_scale_get>
 80067e2:	4603      	mov	r3, r0
 80067e4:	2b00      	cmp	r3, #0
 80067e6:	d002      	beq.n	80067ee <LSM6DSO_GYRO_GetFullScale+0x2a>
  {
    return LSM6DSO_ERROR;
 80067e8:	f04f 33ff 	mov.w	r3, #4294967295
 80067ec:	e030      	b.n	8006850 <LSM6DSO_GYRO_GetFullScale+0x8c>
  }

  switch (fs_low_level)
 80067ee:	7afb      	ldrb	r3, [r7, #11]
 80067f0:	2b06      	cmp	r3, #6
 80067f2:	d828      	bhi.n	8006846 <LSM6DSO_GYRO_GetFullScale+0x82>
 80067f4:	a201      	add	r2, pc, #4	@ (adr r2, 80067fc <LSM6DSO_GYRO_GetFullScale+0x38>)
 80067f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80067fa:	bf00      	nop
 80067fc:	08006821 	.word	0x08006821
 8006800:	08006819 	.word	0x08006819
 8006804:	08006829 	.word	0x08006829
 8006808:	08006847 	.word	0x08006847
 800680c:	08006833 	.word	0x08006833
 8006810:	08006847 	.word	0x08006847
 8006814:	0800683d 	.word	0x0800683d
  {
    case LSM6DSO_125dps:
      *FullScale =  125;
 8006818:	683b      	ldr	r3, [r7, #0]
 800681a:	227d      	movs	r2, #125	@ 0x7d
 800681c:	601a      	str	r2, [r3, #0]
      break;
 800681e:	e016      	b.n	800684e <LSM6DSO_GYRO_GetFullScale+0x8a>

    case LSM6DSO_250dps:
      *FullScale =  250;
 8006820:	683b      	ldr	r3, [r7, #0]
 8006822:	22fa      	movs	r2, #250	@ 0xfa
 8006824:	601a      	str	r2, [r3, #0]
      break;
 8006826:	e012      	b.n	800684e <LSM6DSO_GYRO_GetFullScale+0x8a>

    case LSM6DSO_500dps:
      *FullScale =  500;
 8006828:	683b      	ldr	r3, [r7, #0]
 800682a:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 800682e:	601a      	str	r2, [r3, #0]
      break;
 8006830:	e00d      	b.n	800684e <LSM6DSO_GYRO_GetFullScale+0x8a>

    case LSM6DSO_1000dps:
      *FullScale = 1000;
 8006832:	683b      	ldr	r3, [r7, #0]
 8006834:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8006838:	601a      	str	r2, [r3, #0]
      break;
 800683a:	e008      	b.n	800684e <LSM6DSO_GYRO_GetFullScale+0x8a>

    case LSM6DSO_2000dps:
      *FullScale = 2000;
 800683c:	683b      	ldr	r3, [r7, #0]
 800683e:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 8006842:	601a      	str	r2, [r3, #0]
      break;
 8006844:	e003      	b.n	800684e <LSM6DSO_GYRO_GetFullScale+0x8a>

    default:
      ret = LSM6DSO_ERROR;
 8006846:	f04f 33ff 	mov.w	r3, #4294967295
 800684a:	60fb      	str	r3, [r7, #12]
      break;
 800684c:	bf00      	nop
  }

  return ret;
 800684e:	68fb      	ldr	r3, [r7, #12]
}
 8006850:	4618      	mov	r0, r3
 8006852:	3710      	adds	r7, #16
 8006854:	46bd      	mov	sp, r7
 8006856:	bd80      	pop	{r7, pc}

08006858 <LSM6DSO_GYRO_SetFullScale>:
  * @param  pObj the device pObj
  * @param  FullScale the functional full scale to be set
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_GYRO_SetFullScale(LSM6DSO_Object_t *pObj, int32_t FullScale)
{
 8006858:	b580      	push	{r7, lr}
 800685a:	b084      	sub	sp, #16
 800685c:	af00      	add	r7, sp, #0
 800685e:	6078      	str	r0, [r7, #4]
 8006860:	6039      	str	r1, [r7, #0]
  lsm6dso_fs_g_t new_fs;

  new_fs = (FullScale <= 125)  ? LSM6DSO_125dps
           : (FullScale <= 250)  ? LSM6DSO_250dps
 8006862:	683b      	ldr	r3, [r7, #0]
 8006864:	2b7d      	cmp	r3, #125	@ 0x7d
 8006866:	dd12      	ble.n	800688e <LSM6DSO_GYRO_SetFullScale+0x36>
 8006868:	683b      	ldr	r3, [r7, #0]
 800686a:	2bfa      	cmp	r3, #250	@ 0xfa
 800686c:	dd0d      	ble.n	800688a <LSM6DSO_GYRO_SetFullScale+0x32>
 800686e:	683b      	ldr	r3, [r7, #0]
 8006870:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8006874:	dd07      	ble.n	8006886 <LSM6DSO_GYRO_SetFullScale+0x2e>
 8006876:	683b      	ldr	r3, [r7, #0]
 8006878:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800687c:	dc01      	bgt.n	8006882 <LSM6DSO_GYRO_SetFullScale+0x2a>
 800687e:	2304      	movs	r3, #4
 8006880:	e006      	b.n	8006890 <LSM6DSO_GYRO_SetFullScale+0x38>
 8006882:	2306      	movs	r3, #6
 8006884:	e004      	b.n	8006890 <LSM6DSO_GYRO_SetFullScale+0x38>
 8006886:	2302      	movs	r3, #2
 8006888:	e002      	b.n	8006890 <LSM6DSO_GYRO_SetFullScale+0x38>
 800688a:	2300      	movs	r3, #0
 800688c:	e000      	b.n	8006890 <LSM6DSO_GYRO_SetFullScale+0x38>
 800688e:	2301      	movs	r3, #1
  new_fs = (FullScale <= 125)  ? LSM6DSO_125dps
 8006890:	73fb      	strb	r3, [r7, #15]
           : (FullScale <= 500)  ? LSM6DSO_500dps
           : (FullScale <= 1000) ? LSM6DSO_1000dps
           :                       LSM6DSO_2000dps;

  if (lsm6dso_gy_full_scale_set(&(pObj->Ctx), new_fs) != LSM6DSO_OK)
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	3320      	adds	r3, #32
 8006896:	7bfa      	ldrb	r2, [r7, #15]
 8006898:	4611      	mov	r1, r2
 800689a:	4618      	mov	r0, r3
 800689c:	f000 fce6 	bl	800726c <lsm6dso_gy_full_scale_set>
 80068a0:	4603      	mov	r3, r0
 80068a2:	2b00      	cmp	r3, #0
 80068a4:	d002      	beq.n	80068ac <LSM6DSO_GYRO_SetFullScale+0x54>
  {
    return LSM6DSO_ERROR;
 80068a6:	f04f 33ff 	mov.w	r3, #4294967295
 80068aa:	e000      	b.n	80068ae <LSM6DSO_GYRO_SetFullScale+0x56>
  }

  return LSM6DSO_OK;
 80068ac:	2300      	movs	r3, #0
}
 80068ae:	4618      	mov	r0, r3
 80068b0:	3710      	adds	r7, #16
 80068b2:	46bd      	mov	sp, r7
 80068b4:	bd80      	pop	{r7, pc}

080068b6 <LSM6DSO_GYRO_GetAxesRaw>:
  * @param  pObj the device pObj
  * @param  Value pointer where the raw values of the axes are written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_GYRO_GetAxesRaw(LSM6DSO_Object_t *pObj, LSM6DSO_AxesRaw_t *Value)
{
 80068b6:	b580      	push	{r7, lr}
 80068b8:	b084      	sub	sp, #16
 80068ba:	af00      	add	r7, sp, #0
 80068bc:	6078      	str	r0, [r7, #4]
 80068be:	6039      	str	r1, [r7, #0]
  lsm6dso_axis3bit16_t data_raw;

  /* Read raw data values. */
  if (lsm6dso_angular_rate_raw_get(&(pObj->Ctx), data_raw.i16bit) != LSM6DSO_OK)
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	3320      	adds	r3, #32
 80068c4:	f107 0208 	add.w	r2, r7, #8
 80068c8:	4611      	mov	r1, r2
 80068ca:	4618      	mov	r0, r3
 80068cc:	f000 feb8 	bl	8007640 <lsm6dso_angular_rate_raw_get>
 80068d0:	4603      	mov	r3, r0
 80068d2:	2b00      	cmp	r3, #0
 80068d4:	d002      	beq.n	80068dc <LSM6DSO_GYRO_GetAxesRaw+0x26>
  {
    return LSM6DSO_ERROR;
 80068d6:	f04f 33ff 	mov.w	r3, #4294967295
 80068da:	e00c      	b.n	80068f6 <LSM6DSO_GYRO_GetAxesRaw+0x40>
  }

  /* Format the data. */
  Value->x = data_raw.i16bit[0];
 80068dc:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 80068e0:	683b      	ldr	r3, [r7, #0]
 80068e2:	801a      	strh	r2, [r3, #0]
  Value->y = data_raw.i16bit[1];
 80068e4:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 80068e8:	683b      	ldr	r3, [r7, #0]
 80068ea:	805a      	strh	r2, [r3, #2]
  Value->z = data_raw.i16bit[2];
 80068ec:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 80068f0:	683b      	ldr	r3, [r7, #0]
 80068f2:	809a      	strh	r2, [r3, #4]

  return LSM6DSO_OK;
 80068f4:	2300      	movs	r3, #0
}
 80068f6:	4618      	mov	r0, r3
 80068f8:	3710      	adds	r7, #16
 80068fa:	46bd      	mov	sp, r7
 80068fc:	bd80      	pop	{r7, pc}

080068fe <LSM6DSO_GYRO_GetAxes>:
  * @param  pObj the device pObj
  * @param  AngularRate pointer where the values of the axes are written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_GYRO_GetAxes(LSM6DSO_Object_t *pObj, LSM6DSO_Axes_t *AngularRate)
{
 80068fe:	b580      	push	{r7, lr}
 8006900:	b086      	sub	sp, #24
 8006902:	af00      	add	r7, sp, #0
 8006904:	6078      	str	r0, [r7, #4]
 8006906:	6039      	str	r1, [r7, #0]
  lsm6dso_axis3bit16_t data_raw;
  float_t sensitivity = 0.0f;
 8006908:	f04f 0300 	mov.w	r3, #0
 800690c:	60fb      	str	r3, [r7, #12]

  /* Read raw data values. */
  if (lsm6dso_angular_rate_raw_get(&(pObj->Ctx), data_raw.i16bit) != LSM6DSO_OK)
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	3320      	adds	r3, #32
 8006912:	f107 0210 	add.w	r2, r7, #16
 8006916:	4611      	mov	r1, r2
 8006918:	4618      	mov	r0, r3
 800691a:	f000 fe91 	bl	8007640 <lsm6dso_angular_rate_raw_get>
 800691e:	4603      	mov	r3, r0
 8006920:	2b00      	cmp	r3, #0
 8006922:	d002      	beq.n	800692a <LSM6DSO_GYRO_GetAxes+0x2c>
  {
    return LSM6DSO_ERROR;
 8006924:	f04f 33ff 	mov.w	r3, #4294967295
 8006928:	e042      	b.n	80069b0 <LSM6DSO_GYRO_GetAxes+0xb2>
  }

  /* Get LSM6DSO actual sensitivity. */
  if (LSM6DSO_GYRO_GetSensitivity(pObj, &sensitivity) != LSM6DSO_OK)
 800692a:	f107 030c 	add.w	r3, r7, #12
 800692e:	4619      	mov	r1, r3
 8006930:	6878      	ldr	r0, [r7, #4]
 8006932:	f7ff fdd9 	bl	80064e8 <LSM6DSO_GYRO_GetSensitivity>
 8006936:	4603      	mov	r3, r0
 8006938:	2b00      	cmp	r3, #0
 800693a:	d002      	beq.n	8006942 <LSM6DSO_GYRO_GetAxes+0x44>
  {
    return LSM6DSO_ERROR;
 800693c:	f04f 33ff 	mov.w	r3, #4294967295
 8006940:	e036      	b.n	80069b0 <LSM6DSO_GYRO_GetAxes+0xb2>
  }

  /* Calculate the data. */
  AngularRate->x = (int32_t)((float_t)((float_t)data_raw.i16bit[0] * sensitivity));
 8006942:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8006946:	4618      	mov	r0, r3
 8006948:	f7fa f970 	bl	8000c2c <__aeabi_i2f>
 800694c:	4602      	mov	r2, r0
 800694e:	68fb      	ldr	r3, [r7, #12]
 8006950:	4619      	mov	r1, r3
 8006952:	4610      	mov	r0, r2
 8006954:	f7fa f9be 	bl	8000cd4 <__aeabi_fmul>
 8006958:	4603      	mov	r3, r0
 800695a:	4618      	mov	r0, r3
 800695c:	f7fa fb80 	bl	8001060 <__aeabi_f2iz>
 8006960:	4602      	mov	r2, r0
 8006962:	683b      	ldr	r3, [r7, #0]
 8006964:	601a      	str	r2, [r3, #0]
  AngularRate->y = (int32_t)((float_t)((float_t)data_raw.i16bit[1] * sensitivity));
 8006966:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800696a:	4618      	mov	r0, r3
 800696c:	f7fa f95e 	bl	8000c2c <__aeabi_i2f>
 8006970:	4602      	mov	r2, r0
 8006972:	68fb      	ldr	r3, [r7, #12]
 8006974:	4619      	mov	r1, r3
 8006976:	4610      	mov	r0, r2
 8006978:	f7fa f9ac 	bl	8000cd4 <__aeabi_fmul>
 800697c:	4603      	mov	r3, r0
 800697e:	4618      	mov	r0, r3
 8006980:	f7fa fb6e 	bl	8001060 <__aeabi_f2iz>
 8006984:	4602      	mov	r2, r0
 8006986:	683b      	ldr	r3, [r7, #0]
 8006988:	605a      	str	r2, [r3, #4]
  AngularRate->z = (int32_t)((float_t)((float_t)data_raw.i16bit[2] * sensitivity));
 800698a:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800698e:	4618      	mov	r0, r3
 8006990:	f7fa f94c 	bl	8000c2c <__aeabi_i2f>
 8006994:	4602      	mov	r2, r0
 8006996:	68fb      	ldr	r3, [r7, #12]
 8006998:	4619      	mov	r1, r3
 800699a:	4610      	mov	r0, r2
 800699c:	f7fa f99a 	bl	8000cd4 <__aeabi_fmul>
 80069a0:	4603      	mov	r3, r0
 80069a2:	4618      	mov	r0, r3
 80069a4:	f7fa fb5c 	bl	8001060 <__aeabi_f2iz>
 80069a8:	4602      	mov	r2, r0
 80069aa:	683b      	ldr	r3, [r7, #0]
 80069ac:	609a      	str	r2, [r3, #8]

  return LSM6DSO_OK;
 80069ae:	2300      	movs	r3, #0
}
 80069b0:	4618      	mov	r0, r3
 80069b2:	3718      	adds	r7, #24
 80069b4:	46bd      	mov	sp, r7
 80069b6:	bd80      	pop	{r7, pc}

080069b8 <LSM6DSO_Write_Reg>:
  * @param  Reg address to be written
  * @param  Data value to be written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_Write_Reg(LSM6DSO_Object_t *pObj, uint8_t Reg, uint8_t Data)
{
 80069b8:	b580      	push	{r7, lr}
 80069ba:	b082      	sub	sp, #8
 80069bc:	af00      	add	r7, sp, #0
 80069be:	6078      	str	r0, [r7, #4]
 80069c0:	460b      	mov	r3, r1
 80069c2:	70fb      	strb	r3, [r7, #3]
 80069c4:	4613      	mov	r3, r2
 80069c6:	70bb      	strb	r3, [r7, #2]
  if (lsm6dso_write_reg(&(pObj->Ctx), Reg, &Data, 1) != LSM6DSO_OK)
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	f103 0020 	add.w	r0, r3, #32
 80069ce:	1cba      	adds	r2, r7, #2
 80069d0:	78f9      	ldrb	r1, [r7, #3]
 80069d2:	2301      	movs	r3, #1
 80069d4:	f000 fa72 	bl	8006ebc <lsm6dso_write_reg>
 80069d8:	4603      	mov	r3, r0
 80069da:	2b00      	cmp	r3, #0
 80069dc:	d002      	beq.n	80069e4 <LSM6DSO_Write_Reg+0x2c>
  {
    return LSM6DSO_ERROR;
 80069de:	f04f 33ff 	mov.w	r3, #4294967295
 80069e2:	e000      	b.n	80069e6 <LSM6DSO_Write_Reg+0x2e>
  }

  return LSM6DSO_OK;
 80069e4:	2300      	movs	r3, #0
}
 80069e6:	4618      	mov	r0, r3
 80069e8:	3708      	adds	r7, #8
 80069ea:	46bd      	mov	sp, r7
 80069ec:	bd80      	pop	{r7, pc}

080069ee <LSM6DSO_Set_Mem_Bank>:
  * @param  Val the value of memory bank in reg FUNC_CFG_ACCESS
  *         0 - LSM6DSO_USER_BANK, 1 - LSM6DSO_SENSOR_HUB_BANK, 2 - LSM6DSO_EMBEDDED_FUNC_BANK
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_Set_Mem_Bank(LSM6DSO_Object_t *pObj, uint8_t Val)
{
 80069ee:	b580      	push	{r7, lr}
 80069f0:	b084      	sub	sp, #16
 80069f2:	af00      	add	r7, sp, #0
 80069f4:	6078      	str	r0, [r7, #4]
 80069f6:	460b      	mov	r3, r1
 80069f8:	70fb      	strb	r3, [r7, #3]
  int32_t ret = LSM6DSO_OK;
 80069fa:	2300      	movs	r3, #0
 80069fc:	60fb      	str	r3, [r7, #12]
  lsm6dso_reg_access_t reg;

  reg = (Val == 1U) ? LSM6DSO_SENSOR_HUB_BANK
        : (Val == 2U) ? LSM6DSO_EMBEDDED_FUNC_BANK
 80069fe:	78fb      	ldrb	r3, [r7, #3]
 8006a00:	2b01      	cmp	r3, #1
 8006a02:	d006      	beq.n	8006a12 <LSM6DSO_Set_Mem_Bank+0x24>
 8006a04:	78fb      	ldrb	r3, [r7, #3]
 8006a06:	2b02      	cmp	r3, #2
 8006a08:	d101      	bne.n	8006a0e <LSM6DSO_Set_Mem_Bank+0x20>
 8006a0a:	2302      	movs	r3, #2
 8006a0c:	e002      	b.n	8006a14 <LSM6DSO_Set_Mem_Bank+0x26>
 8006a0e:	2300      	movs	r3, #0
 8006a10:	e000      	b.n	8006a14 <LSM6DSO_Set_Mem_Bank+0x26>
 8006a12:	2301      	movs	r3, #1
  reg = (Val == 1U) ? LSM6DSO_SENSOR_HUB_BANK
 8006a14:	72fb      	strb	r3, [r7, #11]
        :               LSM6DSO_USER_BANK;

  if (lsm6dso_mem_bank_set(&(pObj->Ctx), reg) != LSM6DSO_OK)
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	3320      	adds	r3, #32
 8006a1a:	7afa      	ldrb	r2, [r7, #11]
 8006a1c:	4611      	mov	r1, r2
 8006a1e:	4618      	mov	r0, r3
 8006a20:	f000 fe9e 	bl	8007760 <lsm6dso_mem_bank_set>
 8006a24:	4603      	mov	r3, r0
 8006a26:	2b00      	cmp	r3, #0
 8006a28:	d002      	beq.n	8006a30 <LSM6DSO_Set_Mem_Bank+0x42>
  {
    ret = LSM6DSO_ERROR;
 8006a2a:	f04f 33ff 	mov.w	r3, #4294967295
 8006a2e:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8006a30:	68fb      	ldr	r3, [r7, #12]
}
 8006a32:	4618      	mov	r0, r3
 8006a34:	3710      	adds	r7, #16
 8006a36:	46bd      	mov	sp, r7
 8006a38:	bd80      	pop	{r7, pc}
	...

08006a3c <LSM6DSO_ACC_SetOutputDataRate_When_Enabled>:
  * @param  pObj the device pObj
  * @param  Odr the functional output data rate to be set
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t LSM6DSO_ACC_SetOutputDataRate_When_Enabled(LSM6DSO_Object_t *pObj, float_t Odr)
{
 8006a3c:	b580      	push	{r7, lr}
 8006a3e:	b084      	sub	sp, #16
 8006a40:	af00      	add	r7, sp, #0
 8006a42:	6078      	str	r0, [r7, #4]
 8006a44:	6039      	str	r1, [r7, #0]
  lsm6dso_odr_xl_t new_odr;

  new_odr = (Odr <=    1.6f) ? LSM6DSO_XL_ODR_1Hz6
            : (Odr <=   12.5f) ? LSM6DSO_XL_ODR_12Hz5
 8006a46:	4937      	ldr	r1, [pc, #220]	@ (8006b24 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0xe8>)
 8006a48:	6838      	ldr	r0, [r7, #0]
 8006a4a:	f7fa faeb 	bl	8001024 <__aeabi_fcmple>
 8006a4e:	4603      	mov	r3, r0
 8006a50:	2b00      	cmp	r3, #0
 8006a52:	d001      	beq.n	8006a58 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x1c>
 8006a54:	230b      	movs	r3, #11
 8006a56:	e051      	b.n	8006afc <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0xc0>
 8006a58:	4933      	ldr	r1, [pc, #204]	@ (8006b28 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0xec>)
 8006a5a:	6838      	ldr	r0, [r7, #0]
 8006a5c:	f7fa fae2 	bl	8001024 <__aeabi_fcmple>
 8006a60:	4603      	mov	r3, r0
 8006a62:	2b00      	cmp	r3, #0
 8006a64:	d001      	beq.n	8006a6a <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x2e>
 8006a66:	2301      	movs	r3, #1
 8006a68:	e048      	b.n	8006afc <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0xc0>
 8006a6a:	4930      	ldr	r1, [pc, #192]	@ (8006b2c <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0xf0>)
 8006a6c:	6838      	ldr	r0, [r7, #0]
 8006a6e:	f7fa fad9 	bl	8001024 <__aeabi_fcmple>
 8006a72:	4603      	mov	r3, r0
 8006a74:	2b00      	cmp	r3, #0
 8006a76:	d001      	beq.n	8006a7c <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x40>
 8006a78:	2302      	movs	r3, #2
 8006a7a:	e03f      	b.n	8006afc <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0xc0>
 8006a7c:	492c      	ldr	r1, [pc, #176]	@ (8006b30 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0xf4>)
 8006a7e:	6838      	ldr	r0, [r7, #0]
 8006a80:	f7fa fad0 	bl	8001024 <__aeabi_fcmple>
 8006a84:	4603      	mov	r3, r0
 8006a86:	2b00      	cmp	r3, #0
 8006a88:	d001      	beq.n	8006a8e <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x52>
 8006a8a:	2303      	movs	r3, #3
 8006a8c:	e036      	b.n	8006afc <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0xc0>
 8006a8e:	4929      	ldr	r1, [pc, #164]	@ (8006b34 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0xf8>)
 8006a90:	6838      	ldr	r0, [r7, #0]
 8006a92:	f7fa fac7 	bl	8001024 <__aeabi_fcmple>
 8006a96:	4603      	mov	r3, r0
 8006a98:	2b00      	cmp	r3, #0
 8006a9a:	d001      	beq.n	8006aa0 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x64>
 8006a9c:	2304      	movs	r3, #4
 8006a9e:	e02d      	b.n	8006afc <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0xc0>
 8006aa0:	4925      	ldr	r1, [pc, #148]	@ (8006b38 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0xfc>)
 8006aa2:	6838      	ldr	r0, [r7, #0]
 8006aa4:	f7fa fabe 	bl	8001024 <__aeabi_fcmple>
 8006aa8:	4603      	mov	r3, r0
 8006aaa:	2b00      	cmp	r3, #0
 8006aac:	d001      	beq.n	8006ab2 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x76>
 8006aae:	2305      	movs	r3, #5
 8006ab0:	e024      	b.n	8006afc <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0xc0>
 8006ab2:	4922      	ldr	r1, [pc, #136]	@ (8006b3c <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x100>)
 8006ab4:	6838      	ldr	r0, [r7, #0]
 8006ab6:	f7fa fab5 	bl	8001024 <__aeabi_fcmple>
 8006aba:	4603      	mov	r3, r0
 8006abc:	2b00      	cmp	r3, #0
 8006abe:	d001      	beq.n	8006ac4 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x88>
 8006ac0:	2306      	movs	r3, #6
 8006ac2:	e01b      	b.n	8006afc <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0xc0>
 8006ac4:	491e      	ldr	r1, [pc, #120]	@ (8006b40 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x104>)
 8006ac6:	6838      	ldr	r0, [r7, #0]
 8006ac8:	f7fa faac 	bl	8001024 <__aeabi_fcmple>
 8006acc:	4603      	mov	r3, r0
 8006ace:	2b00      	cmp	r3, #0
 8006ad0:	d001      	beq.n	8006ad6 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x9a>
 8006ad2:	2307      	movs	r3, #7
 8006ad4:	e012      	b.n	8006afc <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0xc0>
 8006ad6:	491b      	ldr	r1, [pc, #108]	@ (8006b44 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x108>)
 8006ad8:	6838      	ldr	r0, [r7, #0]
 8006ada:	f7fa faa3 	bl	8001024 <__aeabi_fcmple>
 8006ade:	4603      	mov	r3, r0
 8006ae0:	2b00      	cmp	r3, #0
 8006ae2:	d001      	beq.n	8006ae8 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0xac>
 8006ae4:	2308      	movs	r3, #8
 8006ae6:	e009      	b.n	8006afc <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0xc0>
 8006ae8:	4917      	ldr	r1, [pc, #92]	@ (8006b48 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x10c>)
 8006aea:	6838      	ldr	r0, [r7, #0]
 8006aec:	f7fa fa9a 	bl	8001024 <__aeabi_fcmple>
 8006af0:	4603      	mov	r3, r0
 8006af2:	2b00      	cmp	r3, #0
 8006af4:	d001      	beq.n	8006afa <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0xbe>
 8006af6:	2309      	movs	r3, #9
 8006af8:	e000      	b.n	8006afc <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0xc0>
 8006afa:	230a      	movs	r3, #10
  new_odr = (Odr <=    1.6f) ? LSM6DSO_XL_ODR_1Hz6
 8006afc:	73fb      	strb	r3, [r7, #15]
            : (Odr <= 1667.0f) ? LSM6DSO_XL_ODR_1667Hz
            : (Odr <= 3333.0f) ? LSM6DSO_XL_ODR_3333Hz
            :                    LSM6DSO_XL_ODR_6667Hz;

  /* Output data rate selection. */
  if (lsm6dso_xl_data_rate_set(&(pObj->Ctx), new_odr) != LSM6DSO_OK)
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	3320      	adds	r3, #32
 8006b02:	7bfa      	ldrb	r2, [r7, #15]
 8006b04:	4611      	mov	r1, r2
 8006b06:	4618      	mov	r0, r3
 8006b08:	f000 fa4e 	bl	8006fa8 <lsm6dso_xl_data_rate_set>
 8006b0c:	4603      	mov	r3, r0
 8006b0e:	2b00      	cmp	r3, #0
 8006b10:	d002      	beq.n	8006b18 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0xdc>
  {
    return LSM6DSO_ERROR;
 8006b12:	f04f 33ff 	mov.w	r3, #4294967295
 8006b16:	e000      	b.n	8006b1a <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0xde>
  }

  return LSM6DSO_OK;
 8006b18:	2300      	movs	r3, #0
}
 8006b1a:	4618      	mov	r0, r3
 8006b1c:	3710      	adds	r7, #16
 8006b1e:	46bd      	mov	sp, r7
 8006b20:	bd80      	pop	{r7, pc}
 8006b22:	bf00      	nop
 8006b24:	3fcccccd 	.word	0x3fcccccd
 8006b28:	41480000 	.word	0x41480000
 8006b2c:	41d00000 	.word	0x41d00000
 8006b30:	42500000 	.word	0x42500000
 8006b34:	42d00000 	.word	0x42d00000
 8006b38:	43500000 	.word	0x43500000
 8006b3c:	43d08000 	.word	0x43d08000
 8006b40:	44504000 	.word	0x44504000
 8006b44:	44d06000 	.word	0x44d06000
 8006b48:	45505000 	.word	0x45505000

08006b4c <LSM6DSO_ACC_SetOutputDataRate_When_Disabled>:
  * @param  pObj the device pObj
  * @param  Odr the functional output data rate to be set
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t LSM6DSO_ACC_SetOutputDataRate_When_Disabled(LSM6DSO_Object_t *pObj, float_t Odr)
{
 8006b4c:	b580      	push	{r7, lr}
 8006b4e:	b082      	sub	sp, #8
 8006b50:	af00      	add	r7, sp, #0
 8006b52:	6078      	str	r0, [r7, #4]
 8006b54:	6039      	str	r1, [r7, #0]
  pObj->acc_odr = (Odr <=    1.6f) ? LSM6DSO_XL_ODR_1Hz6
                  : (Odr <=   12.5f) ? LSM6DSO_XL_ODR_12Hz5
 8006b56:	4931      	ldr	r1, [pc, #196]	@ (8006c1c <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0xd0>)
 8006b58:	6838      	ldr	r0, [r7, #0]
 8006b5a:	f7fa fa63 	bl	8001024 <__aeabi_fcmple>
 8006b5e:	4603      	mov	r3, r0
 8006b60:	2b00      	cmp	r3, #0
 8006b62:	d001      	beq.n	8006b68 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0x1c>
 8006b64:	230b      	movs	r3, #11
 8006b66:	e051      	b.n	8006c0c <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0xc0>
 8006b68:	492d      	ldr	r1, [pc, #180]	@ (8006c20 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0xd4>)
 8006b6a:	6838      	ldr	r0, [r7, #0]
 8006b6c:	f7fa fa5a 	bl	8001024 <__aeabi_fcmple>
 8006b70:	4603      	mov	r3, r0
 8006b72:	2b00      	cmp	r3, #0
 8006b74:	d001      	beq.n	8006b7a <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0x2e>
 8006b76:	2301      	movs	r3, #1
 8006b78:	e048      	b.n	8006c0c <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0xc0>
 8006b7a:	492a      	ldr	r1, [pc, #168]	@ (8006c24 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0xd8>)
 8006b7c:	6838      	ldr	r0, [r7, #0]
 8006b7e:	f7fa fa51 	bl	8001024 <__aeabi_fcmple>
 8006b82:	4603      	mov	r3, r0
 8006b84:	2b00      	cmp	r3, #0
 8006b86:	d001      	beq.n	8006b8c <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0x40>
 8006b88:	2302      	movs	r3, #2
 8006b8a:	e03f      	b.n	8006c0c <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0xc0>
 8006b8c:	4926      	ldr	r1, [pc, #152]	@ (8006c28 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0xdc>)
 8006b8e:	6838      	ldr	r0, [r7, #0]
 8006b90:	f7fa fa48 	bl	8001024 <__aeabi_fcmple>
 8006b94:	4603      	mov	r3, r0
 8006b96:	2b00      	cmp	r3, #0
 8006b98:	d001      	beq.n	8006b9e <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0x52>
 8006b9a:	2303      	movs	r3, #3
 8006b9c:	e036      	b.n	8006c0c <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0xc0>
 8006b9e:	4923      	ldr	r1, [pc, #140]	@ (8006c2c <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0xe0>)
 8006ba0:	6838      	ldr	r0, [r7, #0]
 8006ba2:	f7fa fa3f 	bl	8001024 <__aeabi_fcmple>
 8006ba6:	4603      	mov	r3, r0
 8006ba8:	2b00      	cmp	r3, #0
 8006baa:	d001      	beq.n	8006bb0 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0x64>
 8006bac:	2304      	movs	r3, #4
 8006bae:	e02d      	b.n	8006c0c <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0xc0>
 8006bb0:	491f      	ldr	r1, [pc, #124]	@ (8006c30 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0xe4>)
 8006bb2:	6838      	ldr	r0, [r7, #0]
 8006bb4:	f7fa fa36 	bl	8001024 <__aeabi_fcmple>
 8006bb8:	4603      	mov	r3, r0
 8006bba:	2b00      	cmp	r3, #0
 8006bbc:	d001      	beq.n	8006bc2 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0x76>
 8006bbe:	2305      	movs	r3, #5
 8006bc0:	e024      	b.n	8006c0c <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0xc0>
 8006bc2:	491c      	ldr	r1, [pc, #112]	@ (8006c34 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0xe8>)
 8006bc4:	6838      	ldr	r0, [r7, #0]
 8006bc6:	f7fa fa2d 	bl	8001024 <__aeabi_fcmple>
 8006bca:	4603      	mov	r3, r0
 8006bcc:	2b00      	cmp	r3, #0
 8006bce:	d001      	beq.n	8006bd4 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0x88>
 8006bd0:	2306      	movs	r3, #6
 8006bd2:	e01b      	b.n	8006c0c <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0xc0>
 8006bd4:	4918      	ldr	r1, [pc, #96]	@ (8006c38 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0xec>)
 8006bd6:	6838      	ldr	r0, [r7, #0]
 8006bd8:	f7fa fa24 	bl	8001024 <__aeabi_fcmple>
 8006bdc:	4603      	mov	r3, r0
 8006bde:	2b00      	cmp	r3, #0
 8006be0:	d001      	beq.n	8006be6 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0x9a>
 8006be2:	2307      	movs	r3, #7
 8006be4:	e012      	b.n	8006c0c <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0xc0>
 8006be6:	4915      	ldr	r1, [pc, #84]	@ (8006c3c <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0xf0>)
 8006be8:	6838      	ldr	r0, [r7, #0]
 8006bea:	f7fa fa1b 	bl	8001024 <__aeabi_fcmple>
 8006bee:	4603      	mov	r3, r0
 8006bf0:	2b00      	cmp	r3, #0
 8006bf2:	d001      	beq.n	8006bf8 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0xac>
 8006bf4:	2308      	movs	r3, #8
 8006bf6:	e009      	b.n	8006c0c <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0xc0>
 8006bf8:	4911      	ldr	r1, [pc, #68]	@ (8006c40 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0xf4>)
 8006bfa:	6838      	ldr	r0, [r7, #0]
 8006bfc:	f7fa fa12 	bl	8001024 <__aeabi_fcmple>
 8006c00:	4603      	mov	r3, r0
 8006c02:	2b00      	cmp	r3, #0
 8006c04:	d001      	beq.n	8006c0a <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0xbe>
 8006c06:	2309      	movs	r3, #9
 8006c08:	e000      	b.n	8006c0c <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0xc0>
 8006c0a:	230a      	movs	r3, #10
  pObj->acc_odr = (Odr <=    1.6f) ? LSM6DSO_XL_ODR_1Hz6
 8006c0c:	687a      	ldr	r2, [r7, #4]
 8006c0e:	f882 3033 	strb.w	r3, [r2, #51]	@ 0x33
                  : (Odr <=  833.0f) ? LSM6DSO_XL_ODR_833Hz
                  : (Odr <= 1667.0f) ? LSM6DSO_XL_ODR_1667Hz
                  : (Odr <= 3333.0f) ? LSM6DSO_XL_ODR_3333Hz
                  :                    LSM6DSO_XL_ODR_6667Hz;

  return LSM6DSO_OK;
 8006c12:	2300      	movs	r3, #0
}
 8006c14:	4618      	mov	r0, r3
 8006c16:	3708      	adds	r7, #8
 8006c18:	46bd      	mov	sp, r7
 8006c1a:	bd80      	pop	{r7, pc}
 8006c1c:	3fcccccd 	.word	0x3fcccccd
 8006c20:	41480000 	.word	0x41480000
 8006c24:	41d00000 	.word	0x41d00000
 8006c28:	42500000 	.word	0x42500000
 8006c2c:	42d00000 	.word	0x42d00000
 8006c30:	43500000 	.word	0x43500000
 8006c34:	43d08000 	.word	0x43d08000
 8006c38:	44504000 	.word	0x44504000
 8006c3c:	44d06000 	.word	0x44d06000
 8006c40:	45505000 	.word	0x45505000

08006c44 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled>:
  * @param  pObj the device pObj
  * @param  Odr the functional output data rate to be set
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t LSM6DSO_GYRO_SetOutputDataRate_When_Enabled(LSM6DSO_Object_t *pObj, float_t Odr)
{
 8006c44:	b580      	push	{r7, lr}
 8006c46:	b084      	sub	sp, #16
 8006c48:	af00      	add	r7, sp, #0
 8006c4a:	6078      	str	r0, [r7, #4]
 8006c4c:	6039      	str	r1, [r7, #0]
  lsm6dso_odr_g_t new_odr;

  new_odr = (Odr <=   12.5f) ? LSM6DSO_GY_ODR_12Hz5
            : (Odr <=   26.0f) ? LSM6DSO_GY_ODR_26Hz
 8006c4e:	4932      	ldr	r1, [pc, #200]	@ (8006d18 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0xd4>)
 8006c50:	6838      	ldr	r0, [r7, #0]
 8006c52:	f7fa f9e7 	bl	8001024 <__aeabi_fcmple>
 8006c56:	4603      	mov	r3, r0
 8006c58:	2b00      	cmp	r3, #0
 8006c5a:	d001      	beq.n	8006c60 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0x1c>
 8006c5c:	2301      	movs	r3, #1
 8006c5e:	e048      	b.n	8006cf2 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0xae>
 8006c60:	492e      	ldr	r1, [pc, #184]	@ (8006d1c <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0xd8>)
 8006c62:	6838      	ldr	r0, [r7, #0]
 8006c64:	f7fa f9de 	bl	8001024 <__aeabi_fcmple>
 8006c68:	4603      	mov	r3, r0
 8006c6a:	2b00      	cmp	r3, #0
 8006c6c:	d001      	beq.n	8006c72 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0x2e>
 8006c6e:	2302      	movs	r3, #2
 8006c70:	e03f      	b.n	8006cf2 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0xae>
 8006c72:	492b      	ldr	r1, [pc, #172]	@ (8006d20 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0xdc>)
 8006c74:	6838      	ldr	r0, [r7, #0]
 8006c76:	f7fa f9d5 	bl	8001024 <__aeabi_fcmple>
 8006c7a:	4603      	mov	r3, r0
 8006c7c:	2b00      	cmp	r3, #0
 8006c7e:	d001      	beq.n	8006c84 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0x40>
 8006c80:	2303      	movs	r3, #3
 8006c82:	e036      	b.n	8006cf2 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0xae>
 8006c84:	4927      	ldr	r1, [pc, #156]	@ (8006d24 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0xe0>)
 8006c86:	6838      	ldr	r0, [r7, #0]
 8006c88:	f7fa f9cc 	bl	8001024 <__aeabi_fcmple>
 8006c8c:	4603      	mov	r3, r0
 8006c8e:	2b00      	cmp	r3, #0
 8006c90:	d001      	beq.n	8006c96 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0x52>
 8006c92:	2304      	movs	r3, #4
 8006c94:	e02d      	b.n	8006cf2 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0xae>
 8006c96:	4924      	ldr	r1, [pc, #144]	@ (8006d28 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0xe4>)
 8006c98:	6838      	ldr	r0, [r7, #0]
 8006c9a:	f7fa f9c3 	bl	8001024 <__aeabi_fcmple>
 8006c9e:	4603      	mov	r3, r0
 8006ca0:	2b00      	cmp	r3, #0
 8006ca2:	d001      	beq.n	8006ca8 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0x64>
 8006ca4:	2305      	movs	r3, #5
 8006ca6:	e024      	b.n	8006cf2 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0xae>
 8006ca8:	4920      	ldr	r1, [pc, #128]	@ (8006d2c <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0xe8>)
 8006caa:	6838      	ldr	r0, [r7, #0]
 8006cac:	f7fa f9ba 	bl	8001024 <__aeabi_fcmple>
 8006cb0:	4603      	mov	r3, r0
 8006cb2:	2b00      	cmp	r3, #0
 8006cb4:	d001      	beq.n	8006cba <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0x76>
 8006cb6:	2306      	movs	r3, #6
 8006cb8:	e01b      	b.n	8006cf2 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0xae>
 8006cba:	491d      	ldr	r1, [pc, #116]	@ (8006d30 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0xec>)
 8006cbc:	6838      	ldr	r0, [r7, #0]
 8006cbe:	f7fa f9b1 	bl	8001024 <__aeabi_fcmple>
 8006cc2:	4603      	mov	r3, r0
 8006cc4:	2b00      	cmp	r3, #0
 8006cc6:	d001      	beq.n	8006ccc <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0x88>
 8006cc8:	2307      	movs	r3, #7
 8006cca:	e012      	b.n	8006cf2 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0xae>
 8006ccc:	4919      	ldr	r1, [pc, #100]	@ (8006d34 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0xf0>)
 8006cce:	6838      	ldr	r0, [r7, #0]
 8006cd0:	f7fa f9a8 	bl	8001024 <__aeabi_fcmple>
 8006cd4:	4603      	mov	r3, r0
 8006cd6:	2b00      	cmp	r3, #0
 8006cd8:	d001      	beq.n	8006cde <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0x9a>
 8006cda:	2308      	movs	r3, #8
 8006cdc:	e009      	b.n	8006cf2 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0xae>
 8006cde:	4916      	ldr	r1, [pc, #88]	@ (8006d38 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0xf4>)
 8006ce0:	6838      	ldr	r0, [r7, #0]
 8006ce2:	f7fa f99f 	bl	8001024 <__aeabi_fcmple>
 8006ce6:	4603      	mov	r3, r0
 8006ce8:	2b00      	cmp	r3, #0
 8006cea:	d001      	beq.n	8006cf0 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0xac>
 8006cec:	2309      	movs	r3, #9
 8006cee:	e000      	b.n	8006cf2 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0xae>
 8006cf0:	230a      	movs	r3, #10
  new_odr = (Odr <=   12.5f) ? LSM6DSO_GY_ODR_12Hz5
 8006cf2:	73fb      	strb	r3, [r7, #15]
            : (Odr <= 1667.0f) ? LSM6DSO_GY_ODR_1667Hz
            : (Odr <= 3333.0f) ? LSM6DSO_GY_ODR_3333Hz
            :                    LSM6DSO_GY_ODR_6667Hz;

  /* Output data rate selection. */
  if (lsm6dso_gy_data_rate_set(&(pObj->Ctx), new_odr) != LSM6DSO_OK)
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	3320      	adds	r3, #32
 8006cf8:	7bfa      	ldrb	r2, [r7, #15]
 8006cfa:	4611      	mov	r1, r2
 8006cfc:	4618      	mov	r0, r3
 8006cfe:	f000 fb1d 	bl	800733c <lsm6dso_gy_data_rate_set>
 8006d02:	4603      	mov	r3, r0
 8006d04:	2b00      	cmp	r3, #0
 8006d06:	d002      	beq.n	8006d0e <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0xca>
  {
    return LSM6DSO_ERROR;
 8006d08:	f04f 33ff 	mov.w	r3, #4294967295
 8006d0c:	e000      	b.n	8006d10 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0xcc>
  }

  return LSM6DSO_OK;
 8006d0e:	2300      	movs	r3, #0
}
 8006d10:	4618      	mov	r0, r3
 8006d12:	3710      	adds	r7, #16
 8006d14:	46bd      	mov	sp, r7
 8006d16:	bd80      	pop	{r7, pc}
 8006d18:	41480000 	.word	0x41480000
 8006d1c:	41d00000 	.word	0x41d00000
 8006d20:	42500000 	.word	0x42500000
 8006d24:	42d00000 	.word	0x42d00000
 8006d28:	43500000 	.word	0x43500000
 8006d2c:	43d08000 	.word	0x43d08000
 8006d30:	44504000 	.word	0x44504000
 8006d34:	44d06000 	.word	0x44d06000
 8006d38:	45505000 	.word	0x45505000

08006d3c <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled>:
  * @param  pObj the device pObj
  * @param  Odr the functional output data rate to be set
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t LSM6DSO_GYRO_SetOutputDataRate_When_Disabled(LSM6DSO_Object_t *pObj, float_t Odr)
{
 8006d3c:	b580      	push	{r7, lr}
 8006d3e:	b082      	sub	sp, #8
 8006d40:	af00      	add	r7, sp, #0
 8006d42:	6078      	str	r0, [r7, #4]
 8006d44:	6039      	str	r1, [r7, #0]
  pObj->gyro_odr = (Odr <=   12.5f) ? LSM6DSO_GY_ODR_12Hz5
                   : (Odr <=   26.0f) ? LSM6DSO_GY_ODR_26Hz
 8006d46:	492d      	ldr	r1, [pc, #180]	@ (8006dfc <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xc0>)
 8006d48:	6838      	ldr	r0, [r7, #0]
 8006d4a:	f7fa f96b 	bl	8001024 <__aeabi_fcmple>
 8006d4e:	4603      	mov	r3, r0
 8006d50:	2b00      	cmp	r3, #0
 8006d52:	d001      	beq.n	8006d58 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0x1c>
 8006d54:	2301      	movs	r3, #1
 8006d56:	e048      	b.n	8006dea <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xae>
 8006d58:	4929      	ldr	r1, [pc, #164]	@ (8006e00 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xc4>)
 8006d5a:	6838      	ldr	r0, [r7, #0]
 8006d5c:	f7fa f962 	bl	8001024 <__aeabi_fcmple>
 8006d60:	4603      	mov	r3, r0
 8006d62:	2b00      	cmp	r3, #0
 8006d64:	d001      	beq.n	8006d6a <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0x2e>
 8006d66:	2302      	movs	r3, #2
 8006d68:	e03f      	b.n	8006dea <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xae>
 8006d6a:	4926      	ldr	r1, [pc, #152]	@ (8006e04 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xc8>)
 8006d6c:	6838      	ldr	r0, [r7, #0]
 8006d6e:	f7fa f959 	bl	8001024 <__aeabi_fcmple>
 8006d72:	4603      	mov	r3, r0
 8006d74:	2b00      	cmp	r3, #0
 8006d76:	d001      	beq.n	8006d7c <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0x40>
 8006d78:	2303      	movs	r3, #3
 8006d7a:	e036      	b.n	8006dea <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xae>
 8006d7c:	4922      	ldr	r1, [pc, #136]	@ (8006e08 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xcc>)
 8006d7e:	6838      	ldr	r0, [r7, #0]
 8006d80:	f7fa f950 	bl	8001024 <__aeabi_fcmple>
 8006d84:	4603      	mov	r3, r0
 8006d86:	2b00      	cmp	r3, #0
 8006d88:	d001      	beq.n	8006d8e <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0x52>
 8006d8a:	2304      	movs	r3, #4
 8006d8c:	e02d      	b.n	8006dea <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xae>
 8006d8e:	491f      	ldr	r1, [pc, #124]	@ (8006e0c <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xd0>)
 8006d90:	6838      	ldr	r0, [r7, #0]
 8006d92:	f7fa f947 	bl	8001024 <__aeabi_fcmple>
 8006d96:	4603      	mov	r3, r0
 8006d98:	2b00      	cmp	r3, #0
 8006d9a:	d001      	beq.n	8006da0 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0x64>
 8006d9c:	2305      	movs	r3, #5
 8006d9e:	e024      	b.n	8006dea <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xae>
 8006da0:	491b      	ldr	r1, [pc, #108]	@ (8006e10 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xd4>)
 8006da2:	6838      	ldr	r0, [r7, #0]
 8006da4:	f7fa f93e 	bl	8001024 <__aeabi_fcmple>
 8006da8:	4603      	mov	r3, r0
 8006daa:	2b00      	cmp	r3, #0
 8006dac:	d001      	beq.n	8006db2 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0x76>
 8006dae:	2306      	movs	r3, #6
 8006db0:	e01b      	b.n	8006dea <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xae>
 8006db2:	4918      	ldr	r1, [pc, #96]	@ (8006e14 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xd8>)
 8006db4:	6838      	ldr	r0, [r7, #0]
 8006db6:	f7fa f935 	bl	8001024 <__aeabi_fcmple>
 8006dba:	4603      	mov	r3, r0
 8006dbc:	2b00      	cmp	r3, #0
 8006dbe:	d001      	beq.n	8006dc4 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0x88>
 8006dc0:	2307      	movs	r3, #7
 8006dc2:	e012      	b.n	8006dea <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xae>
 8006dc4:	4914      	ldr	r1, [pc, #80]	@ (8006e18 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xdc>)
 8006dc6:	6838      	ldr	r0, [r7, #0]
 8006dc8:	f7fa f92c 	bl	8001024 <__aeabi_fcmple>
 8006dcc:	4603      	mov	r3, r0
 8006dce:	2b00      	cmp	r3, #0
 8006dd0:	d001      	beq.n	8006dd6 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0x9a>
 8006dd2:	2308      	movs	r3, #8
 8006dd4:	e009      	b.n	8006dea <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xae>
 8006dd6:	4911      	ldr	r1, [pc, #68]	@ (8006e1c <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xe0>)
 8006dd8:	6838      	ldr	r0, [r7, #0]
 8006dda:	f7fa f923 	bl	8001024 <__aeabi_fcmple>
 8006dde:	4603      	mov	r3, r0
 8006de0:	2b00      	cmp	r3, #0
 8006de2:	d001      	beq.n	8006de8 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xac>
 8006de4:	2309      	movs	r3, #9
 8006de6:	e000      	b.n	8006dea <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xae>
 8006de8:	230a      	movs	r3, #10
  pObj->gyro_odr = (Odr <=   12.5f) ? LSM6DSO_GY_ODR_12Hz5
 8006dea:	687a      	ldr	r2, [r7, #4]
 8006dec:	f882 3034 	strb.w	r3, [r2, #52]	@ 0x34
                   : (Odr <=  833.0f) ? LSM6DSO_GY_ODR_833Hz
                   : (Odr <= 1667.0f) ? LSM6DSO_GY_ODR_1667Hz
                   : (Odr <= 3333.0f) ? LSM6DSO_GY_ODR_3333Hz
                   :                    LSM6DSO_GY_ODR_6667Hz;

  return LSM6DSO_OK;
 8006df0:	2300      	movs	r3, #0
}
 8006df2:	4618      	mov	r0, r3
 8006df4:	3708      	adds	r7, #8
 8006df6:	46bd      	mov	sp, r7
 8006df8:	bd80      	pop	{r7, pc}
 8006dfa:	bf00      	nop
 8006dfc:	41480000 	.word	0x41480000
 8006e00:	41d00000 	.word	0x41d00000
 8006e04:	42500000 	.word	0x42500000
 8006e08:	42d00000 	.word	0x42d00000
 8006e0c:	43500000 	.word	0x43500000
 8006e10:	43d08000 	.word	0x43d08000
 8006e14:	44504000 	.word	0x44504000
 8006e18:	44d06000 	.word	0x44d06000
 8006e1c:	45505000 	.word	0x45505000

08006e20 <ReadRegWrap>:
  * @param  pData the stored data pointer
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t ReadRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 8006e20:	b590      	push	{r4, r7, lr}
 8006e22:	b087      	sub	sp, #28
 8006e24:	af00      	add	r7, sp, #0
 8006e26:	60f8      	str	r0, [r7, #12]
 8006e28:	607a      	str	r2, [r7, #4]
 8006e2a:	461a      	mov	r2, r3
 8006e2c:	460b      	mov	r3, r1
 8006e2e:	72fb      	strb	r3, [r7, #11]
 8006e30:	4613      	mov	r3, r2
 8006e32:	813b      	strh	r3, [r7, #8]
  LSM6DSO_Object_t *pObj = (LSM6DSO_Object_t *)Handle;
 8006e34:	68fb      	ldr	r3, [r7, #12]
 8006e36:	617b      	str	r3, [r7, #20]

  return pObj->IO.ReadReg(pObj->IO.Address, Reg, pData, Length);
 8006e38:	697b      	ldr	r3, [r7, #20]
 8006e3a:	695c      	ldr	r4, [r3, #20]
 8006e3c:	697b      	ldr	r3, [r7, #20]
 8006e3e:	7b1b      	ldrb	r3, [r3, #12]
 8006e40:	4618      	mov	r0, r3
 8006e42:	7afb      	ldrb	r3, [r7, #11]
 8006e44:	b299      	uxth	r1, r3
 8006e46:	893b      	ldrh	r3, [r7, #8]
 8006e48:	687a      	ldr	r2, [r7, #4]
 8006e4a:	47a0      	blx	r4
 8006e4c:	4603      	mov	r3, r0
}
 8006e4e:	4618      	mov	r0, r3
 8006e50:	371c      	adds	r7, #28
 8006e52:	46bd      	mov	sp, r7
 8006e54:	bd90      	pop	{r4, r7, pc}

08006e56 <WriteRegWrap>:
  * @param  pData the stored data pointer
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t WriteRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 8006e56:	b590      	push	{r4, r7, lr}
 8006e58:	b087      	sub	sp, #28
 8006e5a:	af00      	add	r7, sp, #0
 8006e5c:	60f8      	str	r0, [r7, #12]
 8006e5e:	607a      	str	r2, [r7, #4]
 8006e60:	461a      	mov	r2, r3
 8006e62:	460b      	mov	r3, r1
 8006e64:	72fb      	strb	r3, [r7, #11]
 8006e66:	4613      	mov	r3, r2
 8006e68:	813b      	strh	r3, [r7, #8]
  LSM6DSO_Object_t *pObj = (LSM6DSO_Object_t *)Handle;
 8006e6a:	68fb      	ldr	r3, [r7, #12]
 8006e6c:	617b      	str	r3, [r7, #20]

  return pObj->IO.WriteReg(pObj->IO.Address, Reg, pData, Length);
 8006e6e:	697b      	ldr	r3, [r7, #20]
 8006e70:	691c      	ldr	r4, [r3, #16]
 8006e72:	697b      	ldr	r3, [r7, #20]
 8006e74:	7b1b      	ldrb	r3, [r3, #12]
 8006e76:	4618      	mov	r0, r3
 8006e78:	7afb      	ldrb	r3, [r7, #11]
 8006e7a:	b299      	uxth	r1, r3
 8006e7c:	893b      	ldrh	r3, [r7, #8]
 8006e7e:	687a      	ldr	r2, [r7, #4]
 8006e80:	47a0      	blx	r4
 8006e82:	4603      	mov	r3, r0
}
 8006e84:	4618      	mov	r0, r3
 8006e86:	371c      	adds	r7, #28
 8006e88:	46bd      	mov	sp, r7
 8006e8a:	bd90      	pop	{r4, r7, pc}

08006e8c <lsm6dso_read_reg>:
  *
  */
int32_t __weak lsm6dso_read_reg(stmdev_ctx_t *ctx, uint8_t reg,
                                uint8_t *data,
                                uint16_t len)
{
 8006e8c:	b590      	push	{r4, r7, lr}
 8006e8e:	b087      	sub	sp, #28
 8006e90:	af00      	add	r7, sp, #0
 8006e92:	60f8      	str	r0, [r7, #12]
 8006e94:	607a      	str	r2, [r7, #4]
 8006e96:	461a      	mov	r2, r3
 8006e98:	460b      	mov	r3, r1
 8006e9a:	72fb      	strb	r3, [r7, #11]
 8006e9c:	4613      	mov	r3, r2
 8006e9e:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8006ea0:	68fb      	ldr	r3, [r7, #12]
 8006ea2:	685c      	ldr	r4, [r3, #4]
 8006ea4:	68fb      	ldr	r3, [r7, #12]
 8006ea6:	68d8      	ldr	r0, [r3, #12]
 8006ea8:	893b      	ldrh	r3, [r7, #8]
 8006eaa:	7af9      	ldrb	r1, [r7, #11]
 8006eac:	687a      	ldr	r2, [r7, #4]
 8006eae:	47a0      	blx	r4
 8006eb0:	6178      	str	r0, [r7, #20]

  return ret;
 8006eb2:	697b      	ldr	r3, [r7, #20]
}
 8006eb4:	4618      	mov	r0, r3
 8006eb6:	371c      	adds	r7, #28
 8006eb8:	46bd      	mov	sp, r7
 8006eba:	bd90      	pop	{r4, r7, pc}

08006ebc <lsm6dso_write_reg>:
  *
  */
int32_t __weak lsm6dso_write_reg(stmdev_ctx_t *ctx, uint8_t reg,
                                 uint8_t *data,
                                 uint16_t len)
{
 8006ebc:	b590      	push	{r4, r7, lr}
 8006ebe:	b087      	sub	sp, #28
 8006ec0:	af00      	add	r7, sp, #0
 8006ec2:	60f8      	str	r0, [r7, #12]
 8006ec4:	607a      	str	r2, [r7, #4]
 8006ec6:	461a      	mov	r2, r3
 8006ec8:	460b      	mov	r3, r1
 8006eca:	72fb      	strb	r3, [r7, #11]
 8006ecc:	4613      	mov	r3, r2
 8006ece:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8006ed0:	68fb      	ldr	r3, [r7, #12]
 8006ed2:	681c      	ldr	r4, [r3, #0]
 8006ed4:	68fb      	ldr	r3, [r7, #12]
 8006ed6:	68d8      	ldr	r0, [r3, #12]
 8006ed8:	893b      	ldrh	r3, [r7, #8]
 8006eda:	7af9      	ldrb	r1, [r7, #11]
 8006edc:	687a      	ldr	r2, [r7, #4]
 8006ede:	47a0      	blx	r4
 8006ee0:	6178      	str	r0, [r7, #20]

  return ret;
 8006ee2:	697b      	ldr	r3, [r7, #20]
}
 8006ee4:	4618      	mov	r0, r3
 8006ee6:	371c      	adds	r7, #28
 8006ee8:	46bd      	mov	sp, r7
 8006eea:	bd90      	pop	{r4, r7, pc}

08006eec <lsm6dso_xl_full_scale_set>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_xl_full_scale_set(stmdev_ctx_t *ctx,
                                  lsm6dso_fs_xl_t val)
{
 8006eec:	b580      	push	{r7, lr}
 8006eee:	b084      	sub	sp, #16
 8006ef0:	af00      	add	r7, sp, #0
 8006ef2:	6078      	str	r0, [r7, #4]
 8006ef4:	460b      	mov	r3, r1
 8006ef6:	70fb      	strb	r3, [r7, #3]
  lsm6dso_ctrl1_xl_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL1_XL, (uint8_t *)&reg, 1);
 8006ef8:	f107 0208 	add.w	r2, r7, #8
 8006efc:	2301      	movs	r3, #1
 8006efe:	2110      	movs	r1, #16
 8006f00:	6878      	ldr	r0, [r7, #4]
 8006f02:	f7ff ffc3 	bl	8006e8c <lsm6dso_read_reg>
 8006f06:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8006f08:	68fb      	ldr	r3, [r7, #12]
 8006f0a:	2b00      	cmp	r3, #0
 8006f0c:	d10f      	bne.n	8006f2e <lsm6dso_xl_full_scale_set+0x42>
  {
    reg.fs_xl = (uint8_t) val;
 8006f0e:	78fb      	ldrb	r3, [r7, #3]
 8006f10:	f003 0303 	and.w	r3, r3, #3
 8006f14:	b2da      	uxtb	r2, r3
 8006f16:	7a3b      	ldrb	r3, [r7, #8]
 8006f18:	f362 0383 	bfi	r3, r2, #2, #2
 8006f1c:	723b      	strb	r3, [r7, #8]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_CTRL1_XL, (uint8_t *)&reg, 1);
 8006f1e:	f107 0208 	add.w	r2, r7, #8
 8006f22:	2301      	movs	r3, #1
 8006f24:	2110      	movs	r1, #16
 8006f26:	6878      	ldr	r0, [r7, #4]
 8006f28:	f7ff ffc8 	bl	8006ebc <lsm6dso_write_reg>
 8006f2c:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8006f2e:	68fb      	ldr	r3, [r7, #12]
}
 8006f30:	4618      	mov	r0, r3
 8006f32:	3710      	adds	r7, #16
 8006f34:	46bd      	mov	sp, r7
 8006f36:	bd80      	pop	{r7, pc}

08006f38 <lsm6dso_xl_full_scale_get>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_xl_full_scale_get(stmdev_ctx_t *ctx,
                                  lsm6dso_fs_xl_t *val)
{
 8006f38:	b580      	push	{r7, lr}
 8006f3a:	b084      	sub	sp, #16
 8006f3c:	af00      	add	r7, sp, #0
 8006f3e:	6078      	str	r0, [r7, #4]
 8006f40:	6039      	str	r1, [r7, #0]
  lsm6dso_ctrl1_xl_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL1_XL, (uint8_t *)&reg, 1);
 8006f42:	f107 0208 	add.w	r2, r7, #8
 8006f46:	2301      	movs	r3, #1
 8006f48:	2110      	movs	r1, #16
 8006f4a:	6878      	ldr	r0, [r7, #4]
 8006f4c:	f7ff ff9e 	bl	8006e8c <lsm6dso_read_reg>
 8006f50:	60f8      	str	r0, [r7, #12]

  switch (reg.fs_xl)
 8006f52:	7a3b      	ldrb	r3, [r7, #8]
 8006f54:	f3c3 0381 	ubfx	r3, r3, #2, #2
 8006f58:	b2db      	uxtb	r3, r3
 8006f5a:	2b03      	cmp	r3, #3
 8006f5c:	d81a      	bhi.n	8006f94 <lsm6dso_xl_full_scale_get+0x5c>
 8006f5e:	a201      	add	r2, pc, #4	@ (adr r2, 8006f64 <lsm6dso_xl_full_scale_get+0x2c>)
 8006f60:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006f64:	08006f75 	.word	0x08006f75
 8006f68:	08006f7d 	.word	0x08006f7d
 8006f6c:	08006f85 	.word	0x08006f85
 8006f70:	08006f8d 	.word	0x08006f8d
  {
    case LSM6DSO_2g:
      *val = LSM6DSO_2g;
 8006f74:	683b      	ldr	r3, [r7, #0]
 8006f76:	2200      	movs	r2, #0
 8006f78:	701a      	strb	r2, [r3, #0]
      break;
 8006f7a:	e00f      	b.n	8006f9c <lsm6dso_xl_full_scale_get+0x64>

    case LSM6DSO_16g:
      *val = LSM6DSO_16g;
 8006f7c:	683b      	ldr	r3, [r7, #0]
 8006f7e:	2201      	movs	r2, #1
 8006f80:	701a      	strb	r2, [r3, #0]
      break;
 8006f82:	e00b      	b.n	8006f9c <lsm6dso_xl_full_scale_get+0x64>

    case LSM6DSO_4g:
      *val = LSM6DSO_4g;
 8006f84:	683b      	ldr	r3, [r7, #0]
 8006f86:	2202      	movs	r2, #2
 8006f88:	701a      	strb	r2, [r3, #0]
      break;
 8006f8a:	e007      	b.n	8006f9c <lsm6dso_xl_full_scale_get+0x64>

    case LSM6DSO_8g:
      *val = LSM6DSO_8g;
 8006f8c:	683b      	ldr	r3, [r7, #0]
 8006f8e:	2203      	movs	r2, #3
 8006f90:	701a      	strb	r2, [r3, #0]
      break;
 8006f92:	e003      	b.n	8006f9c <lsm6dso_xl_full_scale_get+0x64>

    default:
      *val = LSM6DSO_2g;
 8006f94:	683b      	ldr	r3, [r7, #0]
 8006f96:	2200      	movs	r2, #0
 8006f98:	701a      	strb	r2, [r3, #0]
      break;
 8006f9a:	bf00      	nop
  }

  return ret;
 8006f9c:	68fb      	ldr	r3, [r7, #12]
}
 8006f9e:	4618      	mov	r0, r3
 8006fa0:	3710      	adds	r7, #16
 8006fa2:	46bd      	mov	sp, r7
 8006fa4:	bd80      	pop	{r7, pc}
 8006fa6:	bf00      	nop

08006fa8 <lsm6dso_xl_data_rate_set>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_xl_data_rate_set(stmdev_ctx_t *ctx,
                                 lsm6dso_odr_xl_t val)
{
 8006fa8:	b580      	push	{r7, lr}
 8006faa:	b086      	sub	sp, #24
 8006fac:	af00      	add	r7, sp, #0
 8006fae:	6078      	str	r0, [r7, #4]
 8006fb0:	460b      	mov	r3, r1
 8006fb2:	70fb      	strb	r3, [r7, #3]
  lsm6dso_odr_xl_t odr_xl =  val;
 8006fb4:	78fb      	ldrb	r3, [r7, #3]
 8006fb6:	75fb      	strb	r3, [r7, #23]
  lsm6dso_fsm_odr_t fsm_odr;
  lsm6dso_ctrl1_xl_t reg;
  int32_t ret;

  /* Check the Finite State Machine data rate constraints */
  ret =  lsm6dso_fsm_enable_get(ctx, &fsm_enable);
 8006fb8:	f107 030c 	add.w	r3, r7, #12
 8006fbc:	4619      	mov	r1, r3
 8006fbe:	6878      	ldr	r0, [r7, #4]
 8006fc0:	f000 fc90 	bl	80078e4 <lsm6dso_fsm_enable_get>
 8006fc4:	6138      	str	r0, [r7, #16]
  if (ret != 0) { return ret; }
 8006fc6:	693b      	ldr	r3, [r7, #16]
 8006fc8:	2b00      	cmp	r3, #0
 8006fca:	d001      	beq.n	8006fd0 <lsm6dso_xl_data_rate_set+0x28>
 8006fcc:	693b      	ldr	r3, [r7, #16]
 8006fce:	e0e0      	b.n	8007192 <lsm6dso_xl_data_rate_set+0x1ea>

  if ((fsm_enable.fsm_enable_a.fsm1_en  |
 8006fd0:	7b3b      	ldrb	r3, [r7, #12]
 8006fd2:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8006fd6:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_a.fsm2_en  |
 8006fd8:	7b3b      	ldrb	r3, [r7, #12]
 8006fda:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8006fde:	b2db      	uxtb	r3, r3
  if ((fsm_enable.fsm_enable_a.fsm1_en  |
 8006fe0:	4313      	orrs	r3, r2
 8006fe2:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_a.fsm3_en  |
 8006fe4:	7b3b      	ldrb	r3, [r7, #12]
 8006fe6:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8006fea:	b2db      	uxtb	r3, r3
       fsm_enable.fsm_enable_a.fsm2_en  |
 8006fec:	4313      	orrs	r3, r2
 8006fee:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_a.fsm4_en  |
 8006ff0:	7b3b      	ldrb	r3, [r7, #12]
 8006ff2:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8006ff6:	b2db      	uxtb	r3, r3
       fsm_enable.fsm_enable_a.fsm3_en  |
 8006ff8:	4313      	orrs	r3, r2
 8006ffa:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_a.fsm5_en  |
 8006ffc:	7b3b      	ldrb	r3, [r7, #12]
 8006ffe:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8007002:	b2db      	uxtb	r3, r3
       fsm_enable.fsm_enable_a.fsm4_en  |
 8007004:	4313      	orrs	r3, r2
 8007006:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_a.fsm6_en  |
 8007008:	7b3b      	ldrb	r3, [r7, #12]
 800700a:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800700e:	b2db      	uxtb	r3, r3
       fsm_enable.fsm_enable_a.fsm5_en  |
 8007010:	4313      	orrs	r3, r2
 8007012:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_a.fsm7_en  |
 8007014:	7b3b      	ldrb	r3, [r7, #12]
 8007016:	f3c3 1380 	ubfx	r3, r3, #6, #1
 800701a:	b2db      	uxtb	r3, r3
       fsm_enable.fsm_enable_a.fsm6_en  |
 800701c:	4313      	orrs	r3, r2
 800701e:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_a.fsm8_en  |
 8007020:	7b3b      	ldrb	r3, [r7, #12]
 8007022:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8007026:	b2db      	uxtb	r3, r3
       fsm_enable.fsm_enable_a.fsm7_en  |
 8007028:	4313      	orrs	r3, r2
 800702a:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_b.fsm9_en  |
 800702c:	7b7b      	ldrb	r3, [r7, #13]
 800702e:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8007032:	b2db      	uxtb	r3, r3
       fsm_enable.fsm_enable_a.fsm8_en  |
 8007034:	4313      	orrs	r3, r2
 8007036:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_b.fsm10_en |
 8007038:	7b7b      	ldrb	r3, [r7, #13]
 800703a:	f3c3 0340 	ubfx	r3, r3, #1, #1
 800703e:	b2db      	uxtb	r3, r3
       fsm_enable.fsm_enable_b.fsm9_en  |
 8007040:	4313      	orrs	r3, r2
 8007042:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_b.fsm11_en |
 8007044:	7b7b      	ldrb	r3, [r7, #13]
 8007046:	f3c3 0380 	ubfx	r3, r3, #2, #1
 800704a:	b2db      	uxtb	r3, r3
       fsm_enable.fsm_enable_b.fsm10_en |
 800704c:	4313      	orrs	r3, r2
 800704e:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_b.fsm12_en |
 8007050:	7b7b      	ldrb	r3, [r7, #13]
 8007052:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8007056:	b2db      	uxtb	r3, r3
       fsm_enable.fsm_enable_b.fsm11_en |
 8007058:	4313      	orrs	r3, r2
 800705a:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_b.fsm13_en |
 800705c:	7b7b      	ldrb	r3, [r7, #13]
 800705e:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8007062:	b2db      	uxtb	r3, r3
       fsm_enable.fsm_enable_b.fsm12_en |
 8007064:	4313      	orrs	r3, r2
 8007066:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_b.fsm14_en |
 8007068:	7b7b      	ldrb	r3, [r7, #13]
 800706a:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800706e:	b2db      	uxtb	r3, r3
       fsm_enable.fsm_enable_b.fsm13_en |
 8007070:	4313      	orrs	r3, r2
 8007072:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_b.fsm15_en |
 8007074:	7b7b      	ldrb	r3, [r7, #13]
 8007076:	f3c3 1380 	ubfx	r3, r3, #6, #1
 800707a:	b2db      	uxtb	r3, r3
       fsm_enable.fsm_enable_b.fsm14_en |
 800707c:	4313      	orrs	r3, r2
 800707e:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_b.fsm16_en) == PROPERTY_ENABLE)
 8007080:	7b7b      	ldrb	r3, [r7, #13]
 8007082:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8007086:	b2db      	uxtb	r3, r3
       fsm_enable.fsm_enable_b.fsm15_en |
 8007088:	4313      	orrs	r3, r2
 800708a:	b2db      	uxtb	r3, r3
  if ((fsm_enable.fsm_enable_a.fsm1_en  |
 800708c:	2b01      	cmp	r3, #1
 800708e:	d164      	bne.n	800715a <lsm6dso_xl_data_rate_set+0x1b2>
  {
    ret =  lsm6dso_fsm_data_rate_get(ctx, &fsm_odr);
 8007090:	f107 030b 	add.w	r3, r7, #11
 8007094:	4619      	mov	r1, r3
 8007096:	6878      	ldr	r0, [r7, #4]
 8007098:	f000 fc46 	bl	8007928 <lsm6dso_fsm_data_rate_get>
 800709c:	6138      	str	r0, [r7, #16]
    if (ret != 0) { return ret; }
 800709e:	693b      	ldr	r3, [r7, #16]
 80070a0:	2b00      	cmp	r3, #0
 80070a2:	d001      	beq.n	80070a8 <lsm6dso_xl_data_rate_set+0x100>
 80070a4:	693b      	ldr	r3, [r7, #16]
 80070a6:	e074      	b.n	8007192 <lsm6dso_xl_data_rate_set+0x1ea>

    switch (fsm_odr)
 80070a8:	7afb      	ldrb	r3, [r7, #11]
 80070aa:	2b03      	cmp	r3, #3
 80070ac:	d852      	bhi.n	8007154 <lsm6dso_xl_data_rate_set+0x1ac>
 80070ae:	a201      	add	r2, pc, #4	@ (adr r2, 80070b4 <lsm6dso_xl_data_rate_set+0x10c>)
 80070b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80070b4:	080070c5 	.word	0x080070c5
 80070b8:	080070d7 	.word	0x080070d7
 80070bc:	080070f5 	.word	0x080070f5
 80070c0:	0800711f 	.word	0x0800711f
    {
      case LSM6DSO_ODR_FSM_12Hz5:
        if (val == LSM6DSO_XL_ODR_OFF)
 80070c4:	78fb      	ldrb	r3, [r7, #3]
 80070c6:	2b00      	cmp	r3, #0
 80070c8:	d102      	bne.n	80070d0 <lsm6dso_xl_data_rate_set+0x128>
        {
          odr_xl = LSM6DSO_XL_ODR_12Hz5;
 80070ca:	2301      	movs	r3, #1
 80070cc:	75fb      	strb	r3, [r7, #23]
        else
        {
          odr_xl = val;
        }

        break;
 80070ce:	e044      	b.n	800715a <lsm6dso_xl_data_rate_set+0x1b2>
          odr_xl = val;
 80070d0:	78fb      	ldrb	r3, [r7, #3]
 80070d2:	75fb      	strb	r3, [r7, #23]
        break;
 80070d4:	e041      	b.n	800715a <lsm6dso_xl_data_rate_set+0x1b2>

      case LSM6DSO_ODR_FSM_26Hz:
        if (val == LSM6DSO_XL_ODR_OFF)
 80070d6:	78fb      	ldrb	r3, [r7, #3]
 80070d8:	2b00      	cmp	r3, #0
 80070da:	d102      	bne.n	80070e2 <lsm6dso_xl_data_rate_set+0x13a>
        {
          odr_xl = LSM6DSO_XL_ODR_26Hz;
 80070dc:	2302      	movs	r3, #2
 80070de:	75fb      	strb	r3, [r7, #23]
        else
        {
          odr_xl = val;
        }

        break;
 80070e0:	e03b      	b.n	800715a <lsm6dso_xl_data_rate_set+0x1b2>
        else if (val == LSM6DSO_XL_ODR_12Hz5)
 80070e2:	78fb      	ldrb	r3, [r7, #3]
 80070e4:	2b01      	cmp	r3, #1
 80070e6:	d102      	bne.n	80070ee <lsm6dso_xl_data_rate_set+0x146>
          odr_xl = LSM6DSO_XL_ODR_26Hz;
 80070e8:	2302      	movs	r3, #2
 80070ea:	75fb      	strb	r3, [r7, #23]
        break;
 80070ec:	e035      	b.n	800715a <lsm6dso_xl_data_rate_set+0x1b2>
          odr_xl = val;
 80070ee:	78fb      	ldrb	r3, [r7, #3]
 80070f0:	75fb      	strb	r3, [r7, #23]
        break;
 80070f2:	e032      	b.n	800715a <lsm6dso_xl_data_rate_set+0x1b2>

      case LSM6DSO_ODR_FSM_52Hz:
        if (val == LSM6DSO_XL_ODR_OFF)
 80070f4:	78fb      	ldrb	r3, [r7, #3]
 80070f6:	2b00      	cmp	r3, #0
 80070f8:	d102      	bne.n	8007100 <lsm6dso_xl_data_rate_set+0x158>
        {
          odr_xl = LSM6DSO_XL_ODR_52Hz;
 80070fa:	2303      	movs	r3, #3
 80070fc:	75fb      	strb	r3, [r7, #23]
        else
        {
          odr_xl = val;
        }

        break;
 80070fe:	e02c      	b.n	800715a <lsm6dso_xl_data_rate_set+0x1b2>
        else if (val == LSM6DSO_XL_ODR_12Hz5)
 8007100:	78fb      	ldrb	r3, [r7, #3]
 8007102:	2b01      	cmp	r3, #1
 8007104:	d102      	bne.n	800710c <lsm6dso_xl_data_rate_set+0x164>
          odr_xl = LSM6DSO_XL_ODR_52Hz;
 8007106:	2303      	movs	r3, #3
 8007108:	75fb      	strb	r3, [r7, #23]
        break;
 800710a:	e026      	b.n	800715a <lsm6dso_xl_data_rate_set+0x1b2>
        else if (val == LSM6DSO_XL_ODR_26Hz)
 800710c:	78fb      	ldrb	r3, [r7, #3]
 800710e:	2b02      	cmp	r3, #2
 8007110:	d102      	bne.n	8007118 <lsm6dso_xl_data_rate_set+0x170>
          odr_xl = LSM6DSO_XL_ODR_52Hz;
 8007112:	2303      	movs	r3, #3
 8007114:	75fb      	strb	r3, [r7, #23]
        break;
 8007116:	e020      	b.n	800715a <lsm6dso_xl_data_rate_set+0x1b2>
          odr_xl = val;
 8007118:	78fb      	ldrb	r3, [r7, #3]
 800711a:	75fb      	strb	r3, [r7, #23]
        break;
 800711c:	e01d      	b.n	800715a <lsm6dso_xl_data_rate_set+0x1b2>

      case LSM6DSO_ODR_FSM_104Hz:
        if (val == LSM6DSO_XL_ODR_OFF)
 800711e:	78fb      	ldrb	r3, [r7, #3]
 8007120:	2b00      	cmp	r3, #0
 8007122:	d102      	bne.n	800712a <lsm6dso_xl_data_rate_set+0x182>
        {
          odr_xl = LSM6DSO_XL_ODR_104Hz;
 8007124:	2304      	movs	r3, #4
 8007126:	75fb      	strb	r3, [r7, #23]
        else
        {
          odr_xl = val;
        }

        break;
 8007128:	e017      	b.n	800715a <lsm6dso_xl_data_rate_set+0x1b2>
        else if (val == LSM6DSO_XL_ODR_12Hz5)
 800712a:	78fb      	ldrb	r3, [r7, #3]
 800712c:	2b01      	cmp	r3, #1
 800712e:	d102      	bne.n	8007136 <lsm6dso_xl_data_rate_set+0x18e>
          odr_xl = LSM6DSO_XL_ODR_104Hz;
 8007130:	2304      	movs	r3, #4
 8007132:	75fb      	strb	r3, [r7, #23]
        break;
 8007134:	e011      	b.n	800715a <lsm6dso_xl_data_rate_set+0x1b2>
        else if (val == LSM6DSO_XL_ODR_26Hz)
 8007136:	78fb      	ldrb	r3, [r7, #3]
 8007138:	2b02      	cmp	r3, #2
 800713a:	d102      	bne.n	8007142 <lsm6dso_xl_data_rate_set+0x19a>
          odr_xl = LSM6DSO_XL_ODR_104Hz;
 800713c:	2304      	movs	r3, #4
 800713e:	75fb      	strb	r3, [r7, #23]
        break;
 8007140:	e00b      	b.n	800715a <lsm6dso_xl_data_rate_set+0x1b2>
        else if (val == LSM6DSO_XL_ODR_52Hz)
 8007142:	78fb      	ldrb	r3, [r7, #3]
 8007144:	2b03      	cmp	r3, #3
 8007146:	d102      	bne.n	800714e <lsm6dso_xl_data_rate_set+0x1a6>
          odr_xl = LSM6DSO_XL_ODR_104Hz;
 8007148:	2304      	movs	r3, #4
 800714a:	75fb      	strb	r3, [r7, #23]
        break;
 800714c:	e005      	b.n	800715a <lsm6dso_xl_data_rate_set+0x1b2>
          odr_xl = val;
 800714e:	78fb      	ldrb	r3, [r7, #3]
 8007150:	75fb      	strb	r3, [r7, #23]
        break;
 8007152:	e002      	b.n	800715a <lsm6dso_xl_data_rate_set+0x1b2>

      default:
        odr_xl = val;
 8007154:	78fb      	ldrb	r3, [r7, #3]
 8007156:	75fb      	strb	r3, [r7, #23]
        break;
 8007158:	bf00      	nop
    }
  }

  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL1_XL, (uint8_t *)&reg, 1);
 800715a:	f107 0208 	add.w	r2, r7, #8
 800715e:	2301      	movs	r3, #1
 8007160:	2110      	movs	r1, #16
 8007162:	6878      	ldr	r0, [r7, #4]
 8007164:	f7ff fe92 	bl	8006e8c <lsm6dso_read_reg>
 8007168:	6138      	str	r0, [r7, #16]
  reg.odr_xl = (uint8_t) odr_xl;
 800716a:	7dfb      	ldrb	r3, [r7, #23]
 800716c:	f003 030f 	and.w	r3, r3, #15
 8007170:	b2da      	uxtb	r2, r3
 8007172:	7a3b      	ldrb	r3, [r7, #8]
 8007174:	f362 1307 	bfi	r3, r2, #4, #4
 8007178:	723b      	strb	r3, [r7, #8]
  ret += lsm6dso_write_reg(ctx, LSM6DSO_CTRL1_XL, (uint8_t *)&reg, 1);
 800717a:	f107 0208 	add.w	r2, r7, #8
 800717e:	2301      	movs	r3, #1
 8007180:	2110      	movs	r1, #16
 8007182:	6878      	ldr	r0, [r7, #4]
 8007184:	f7ff fe9a 	bl	8006ebc <lsm6dso_write_reg>
 8007188:	4602      	mov	r2, r0
 800718a:	693b      	ldr	r3, [r7, #16]
 800718c:	4413      	add	r3, r2
 800718e:	613b      	str	r3, [r7, #16]

  return ret;
 8007190:	693b      	ldr	r3, [r7, #16]
}
 8007192:	4618      	mov	r0, r3
 8007194:	3718      	adds	r7, #24
 8007196:	46bd      	mov	sp, r7
 8007198:	bd80      	pop	{r7, pc}
 800719a:	bf00      	nop

0800719c <lsm6dso_xl_data_rate_get>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_xl_data_rate_get(stmdev_ctx_t *ctx,
                                 lsm6dso_odr_xl_t *val)
{
 800719c:	b580      	push	{r7, lr}
 800719e:	b084      	sub	sp, #16
 80071a0:	af00      	add	r7, sp, #0
 80071a2:	6078      	str	r0, [r7, #4]
 80071a4:	6039      	str	r1, [r7, #0]
  lsm6dso_ctrl1_xl_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL1_XL, (uint8_t *)&reg, 1);
 80071a6:	f107 0208 	add.w	r2, r7, #8
 80071aa:	2301      	movs	r3, #1
 80071ac:	2110      	movs	r1, #16
 80071ae:	6878      	ldr	r0, [r7, #4]
 80071b0:	f7ff fe6c 	bl	8006e8c <lsm6dso_read_reg>
 80071b4:	60f8      	str	r0, [r7, #12]

  switch (reg.odr_xl)
 80071b6:	7a3b      	ldrb	r3, [r7, #8]
 80071b8:	f3c3 1303 	ubfx	r3, r3, #4, #4
 80071bc:	b2db      	uxtb	r3, r3
 80071be:	2b0b      	cmp	r3, #11
 80071c0:	d84a      	bhi.n	8007258 <lsm6dso_xl_data_rate_get+0xbc>
 80071c2:	a201      	add	r2, pc, #4	@ (adr r2, 80071c8 <lsm6dso_xl_data_rate_get+0x2c>)
 80071c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80071c8:	080071f9 	.word	0x080071f9
 80071cc:	08007201 	.word	0x08007201
 80071d0:	08007209 	.word	0x08007209
 80071d4:	08007211 	.word	0x08007211
 80071d8:	08007219 	.word	0x08007219
 80071dc:	08007221 	.word	0x08007221
 80071e0:	08007229 	.word	0x08007229
 80071e4:	08007231 	.word	0x08007231
 80071e8:	08007239 	.word	0x08007239
 80071ec:	08007241 	.word	0x08007241
 80071f0:	08007249 	.word	0x08007249
 80071f4:	08007251 	.word	0x08007251
  {
    case LSM6DSO_XL_ODR_OFF:
      *val = LSM6DSO_XL_ODR_OFF;
 80071f8:	683b      	ldr	r3, [r7, #0]
 80071fa:	2200      	movs	r2, #0
 80071fc:	701a      	strb	r2, [r3, #0]
      break;
 80071fe:	e02f      	b.n	8007260 <lsm6dso_xl_data_rate_get+0xc4>

    case LSM6DSO_XL_ODR_12Hz5:
      *val = LSM6DSO_XL_ODR_12Hz5;
 8007200:	683b      	ldr	r3, [r7, #0]
 8007202:	2201      	movs	r2, #1
 8007204:	701a      	strb	r2, [r3, #0]
      break;
 8007206:	e02b      	b.n	8007260 <lsm6dso_xl_data_rate_get+0xc4>

    case LSM6DSO_XL_ODR_26Hz:
      *val = LSM6DSO_XL_ODR_26Hz;
 8007208:	683b      	ldr	r3, [r7, #0]
 800720a:	2202      	movs	r2, #2
 800720c:	701a      	strb	r2, [r3, #0]
      break;
 800720e:	e027      	b.n	8007260 <lsm6dso_xl_data_rate_get+0xc4>

    case LSM6DSO_XL_ODR_52Hz:
      *val = LSM6DSO_XL_ODR_52Hz;
 8007210:	683b      	ldr	r3, [r7, #0]
 8007212:	2203      	movs	r2, #3
 8007214:	701a      	strb	r2, [r3, #0]
      break;
 8007216:	e023      	b.n	8007260 <lsm6dso_xl_data_rate_get+0xc4>

    case LSM6DSO_XL_ODR_104Hz:
      *val = LSM6DSO_XL_ODR_104Hz;
 8007218:	683b      	ldr	r3, [r7, #0]
 800721a:	2204      	movs	r2, #4
 800721c:	701a      	strb	r2, [r3, #0]
      break;
 800721e:	e01f      	b.n	8007260 <lsm6dso_xl_data_rate_get+0xc4>

    case LSM6DSO_XL_ODR_208Hz:
      *val = LSM6DSO_XL_ODR_208Hz;
 8007220:	683b      	ldr	r3, [r7, #0]
 8007222:	2205      	movs	r2, #5
 8007224:	701a      	strb	r2, [r3, #0]
      break;
 8007226:	e01b      	b.n	8007260 <lsm6dso_xl_data_rate_get+0xc4>

    case LSM6DSO_XL_ODR_417Hz:
      *val = LSM6DSO_XL_ODR_417Hz;
 8007228:	683b      	ldr	r3, [r7, #0]
 800722a:	2206      	movs	r2, #6
 800722c:	701a      	strb	r2, [r3, #0]
      break;
 800722e:	e017      	b.n	8007260 <lsm6dso_xl_data_rate_get+0xc4>

    case LSM6DSO_XL_ODR_833Hz:
      *val = LSM6DSO_XL_ODR_833Hz;
 8007230:	683b      	ldr	r3, [r7, #0]
 8007232:	2207      	movs	r2, #7
 8007234:	701a      	strb	r2, [r3, #0]
      break;
 8007236:	e013      	b.n	8007260 <lsm6dso_xl_data_rate_get+0xc4>

    case LSM6DSO_XL_ODR_1667Hz:
      *val = LSM6DSO_XL_ODR_1667Hz;
 8007238:	683b      	ldr	r3, [r7, #0]
 800723a:	2208      	movs	r2, #8
 800723c:	701a      	strb	r2, [r3, #0]
      break;
 800723e:	e00f      	b.n	8007260 <lsm6dso_xl_data_rate_get+0xc4>

    case LSM6DSO_XL_ODR_3333Hz:
      *val = LSM6DSO_XL_ODR_3333Hz;
 8007240:	683b      	ldr	r3, [r7, #0]
 8007242:	2209      	movs	r2, #9
 8007244:	701a      	strb	r2, [r3, #0]
      break;
 8007246:	e00b      	b.n	8007260 <lsm6dso_xl_data_rate_get+0xc4>

    case LSM6DSO_XL_ODR_6667Hz:
      *val = LSM6DSO_XL_ODR_6667Hz;
 8007248:	683b      	ldr	r3, [r7, #0]
 800724a:	220a      	movs	r2, #10
 800724c:	701a      	strb	r2, [r3, #0]
      break;
 800724e:	e007      	b.n	8007260 <lsm6dso_xl_data_rate_get+0xc4>

    case LSM6DSO_XL_ODR_1Hz6:
      *val = LSM6DSO_XL_ODR_1Hz6;
 8007250:	683b      	ldr	r3, [r7, #0]
 8007252:	220b      	movs	r2, #11
 8007254:	701a      	strb	r2, [r3, #0]
      break;
 8007256:	e003      	b.n	8007260 <lsm6dso_xl_data_rate_get+0xc4>

    default:
      *val = LSM6DSO_XL_ODR_OFF;
 8007258:	683b      	ldr	r3, [r7, #0]
 800725a:	2200      	movs	r2, #0
 800725c:	701a      	strb	r2, [r3, #0]
      break;
 800725e:	bf00      	nop
  }

  return ret;
 8007260:	68fb      	ldr	r3, [r7, #12]
}
 8007262:	4618      	mov	r0, r3
 8007264:	3710      	adds	r7, #16
 8007266:	46bd      	mov	sp, r7
 8007268:	bd80      	pop	{r7, pc}
 800726a:	bf00      	nop

0800726c <lsm6dso_gy_full_scale_set>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_gy_full_scale_set(stmdev_ctx_t *ctx,
                                  lsm6dso_fs_g_t val)
{
 800726c:	b580      	push	{r7, lr}
 800726e:	b084      	sub	sp, #16
 8007270:	af00      	add	r7, sp, #0
 8007272:	6078      	str	r0, [r7, #4]
 8007274:	460b      	mov	r3, r1
 8007276:	70fb      	strb	r3, [r7, #3]
  lsm6dso_ctrl2_g_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL2_G, (uint8_t *)&reg, 1);
 8007278:	f107 0208 	add.w	r2, r7, #8
 800727c:	2301      	movs	r3, #1
 800727e:	2111      	movs	r1, #17
 8007280:	6878      	ldr	r0, [r7, #4]
 8007282:	f7ff fe03 	bl	8006e8c <lsm6dso_read_reg>
 8007286:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8007288:	68fb      	ldr	r3, [r7, #12]
 800728a:	2b00      	cmp	r3, #0
 800728c:	d10f      	bne.n	80072ae <lsm6dso_gy_full_scale_set+0x42>
  {
    reg.fs_g = (uint8_t) val;
 800728e:	78fb      	ldrb	r3, [r7, #3]
 8007290:	f003 0307 	and.w	r3, r3, #7
 8007294:	b2da      	uxtb	r2, r3
 8007296:	7a3b      	ldrb	r3, [r7, #8]
 8007298:	f362 0343 	bfi	r3, r2, #1, #3
 800729c:	723b      	strb	r3, [r7, #8]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_CTRL2_G, (uint8_t *)&reg, 1);
 800729e:	f107 0208 	add.w	r2, r7, #8
 80072a2:	2301      	movs	r3, #1
 80072a4:	2111      	movs	r1, #17
 80072a6:	6878      	ldr	r0, [r7, #4]
 80072a8:	f7ff fe08 	bl	8006ebc <lsm6dso_write_reg>
 80072ac:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 80072ae:	68fb      	ldr	r3, [r7, #12]
}
 80072b0:	4618      	mov	r0, r3
 80072b2:	3710      	adds	r7, #16
 80072b4:	46bd      	mov	sp, r7
 80072b6:	bd80      	pop	{r7, pc}

080072b8 <lsm6dso_gy_full_scale_get>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_gy_full_scale_get(stmdev_ctx_t *ctx,
                                  lsm6dso_fs_g_t *val)
{
 80072b8:	b580      	push	{r7, lr}
 80072ba:	b084      	sub	sp, #16
 80072bc:	af00      	add	r7, sp, #0
 80072be:	6078      	str	r0, [r7, #4]
 80072c0:	6039      	str	r1, [r7, #0]
  lsm6dso_ctrl2_g_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL2_G, (uint8_t *)&reg, 1);
 80072c2:	f107 0208 	add.w	r2, r7, #8
 80072c6:	2301      	movs	r3, #1
 80072c8:	2111      	movs	r1, #17
 80072ca:	6878      	ldr	r0, [r7, #4]
 80072cc:	f7ff fdde 	bl	8006e8c <lsm6dso_read_reg>
 80072d0:	60f8      	str	r0, [r7, #12]

  switch (reg.fs_g)
 80072d2:	7a3b      	ldrb	r3, [r7, #8]
 80072d4:	f3c3 0342 	ubfx	r3, r3, #1, #3
 80072d8:	b2db      	uxtb	r3, r3
 80072da:	2b06      	cmp	r3, #6
 80072dc:	d824      	bhi.n	8007328 <lsm6dso_gy_full_scale_get+0x70>
 80072de:	a201      	add	r2, pc, #4	@ (adr r2, 80072e4 <lsm6dso_gy_full_scale_get+0x2c>)
 80072e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80072e4:	08007301 	.word	0x08007301
 80072e8:	08007309 	.word	0x08007309
 80072ec:	08007311 	.word	0x08007311
 80072f0:	08007329 	.word	0x08007329
 80072f4:	08007319 	.word	0x08007319
 80072f8:	08007329 	.word	0x08007329
 80072fc:	08007321 	.word	0x08007321
  {
    case LSM6DSO_250dps:
      *val = LSM6DSO_250dps;
 8007300:	683b      	ldr	r3, [r7, #0]
 8007302:	2200      	movs	r2, #0
 8007304:	701a      	strb	r2, [r3, #0]
      break;
 8007306:	e013      	b.n	8007330 <lsm6dso_gy_full_scale_get+0x78>

    case LSM6DSO_125dps:
      *val = LSM6DSO_125dps;
 8007308:	683b      	ldr	r3, [r7, #0]
 800730a:	2201      	movs	r2, #1
 800730c:	701a      	strb	r2, [r3, #0]
      break;
 800730e:	e00f      	b.n	8007330 <lsm6dso_gy_full_scale_get+0x78>

    case LSM6DSO_500dps:
      *val = LSM6DSO_500dps;
 8007310:	683b      	ldr	r3, [r7, #0]
 8007312:	2202      	movs	r2, #2
 8007314:	701a      	strb	r2, [r3, #0]
      break;
 8007316:	e00b      	b.n	8007330 <lsm6dso_gy_full_scale_get+0x78>

    case LSM6DSO_1000dps:
      *val = LSM6DSO_1000dps;
 8007318:	683b      	ldr	r3, [r7, #0]
 800731a:	2204      	movs	r2, #4
 800731c:	701a      	strb	r2, [r3, #0]
      break;
 800731e:	e007      	b.n	8007330 <lsm6dso_gy_full_scale_get+0x78>

    case LSM6DSO_2000dps:
      *val = LSM6DSO_2000dps;
 8007320:	683b      	ldr	r3, [r7, #0]
 8007322:	2206      	movs	r2, #6
 8007324:	701a      	strb	r2, [r3, #0]
      break;
 8007326:	e003      	b.n	8007330 <lsm6dso_gy_full_scale_get+0x78>

    default:
      *val = LSM6DSO_250dps;
 8007328:	683b      	ldr	r3, [r7, #0]
 800732a:	2200      	movs	r2, #0
 800732c:	701a      	strb	r2, [r3, #0]
      break;
 800732e:	bf00      	nop
  }

  return ret;
 8007330:	68fb      	ldr	r3, [r7, #12]
}
 8007332:	4618      	mov	r0, r3
 8007334:	3710      	adds	r7, #16
 8007336:	46bd      	mov	sp, r7
 8007338:	bd80      	pop	{r7, pc}
 800733a:	bf00      	nop

0800733c <lsm6dso_gy_data_rate_set>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_gy_data_rate_set(stmdev_ctx_t *ctx,
                                 lsm6dso_odr_g_t val)
{
 800733c:	b580      	push	{r7, lr}
 800733e:	b086      	sub	sp, #24
 8007340:	af00      	add	r7, sp, #0
 8007342:	6078      	str	r0, [r7, #4]
 8007344:	460b      	mov	r3, r1
 8007346:	70fb      	strb	r3, [r7, #3]
  lsm6dso_odr_g_t odr_gy =  val;
 8007348:	78fb      	ldrb	r3, [r7, #3]
 800734a:	75fb      	strb	r3, [r7, #23]
  lsm6dso_fsm_odr_t fsm_odr;
  lsm6dso_ctrl2_g_t reg;
  int32_t ret;

  /* Check the Finite State Machine data rate constraints */
  ret =  lsm6dso_fsm_enable_get(ctx, &fsm_enable);
 800734c:	f107 030c 	add.w	r3, r7, #12
 8007350:	4619      	mov	r1, r3
 8007352:	6878      	ldr	r0, [r7, #4]
 8007354:	f000 fac6 	bl	80078e4 <lsm6dso_fsm_enable_get>
 8007358:	6138      	str	r0, [r7, #16]
  if (ret != 0) { return ret; }
 800735a:	693b      	ldr	r3, [r7, #16]
 800735c:	2b00      	cmp	r3, #0
 800735e:	d001      	beq.n	8007364 <lsm6dso_gy_data_rate_set+0x28>
 8007360:	693b      	ldr	r3, [r7, #16]
 8007362:	e0e0      	b.n	8007526 <lsm6dso_gy_data_rate_set+0x1ea>

  if ((fsm_enable.fsm_enable_a.fsm1_en  |
 8007364:	7b3b      	ldrb	r3, [r7, #12]
 8007366:	f3c3 0300 	ubfx	r3, r3, #0, #1
 800736a:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_a.fsm2_en  |
 800736c:	7b3b      	ldrb	r3, [r7, #12]
 800736e:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8007372:	b2db      	uxtb	r3, r3
  if ((fsm_enable.fsm_enable_a.fsm1_en  |
 8007374:	4313      	orrs	r3, r2
 8007376:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_a.fsm3_en  |
 8007378:	7b3b      	ldrb	r3, [r7, #12]
 800737a:	f3c3 0380 	ubfx	r3, r3, #2, #1
 800737e:	b2db      	uxtb	r3, r3
       fsm_enable.fsm_enable_a.fsm2_en  |
 8007380:	4313      	orrs	r3, r2
 8007382:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_a.fsm4_en  |
 8007384:	7b3b      	ldrb	r3, [r7, #12]
 8007386:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 800738a:	b2db      	uxtb	r3, r3
       fsm_enable.fsm_enable_a.fsm3_en  |
 800738c:	4313      	orrs	r3, r2
 800738e:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_a.fsm5_en  |
 8007390:	7b3b      	ldrb	r3, [r7, #12]
 8007392:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8007396:	b2db      	uxtb	r3, r3
       fsm_enable.fsm_enable_a.fsm4_en  |
 8007398:	4313      	orrs	r3, r2
 800739a:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_a.fsm6_en  |
 800739c:	7b3b      	ldrb	r3, [r7, #12]
 800739e:	f3c3 1340 	ubfx	r3, r3, #5, #1
 80073a2:	b2db      	uxtb	r3, r3
       fsm_enable.fsm_enable_a.fsm5_en  |
 80073a4:	4313      	orrs	r3, r2
 80073a6:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_a.fsm7_en  |
 80073a8:	7b3b      	ldrb	r3, [r7, #12]
 80073aa:	f3c3 1380 	ubfx	r3, r3, #6, #1
 80073ae:	b2db      	uxtb	r3, r3
       fsm_enable.fsm_enable_a.fsm6_en  |
 80073b0:	4313      	orrs	r3, r2
 80073b2:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_a.fsm8_en  |
 80073b4:	7b3b      	ldrb	r3, [r7, #12]
 80073b6:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 80073ba:	b2db      	uxtb	r3, r3
       fsm_enable.fsm_enable_a.fsm7_en  |
 80073bc:	4313      	orrs	r3, r2
 80073be:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_b.fsm9_en  |
 80073c0:	7b7b      	ldrb	r3, [r7, #13]
 80073c2:	f3c3 0300 	ubfx	r3, r3, #0, #1
 80073c6:	b2db      	uxtb	r3, r3
       fsm_enable.fsm_enable_a.fsm8_en  |
 80073c8:	4313      	orrs	r3, r2
 80073ca:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_b.fsm10_en |
 80073cc:	7b7b      	ldrb	r3, [r7, #13]
 80073ce:	f3c3 0340 	ubfx	r3, r3, #1, #1
 80073d2:	b2db      	uxtb	r3, r3
       fsm_enable.fsm_enable_b.fsm9_en  |
 80073d4:	4313      	orrs	r3, r2
 80073d6:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_b.fsm11_en |
 80073d8:	7b7b      	ldrb	r3, [r7, #13]
 80073da:	f3c3 0380 	ubfx	r3, r3, #2, #1
 80073de:	b2db      	uxtb	r3, r3
       fsm_enable.fsm_enable_b.fsm10_en |
 80073e0:	4313      	orrs	r3, r2
 80073e2:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_b.fsm12_en |
 80073e4:	7b7b      	ldrb	r3, [r7, #13]
 80073e6:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 80073ea:	b2db      	uxtb	r3, r3
       fsm_enable.fsm_enable_b.fsm11_en |
 80073ec:	4313      	orrs	r3, r2
 80073ee:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_b.fsm13_en |
 80073f0:	7b7b      	ldrb	r3, [r7, #13]
 80073f2:	f3c3 1300 	ubfx	r3, r3, #4, #1
 80073f6:	b2db      	uxtb	r3, r3
       fsm_enable.fsm_enable_b.fsm12_en |
 80073f8:	4313      	orrs	r3, r2
 80073fa:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_b.fsm14_en |
 80073fc:	7b7b      	ldrb	r3, [r7, #13]
 80073fe:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8007402:	b2db      	uxtb	r3, r3
       fsm_enable.fsm_enable_b.fsm13_en |
 8007404:	4313      	orrs	r3, r2
 8007406:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_b.fsm15_en |
 8007408:	7b7b      	ldrb	r3, [r7, #13]
 800740a:	f3c3 1380 	ubfx	r3, r3, #6, #1
 800740e:	b2db      	uxtb	r3, r3
       fsm_enable.fsm_enable_b.fsm14_en |
 8007410:	4313      	orrs	r3, r2
 8007412:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_b.fsm16_en) == PROPERTY_ENABLE)
 8007414:	7b7b      	ldrb	r3, [r7, #13]
 8007416:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 800741a:	b2db      	uxtb	r3, r3
       fsm_enable.fsm_enable_b.fsm15_en |
 800741c:	4313      	orrs	r3, r2
 800741e:	b2db      	uxtb	r3, r3
  if ((fsm_enable.fsm_enable_a.fsm1_en  |
 8007420:	2b01      	cmp	r3, #1
 8007422:	d164      	bne.n	80074ee <lsm6dso_gy_data_rate_set+0x1b2>
  {
    ret =  lsm6dso_fsm_data_rate_get(ctx, &fsm_odr);
 8007424:	f107 030b 	add.w	r3, r7, #11
 8007428:	4619      	mov	r1, r3
 800742a:	6878      	ldr	r0, [r7, #4]
 800742c:	f000 fa7c 	bl	8007928 <lsm6dso_fsm_data_rate_get>
 8007430:	6138      	str	r0, [r7, #16]
    if (ret != 0) { return ret; }
 8007432:	693b      	ldr	r3, [r7, #16]
 8007434:	2b00      	cmp	r3, #0
 8007436:	d001      	beq.n	800743c <lsm6dso_gy_data_rate_set+0x100>
 8007438:	693b      	ldr	r3, [r7, #16]
 800743a:	e074      	b.n	8007526 <lsm6dso_gy_data_rate_set+0x1ea>

    switch (fsm_odr)
 800743c:	7afb      	ldrb	r3, [r7, #11]
 800743e:	2b03      	cmp	r3, #3
 8007440:	d852      	bhi.n	80074e8 <lsm6dso_gy_data_rate_set+0x1ac>
 8007442:	a201      	add	r2, pc, #4	@ (adr r2, 8007448 <lsm6dso_gy_data_rate_set+0x10c>)
 8007444:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007448:	08007459 	.word	0x08007459
 800744c:	0800746b 	.word	0x0800746b
 8007450:	08007489 	.word	0x08007489
 8007454:	080074b3 	.word	0x080074b3
    {
      case LSM6DSO_ODR_FSM_12Hz5:
        if (val == LSM6DSO_GY_ODR_OFF)
 8007458:	78fb      	ldrb	r3, [r7, #3]
 800745a:	2b00      	cmp	r3, #0
 800745c:	d102      	bne.n	8007464 <lsm6dso_gy_data_rate_set+0x128>
        {
          odr_gy = LSM6DSO_GY_ODR_12Hz5;
 800745e:	2301      	movs	r3, #1
 8007460:	75fb      	strb	r3, [r7, #23]
        else
        {
          odr_gy = val;
        }

        break;
 8007462:	e044      	b.n	80074ee <lsm6dso_gy_data_rate_set+0x1b2>
          odr_gy = val;
 8007464:	78fb      	ldrb	r3, [r7, #3]
 8007466:	75fb      	strb	r3, [r7, #23]
        break;
 8007468:	e041      	b.n	80074ee <lsm6dso_gy_data_rate_set+0x1b2>

      case LSM6DSO_ODR_FSM_26Hz:
        if (val == LSM6DSO_GY_ODR_OFF)
 800746a:	78fb      	ldrb	r3, [r7, #3]
 800746c:	2b00      	cmp	r3, #0
 800746e:	d102      	bne.n	8007476 <lsm6dso_gy_data_rate_set+0x13a>
        {
          odr_gy = LSM6DSO_GY_ODR_26Hz;
 8007470:	2302      	movs	r3, #2
 8007472:	75fb      	strb	r3, [r7, #23]
        else
        {
          odr_gy = val;
        }

        break;
 8007474:	e03b      	b.n	80074ee <lsm6dso_gy_data_rate_set+0x1b2>
        else if (val == LSM6DSO_GY_ODR_12Hz5)
 8007476:	78fb      	ldrb	r3, [r7, #3]
 8007478:	2b01      	cmp	r3, #1
 800747a:	d102      	bne.n	8007482 <lsm6dso_gy_data_rate_set+0x146>
          odr_gy = LSM6DSO_GY_ODR_26Hz;
 800747c:	2302      	movs	r3, #2
 800747e:	75fb      	strb	r3, [r7, #23]
        break;
 8007480:	e035      	b.n	80074ee <lsm6dso_gy_data_rate_set+0x1b2>
          odr_gy = val;
 8007482:	78fb      	ldrb	r3, [r7, #3]
 8007484:	75fb      	strb	r3, [r7, #23]
        break;
 8007486:	e032      	b.n	80074ee <lsm6dso_gy_data_rate_set+0x1b2>

      case LSM6DSO_ODR_FSM_52Hz:
        if (val == LSM6DSO_GY_ODR_OFF)
 8007488:	78fb      	ldrb	r3, [r7, #3]
 800748a:	2b00      	cmp	r3, #0
 800748c:	d102      	bne.n	8007494 <lsm6dso_gy_data_rate_set+0x158>
        {
          odr_gy = LSM6DSO_GY_ODR_52Hz;
 800748e:	2303      	movs	r3, #3
 8007490:	75fb      	strb	r3, [r7, #23]
        else
        {
          odr_gy = val;
        }

        break;
 8007492:	e02c      	b.n	80074ee <lsm6dso_gy_data_rate_set+0x1b2>
        else if (val == LSM6DSO_GY_ODR_12Hz5)
 8007494:	78fb      	ldrb	r3, [r7, #3]
 8007496:	2b01      	cmp	r3, #1
 8007498:	d102      	bne.n	80074a0 <lsm6dso_gy_data_rate_set+0x164>
          odr_gy = LSM6DSO_GY_ODR_52Hz;
 800749a:	2303      	movs	r3, #3
 800749c:	75fb      	strb	r3, [r7, #23]
        break;
 800749e:	e026      	b.n	80074ee <lsm6dso_gy_data_rate_set+0x1b2>
        else if (val == LSM6DSO_GY_ODR_26Hz)
 80074a0:	78fb      	ldrb	r3, [r7, #3]
 80074a2:	2b02      	cmp	r3, #2
 80074a4:	d102      	bne.n	80074ac <lsm6dso_gy_data_rate_set+0x170>
          odr_gy = LSM6DSO_GY_ODR_52Hz;
 80074a6:	2303      	movs	r3, #3
 80074a8:	75fb      	strb	r3, [r7, #23]
        break;
 80074aa:	e020      	b.n	80074ee <lsm6dso_gy_data_rate_set+0x1b2>
          odr_gy = val;
 80074ac:	78fb      	ldrb	r3, [r7, #3]
 80074ae:	75fb      	strb	r3, [r7, #23]
        break;
 80074b0:	e01d      	b.n	80074ee <lsm6dso_gy_data_rate_set+0x1b2>

      case LSM6DSO_ODR_FSM_104Hz:
        if (val == LSM6DSO_GY_ODR_OFF)
 80074b2:	78fb      	ldrb	r3, [r7, #3]
 80074b4:	2b00      	cmp	r3, #0
 80074b6:	d102      	bne.n	80074be <lsm6dso_gy_data_rate_set+0x182>
        {
          odr_gy = LSM6DSO_GY_ODR_104Hz;
 80074b8:	2304      	movs	r3, #4
 80074ba:	75fb      	strb	r3, [r7, #23]
        else
        {
          odr_gy = val;
        }

        break;
 80074bc:	e017      	b.n	80074ee <lsm6dso_gy_data_rate_set+0x1b2>
        else if (val == LSM6DSO_GY_ODR_12Hz5)
 80074be:	78fb      	ldrb	r3, [r7, #3]
 80074c0:	2b01      	cmp	r3, #1
 80074c2:	d102      	bne.n	80074ca <lsm6dso_gy_data_rate_set+0x18e>
          odr_gy = LSM6DSO_GY_ODR_104Hz;
 80074c4:	2304      	movs	r3, #4
 80074c6:	75fb      	strb	r3, [r7, #23]
        break;
 80074c8:	e011      	b.n	80074ee <lsm6dso_gy_data_rate_set+0x1b2>
        else if (val == LSM6DSO_GY_ODR_26Hz)
 80074ca:	78fb      	ldrb	r3, [r7, #3]
 80074cc:	2b02      	cmp	r3, #2
 80074ce:	d102      	bne.n	80074d6 <lsm6dso_gy_data_rate_set+0x19a>
          odr_gy = LSM6DSO_GY_ODR_104Hz;
 80074d0:	2304      	movs	r3, #4
 80074d2:	75fb      	strb	r3, [r7, #23]
        break;
 80074d4:	e00b      	b.n	80074ee <lsm6dso_gy_data_rate_set+0x1b2>
        else if (val == LSM6DSO_GY_ODR_52Hz)
 80074d6:	78fb      	ldrb	r3, [r7, #3]
 80074d8:	2b03      	cmp	r3, #3
 80074da:	d102      	bne.n	80074e2 <lsm6dso_gy_data_rate_set+0x1a6>
          odr_gy = LSM6DSO_GY_ODR_104Hz;
 80074dc:	2304      	movs	r3, #4
 80074de:	75fb      	strb	r3, [r7, #23]
        break;
 80074e0:	e005      	b.n	80074ee <lsm6dso_gy_data_rate_set+0x1b2>
          odr_gy = val;
 80074e2:	78fb      	ldrb	r3, [r7, #3]
 80074e4:	75fb      	strb	r3, [r7, #23]
        break;
 80074e6:	e002      	b.n	80074ee <lsm6dso_gy_data_rate_set+0x1b2>

      default:
        odr_gy = val;
 80074e8:	78fb      	ldrb	r3, [r7, #3]
 80074ea:	75fb      	strb	r3, [r7, #23]
        break;
 80074ec:	bf00      	nop
    }
  }

  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL2_G, (uint8_t *)&reg, 1);
 80074ee:	f107 0208 	add.w	r2, r7, #8
 80074f2:	2301      	movs	r3, #1
 80074f4:	2111      	movs	r1, #17
 80074f6:	6878      	ldr	r0, [r7, #4]
 80074f8:	f7ff fcc8 	bl	8006e8c <lsm6dso_read_reg>
 80074fc:	6138      	str	r0, [r7, #16]
  reg.odr_g = (uint8_t) odr_gy;
 80074fe:	7dfb      	ldrb	r3, [r7, #23]
 8007500:	f003 030f 	and.w	r3, r3, #15
 8007504:	b2da      	uxtb	r2, r3
 8007506:	7a3b      	ldrb	r3, [r7, #8]
 8007508:	f362 1307 	bfi	r3, r2, #4, #4
 800750c:	723b      	strb	r3, [r7, #8]
  ret += lsm6dso_write_reg(ctx, LSM6DSO_CTRL2_G, (uint8_t *)&reg, 1);
 800750e:	f107 0208 	add.w	r2, r7, #8
 8007512:	2301      	movs	r3, #1
 8007514:	2111      	movs	r1, #17
 8007516:	6878      	ldr	r0, [r7, #4]
 8007518:	f7ff fcd0 	bl	8006ebc <lsm6dso_write_reg>
 800751c:	4602      	mov	r2, r0
 800751e:	693b      	ldr	r3, [r7, #16]
 8007520:	4413      	add	r3, r2
 8007522:	613b      	str	r3, [r7, #16]

  return ret;
 8007524:	693b      	ldr	r3, [r7, #16]
}
 8007526:	4618      	mov	r0, r3
 8007528:	3718      	adds	r7, #24
 800752a:	46bd      	mov	sp, r7
 800752c:	bd80      	pop	{r7, pc}
 800752e:	bf00      	nop

08007530 <lsm6dso_gy_data_rate_get>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_gy_data_rate_get(stmdev_ctx_t *ctx,
                                 lsm6dso_odr_g_t *val)
{
 8007530:	b580      	push	{r7, lr}
 8007532:	b084      	sub	sp, #16
 8007534:	af00      	add	r7, sp, #0
 8007536:	6078      	str	r0, [r7, #4]
 8007538:	6039      	str	r1, [r7, #0]
  lsm6dso_ctrl2_g_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL2_G, (uint8_t *)&reg, 1);
 800753a:	f107 0208 	add.w	r2, r7, #8
 800753e:	2301      	movs	r3, #1
 8007540:	2111      	movs	r1, #17
 8007542:	6878      	ldr	r0, [r7, #4]
 8007544:	f7ff fca2 	bl	8006e8c <lsm6dso_read_reg>
 8007548:	60f8      	str	r0, [r7, #12]

  switch (reg.odr_g)
 800754a:	7a3b      	ldrb	r3, [r7, #8]
 800754c:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8007550:	b2db      	uxtb	r3, r3
 8007552:	2b0a      	cmp	r3, #10
 8007554:	d844      	bhi.n	80075e0 <lsm6dso_gy_data_rate_get+0xb0>
 8007556:	a201      	add	r2, pc, #4	@ (adr r2, 800755c <lsm6dso_gy_data_rate_get+0x2c>)
 8007558:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800755c:	08007589 	.word	0x08007589
 8007560:	08007591 	.word	0x08007591
 8007564:	08007599 	.word	0x08007599
 8007568:	080075a1 	.word	0x080075a1
 800756c:	080075a9 	.word	0x080075a9
 8007570:	080075b1 	.word	0x080075b1
 8007574:	080075b9 	.word	0x080075b9
 8007578:	080075c1 	.word	0x080075c1
 800757c:	080075c9 	.word	0x080075c9
 8007580:	080075d1 	.word	0x080075d1
 8007584:	080075d9 	.word	0x080075d9
  {
    case LSM6DSO_GY_ODR_OFF:
      *val = LSM6DSO_GY_ODR_OFF;
 8007588:	683b      	ldr	r3, [r7, #0]
 800758a:	2200      	movs	r2, #0
 800758c:	701a      	strb	r2, [r3, #0]
      break;
 800758e:	e02b      	b.n	80075e8 <lsm6dso_gy_data_rate_get+0xb8>

    case LSM6DSO_GY_ODR_12Hz5:
      *val = LSM6DSO_GY_ODR_12Hz5;
 8007590:	683b      	ldr	r3, [r7, #0]
 8007592:	2201      	movs	r2, #1
 8007594:	701a      	strb	r2, [r3, #0]
      break;
 8007596:	e027      	b.n	80075e8 <lsm6dso_gy_data_rate_get+0xb8>

    case LSM6DSO_GY_ODR_26Hz:
      *val = LSM6DSO_GY_ODR_26Hz;
 8007598:	683b      	ldr	r3, [r7, #0]
 800759a:	2202      	movs	r2, #2
 800759c:	701a      	strb	r2, [r3, #0]
      break;
 800759e:	e023      	b.n	80075e8 <lsm6dso_gy_data_rate_get+0xb8>

    case LSM6DSO_GY_ODR_52Hz:
      *val = LSM6DSO_GY_ODR_52Hz;
 80075a0:	683b      	ldr	r3, [r7, #0]
 80075a2:	2203      	movs	r2, #3
 80075a4:	701a      	strb	r2, [r3, #0]
      break;
 80075a6:	e01f      	b.n	80075e8 <lsm6dso_gy_data_rate_get+0xb8>

    case LSM6DSO_GY_ODR_104Hz:
      *val = LSM6DSO_GY_ODR_104Hz;
 80075a8:	683b      	ldr	r3, [r7, #0]
 80075aa:	2204      	movs	r2, #4
 80075ac:	701a      	strb	r2, [r3, #0]
      break;
 80075ae:	e01b      	b.n	80075e8 <lsm6dso_gy_data_rate_get+0xb8>

    case LSM6DSO_GY_ODR_208Hz:
      *val = LSM6DSO_GY_ODR_208Hz;
 80075b0:	683b      	ldr	r3, [r7, #0]
 80075b2:	2205      	movs	r2, #5
 80075b4:	701a      	strb	r2, [r3, #0]
      break;
 80075b6:	e017      	b.n	80075e8 <lsm6dso_gy_data_rate_get+0xb8>

    case LSM6DSO_GY_ODR_417Hz:
      *val = LSM6DSO_GY_ODR_417Hz;
 80075b8:	683b      	ldr	r3, [r7, #0]
 80075ba:	2206      	movs	r2, #6
 80075bc:	701a      	strb	r2, [r3, #0]
      break;
 80075be:	e013      	b.n	80075e8 <lsm6dso_gy_data_rate_get+0xb8>

    case LSM6DSO_GY_ODR_833Hz:
      *val = LSM6DSO_GY_ODR_833Hz;
 80075c0:	683b      	ldr	r3, [r7, #0]
 80075c2:	2207      	movs	r2, #7
 80075c4:	701a      	strb	r2, [r3, #0]
      break;
 80075c6:	e00f      	b.n	80075e8 <lsm6dso_gy_data_rate_get+0xb8>

    case LSM6DSO_GY_ODR_1667Hz:
      *val = LSM6DSO_GY_ODR_1667Hz;
 80075c8:	683b      	ldr	r3, [r7, #0]
 80075ca:	2208      	movs	r2, #8
 80075cc:	701a      	strb	r2, [r3, #0]
      break;
 80075ce:	e00b      	b.n	80075e8 <lsm6dso_gy_data_rate_get+0xb8>

    case LSM6DSO_GY_ODR_3333Hz:
      *val = LSM6DSO_GY_ODR_3333Hz;
 80075d0:	683b      	ldr	r3, [r7, #0]
 80075d2:	2209      	movs	r2, #9
 80075d4:	701a      	strb	r2, [r3, #0]
      break;
 80075d6:	e007      	b.n	80075e8 <lsm6dso_gy_data_rate_get+0xb8>

    case LSM6DSO_GY_ODR_6667Hz:
      *val = LSM6DSO_GY_ODR_6667Hz;
 80075d8:	683b      	ldr	r3, [r7, #0]
 80075da:	220a      	movs	r2, #10
 80075dc:	701a      	strb	r2, [r3, #0]
      break;
 80075de:	e003      	b.n	80075e8 <lsm6dso_gy_data_rate_get+0xb8>

    default:
      *val = LSM6DSO_GY_ODR_OFF;
 80075e0:	683b      	ldr	r3, [r7, #0]
 80075e2:	2200      	movs	r2, #0
 80075e4:	701a      	strb	r2, [r3, #0]
      break;
 80075e6:	bf00      	nop
  }

  return ret;
 80075e8:	68fb      	ldr	r3, [r7, #12]
}
 80075ea:	4618      	mov	r0, r3
 80075ec:	3710      	adds	r7, #16
 80075ee:	46bd      	mov	sp, r7
 80075f0:	bd80      	pop	{r7, pc}
 80075f2:	bf00      	nop

080075f4 <lsm6dso_block_data_update_set>:
  * @param  val      change the values of bdu in reg CTRL3_C
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_block_data_update_set(stmdev_ctx_t *ctx, uint8_t val)
{
 80075f4:	b580      	push	{r7, lr}
 80075f6:	b084      	sub	sp, #16
 80075f8:	af00      	add	r7, sp, #0
 80075fa:	6078      	str	r0, [r7, #4]
 80075fc:	460b      	mov	r3, r1
 80075fe:	70fb      	strb	r3, [r7, #3]
  lsm6dso_ctrl3_c_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL3_C, (uint8_t *)&reg, 1);
 8007600:	f107 0208 	add.w	r2, r7, #8
 8007604:	2301      	movs	r3, #1
 8007606:	2112      	movs	r1, #18
 8007608:	6878      	ldr	r0, [r7, #4]
 800760a:	f7ff fc3f 	bl	8006e8c <lsm6dso_read_reg>
 800760e:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8007610:	68fb      	ldr	r3, [r7, #12]
 8007612:	2b00      	cmp	r3, #0
 8007614:	d10f      	bne.n	8007636 <lsm6dso_block_data_update_set+0x42>
  {
    reg.bdu = val;
 8007616:	78fb      	ldrb	r3, [r7, #3]
 8007618:	f003 0301 	and.w	r3, r3, #1
 800761c:	b2da      	uxtb	r2, r3
 800761e:	7a3b      	ldrb	r3, [r7, #8]
 8007620:	f362 1386 	bfi	r3, r2, #6, #1
 8007624:	723b      	strb	r3, [r7, #8]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_CTRL3_C, (uint8_t *)&reg, 1);
 8007626:	f107 0208 	add.w	r2, r7, #8
 800762a:	2301      	movs	r3, #1
 800762c:	2112      	movs	r1, #18
 800762e:	6878      	ldr	r0, [r7, #4]
 8007630:	f7ff fc44 	bl	8006ebc <lsm6dso_write_reg>
 8007634:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8007636:	68fb      	ldr	r3, [r7, #12]
}
 8007638:	4618      	mov	r0, r3
 800763a:	3710      	adds	r7, #16
 800763c:	46bd      	mov	sp, r7
 800763e:	bd80      	pop	{r7, pc}

08007640 <lsm6dso_angular_rate_raw_get>:
  * @param  buff     buffer that stores data read
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_angular_rate_raw_get(stmdev_ctx_t *ctx, int16_t *val)
{
 8007640:	b580      	push	{r7, lr}
 8007642:	b086      	sub	sp, #24
 8007644:	af00      	add	r7, sp, #0
 8007646:	6078      	str	r0, [r7, #4]
 8007648:	6039      	str	r1, [r7, #0]
  uint8_t buff[6];
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_OUTX_L_G, buff, 6);
 800764a:	f107 020c 	add.w	r2, r7, #12
 800764e:	2306      	movs	r3, #6
 8007650:	2122      	movs	r1, #34	@ 0x22
 8007652:	6878      	ldr	r0, [r7, #4]
 8007654:	f7ff fc1a 	bl	8006e8c <lsm6dso_read_reg>
 8007658:	6178      	str	r0, [r7, #20]
  val[0] = (int16_t)buff[1];
 800765a:	7b7b      	ldrb	r3, [r7, #13]
 800765c:	b21a      	sxth	r2, r3
 800765e:	683b      	ldr	r3, [r7, #0]
 8007660:	801a      	strh	r2, [r3, #0]
  val[0] = (val[0] * 256) + (int16_t)buff[0];
 8007662:	683b      	ldr	r3, [r7, #0]
 8007664:	f9b3 3000 	ldrsh.w	r3, [r3]
 8007668:	b29b      	uxth	r3, r3
 800766a:	021b      	lsls	r3, r3, #8
 800766c:	b29b      	uxth	r3, r3
 800766e:	7b3a      	ldrb	r2, [r7, #12]
 8007670:	4413      	add	r3, r2
 8007672:	b29b      	uxth	r3, r3
 8007674:	b21a      	sxth	r2, r3
 8007676:	683b      	ldr	r3, [r7, #0]
 8007678:	801a      	strh	r2, [r3, #0]
  val[1] = (int16_t)buff[3];
 800767a:	7bfa      	ldrb	r2, [r7, #15]
 800767c:	683b      	ldr	r3, [r7, #0]
 800767e:	3302      	adds	r3, #2
 8007680:	b212      	sxth	r2, r2
 8007682:	801a      	strh	r2, [r3, #0]
  val[1] = (val[1] * 256) + (int16_t)buff[2];
 8007684:	683b      	ldr	r3, [r7, #0]
 8007686:	3302      	adds	r3, #2
 8007688:	f9b3 3000 	ldrsh.w	r3, [r3]
 800768c:	b29b      	uxth	r3, r3
 800768e:	021b      	lsls	r3, r3, #8
 8007690:	b29b      	uxth	r3, r3
 8007692:	7bba      	ldrb	r2, [r7, #14]
 8007694:	4413      	add	r3, r2
 8007696:	b29a      	uxth	r2, r3
 8007698:	683b      	ldr	r3, [r7, #0]
 800769a:	3302      	adds	r3, #2
 800769c:	b212      	sxth	r2, r2
 800769e:	801a      	strh	r2, [r3, #0]
  val[2] = (int16_t)buff[5];
 80076a0:	7c7a      	ldrb	r2, [r7, #17]
 80076a2:	683b      	ldr	r3, [r7, #0]
 80076a4:	3304      	adds	r3, #4
 80076a6:	b212      	sxth	r2, r2
 80076a8:	801a      	strh	r2, [r3, #0]
  val[2] = (val[2] * 256) + (int16_t)buff[4];
 80076aa:	683b      	ldr	r3, [r7, #0]
 80076ac:	3304      	adds	r3, #4
 80076ae:	f9b3 3000 	ldrsh.w	r3, [r3]
 80076b2:	b29b      	uxth	r3, r3
 80076b4:	021b      	lsls	r3, r3, #8
 80076b6:	b29b      	uxth	r3, r3
 80076b8:	7c3a      	ldrb	r2, [r7, #16]
 80076ba:	4413      	add	r3, r2
 80076bc:	b29a      	uxth	r2, r3
 80076be:	683b      	ldr	r3, [r7, #0]
 80076c0:	3304      	adds	r3, #4
 80076c2:	b212      	sxth	r2, r2
 80076c4:	801a      	strh	r2, [r3, #0]

  return ret;
 80076c6:	697b      	ldr	r3, [r7, #20]
}
 80076c8:	4618      	mov	r0, r3
 80076ca:	3718      	adds	r7, #24
 80076cc:	46bd      	mov	sp, r7
 80076ce:	bd80      	pop	{r7, pc}

080076d0 <lsm6dso_acceleration_raw_get>:
  * @param  buff     buffer that stores data read
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_acceleration_raw_get(stmdev_ctx_t *ctx, int16_t *val)
{
 80076d0:	b580      	push	{r7, lr}
 80076d2:	b086      	sub	sp, #24
 80076d4:	af00      	add	r7, sp, #0
 80076d6:	6078      	str	r0, [r7, #4]
 80076d8:	6039      	str	r1, [r7, #0]
  uint8_t buff[6];
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_OUTX_L_A, buff, 6);
 80076da:	f107 020c 	add.w	r2, r7, #12
 80076de:	2306      	movs	r3, #6
 80076e0:	2128      	movs	r1, #40	@ 0x28
 80076e2:	6878      	ldr	r0, [r7, #4]
 80076e4:	f7ff fbd2 	bl	8006e8c <lsm6dso_read_reg>
 80076e8:	6178      	str	r0, [r7, #20]
  val[0] = (int16_t)buff[1];
 80076ea:	7b7b      	ldrb	r3, [r7, #13]
 80076ec:	b21a      	sxth	r2, r3
 80076ee:	683b      	ldr	r3, [r7, #0]
 80076f0:	801a      	strh	r2, [r3, #0]
  val[0] = (val[0] * 256) + (int16_t)buff[0];
 80076f2:	683b      	ldr	r3, [r7, #0]
 80076f4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80076f8:	b29b      	uxth	r3, r3
 80076fa:	021b      	lsls	r3, r3, #8
 80076fc:	b29b      	uxth	r3, r3
 80076fe:	7b3a      	ldrb	r2, [r7, #12]
 8007700:	4413      	add	r3, r2
 8007702:	b29b      	uxth	r3, r3
 8007704:	b21a      	sxth	r2, r3
 8007706:	683b      	ldr	r3, [r7, #0]
 8007708:	801a      	strh	r2, [r3, #0]
  val[1] = (int16_t)buff[3];
 800770a:	7bfa      	ldrb	r2, [r7, #15]
 800770c:	683b      	ldr	r3, [r7, #0]
 800770e:	3302      	adds	r3, #2
 8007710:	b212      	sxth	r2, r2
 8007712:	801a      	strh	r2, [r3, #0]
  val[1] = (val[1] * 256) + (int16_t)buff[2];
 8007714:	683b      	ldr	r3, [r7, #0]
 8007716:	3302      	adds	r3, #2
 8007718:	f9b3 3000 	ldrsh.w	r3, [r3]
 800771c:	b29b      	uxth	r3, r3
 800771e:	021b      	lsls	r3, r3, #8
 8007720:	b29b      	uxth	r3, r3
 8007722:	7bba      	ldrb	r2, [r7, #14]
 8007724:	4413      	add	r3, r2
 8007726:	b29a      	uxth	r2, r3
 8007728:	683b      	ldr	r3, [r7, #0]
 800772a:	3302      	adds	r3, #2
 800772c:	b212      	sxth	r2, r2
 800772e:	801a      	strh	r2, [r3, #0]
  val[2] = (int16_t)buff[5];
 8007730:	7c7a      	ldrb	r2, [r7, #17]
 8007732:	683b      	ldr	r3, [r7, #0]
 8007734:	3304      	adds	r3, #4
 8007736:	b212      	sxth	r2, r2
 8007738:	801a      	strh	r2, [r3, #0]
  val[2] = (val[2] * 256) + (int16_t)buff[4];
 800773a:	683b      	ldr	r3, [r7, #0]
 800773c:	3304      	adds	r3, #4
 800773e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8007742:	b29b      	uxth	r3, r3
 8007744:	021b      	lsls	r3, r3, #8
 8007746:	b29b      	uxth	r3, r3
 8007748:	7c3a      	ldrb	r2, [r7, #16]
 800774a:	4413      	add	r3, r2
 800774c:	b29a      	uxth	r2, r3
 800774e:	683b      	ldr	r3, [r7, #0]
 8007750:	3304      	adds	r3, #4
 8007752:	b212      	sxth	r2, r2
 8007754:	801a      	strh	r2, [r3, #0]

  return ret;
 8007756:	697b      	ldr	r3, [r7, #20]
}
 8007758:	4618      	mov	r0, r3
 800775a:	3718      	adds	r7, #24
 800775c:	46bd      	mov	sp, r7
 800775e:	bd80      	pop	{r7, pc}

08007760 <lsm6dso_mem_bank_set>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_mem_bank_set(stmdev_ctx_t *ctx,
                             lsm6dso_reg_access_t val)
{
 8007760:	b580      	push	{r7, lr}
 8007762:	b084      	sub	sp, #16
 8007764:	af00      	add	r7, sp, #0
 8007766:	6078      	str	r0, [r7, #4]
 8007768:	460b      	mov	r3, r1
 800776a:	70fb      	strb	r3, [r7, #3]
  lsm6dso_func_cfg_access_t reg = {0};
 800776c:	2300      	movs	r3, #0
 800776e:	723b      	strb	r3, [r7, #8]
  int32_t ret;

  /*  no need to read it first as the pther bits are reserved and must be zero */
  reg.reg_access = (uint8_t)val;
 8007770:	78fb      	ldrb	r3, [r7, #3]
 8007772:	f003 0303 	and.w	r3, r3, #3
 8007776:	b2da      	uxtb	r2, r3
 8007778:	7a3b      	ldrb	r3, [r7, #8]
 800777a:	f362 1387 	bfi	r3, r2, #6, #2
 800777e:	723b      	strb	r3, [r7, #8]
  ret = lsm6dso_write_reg(ctx, LSM6DSO_FUNC_CFG_ACCESS, (uint8_t *)&reg, 1);
 8007780:	f107 0208 	add.w	r2, r7, #8
 8007784:	2301      	movs	r3, #1
 8007786:	2101      	movs	r1, #1
 8007788:	6878      	ldr	r0, [r7, #4]
 800778a:	f7ff fb97 	bl	8006ebc <lsm6dso_write_reg>
 800778e:	60f8      	str	r0, [r7, #12]

  return ret;
 8007790:	68fb      	ldr	r3, [r7, #12]
}
 8007792:	4618      	mov	r0, r3
 8007794:	3710      	adds	r7, #16
 8007796:	46bd      	mov	sp, r7
 8007798:	bd80      	pop	{r7, pc}

0800779a <lsm6dso_device_id_get>:
  * @param  buff     buffer that stores data read
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_device_id_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 800779a:	b580      	push	{r7, lr}
 800779c:	b084      	sub	sp, #16
 800779e:	af00      	add	r7, sp, #0
 80077a0:	6078      	str	r0, [r7, #4]
 80077a2:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_WHO_AM_I, buff, 1);
 80077a4:	2301      	movs	r3, #1
 80077a6:	683a      	ldr	r2, [r7, #0]
 80077a8:	210f      	movs	r1, #15
 80077aa:	6878      	ldr	r0, [r7, #4]
 80077ac:	f7ff fb6e 	bl	8006e8c <lsm6dso_read_reg>
 80077b0:	60f8      	str	r0, [r7, #12]

  return ret;
 80077b2:	68fb      	ldr	r3, [r7, #12]
}
 80077b4:	4618      	mov	r0, r3
 80077b6:	3710      	adds	r7, #16
 80077b8:	46bd      	mov	sp, r7
 80077ba:	bd80      	pop	{r7, pc}

080077bc <lsm6dso_auto_increment_set>:
  * @param  val      change the values of if_inc in reg CTRL3_C
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_auto_increment_set(stmdev_ctx_t *ctx, uint8_t val)
{
 80077bc:	b580      	push	{r7, lr}
 80077be:	b084      	sub	sp, #16
 80077c0:	af00      	add	r7, sp, #0
 80077c2:	6078      	str	r0, [r7, #4]
 80077c4:	460b      	mov	r3, r1
 80077c6:	70fb      	strb	r3, [r7, #3]
  lsm6dso_ctrl3_c_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL3_C, (uint8_t *)&reg, 1);
 80077c8:	f107 0208 	add.w	r2, r7, #8
 80077cc:	2301      	movs	r3, #1
 80077ce:	2112      	movs	r1, #18
 80077d0:	6878      	ldr	r0, [r7, #4]
 80077d2:	f7ff fb5b 	bl	8006e8c <lsm6dso_read_reg>
 80077d6:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 80077d8:	68fb      	ldr	r3, [r7, #12]
 80077da:	2b00      	cmp	r3, #0
 80077dc:	d10f      	bne.n	80077fe <lsm6dso_auto_increment_set+0x42>
  {
    reg.if_inc = val;
 80077de:	78fb      	ldrb	r3, [r7, #3]
 80077e0:	f003 0301 	and.w	r3, r3, #1
 80077e4:	b2da      	uxtb	r2, r3
 80077e6:	7a3b      	ldrb	r3, [r7, #8]
 80077e8:	f362 0382 	bfi	r3, r2, #2, #1
 80077ec:	723b      	strb	r3, [r7, #8]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_CTRL3_C, (uint8_t *)&reg, 1);
 80077ee:	f107 0208 	add.w	r2, r7, #8
 80077f2:	2301      	movs	r3, #1
 80077f4:	2112      	movs	r1, #18
 80077f6:	6878      	ldr	r0, [r7, #4]
 80077f8:	f7ff fb60 	bl	8006ebc <lsm6dso_write_reg>
 80077fc:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 80077fe:	68fb      	ldr	r3, [r7, #12]
}
 8007800:	4618      	mov	r0, r3
 8007802:	3710      	adds	r7, #16
 8007804:	46bd      	mov	sp, r7
 8007806:	bd80      	pop	{r7, pc}

08007808 <lsm6dso_i3c_disable_set>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_i3c_disable_set(stmdev_ctx_t *ctx,
                                lsm6dso_i3c_disable_t val)
{
 8007808:	b580      	push	{r7, lr}
 800780a:	b086      	sub	sp, #24
 800780c:	af00      	add	r7, sp, #0
 800780e:	6078      	str	r0, [r7, #4]
 8007810:	460b      	mov	r3, r1
 8007812:	70fb      	strb	r3, [r7, #3]
  lsm6dso_i3c_bus_avb_t i3c_bus_avb;
  lsm6dso_ctrl9_xl_t ctrl9_xl;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL9_XL, (uint8_t *)&ctrl9_xl, 1);
 8007814:	f107 020c 	add.w	r2, r7, #12
 8007818:	2301      	movs	r3, #1
 800781a:	2118      	movs	r1, #24
 800781c:	6878      	ldr	r0, [r7, #4]
 800781e:	f7ff fb35 	bl	8006e8c <lsm6dso_read_reg>
 8007822:	6178      	str	r0, [r7, #20]
  ctrl9_xl.i3c_disable = ((uint8_t)val & 0x80U) >> 7;
 8007824:	78fb      	ldrb	r3, [r7, #3]
 8007826:	09db      	lsrs	r3, r3, #7
 8007828:	b2db      	uxtb	r3, r3
 800782a:	f003 0301 	and.w	r3, r3, #1
 800782e:	b2da      	uxtb	r2, r3
 8007830:	7b3b      	ldrb	r3, [r7, #12]
 8007832:	f362 0341 	bfi	r3, r2, #1, #1
 8007836:	733b      	strb	r3, [r7, #12]
  ret += lsm6dso_write_reg(ctx, LSM6DSO_CTRL9_XL, (uint8_t *)&ctrl9_xl, 1);
 8007838:	f107 020c 	add.w	r2, r7, #12
 800783c:	2301      	movs	r3, #1
 800783e:	2118      	movs	r1, #24
 8007840:	6878      	ldr	r0, [r7, #4]
 8007842:	f7ff fb3b 	bl	8006ebc <lsm6dso_write_reg>
 8007846:	4602      	mov	r2, r0
 8007848:	697b      	ldr	r3, [r7, #20]
 800784a:	4413      	add	r3, r2
 800784c:	617b      	str	r3, [r7, #20]
  if (ret != 0) { return ret; }
 800784e:	697b      	ldr	r3, [r7, #20]
 8007850:	2b00      	cmp	r3, #0
 8007852:	d001      	beq.n	8007858 <lsm6dso_i3c_disable_set+0x50>
 8007854:	697b      	ldr	r3, [r7, #20]
 8007856:	e01b      	b.n	8007890 <lsm6dso_i3c_disable_set+0x88>

  ret = lsm6dso_read_reg(ctx, LSM6DSO_I3C_BUS_AVB, (uint8_t *)&i3c_bus_avb, 1);
 8007858:	f107 0210 	add.w	r2, r7, #16
 800785c:	2301      	movs	r3, #1
 800785e:	2162      	movs	r1, #98	@ 0x62
 8007860:	6878      	ldr	r0, [r7, #4]
 8007862:	f7ff fb13 	bl	8006e8c <lsm6dso_read_reg>
 8007866:	6178      	str	r0, [r7, #20]
  i3c_bus_avb.i3c_bus_avb_sel = (uint8_t)val & 0x03U;
 8007868:	78fb      	ldrb	r3, [r7, #3]
 800786a:	f003 0303 	and.w	r3, r3, #3
 800786e:	b2da      	uxtb	r2, r3
 8007870:	7c3b      	ldrb	r3, [r7, #16]
 8007872:	f362 03c4 	bfi	r3, r2, #3, #2
 8007876:	743b      	strb	r3, [r7, #16]
  ret += lsm6dso_write_reg(ctx, LSM6DSO_I3C_BUS_AVB, (uint8_t *)&i3c_bus_avb, 1);
 8007878:	f107 0210 	add.w	r2, r7, #16
 800787c:	2301      	movs	r3, #1
 800787e:	2162      	movs	r1, #98	@ 0x62
 8007880:	6878      	ldr	r0, [r7, #4]
 8007882:	f7ff fb1b 	bl	8006ebc <lsm6dso_write_reg>
 8007886:	4602      	mov	r2, r0
 8007888:	697b      	ldr	r3, [r7, #20]
 800788a:	4413      	add	r3, r2
 800788c:	617b      	str	r3, [r7, #20]

  return ret;
 800788e:	697b      	ldr	r3, [r7, #20]
}
 8007890:	4618      	mov	r0, r3
 8007892:	3718      	adds	r7, #24
 8007894:	46bd      	mov	sp, r7
 8007896:	bd80      	pop	{r7, pc}

08007898 <lsm6dso_fifo_mode_set>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_fifo_mode_set(stmdev_ctx_t *ctx,
                              lsm6dso_fifo_mode_t val)
{
 8007898:	b580      	push	{r7, lr}
 800789a:	b084      	sub	sp, #16
 800789c:	af00      	add	r7, sp, #0
 800789e:	6078      	str	r0, [r7, #4]
 80078a0:	460b      	mov	r3, r1
 80078a2:	70fb      	strb	r3, [r7, #3]
  lsm6dso_fifo_ctrl4_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_FIFO_CTRL4, (uint8_t *)&reg, 1);
 80078a4:	f107 0208 	add.w	r2, r7, #8
 80078a8:	2301      	movs	r3, #1
 80078aa:	210a      	movs	r1, #10
 80078ac:	6878      	ldr	r0, [r7, #4]
 80078ae:	f7ff faed 	bl	8006e8c <lsm6dso_read_reg>
 80078b2:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 80078b4:	68fb      	ldr	r3, [r7, #12]
 80078b6:	2b00      	cmp	r3, #0
 80078b8:	d10f      	bne.n	80078da <lsm6dso_fifo_mode_set+0x42>
  {
    reg.fifo_mode = (uint8_t)val;
 80078ba:	78fb      	ldrb	r3, [r7, #3]
 80078bc:	f003 0307 	and.w	r3, r3, #7
 80078c0:	b2da      	uxtb	r2, r3
 80078c2:	7a3b      	ldrb	r3, [r7, #8]
 80078c4:	f362 0302 	bfi	r3, r2, #0, #3
 80078c8:	723b      	strb	r3, [r7, #8]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_FIFO_CTRL4, (uint8_t *)&reg, 1);
 80078ca:	f107 0208 	add.w	r2, r7, #8
 80078ce:	2301      	movs	r3, #1
 80078d0:	210a      	movs	r1, #10
 80078d2:	6878      	ldr	r0, [r7, #4]
 80078d4:	f7ff faf2 	bl	8006ebc <lsm6dso_write_reg>
 80078d8:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 80078da:	68fb      	ldr	r3, [r7, #12]
}
 80078dc:	4618      	mov	r0, r3
 80078de:	3710      	adds	r7, #16
 80078e0:	46bd      	mov	sp, r7
 80078e2:	bd80      	pop	{r7, pc}

080078e4 <lsm6dso_fsm_enable_get>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_fsm_enable_get(stmdev_ctx_t *ctx,
                               lsm6dso_emb_fsm_enable_t *val)
{
 80078e4:	b580      	push	{r7, lr}
 80078e6:	b084      	sub	sp, #16
 80078e8:	af00      	add	r7, sp, #0
 80078ea:	6078      	str	r0, [r7, #4]
 80078ec:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret = lsm6dso_mem_bank_set(ctx, LSM6DSO_EMBEDDED_FUNC_BANK);
 80078ee:	2102      	movs	r1, #2
 80078f0:	6878      	ldr	r0, [r7, #4]
 80078f2:	f7ff ff35 	bl	8007760 <lsm6dso_mem_bank_set>
 80078f6:	60f8      	str	r0, [r7, #12]
  ret += lsm6dso_read_reg(ctx, LSM6DSO_FSM_ENABLE_A, (uint8_t *) val, 2);
 80078f8:	2302      	movs	r3, #2
 80078fa:	683a      	ldr	r2, [r7, #0]
 80078fc:	2146      	movs	r1, #70	@ 0x46
 80078fe:	6878      	ldr	r0, [r7, #4]
 8007900:	f7ff fac4 	bl	8006e8c <lsm6dso_read_reg>
 8007904:	4602      	mov	r2, r0
 8007906:	68fb      	ldr	r3, [r7, #12]
 8007908:	4413      	add	r3, r2
 800790a:	60fb      	str	r3, [r7, #12]
  ret += lsm6dso_mem_bank_set(ctx, LSM6DSO_USER_BANK);
 800790c:	2100      	movs	r1, #0
 800790e:	6878      	ldr	r0, [r7, #4]
 8007910:	f7ff ff26 	bl	8007760 <lsm6dso_mem_bank_set>
 8007914:	4602      	mov	r2, r0
 8007916:	68fb      	ldr	r3, [r7, #12]
 8007918:	4413      	add	r3, r2
 800791a:	60fb      	str	r3, [r7, #12]

  return ret;
 800791c:	68fb      	ldr	r3, [r7, #12]
}
 800791e:	4618      	mov	r0, r3
 8007920:	3710      	adds	r7, #16
 8007922:	46bd      	mov	sp, r7
 8007924:	bd80      	pop	{r7, pc}
	...

08007928 <lsm6dso_fsm_data_rate_get>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_fsm_data_rate_get(stmdev_ctx_t *ctx,
                                  lsm6dso_fsm_odr_t *val)
{
 8007928:	b580      	push	{r7, lr}
 800792a:	b084      	sub	sp, #16
 800792c:	af00      	add	r7, sp, #0
 800792e:	6078      	str	r0, [r7, #4]
 8007930:	6039      	str	r1, [r7, #0]
  lsm6dso_emb_func_odr_cfg_b_t reg;
  int32_t ret;

  ret = lsm6dso_mem_bank_set(ctx, LSM6DSO_EMBEDDED_FUNC_BANK);
 8007932:	2102      	movs	r1, #2
 8007934:	6878      	ldr	r0, [r7, #4]
 8007936:	f7ff ff13 	bl	8007760 <lsm6dso_mem_bank_set>
 800793a:	60f8      	str	r0, [r7, #12]
  if (ret != 0) { return ret; }
 800793c:	68fb      	ldr	r3, [r7, #12]
 800793e:	2b00      	cmp	r3, #0
 8007940:	d001      	beq.n	8007946 <lsm6dso_fsm_data_rate_get+0x1e>
 8007942:	68fb      	ldr	r3, [r7, #12]
 8007944:	e03a      	b.n	80079bc <lsm6dso_fsm_data_rate_get+0x94>

  ret = lsm6dso_read_reg(ctx, LSM6DSO_EMB_FUNC_ODR_CFG_B, (uint8_t *)&reg, 1);
 8007946:	f107 0208 	add.w	r2, r7, #8
 800794a:	2301      	movs	r3, #1
 800794c:	215f      	movs	r1, #95	@ 0x5f
 800794e:	6878      	ldr	r0, [r7, #4]
 8007950:	f7ff fa9c 	bl	8006e8c <lsm6dso_read_reg>
 8007954:	60f8      	str	r0, [r7, #12]
  if (ret != 0) { goto exit; }
 8007956:	68fb      	ldr	r3, [r7, #12]
 8007958:	2b00      	cmp	r3, #0
 800795a:	d125      	bne.n	80079a8 <lsm6dso_fsm_data_rate_get+0x80>

  switch (reg.fsm_odr)
 800795c:	7a3b      	ldrb	r3, [r7, #8]
 800795e:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 8007962:	b2db      	uxtb	r3, r3
 8007964:	2b03      	cmp	r3, #3
 8007966:	d81b      	bhi.n	80079a0 <lsm6dso_fsm_data_rate_get+0x78>
 8007968:	a201      	add	r2, pc, #4	@ (adr r2, 8007970 <lsm6dso_fsm_data_rate_get+0x48>)
 800796a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800796e:	bf00      	nop
 8007970:	08007981 	.word	0x08007981
 8007974:	08007989 	.word	0x08007989
 8007978:	08007991 	.word	0x08007991
 800797c:	08007999 	.word	0x08007999
  {
    case LSM6DSO_ODR_FSM_12Hz5:
      *val = LSM6DSO_ODR_FSM_12Hz5;
 8007980:	683b      	ldr	r3, [r7, #0]
 8007982:	2200      	movs	r2, #0
 8007984:	701a      	strb	r2, [r3, #0]
      break;
 8007986:	e010      	b.n	80079aa <lsm6dso_fsm_data_rate_get+0x82>

    case LSM6DSO_ODR_FSM_26Hz:
      *val = LSM6DSO_ODR_FSM_26Hz;
 8007988:	683b      	ldr	r3, [r7, #0]
 800798a:	2201      	movs	r2, #1
 800798c:	701a      	strb	r2, [r3, #0]
      break;
 800798e:	e00c      	b.n	80079aa <lsm6dso_fsm_data_rate_get+0x82>

    case LSM6DSO_ODR_FSM_52Hz:
      *val = LSM6DSO_ODR_FSM_52Hz;
 8007990:	683b      	ldr	r3, [r7, #0]
 8007992:	2202      	movs	r2, #2
 8007994:	701a      	strb	r2, [r3, #0]
      break;
 8007996:	e008      	b.n	80079aa <lsm6dso_fsm_data_rate_get+0x82>

    case LSM6DSO_ODR_FSM_104Hz:
      *val = LSM6DSO_ODR_FSM_104Hz;
 8007998:	683b      	ldr	r3, [r7, #0]
 800799a:	2203      	movs	r2, #3
 800799c:	701a      	strb	r2, [r3, #0]
      break;
 800799e:	e004      	b.n	80079aa <lsm6dso_fsm_data_rate_get+0x82>

    default:
      *val = LSM6DSO_ODR_FSM_12Hz5;
 80079a0:	683b      	ldr	r3, [r7, #0]
 80079a2:	2200      	movs	r2, #0
 80079a4:	701a      	strb	r2, [r3, #0]
      break;
 80079a6:	e000      	b.n	80079aa <lsm6dso_fsm_data_rate_get+0x82>
  if (ret != 0) { goto exit; }
 80079a8:	bf00      	nop
  }

exit:
  ret += lsm6dso_mem_bank_set(ctx, LSM6DSO_USER_BANK);
 80079aa:	2100      	movs	r1, #0
 80079ac:	6878      	ldr	r0, [r7, #4]
 80079ae:	f7ff fed7 	bl	8007760 <lsm6dso_mem_bank_set>
 80079b2:	4602      	mov	r2, r0
 80079b4:	68fb      	ldr	r3, [r7, #12]
 80079b6:	4413      	add	r3, r2
 80079b8:	60fb      	str	r3, [r7, #12]

  return ret;
 80079ba:	68fb      	ldr	r3, [r7, #12]
}
 80079bc:	4618      	mov	r0, r3
 80079be:	3710      	adds	r7, #16
 80079c0:	46bd      	mov	sp, r7
 80079c2:	bd80      	pop	{r7, pc}

080079c4 <STTS751_RegisterBusIO>:
  * @brief  Register Component Bus IO operations
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t STTS751_RegisterBusIO(STTS751_Object_t *pObj, STTS751_IO_t *pIO)
{
 80079c4:	b580      	push	{r7, lr}
 80079c6:	b084      	sub	sp, #16
 80079c8:	af00      	add	r7, sp, #0
 80079ca:	6078      	str	r0, [r7, #4]
 80079cc:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if (pObj == NULL)
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	2b00      	cmp	r3, #0
 80079d2:	d103      	bne.n	80079dc <STTS751_RegisterBusIO+0x18>
  {
    ret = STTS751_ERROR;
 80079d4:	f04f 33ff 	mov.w	r3, #4294967295
 80079d8:	60fb      	str	r3, [r7, #12]
 80079da:	e034      	b.n	8007a46 <STTS751_RegisterBusIO+0x82>
  }
  else
  {
    pObj->IO.Init      = pIO->Init;
 80079dc:	683b      	ldr	r3, [r7, #0]
 80079de:	681a      	ldr	r2, [r3, #0]
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	601a      	str	r2, [r3, #0]
    pObj->IO.DeInit    = pIO->DeInit;
 80079e4:	683b      	ldr	r3, [r7, #0]
 80079e6:	685a      	ldr	r2, [r3, #4]
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	605a      	str	r2, [r3, #4]
    pObj->IO.BusType   = pIO->BusType;
 80079ec:	683b      	ldr	r3, [r7, #0]
 80079ee:	689a      	ldr	r2, [r3, #8]
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	609a      	str	r2, [r3, #8]
    pObj->IO.Address   = pIO->Address;
 80079f4:	683b      	ldr	r3, [r7, #0]
 80079f6:	7b1a      	ldrb	r2, [r3, #12]
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	731a      	strb	r2, [r3, #12]
    pObj->IO.WriteReg  = pIO->WriteReg;
 80079fc:	683b      	ldr	r3, [r7, #0]
 80079fe:	691a      	ldr	r2, [r3, #16]
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	611a      	str	r2, [r3, #16]
    pObj->IO.ReadReg   = pIO->ReadReg;
 8007a04:	683b      	ldr	r3, [r7, #0]
 8007a06:	695a      	ldr	r2, [r3, #20]
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	615a      	str	r2, [r3, #20]
    pObj->IO.GetTick   = pIO->GetTick;
 8007a0c:	683b      	ldr	r3, [r7, #0]
 8007a0e:	699a      	ldr	r2, [r3, #24]
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	619a      	str	r2, [r3, #24]

    pObj->Ctx.read_reg  = ReadRegWrap;
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	4a0e      	ldr	r2, [pc, #56]	@ (8007a50 <STTS751_RegisterBusIO+0x8c>)
 8007a18:	625a      	str	r2, [r3, #36]	@ 0x24
    pObj->Ctx.write_reg = WriteRegWrap;
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	4a0d      	ldr	r2, [pc, #52]	@ (8007a54 <STTS751_RegisterBusIO+0x90>)
 8007a1e:	621a      	str	r2, [r3, #32]
    pObj->Ctx.mdelay    = pIO->Delay;
 8007a20:	683b      	ldr	r3, [r7, #0]
 8007a22:	69da      	ldr	r2, [r3, #28]
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	629a      	str	r2, [r3, #40]	@ 0x28
    pObj->Ctx.handle   = pObj;
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	687a      	ldr	r2, [r7, #4]
 8007a2c:	62da      	str	r2, [r3, #44]	@ 0x2c

    if (pObj->IO.Init != NULL)
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	681b      	ldr	r3, [r3, #0]
 8007a32:	2b00      	cmp	r3, #0
 8007a34:	d004      	beq.n	8007a40 <STTS751_RegisterBusIO+0x7c>
    {
      ret = pObj->IO.Init();
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	681b      	ldr	r3, [r3, #0]
 8007a3a:	4798      	blx	r3
 8007a3c:	60f8      	str	r0, [r7, #12]
 8007a3e:	e002      	b.n	8007a46 <STTS751_RegisterBusIO+0x82>
    }
    else
    {
      ret = STTS751_ERROR;
 8007a40:	f04f 33ff 	mov.w	r3, #4294967295
 8007a44:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
 8007a46:	68fb      	ldr	r3, [r7, #12]
}
 8007a48:	4618      	mov	r0, r3
 8007a4a:	3710      	adds	r7, #16
 8007a4c:	46bd      	mov	sp, r7
 8007a4e:	bd80      	pop	{r7, pc}
 8007a50:	08007ebd 	.word	0x08007ebd
 8007a54:	08007f2b 	.word	0x08007f2b

08007a58 <STTS751_Init>:
  * @brief  Initialize the STTS751 sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t STTS751_Init(STTS751_Object_t *pObj)
{
 8007a58:	b580      	push	{r7, lr}
 8007a5a:	b082      	sub	sp, #8
 8007a5c:	af00      	add	r7, sp, #0
 8007a5e:	6078      	str	r0, [r7, #4]
  if (pObj->is_initialized == 0U)
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8007a66:	2b00      	cmp	r3, #0
 8007a68:	d127      	bne.n	8007aba <STTS751_Init+0x62>
  {
    /* Disable EVENT pin of SMBus. */
    if (stts751_pin_event_route_set(&(pObj->Ctx),  PROPERTY_ENABLE) != STTS751_OK)
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	3320      	adds	r3, #32
 8007a6e:	2101      	movs	r1, #1
 8007a70:	4618      	mov	r0, r3
 8007a72:	f000 fc39 	bl	80082e8 <stts751_pin_event_route_set>
 8007a76:	4603      	mov	r3, r0
 8007a78:	2b00      	cmp	r3, #0
 8007a7a:	d002      	beq.n	8007a82 <STTS751_Init+0x2a>
    {
      return STTS751_ERROR;
 8007a7c:	f04f 33ff 	mov.w	r3, #4294967295
 8007a80:	e020      	b.n	8007ac4 <STTS751_Init+0x6c>
    }

    /* Set default ODR */
    pObj->temp_odr = 1.0f;
 8007a82:	687b      	ldr	r3, [r7, #4]
 8007a84:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8007a88:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the resolution to the maximum allowed value */
    if (stts751_resolution_set(&(pObj->Ctx), STTS751_12bit) != STTS751_OK)
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	3320      	adds	r3, #32
 8007a8e:	2103      	movs	r1, #3
 8007a90:	4618      	mov	r0, r3
 8007a92:	f000 fb9d 	bl	80081d0 <stts751_resolution_set>
 8007a96:	4603      	mov	r3, r0
 8007a98:	2b00      	cmp	r3, #0
 8007a9a:	d002      	beq.n	8007aa2 <STTS751_Init+0x4a>
    {
      return STTS751_ERROR;
 8007a9c:	f04f 33ff 	mov.w	r3, #4294967295
 8007aa0:	e010      	b.n	8007ac4 <STTS751_Init+0x6c>
    }

    /* Put the component in standby mode. */
    if (stts751_temp_data_rate_set(&(pObj->Ctx), STTS751_TEMP_ODR_OFF) != STTS751_OK)
 8007aa2:	687b      	ldr	r3, [r7, #4]
 8007aa4:	3320      	adds	r3, #32
 8007aa6:	2180      	movs	r1, #128	@ 0x80
 8007aa8:	4618      	mov	r0, r3
 8007aaa:	f000 faba 	bl	8008022 <stts751_temp_data_rate_set>
 8007aae:	4603      	mov	r3, r0
 8007ab0:	2b00      	cmp	r3, #0
 8007ab2:	d002      	beq.n	8007aba <STTS751_Init+0x62>
    {
      return STTS751_ERROR;
 8007ab4:	f04f 33ff 	mov.w	r3, #4294967295
 8007ab8:	e004      	b.n	8007ac4 <STTS751_Init+0x6c>
    }
  }

  pObj->is_initialized = 1;
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	2201      	movs	r2, #1
 8007abe:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  return STTS751_OK;
 8007ac2:	2300      	movs	r3, #0
}
 8007ac4:	4618      	mov	r0, r3
 8007ac6:	3708      	adds	r7, #8
 8007ac8:	46bd      	mov	sp, r7
 8007aca:	bd80      	pop	{r7, pc}

08007acc <STTS751_DeInit>:
  * @brief  Deinitialize the STTS751 sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t STTS751_DeInit(STTS751_Object_t *pObj)
{
 8007acc:	b580      	push	{r7, lr}
 8007ace:	b082      	sub	sp, #8
 8007ad0:	af00      	add	r7, sp, #0
 8007ad2:	6078      	str	r0, [r7, #4]
  if (pObj->is_initialized == 1U)
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8007ada:	2b01      	cmp	r3, #1
 8007adc:	d108      	bne.n	8007af0 <STTS751_DeInit+0x24>
  {
    /* Put the component in standby mode */
    if (STTS751_TEMP_Disable(pObj) != STTS751_OK)
 8007ade:	6878      	ldr	r0, [r7, #4]
 8007ae0:	f000 f874 	bl	8007bcc <STTS751_TEMP_Disable>
 8007ae4:	4603      	mov	r3, r0
 8007ae6:	2b00      	cmp	r3, #0
 8007ae8:	d002      	beq.n	8007af0 <STTS751_DeInit+0x24>
    {
      return STTS751_ERROR;
 8007aea:	f04f 33ff 	mov.w	r3, #4294967295
 8007aee:	e004      	b.n	8007afa <STTS751_DeInit+0x2e>
    }
  }

  pObj->is_initialized = 0;
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	2200      	movs	r2, #0
 8007af4:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  return STTS751_OK;
 8007af8:	2300      	movs	r3, #0
}
 8007afa:	4618      	mov	r0, r3
 8007afc:	3708      	adds	r7, #8
 8007afe:	46bd      	mov	sp, r7
 8007b00:	bd80      	pop	{r7, pc}

08007b02 <STTS751_ReadID>:
  * @param  pObj the device pObj
  * @param  Id the WHO_AM_I value
  * @retval 0 in case of success, an error code otherwise
  */
int32_t STTS751_ReadID(STTS751_Object_t *pObj, uint8_t *Id)
{
 8007b02:	b580      	push	{r7, lr}
 8007b04:	b084      	sub	sp, #16
 8007b06:	af00      	add	r7, sp, #0
 8007b08:	6078      	str	r0, [r7, #4]
 8007b0a:	6039      	str	r1, [r7, #0]
  stts751_id_t buf;

  if (stts751_device_id_get(&(pObj->Ctx), &buf) != STTS751_OK)
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	3320      	adds	r3, #32
 8007b10:	f107 020c 	add.w	r2, r7, #12
 8007b14:	4611      	mov	r1, r2
 8007b16:	4618      	mov	r0, r3
 8007b18:	f000 fc0c 	bl	8008334 <stts751_device_id_get>
 8007b1c:	4603      	mov	r3, r0
 8007b1e:	2b00      	cmp	r3, #0
 8007b20:	d002      	beq.n	8007b28 <STTS751_ReadID+0x26>
  {
    return STTS751_ERROR;
 8007b22:	f04f 33ff 	mov.w	r3, #4294967295
 8007b26:	e003      	b.n	8007b30 <STTS751_ReadID+0x2e>
  }

  *Id = buf.manufacturer_id;
 8007b28:	7b7a      	ldrb	r2, [r7, #13]
 8007b2a:	683b      	ldr	r3, [r7, #0]
 8007b2c:	701a      	strb	r2, [r3, #0]

  return STTS751_OK;
 8007b2e:	2300      	movs	r3, #0
}
 8007b30:	4618      	mov	r0, r3
 8007b32:	3710      	adds	r7, #16
 8007b34:	46bd      	mov	sp, r7
 8007b36:	bd80      	pop	{r7, pc}

08007b38 <STTS751_GetCapabilities>:
  * @param  pObj Component object pointer
  * @param  Capabilities pointer to STTS751 sensor capabilities
  * @retval 0 in case of success, an error code otherwise
  */
int32_t STTS751_GetCapabilities(STTS751_Object_t *pObj, STTS751_Capabilities_t *Capabilities)
{
 8007b38:	b480      	push	{r7}
 8007b3a:	b083      	sub	sp, #12
 8007b3c:	af00      	add	r7, sp, #0
 8007b3e:	6078      	str	r0, [r7, #4]
 8007b40:	6039      	str	r1, [r7, #0]
  /* Prevent unused argument(s) compilation warning */
  (void)(pObj);

  Capabilities->Humidity    = 0;
 8007b42:	683b      	ldr	r3, [r7, #0]
 8007b44:	2200      	movs	r2, #0
 8007b46:	709a      	strb	r2, [r3, #2]
  Capabilities->Pressure    = 0;
 8007b48:	683b      	ldr	r3, [r7, #0]
 8007b4a:	2200      	movs	r2, #0
 8007b4c:	705a      	strb	r2, [r3, #1]
  Capabilities->Temperature = 1;
 8007b4e:	683b      	ldr	r3, [r7, #0]
 8007b50:	2201      	movs	r2, #1
 8007b52:	701a      	strb	r2, [r3, #0]
  Capabilities->Gas         = 0;
 8007b54:	683b      	ldr	r3, [r7, #0]
 8007b56:	2200      	movs	r2, #0
 8007b58:	70da      	strb	r2, [r3, #3]
  Capabilities->LowPower    = 0;
 8007b5a:	683b      	ldr	r3, [r7, #0]
 8007b5c:	2200      	movs	r2, #0
 8007b5e:	711a      	strb	r2, [r3, #4]
  Capabilities->HumMaxOdr   = 0.0f;
 8007b60:	683b      	ldr	r3, [r7, #0]
 8007b62:	f04f 0200 	mov.w	r2, #0
 8007b66:	609a      	str	r2, [r3, #8]
  Capabilities->TempMaxOdr  = 32.0f;
 8007b68:	683b      	ldr	r3, [r7, #0]
 8007b6a:	f04f 4284 	mov.w	r2, #1107296256	@ 0x42000000
 8007b6e:	60da      	str	r2, [r3, #12]
  Capabilities->PressMaxOdr = 0.0f;
 8007b70:	683b      	ldr	r3, [r7, #0]
 8007b72:	f04f 0200 	mov.w	r2, #0
 8007b76:	611a      	str	r2, [r3, #16]
  Capabilities->GasMaxOdr   = 0.0f;
 8007b78:	683b      	ldr	r3, [r7, #0]
 8007b7a:	f04f 0200 	mov.w	r2, #0
 8007b7e:	615a      	str	r2, [r3, #20]
  return STTS751_OK;
 8007b80:	2300      	movs	r3, #0
}
 8007b82:	4618      	mov	r0, r3
 8007b84:	370c      	adds	r7, #12
 8007b86:	46bd      	mov	sp, r7
 8007b88:	bc80      	pop	{r7}
 8007b8a:	4770      	bx	lr

08007b8c <STTS751_TEMP_Enable>:
  * @brief  Enable the STTS751 temperature sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t STTS751_TEMP_Enable(STTS751_Object_t *pObj)
{
 8007b8c:	b580      	push	{r7, lr}
 8007b8e:	b082      	sub	sp, #8
 8007b90:	af00      	add	r7, sp, #0
 8007b92:	6078      	str	r0, [r7, #4]
  /* Check if the component is already enabled */
  if (pObj->temp_is_enabled == 1U)
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8007b9a:	2b01      	cmp	r3, #1
 8007b9c:	d101      	bne.n	8007ba2 <STTS751_TEMP_Enable+0x16>
  {
    return STTS751_OK;
 8007b9e:	2300      	movs	r3, #0
 8007ba0:	e010      	b.n	8007bc4 <STTS751_TEMP_Enable+0x38>
  }

  /* Power on the component and set the odr. */
  if (STTS751_TEMP_SetOutputDataRate(pObj, pObj->temp_odr) != STTS751_OK)
 8007ba2:	687b      	ldr	r3, [r7, #4]
 8007ba4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007ba6:	4619      	mov	r1, r3
 8007ba8:	6878      	ldr	r0, [r7, #4]
 8007baa:	f000 f8b5 	bl	8007d18 <STTS751_TEMP_SetOutputDataRate>
 8007bae:	4603      	mov	r3, r0
 8007bb0:	2b00      	cmp	r3, #0
 8007bb2:	d002      	beq.n	8007bba <STTS751_TEMP_Enable+0x2e>
  {
    return STTS751_ERROR;
 8007bb4:	f04f 33ff 	mov.w	r3, #4294967295
 8007bb8:	e004      	b.n	8007bc4 <STTS751_TEMP_Enable+0x38>
  }

  pObj->temp_is_enabled = 1;
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	2201      	movs	r2, #1
 8007bbe:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31

  return STTS751_OK;
 8007bc2:	2300      	movs	r3, #0
}
 8007bc4:	4618      	mov	r0, r3
 8007bc6:	3708      	adds	r7, #8
 8007bc8:	46bd      	mov	sp, r7
 8007bca:	bd80      	pop	{r7, pc}

08007bcc <STTS751_TEMP_Disable>:
  * @brief  Disable the STTS751 temperature sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t STTS751_TEMP_Disable(STTS751_Object_t *pObj)
{
 8007bcc:	b580      	push	{r7, lr}
 8007bce:	b082      	sub	sp, #8
 8007bd0:	af00      	add	r7, sp, #0
 8007bd2:	6078      	str	r0, [r7, #4]
  /* Check if the component is already disabled */
  if (pObj->temp_is_enabled == 0U)
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8007bda:	2b00      	cmp	r3, #0
 8007bdc:	d101      	bne.n	8007be2 <STTS751_TEMP_Disable+0x16>
  {
    return STTS751_OK;
 8007bde:	2300      	movs	r3, #0
 8007be0:	e01c      	b.n	8007c1c <STTS751_TEMP_Disable+0x50>
  }

  /* Save the current odr. */
  if (STTS751_TEMP_GetOutputDataRate(pObj, &pObj->temp_odr) != STTS751_OK)
 8007be2:	687b      	ldr	r3, [r7, #4]
 8007be4:	3334      	adds	r3, #52	@ 0x34
 8007be6:	4619      	mov	r1, r3
 8007be8:	6878      	ldr	r0, [r7, #4]
 8007bea:	f000 f81b 	bl	8007c24 <STTS751_TEMP_GetOutputDataRate>
 8007bee:	4603      	mov	r3, r0
 8007bf0:	2b00      	cmp	r3, #0
 8007bf2:	d002      	beq.n	8007bfa <STTS751_TEMP_Disable+0x2e>
  {
    return STTS751_ERROR;
 8007bf4:	f04f 33ff 	mov.w	r3, #4294967295
 8007bf8:	e010      	b.n	8007c1c <STTS751_TEMP_Disable+0x50>
  }

  /* Put the component in standby mode. */
  if (stts751_temp_data_rate_set(&(pObj->Ctx), STTS751_TEMP_ODR_OFF) != STTS751_OK)
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	3320      	adds	r3, #32
 8007bfe:	2180      	movs	r1, #128	@ 0x80
 8007c00:	4618      	mov	r0, r3
 8007c02:	f000 fa0e 	bl	8008022 <stts751_temp_data_rate_set>
 8007c06:	4603      	mov	r3, r0
 8007c08:	2b00      	cmp	r3, #0
 8007c0a:	d002      	beq.n	8007c12 <STTS751_TEMP_Disable+0x46>
  {
    return STTS751_ERROR;
 8007c0c:	f04f 33ff 	mov.w	r3, #4294967295
 8007c10:	e004      	b.n	8007c1c <STTS751_TEMP_Disable+0x50>
  }

  pObj->temp_is_enabled = 0;
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	2200      	movs	r2, #0
 8007c16:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31

  return STTS751_OK;
 8007c1a:	2300      	movs	r3, #0
}
 8007c1c:	4618      	mov	r0, r3
 8007c1e:	3708      	adds	r7, #8
 8007c20:	46bd      	mov	sp, r7
 8007c22:	bd80      	pop	{r7, pc}

08007c24 <STTS751_TEMP_GetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr pointer where the output data rate is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t STTS751_TEMP_GetOutputDataRate(STTS751_Object_t *pObj, float *Odr)
{
 8007c24:	b580      	push	{r7, lr}
 8007c26:	b084      	sub	sp, #16
 8007c28:	af00      	add	r7, sp, #0
 8007c2a:	6078      	str	r0, [r7, #4]
 8007c2c:	6039      	str	r1, [r7, #0]
  int32_t ret = STTS751_OK;
 8007c2e:	2300      	movs	r3, #0
 8007c30:	60fb      	str	r3, [r7, #12]
  stts751_odr_t odr_low_level;

  if (stts751_temp_data_rate_get(&(pObj->Ctx), &odr_low_level) != STTS751_OK)
 8007c32:	687b      	ldr	r3, [r7, #4]
 8007c34:	3320      	adds	r3, #32
 8007c36:	f107 020b 	add.w	r2, r7, #11
 8007c3a:	4611      	mov	r1, r2
 8007c3c:	4618      	mov	r0, r3
 8007c3e:	f000 fa47 	bl	80080d0 <stts751_temp_data_rate_get>
 8007c42:	4603      	mov	r3, r0
 8007c44:	2b00      	cmp	r3, #0
 8007c46:	d002      	beq.n	8007c4e <STTS751_TEMP_GetOutputDataRate+0x2a>
  {
    return STTS751_ERROR;
 8007c48:	f04f 33ff 	mov.w	r3, #4294967295
 8007c4c:	e060      	b.n	8007d10 <STTS751_TEMP_GetOutputDataRate+0xec>
  }

  switch (odr_low_level)
 8007c4e:	7afb      	ldrb	r3, [r7, #11]
 8007c50:	2b90      	cmp	r3, #144	@ 0x90
 8007c52:	d021      	beq.n	8007c98 <STTS751_TEMP_GetOutputDataRate+0x74>
 8007c54:	2b90      	cmp	r3, #144	@ 0x90
 8007c56:	dc56      	bgt.n	8007d06 <STTS751_TEMP_GetOutputDataRate+0xe2>
 8007c58:	2b09      	cmp	r3, #9
 8007c5a:	dc1b      	bgt.n	8007c94 <STTS751_TEMP_GetOutputDataRate+0x70>
 8007c5c:	2b00      	cmp	r3, #0
 8007c5e:	db52      	blt.n	8007d06 <STTS751_TEMP_GetOutputDataRate+0xe2>
 8007c60:	2b09      	cmp	r3, #9
 8007c62:	d850      	bhi.n	8007d06 <STTS751_TEMP_GetOutputDataRate+0xe2>
 8007c64:	a201      	add	r2, pc, #4	@ (adr r2, 8007c6c <STTS751_TEMP_GetOutputDataRate+0x48>)
 8007c66:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007c6a:	bf00      	nop
 8007c6c:	08007ca3 	.word	0x08007ca3
 8007c70:	08007cad 	.word	0x08007cad
 8007c74:	08007cb7 	.word	0x08007cb7
 8007c78:	08007cc1 	.word	0x08007cc1
 8007c7c:	08007ccb 	.word	0x08007ccb
 8007c80:	08007cd5 	.word	0x08007cd5
 8007c84:	08007cdf 	.word	0x08007cdf
 8007c88:	08007ce9 	.word	0x08007ce9
 8007c8c:	08007cf3 	.word	0x08007cf3
 8007c90:	08007cfd 	.word	0x08007cfd
 8007c94:	2b80      	cmp	r3, #128	@ 0x80
 8007c96:	d136      	bne.n	8007d06 <STTS751_TEMP_GetOutputDataRate+0xe2>
  {
    case STTS751_TEMP_ODR_OFF:
    case STTS751_TEMP_ODR_ONE_SHOT:
      *Odr = 0.0f;
 8007c98:	683b      	ldr	r3, [r7, #0]
 8007c9a:	f04f 0200 	mov.w	r2, #0
 8007c9e:	601a      	str	r2, [r3, #0]
      break;
 8007ca0:	e035      	b.n	8007d0e <STTS751_TEMP_GetOutputDataRate+0xea>

    case STTS751_TEMP_ODR_62mHz5:
      *Odr = 0.0625f;
 8007ca2:	683b      	ldr	r3, [r7, #0]
 8007ca4:	f04f 5276 	mov.w	r2, #1031798784	@ 0x3d800000
 8007ca8:	601a      	str	r2, [r3, #0]
      break;
 8007caa:	e030      	b.n	8007d0e <STTS751_TEMP_GetOutputDataRate+0xea>

    case STTS751_TEMP_ODR_125mHz:
      *Odr = 0.125f;
 8007cac:	683b      	ldr	r3, [r7, #0]
 8007cae:	f04f 5278 	mov.w	r2, #1040187392	@ 0x3e000000
 8007cb2:	601a      	str	r2, [r3, #0]
      break;
 8007cb4:	e02b      	b.n	8007d0e <STTS751_TEMP_GetOutputDataRate+0xea>

    case STTS751_TEMP_ODR_250mHz:
      *Odr = 0.250f;
 8007cb6:	683b      	ldr	r3, [r7, #0]
 8007cb8:	f04f 527a 	mov.w	r2, #1048576000	@ 0x3e800000
 8007cbc:	601a      	str	r2, [r3, #0]
      break;
 8007cbe:	e026      	b.n	8007d0e <STTS751_TEMP_GetOutputDataRate+0xea>

    case STTS751_TEMP_ODR_500mHz:
      *Odr = 0.500f;
 8007cc0:	683b      	ldr	r3, [r7, #0]
 8007cc2:	f04f 527c 	mov.w	r2, #1056964608	@ 0x3f000000
 8007cc6:	601a      	str	r2, [r3, #0]
      break;
 8007cc8:	e021      	b.n	8007d0e <STTS751_TEMP_GetOutputDataRate+0xea>

    case STTS751_TEMP_ODR_1Hz:
      *Odr = 1.0f;
 8007cca:	683b      	ldr	r3, [r7, #0]
 8007ccc:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8007cd0:	601a      	str	r2, [r3, #0]
      break;
 8007cd2:	e01c      	b.n	8007d0e <STTS751_TEMP_GetOutputDataRate+0xea>

    case STTS751_TEMP_ODR_2Hz:
      *Odr = 2.0f;
 8007cd4:	683b      	ldr	r3, [r7, #0]
 8007cd6:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8007cda:	601a      	str	r2, [r3, #0]
      break;
 8007cdc:	e017      	b.n	8007d0e <STTS751_TEMP_GetOutputDataRate+0xea>

    case STTS751_TEMP_ODR_4Hz:
      *Odr = 4.0f;
 8007cde:	683b      	ldr	r3, [r7, #0]
 8007ce0:	f04f 4281 	mov.w	r2, #1082130432	@ 0x40800000
 8007ce4:	601a      	str	r2, [r3, #0]
      break;
 8007ce6:	e012      	b.n	8007d0e <STTS751_TEMP_GetOutputDataRate+0xea>

    case STTS751_TEMP_ODR_8Hz:
      *Odr = 8.0f;
 8007ce8:	683b      	ldr	r3, [r7, #0]
 8007cea:	f04f 4282 	mov.w	r2, #1090519040	@ 0x41000000
 8007cee:	601a      	str	r2, [r3, #0]
      break;
 8007cf0:	e00d      	b.n	8007d0e <STTS751_TEMP_GetOutputDataRate+0xea>

    case STTS751_TEMP_ODR_16Hz:
      *Odr = 16.0f;
 8007cf2:	683b      	ldr	r3, [r7, #0]
 8007cf4:	f04f 4283 	mov.w	r2, #1098907648	@ 0x41800000
 8007cf8:	601a      	str	r2, [r3, #0]
      break;
 8007cfa:	e008      	b.n	8007d0e <STTS751_TEMP_GetOutputDataRate+0xea>

    case STTS751_TEMP_ODR_32Hz:
      *Odr = 32.0f;
 8007cfc:	683b      	ldr	r3, [r7, #0]
 8007cfe:	f04f 4284 	mov.w	r2, #1107296256	@ 0x42000000
 8007d02:	601a      	str	r2, [r3, #0]
      break;
 8007d04:	e003      	b.n	8007d0e <STTS751_TEMP_GetOutputDataRate+0xea>

    default:
      ret = STTS751_ERROR;
 8007d06:	f04f 33ff 	mov.w	r3, #4294967295
 8007d0a:	60fb      	str	r3, [r7, #12]
      break;
 8007d0c:	bf00      	nop
  }

  return ret;
 8007d0e:	68fb      	ldr	r3, [r7, #12]
}
 8007d10:	4618      	mov	r0, r3
 8007d12:	3710      	adds	r7, #16
 8007d14:	46bd      	mov	sp, r7
 8007d16:	bd80      	pop	{r7, pc}

08007d18 <STTS751_TEMP_SetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr the output data rate value to be set
  * @retval 0 in case of success, an error code otherwise
  */
int32_t STTS751_TEMP_SetOutputDataRate(STTS751_Object_t *pObj, float Odr)
{
 8007d18:	b580      	push	{r7, lr}
 8007d1a:	b084      	sub	sp, #16
 8007d1c:	af00      	add	r7, sp, #0
 8007d1e:	6078      	str	r0, [r7, #4]
 8007d20:	6039      	str	r1, [r7, #0]
  stts751_odr_t new_odr;
  stts751_tres_t res;

  /* Get the current resolution */
  if (stts751_resolution_get(&(pObj->Ctx), &res) != STTS751_OK)
 8007d22:	687b      	ldr	r3, [r7, #4]
 8007d24:	3320      	adds	r3, #32
 8007d26:	f107 020e 	add.w	r2, r7, #14
 8007d2a:	4611      	mov	r1, r2
 8007d2c:	4618      	mov	r0, r3
 8007d2e:	f000 fa75 	bl	800821c <stts751_resolution_get>
 8007d32:	4603      	mov	r3, r0
 8007d34:	2b00      	cmp	r3, #0
 8007d36:	d002      	beq.n	8007d3e <STTS751_TEMP_SetOutputDataRate+0x26>
  {
    return STTS751_ERROR;
 8007d38:	f04f 33ff 	mov.w	r3, #4294967295
 8007d3c:	e09a      	b.n	8007e74 <STTS751_TEMP_SetOutputDataRate+0x15c>
  }

  /* If the requested odr is 16Hz we cannot use the 12 bits resolution */
  if (Odr == 16.0f && res == STTS751_12bit)
 8007d3e:	f04f 4183 	mov.w	r1, #1098907648	@ 0x41800000
 8007d42:	6838      	ldr	r0, [r7, #0]
 8007d44:	f7f9 f95a 	bl	8000ffc <__aeabi_fcmpeq>
 8007d48:	4603      	mov	r3, r0
 8007d4a:	2b00      	cmp	r3, #0
 8007d4c:	d00e      	beq.n	8007d6c <STTS751_TEMP_SetOutputDataRate+0x54>
 8007d4e:	7bbb      	ldrb	r3, [r7, #14]
 8007d50:	2b03      	cmp	r3, #3
 8007d52:	d10b      	bne.n	8007d6c <STTS751_TEMP_SetOutputDataRate+0x54>
  {
    /* We force resolution to the maximum allowed value */
    if (stts751_resolution_set(&(pObj->Ctx), STTS751_11bit) != STTS751_OK)
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	3320      	adds	r3, #32
 8007d58:	2101      	movs	r1, #1
 8007d5a:	4618      	mov	r0, r3
 8007d5c:	f000 fa38 	bl	80081d0 <stts751_resolution_set>
 8007d60:	4603      	mov	r3, r0
 8007d62:	2b00      	cmp	r3, #0
 8007d64:	d002      	beq.n	8007d6c <STTS751_TEMP_SetOutputDataRate+0x54>
    {
      return STTS751_ERROR;
 8007d66:	f04f 33ff 	mov.w	r3, #4294967295
 8007d6a:	e083      	b.n	8007e74 <STTS751_TEMP_SetOutputDataRate+0x15c>
    }
  }

  /* If the requested odr is 32Hz we cannot use the 12 bits and 11 bits resolutions */
  if (Odr == 32.0f && (res == STTS751_12bit || res == STTS751_11bit))
 8007d6c:	f04f 4184 	mov.w	r1, #1107296256	@ 0x42000000
 8007d70:	6838      	ldr	r0, [r7, #0]
 8007d72:	f7f9 f943 	bl	8000ffc <__aeabi_fcmpeq>
 8007d76:	4603      	mov	r3, r0
 8007d78:	2b00      	cmp	r3, #0
 8007d7a:	d011      	beq.n	8007da0 <STTS751_TEMP_SetOutputDataRate+0x88>
 8007d7c:	7bbb      	ldrb	r3, [r7, #14]
 8007d7e:	2b03      	cmp	r3, #3
 8007d80:	d002      	beq.n	8007d88 <STTS751_TEMP_SetOutputDataRate+0x70>
 8007d82:	7bbb      	ldrb	r3, [r7, #14]
 8007d84:	2b01      	cmp	r3, #1
 8007d86:	d10b      	bne.n	8007da0 <STTS751_TEMP_SetOutputDataRate+0x88>
  {
    /* We force resolution to the maximum allowed value */
    if (stts751_resolution_set(&(pObj->Ctx), STTS751_10bit) != STTS751_OK)
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	3320      	adds	r3, #32
 8007d8c:	2100      	movs	r1, #0
 8007d8e:	4618      	mov	r0, r3
 8007d90:	f000 fa1e 	bl	80081d0 <stts751_resolution_set>
 8007d94:	4603      	mov	r3, r0
 8007d96:	2b00      	cmp	r3, #0
 8007d98:	d002      	beq.n	8007da0 <STTS751_TEMP_SetOutputDataRate+0x88>
    {
      return STTS751_ERROR;
 8007d9a:	f04f 33ff 	mov.w	r3, #4294967295
 8007d9e:	e069      	b.n	8007e74 <STTS751_TEMP_SetOutputDataRate+0x15c>
    }
  }

  new_odr = (Odr <= 0.0625f) ? STTS751_TEMP_ODR_62mHz5
            : (Odr <= 0.125f) ? STTS751_TEMP_ODR_125mHz
 8007da0:	f04f 5176 	mov.w	r1, #1031798784	@ 0x3d800000
 8007da4:	6838      	ldr	r0, [r7, #0]
 8007da6:	f7f9 f93d 	bl	8001024 <__aeabi_fcmple>
 8007daa:	4603      	mov	r3, r0
 8007dac:	2b00      	cmp	r3, #0
 8007dae:	d001      	beq.n	8007db4 <STTS751_TEMP_SetOutputDataRate+0x9c>
 8007db0:	2300      	movs	r3, #0
 8007db2:	e050      	b.n	8007e56 <STTS751_TEMP_SetOutputDataRate+0x13e>
 8007db4:	f04f 5178 	mov.w	r1, #1040187392	@ 0x3e000000
 8007db8:	6838      	ldr	r0, [r7, #0]
 8007dba:	f7f9 f933 	bl	8001024 <__aeabi_fcmple>
 8007dbe:	4603      	mov	r3, r0
 8007dc0:	2b00      	cmp	r3, #0
 8007dc2:	d001      	beq.n	8007dc8 <STTS751_TEMP_SetOutputDataRate+0xb0>
 8007dc4:	2301      	movs	r3, #1
 8007dc6:	e046      	b.n	8007e56 <STTS751_TEMP_SetOutputDataRate+0x13e>
 8007dc8:	f04f 517a 	mov.w	r1, #1048576000	@ 0x3e800000
 8007dcc:	6838      	ldr	r0, [r7, #0]
 8007dce:	f7f9 f929 	bl	8001024 <__aeabi_fcmple>
 8007dd2:	4603      	mov	r3, r0
 8007dd4:	2b00      	cmp	r3, #0
 8007dd6:	d001      	beq.n	8007ddc <STTS751_TEMP_SetOutputDataRate+0xc4>
 8007dd8:	2302      	movs	r3, #2
 8007dda:	e03c      	b.n	8007e56 <STTS751_TEMP_SetOutputDataRate+0x13e>
 8007ddc:	f04f 517c 	mov.w	r1, #1056964608	@ 0x3f000000
 8007de0:	6838      	ldr	r0, [r7, #0]
 8007de2:	f7f9 f91f 	bl	8001024 <__aeabi_fcmple>
 8007de6:	4603      	mov	r3, r0
 8007de8:	2b00      	cmp	r3, #0
 8007dea:	d001      	beq.n	8007df0 <STTS751_TEMP_SetOutputDataRate+0xd8>
 8007dec:	2303      	movs	r3, #3
 8007dee:	e032      	b.n	8007e56 <STTS751_TEMP_SetOutputDataRate+0x13e>
 8007df0:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 8007df4:	6838      	ldr	r0, [r7, #0]
 8007df6:	f7f9 f915 	bl	8001024 <__aeabi_fcmple>
 8007dfa:	4603      	mov	r3, r0
 8007dfc:	2b00      	cmp	r3, #0
 8007dfe:	d001      	beq.n	8007e04 <STTS751_TEMP_SetOutputDataRate+0xec>
 8007e00:	2304      	movs	r3, #4
 8007e02:	e028      	b.n	8007e56 <STTS751_TEMP_SetOutputDataRate+0x13e>
 8007e04:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 8007e08:	6838      	ldr	r0, [r7, #0]
 8007e0a:	f7f9 f90b 	bl	8001024 <__aeabi_fcmple>
 8007e0e:	4603      	mov	r3, r0
 8007e10:	2b00      	cmp	r3, #0
 8007e12:	d001      	beq.n	8007e18 <STTS751_TEMP_SetOutputDataRate+0x100>
 8007e14:	2305      	movs	r3, #5
 8007e16:	e01e      	b.n	8007e56 <STTS751_TEMP_SetOutputDataRate+0x13e>
 8007e18:	f04f 4181 	mov.w	r1, #1082130432	@ 0x40800000
 8007e1c:	6838      	ldr	r0, [r7, #0]
 8007e1e:	f7f9 f901 	bl	8001024 <__aeabi_fcmple>
 8007e22:	4603      	mov	r3, r0
 8007e24:	2b00      	cmp	r3, #0
 8007e26:	d001      	beq.n	8007e2c <STTS751_TEMP_SetOutputDataRate+0x114>
 8007e28:	2306      	movs	r3, #6
 8007e2a:	e014      	b.n	8007e56 <STTS751_TEMP_SetOutputDataRate+0x13e>
 8007e2c:	f04f 4182 	mov.w	r1, #1090519040	@ 0x41000000
 8007e30:	6838      	ldr	r0, [r7, #0]
 8007e32:	f7f9 f8f7 	bl	8001024 <__aeabi_fcmple>
 8007e36:	4603      	mov	r3, r0
 8007e38:	2b00      	cmp	r3, #0
 8007e3a:	d001      	beq.n	8007e40 <STTS751_TEMP_SetOutputDataRate+0x128>
 8007e3c:	2307      	movs	r3, #7
 8007e3e:	e00a      	b.n	8007e56 <STTS751_TEMP_SetOutputDataRate+0x13e>
 8007e40:	f04f 4183 	mov.w	r1, #1098907648	@ 0x41800000
 8007e44:	6838      	ldr	r0, [r7, #0]
 8007e46:	f7f9 f8ed 	bl	8001024 <__aeabi_fcmple>
 8007e4a:	4603      	mov	r3, r0
 8007e4c:	2b00      	cmp	r3, #0
 8007e4e:	d001      	beq.n	8007e54 <STTS751_TEMP_SetOutputDataRate+0x13c>
 8007e50:	2308      	movs	r3, #8
 8007e52:	e000      	b.n	8007e56 <STTS751_TEMP_SetOutputDataRate+0x13e>
 8007e54:	2309      	movs	r3, #9
  new_odr = (Odr <= 0.0625f) ? STTS751_TEMP_ODR_62mHz5
 8007e56:	73fb      	strb	r3, [r7, #15]
            : (Odr <= 4.0f) ? STTS751_TEMP_ODR_4Hz
            : (Odr <= 8.0f) ? STTS751_TEMP_ODR_8Hz
            : (Odr <= 16.0f) ? STTS751_TEMP_ODR_16Hz
            :                    STTS751_TEMP_ODR_32Hz;

  if (stts751_temp_data_rate_set(&(pObj->Ctx), new_odr) != STTS751_OK)
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	3320      	adds	r3, #32
 8007e5c:	7bfa      	ldrb	r2, [r7, #15]
 8007e5e:	4611      	mov	r1, r2
 8007e60:	4618      	mov	r0, r3
 8007e62:	f000 f8de 	bl	8008022 <stts751_temp_data_rate_set>
 8007e66:	4603      	mov	r3, r0
 8007e68:	2b00      	cmp	r3, #0
 8007e6a:	d002      	beq.n	8007e72 <STTS751_TEMP_SetOutputDataRate+0x15a>
  {
    return STTS751_ERROR;
 8007e6c:	f04f 33ff 	mov.w	r3, #4294967295
 8007e70:	e000      	b.n	8007e74 <STTS751_TEMP_SetOutputDataRate+0x15c>
  }

  return STTS751_OK;
 8007e72:	2300      	movs	r3, #0
}
 8007e74:	4618      	mov	r0, r3
 8007e76:	3710      	adds	r7, #16
 8007e78:	46bd      	mov	sp, r7
 8007e7a:	bd80      	pop	{r7, pc}

08007e7c <STTS751_TEMP_GetTemperature>:
  * @param  pObj the device pObj
  * @param  Value pointer where the temperature value is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t STTS751_TEMP_GetTemperature(STTS751_Object_t *pObj, float *Value)
{
 8007e7c:	b580      	push	{r7, lr}
 8007e7e:	b084      	sub	sp, #16
 8007e80:	af00      	add	r7, sp, #0
 8007e82:	6078      	str	r0, [r7, #4]
 8007e84:	6039      	str	r1, [r7, #0]
  int16_t raw_value;

  /* Get the temperature */
  if (stts751_temperature_raw_get(&(pObj->Ctx), &raw_value) != STTS751_OK)
 8007e86:	687b      	ldr	r3, [r7, #4]
 8007e88:	3320      	adds	r3, #32
 8007e8a:	f107 020e 	add.w	r2, r7, #14
 8007e8e:	4611      	mov	r1, r2
 8007e90:	4618      	mov	r0, r3
 8007e92:	f000 f9fb 	bl	800828c <stts751_temperature_raw_get>
 8007e96:	4603      	mov	r3, r0
 8007e98:	2b00      	cmp	r3, #0
 8007e9a:	d002      	beq.n	8007ea2 <STTS751_TEMP_GetTemperature+0x26>
  {
    return STTS751_ERROR;
 8007e9c:	f04f 33ff 	mov.w	r3, #4294967295
 8007ea0:	e008      	b.n	8007eb4 <STTS751_TEMP_GetTemperature+0x38>
  }

  *Value = stts751_from_lsb_to_celsius(raw_value);
 8007ea2:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8007ea6:	4618      	mov	r0, r3
 8007ea8:	f000 f8a6 	bl	8007ff8 <stts751_from_lsb_to_celsius>
 8007eac:	4602      	mov	r2, r0
 8007eae:	683b      	ldr	r3, [r7, #0]
 8007eb0:	601a      	str	r2, [r3, #0]

  return STTS751_OK;
 8007eb2:	2300      	movs	r3, #0
}
 8007eb4:	4618      	mov	r0, r3
 8007eb6:	3710      	adds	r7, #16
 8007eb8:	46bd      	mov	sp, r7
 8007eba:	bd80      	pop	{r7, pc}

08007ebc <ReadRegWrap>:
  * @param  pData the stored data pointer
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t ReadRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 8007ebc:	b590      	push	{r4, r7, lr}
 8007ebe:	b089      	sub	sp, #36	@ 0x24
 8007ec0:	af00      	add	r7, sp, #0
 8007ec2:	60f8      	str	r0, [r7, #12]
 8007ec4:	607a      	str	r2, [r7, #4]
 8007ec6:	461a      	mov	r2, r3
 8007ec8:	460b      	mov	r3, r1
 8007eca:	72fb      	strb	r3, [r7, #11]
 8007ecc:	4613      	mov	r3, r2
 8007ece:	813b      	strh	r3, [r7, #8]
  uint16_t i;
  int32_t ret = STTS751_OK;
 8007ed0:	2300      	movs	r3, #0
 8007ed2:	61bb      	str	r3, [r7, #24]
  STTS751_Object_t *pObj = (STTS751_Object_t *)Handle;
 8007ed4:	68fb      	ldr	r3, [r7, #12]
 8007ed6:	617b      	str	r3, [r7, #20]

  if (pObj->IO.BusType == (uint32_t)STTS751_I2C_BUS) /* I2C */
 8007ed8:	697b      	ldr	r3, [r7, #20]
 8007eda:	689b      	ldr	r3, [r3, #8]
 8007edc:	2b00      	cmp	r3, #0
 8007ede:	d11f      	bne.n	8007f20 <ReadRegWrap+0x64>
  {
    for (i = 0; i < Length; i++)
 8007ee0:	2300      	movs	r3, #0
 8007ee2:	83fb      	strh	r3, [r7, #30]
 8007ee4:	e018      	b.n	8007f18 <ReadRegWrap+0x5c>
    {
      ret = pObj->IO.ReadReg(pObj->IO.Address, (Reg + i), &pData[i], 1);
 8007ee6:	697b      	ldr	r3, [r7, #20]
 8007ee8:	695c      	ldr	r4, [r3, #20]
 8007eea:	697b      	ldr	r3, [r7, #20]
 8007eec:	7b1b      	ldrb	r3, [r3, #12]
 8007eee:	4618      	mov	r0, r3
 8007ef0:	7afb      	ldrb	r3, [r7, #11]
 8007ef2:	b29a      	uxth	r2, r3
 8007ef4:	8bfb      	ldrh	r3, [r7, #30]
 8007ef6:	4413      	add	r3, r2
 8007ef8:	b299      	uxth	r1, r3
 8007efa:	8bfb      	ldrh	r3, [r7, #30]
 8007efc:	687a      	ldr	r2, [r7, #4]
 8007efe:	441a      	add	r2, r3
 8007f00:	2301      	movs	r3, #1
 8007f02:	47a0      	blx	r4
 8007f04:	61b8      	str	r0, [r7, #24]
      if (ret != STTS751_OK)
 8007f06:	69bb      	ldr	r3, [r7, #24]
 8007f08:	2b00      	cmp	r3, #0
 8007f0a:	d002      	beq.n	8007f12 <ReadRegWrap+0x56>
      {
        return STTS751_ERROR;
 8007f0c:	f04f 33ff 	mov.w	r3, #4294967295
 8007f10:	e007      	b.n	8007f22 <ReadRegWrap+0x66>
    for (i = 0; i < Length; i++)
 8007f12:	8bfb      	ldrh	r3, [r7, #30]
 8007f14:	3301      	adds	r3, #1
 8007f16:	83fb      	strh	r3, [r7, #30]
 8007f18:	8bfa      	ldrh	r2, [r7, #30]
 8007f1a:	893b      	ldrh	r3, [r7, #8]
 8007f1c:	429a      	cmp	r2, r3
 8007f1e:	d3e2      	bcc.n	8007ee6 <ReadRegWrap+0x2a>
      }
    }
  }

  return ret;
 8007f20:	69bb      	ldr	r3, [r7, #24]
}
 8007f22:	4618      	mov	r0, r3
 8007f24:	3724      	adds	r7, #36	@ 0x24
 8007f26:	46bd      	mov	sp, r7
 8007f28:	bd90      	pop	{r4, r7, pc}

08007f2a <WriteRegWrap>:
  * @param  pData the stored data pointer
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t WriteRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 8007f2a:	b590      	push	{r4, r7, lr}
 8007f2c:	b089      	sub	sp, #36	@ 0x24
 8007f2e:	af00      	add	r7, sp, #0
 8007f30:	60f8      	str	r0, [r7, #12]
 8007f32:	607a      	str	r2, [r7, #4]
 8007f34:	461a      	mov	r2, r3
 8007f36:	460b      	mov	r3, r1
 8007f38:	72fb      	strb	r3, [r7, #11]
 8007f3a:	4613      	mov	r3, r2
 8007f3c:	813b      	strh	r3, [r7, #8]
  uint16_t i;
  int32_t ret = STTS751_OK;
 8007f3e:	2300      	movs	r3, #0
 8007f40:	61bb      	str	r3, [r7, #24]
  STTS751_Object_t *pObj = (STTS751_Object_t *)Handle;
 8007f42:	68fb      	ldr	r3, [r7, #12]
 8007f44:	617b      	str	r3, [r7, #20]

  if (pObj->IO.BusType == (uint32_t)STTS751_I2C_BUS) /* I2C */
 8007f46:	697b      	ldr	r3, [r7, #20]
 8007f48:	689b      	ldr	r3, [r3, #8]
 8007f4a:	2b00      	cmp	r3, #0
 8007f4c:	d11f      	bne.n	8007f8e <WriteRegWrap+0x64>
  {
    for (i = 0; i < Length; i++)
 8007f4e:	2300      	movs	r3, #0
 8007f50:	83fb      	strh	r3, [r7, #30]
 8007f52:	e018      	b.n	8007f86 <WriteRegWrap+0x5c>
    {
      ret = pObj->IO.WriteReg(pObj->IO.Address, (Reg + i), &pData[i], 1);
 8007f54:	697b      	ldr	r3, [r7, #20]
 8007f56:	691c      	ldr	r4, [r3, #16]
 8007f58:	697b      	ldr	r3, [r7, #20]
 8007f5a:	7b1b      	ldrb	r3, [r3, #12]
 8007f5c:	4618      	mov	r0, r3
 8007f5e:	7afb      	ldrb	r3, [r7, #11]
 8007f60:	b29a      	uxth	r2, r3
 8007f62:	8bfb      	ldrh	r3, [r7, #30]
 8007f64:	4413      	add	r3, r2
 8007f66:	b299      	uxth	r1, r3
 8007f68:	8bfb      	ldrh	r3, [r7, #30]
 8007f6a:	687a      	ldr	r2, [r7, #4]
 8007f6c:	441a      	add	r2, r3
 8007f6e:	2301      	movs	r3, #1
 8007f70:	47a0      	blx	r4
 8007f72:	61b8      	str	r0, [r7, #24]
      if (ret != STTS751_OK)
 8007f74:	69bb      	ldr	r3, [r7, #24]
 8007f76:	2b00      	cmp	r3, #0
 8007f78:	d002      	beq.n	8007f80 <WriteRegWrap+0x56>
      {
        return STTS751_ERROR;
 8007f7a:	f04f 33ff 	mov.w	r3, #4294967295
 8007f7e:	e007      	b.n	8007f90 <WriteRegWrap+0x66>
    for (i = 0; i < Length; i++)
 8007f80:	8bfb      	ldrh	r3, [r7, #30]
 8007f82:	3301      	adds	r3, #1
 8007f84:	83fb      	strh	r3, [r7, #30]
 8007f86:	8bfa      	ldrh	r2, [r7, #30]
 8007f88:	893b      	ldrh	r3, [r7, #8]
 8007f8a:	429a      	cmp	r2, r3
 8007f8c:	d3e2      	bcc.n	8007f54 <WriteRegWrap+0x2a>
      }
    }
  }

  return ret;
 8007f8e:	69bb      	ldr	r3, [r7, #24]
}
 8007f90:	4618      	mov	r0, r3
 8007f92:	3724      	adds	r7, #36	@ 0x24
 8007f94:	46bd      	mov	sp, r7
 8007f96:	bd90      	pop	{r4, r7, pc}

08007f98 <stts751_read_reg>:
  *
  */
int32_t stts751_read_reg(stmdev_ctx_t *ctx, uint8_t reg,
                         uint8_t *data,
                         uint16_t len)
{
 8007f98:	b590      	push	{r4, r7, lr}
 8007f9a:	b087      	sub	sp, #28
 8007f9c:	af00      	add	r7, sp, #0
 8007f9e:	60f8      	str	r0, [r7, #12]
 8007fa0:	607a      	str	r2, [r7, #4]
 8007fa2:	461a      	mov	r2, r3
 8007fa4:	460b      	mov	r3, r1
 8007fa6:	72fb      	strb	r3, [r7, #11]
 8007fa8:	4613      	mov	r3, r2
 8007faa:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8007fac:	68fb      	ldr	r3, [r7, #12]
 8007fae:	685c      	ldr	r4, [r3, #4]
 8007fb0:	68fb      	ldr	r3, [r7, #12]
 8007fb2:	68d8      	ldr	r0, [r3, #12]
 8007fb4:	893b      	ldrh	r3, [r7, #8]
 8007fb6:	7af9      	ldrb	r1, [r7, #11]
 8007fb8:	687a      	ldr	r2, [r7, #4]
 8007fba:	47a0      	blx	r4
 8007fbc:	6178      	str	r0, [r7, #20]

  return ret;
 8007fbe:	697b      	ldr	r3, [r7, #20]
}
 8007fc0:	4618      	mov	r0, r3
 8007fc2:	371c      	adds	r7, #28
 8007fc4:	46bd      	mov	sp, r7
 8007fc6:	bd90      	pop	{r4, r7, pc}

08007fc8 <stts751_write_reg>:
  *
  */
int32_t stts751_write_reg(stmdev_ctx_t *ctx, uint8_t reg,
                          uint8_t *data,
                          uint16_t len)
{
 8007fc8:	b590      	push	{r4, r7, lr}
 8007fca:	b087      	sub	sp, #28
 8007fcc:	af00      	add	r7, sp, #0
 8007fce:	60f8      	str	r0, [r7, #12]
 8007fd0:	607a      	str	r2, [r7, #4]
 8007fd2:	461a      	mov	r2, r3
 8007fd4:	460b      	mov	r3, r1
 8007fd6:	72fb      	strb	r3, [r7, #11]
 8007fd8:	4613      	mov	r3, r2
 8007fda:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8007fdc:	68fb      	ldr	r3, [r7, #12]
 8007fde:	681c      	ldr	r4, [r3, #0]
 8007fe0:	68fb      	ldr	r3, [r7, #12]
 8007fe2:	68d8      	ldr	r0, [r3, #12]
 8007fe4:	893b      	ldrh	r3, [r7, #8]
 8007fe6:	7af9      	ldrb	r1, [r7, #11]
 8007fe8:	687a      	ldr	r2, [r7, #4]
 8007fea:	47a0      	blx	r4
 8007fec:	6178      	str	r0, [r7, #20]

  return ret;
 8007fee:	697b      	ldr	r3, [r7, #20]
}
 8007ff0:	4618      	mov	r0, r3
 8007ff2:	371c      	adds	r7, #28
 8007ff4:	46bd      	mov	sp, r7
 8007ff6:	bd90      	pop	{r4, r7, pc}

08007ff8 <stts751_from_lsb_to_celsius>:
  * @{
  *
  */

float_t stts751_from_lsb_to_celsius(int16_t lsb)
{
 8007ff8:	b580      	push	{r7, lr}
 8007ffa:	b082      	sub	sp, #8
 8007ffc:	af00      	add	r7, sp, #0
 8007ffe:	4603      	mov	r3, r0
 8008000:	80fb      	strh	r3, [r7, #6]
  return ((float_t)lsb) / 256.0f;
 8008002:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8008006:	4618      	mov	r0, r3
 8008008:	f7f8 fe10 	bl	8000c2c <__aeabi_i2f>
 800800c:	4603      	mov	r3, r0
 800800e:	f04f 4187 	mov.w	r1, #1132462080	@ 0x43800000
 8008012:	4618      	mov	r0, r3
 8008014:	f7f8 ff12 	bl	8000e3c <__aeabi_fdiv>
 8008018:	4603      	mov	r3, r0
}
 800801a:	4618      	mov	r0, r3
 800801c:	3708      	adds	r7, #8
 800801e:	46bd      	mov	sp, r7
 8008020:	bd80      	pop	{r7, pc}

08008022 <stts751_temp_data_rate_set>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t stts751_temp_data_rate_set(stmdev_ctx_t *ctx,
                                   stts751_odr_t val)
{
 8008022:	b580      	push	{r7, lr}
 8008024:	b086      	sub	sp, #24
 8008026:	af00      	add	r7, sp, #0
 8008028:	6078      	str	r0, [r7, #4]
 800802a:	460b      	mov	r3, r1
 800802c:	70fb      	strb	r3, [r7, #3]
  stts751_configuration_t configuration;
  stts751_conversion_rate_t conversion_rate;
  uint8_t dummy_value = 0xAA;
 800802e:	23aa      	movs	r3, #170	@ 0xaa
 8008030:	72fb      	strb	r3, [r7, #11]
  int32_t ret;

  ret = stts751_read_reg(ctx, STTS751_CONVERSION_RATE,
 8008032:	f107 020c 	add.w	r2, r7, #12
 8008036:	2301      	movs	r3, #1
 8008038:	2104      	movs	r1, #4
 800803a:	6878      	ldr	r0, [r7, #4]
 800803c:	f7ff ffac 	bl	8007f98 <stts751_read_reg>
 8008040:	6178      	str	r0, [r7, #20]
                         (uint8_t *)&conversion_rate, 1);

  if (ret == 0)
 8008042:	697b      	ldr	r3, [r7, #20]
 8008044:	2b00      	cmp	r3, #0
 8008046:	d10f      	bne.n	8008068 <stts751_temp_data_rate_set+0x46>
  {
    conversion_rate.conv = (uint8_t)val & 0x0FU;
 8008048:	78fb      	ldrb	r3, [r7, #3]
 800804a:	f003 030f 	and.w	r3, r3, #15
 800804e:	b2da      	uxtb	r2, r3
 8008050:	7b3b      	ldrb	r3, [r7, #12]
 8008052:	f362 0303 	bfi	r3, r2, #0, #4
 8008056:	733b      	strb	r3, [r7, #12]
    ret = stts751_write_reg(ctx, STTS751_CONVERSION_RATE,
 8008058:	f107 020c 	add.w	r2, r7, #12
 800805c:	2301      	movs	r3, #1
 800805e:	2104      	movs	r1, #4
 8008060:	6878      	ldr	r0, [r7, #4]
 8008062:	f7ff ffb1 	bl	8007fc8 <stts751_write_reg>
 8008066:	6178      	str	r0, [r7, #20]
                            (uint8_t *)&conversion_rate, 1);
  }

  if (ret == 0)
 8008068:	697b      	ldr	r3, [r7, #20]
 800806a:	2b00      	cmp	r3, #0
 800806c:	d107      	bne.n	800807e <stts751_temp_data_rate_set+0x5c>
  {
    ret = stts751_read_reg(ctx, STTS751_CONFIGURATION,
 800806e:	f107 0210 	add.w	r2, r7, #16
 8008072:	2301      	movs	r3, #1
 8008074:	2103      	movs	r1, #3
 8008076:	6878      	ldr	r0, [r7, #4]
 8008078:	f7ff ff8e 	bl	8007f98 <stts751_read_reg>
 800807c:	6178      	str	r0, [r7, #20]
                           (uint8_t *)&configuration, 1);
  }

  if (ret == 0)
 800807e:	697b      	ldr	r3, [r7, #20]
 8008080:	2b00      	cmp	r3, #0
 8008082:	d111      	bne.n	80080a8 <stts751_temp_data_rate_set+0x86>
  {
    configuration.stop = ((uint8_t)val & 0x80U) >> 7;
 8008084:	78fb      	ldrb	r3, [r7, #3]
 8008086:	09db      	lsrs	r3, r3, #7
 8008088:	b2db      	uxtb	r3, r3
 800808a:	f003 0301 	and.w	r3, r3, #1
 800808e:	b2da      	uxtb	r2, r3
 8008090:	7c3b      	ldrb	r3, [r7, #16]
 8008092:	f362 1386 	bfi	r3, r2, #6, #1
 8008096:	743b      	strb	r3, [r7, #16]
    ret = stts751_write_reg(ctx, STTS751_CONFIGURATION,
 8008098:	f107 0210 	add.w	r2, r7, #16
 800809c:	2301      	movs	r3, #1
 800809e:	2103      	movs	r1, #3
 80080a0:	6878      	ldr	r0, [r7, #4]
 80080a2:	f7ff ff91 	bl	8007fc8 <stts751_write_reg>
 80080a6:	6178      	str	r0, [r7, #20]
                            (uint8_t *)&configuration, 1);
  }

  if ((ret == 0) && (val == STTS751_TEMP_ODR_ONE_SHOT))
 80080a8:	697b      	ldr	r3, [r7, #20]
 80080aa:	2b00      	cmp	r3, #0
 80080ac:	d10a      	bne.n	80080c4 <stts751_temp_data_rate_set+0xa2>
 80080ae:	78fb      	ldrb	r3, [r7, #3]
 80080b0:	2b90      	cmp	r3, #144	@ 0x90
 80080b2:	d107      	bne.n	80080c4 <stts751_temp_data_rate_set+0xa2>
  {
    ret = stts751_write_reg(ctx, STTS751_ONE_SHOT, &dummy_value, 1);
 80080b4:	f107 020b 	add.w	r2, r7, #11
 80080b8:	2301      	movs	r3, #1
 80080ba:	210f      	movs	r1, #15
 80080bc:	6878      	ldr	r0, [r7, #4]
 80080be:	f7ff ff83 	bl	8007fc8 <stts751_write_reg>
 80080c2:	6178      	str	r0, [r7, #20]
  }

  return ret;
 80080c4:	697b      	ldr	r3, [r7, #20]
}
 80080c6:	4618      	mov	r0, r3
 80080c8:	3718      	adds	r7, #24
 80080ca:	46bd      	mov	sp, r7
 80080cc:	bd80      	pop	{r7, pc}
	...

080080d0 <stts751_temp_data_rate_get>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t stts751_temp_data_rate_get(stmdev_ctx_t *ctx,
                                   stts751_odr_t *val)
{
 80080d0:	b580      	push	{r7, lr}
 80080d2:	b086      	sub	sp, #24
 80080d4:	af00      	add	r7, sp, #0
 80080d6:	6078      	str	r0, [r7, #4]
 80080d8:	6039      	str	r1, [r7, #0]
  stts751_conversion_rate_t conversion_rate;
  stts751_configuration_t configuration;
  int32_t ret;

  ret = stts751_read_reg(ctx, STTS751_CONVERSION_RATE,
 80080da:	f107 0210 	add.w	r2, r7, #16
 80080de:	2301      	movs	r3, #1
 80080e0:	2104      	movs	r1, #4
 80080e2:	6878      	ldr	r0, [r7, #4]
 80080e4:	f7ff ff58 	bl	8007f98 <stts751_read_reg>
 80080e8:	6178      	str	r0, [r7, #20]
                         (uint8_t *)&conversion_rate, 1);

  if (ret == 0)
 80080ea:	697b      	ldr	r3, [r7, #20]
 80080ec:	2b00      	cmp	r3, #0
 80080ee:	d107      	bne.n	8008100 <stts751_temp_data_rate_get+0x30>
  {
    ret = stts751_read_reg(ctx, STTS751_CONFIGURATION,
 80080f0:	f107 020c 	add.w	r2, r7, #12
 80080f4:	2301      	movs	r3, #1
 80080f6:	2103      	movs	r1, #3
 80080f8:	6878      	ldr	r0, [r7, #4]
 80080fa:	f7ff ff4d 	bl	8007f98 <stts751_read_reg>
 80080fe:	6178      	str	r0, [r7, #20]
                           (uint8_t *)&configuration, 1);
  }

  switch ((configuration.stop << 7) + conversion_rate.conv)
 8008100:	7b3b      	ldrb	r3, [r7, #12]
 8008102:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8008106:	b2db      	uxtb	r3, r3
 8008108:	01db      	lsls	r3, r3, #7
 800810a:	7c3a      	ldrb	r2, [r7, #16]
 800810c:	f3c2 0203 	ubfx	r2, r2, #0, #4
 8008110:	b2d2      	uxtb	r2, r2
 8008112:	4413      	add	r3, r2
 8008114:	2b90      	cmp	r3, #144	@ 0x90
 8008116:	d025      	beq.n	8008164 <stts751_temp_data_rate_get+0x94>
 8008118:	2b90      	cmp	r3, #144	@ 0x90
 800811a:	dc4f      	bgt.n	80081bc <stts751_temp_data_rate_get+0xec>
 800811c:	2b09      	cmp	r3, #9
 800811e:	dc1b      	bgt.n	8008158 <stts751_temp_data_rate_get+0x88>
 8008120:	2b00      	cmp	r3, #0
 8008122:	db4b      	blt.n	80081bc <stts751_temp_data_rate_get+0xec>
 8008124:	2b09      	cmp	r3, #9
 8008126:	d849      	bhi.n	80081bc <stts751_temp_data_rate_get+0xec>
 8008128:	a201      	add	r2, pc, #4	@ (adr r2, 8008130 <stts751_temp_data_rate_get+0x60>)
 800812a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800812e:	bf00      	nop
 8008130:	0800816d 	.word	0x0800816d
 8008134:	08008175 	.word	0x08008175
 8008138:	0800817d 	.word	0x0800817d
 800813c:	08008185 	.word	0x08008185
 8008140:	0800818d 	.word	0x0800818d
 8008144:	08008195 	.word	0x08008195
 8008148:	0800819d 	.word	0x0800819d
 800814c:	080081a5 	.word	0x080081a5
 8008150:	080081ad 	.word	0x080081ad
 8008154:	080081b5 	.word	0x080081b5
 8008158:	2b80      	cmp	r3, #128	@ 0x80
 800815a:	d12f      	bne.n	80081bc <stts751_temp_data_rate_get+0xec>
  {
    case STTS751_TEMP_ODR_OFF:
      *val = STTS751_TEMP_ODR_OFF;
 800815c:	683b      	ldr	r3, [r7, #0]
 800815e:	2280      	movs	r2, #128	@ 0x80
 8008160:	701a      	strb	r2, [r3, #0]
      break;
 8008162:	e02f      	b.n	80081c4 <stts751_temp_data_rate_get+0xf4>

    case STTS751_TEMP_ODR_ONE_SHOT:
      *val = STTS751_TEMP_ODR_ONE_SHOT;
 8008164:	683b      	ldr	r3, [r7, #0]
 8008166:	2290      	movs	r2, #144	@ 0x90
 8008168:	701a      	strb	r2, [r3, #0]
      break;
 800816a:	e02b      	b.n	80081c4 <stts751_temp_data_rate_get+0xf4>

    case STTS751_TEMP_ODR_62mHz5:
      *val = STTS751_TEMP_ODR_62mHz5;
 800816c:	683b      	ldr	r3, [r7, #0]
 800816e:	2200      	movs	r2, #0
 8008170:	701a      	strb	r2, [r3, #0]
      break;
 8008172:	e027      	b.n	80081c4 <stts751_temp_data_rate_get+0xf4>

    case STTS751_TEMP_ODR_125mHz:
      *val = STTS751_TEMP_ODR_125mHz;
 8008174:	683b      	ldr	r3, [r7, #0]
 8008176:	2201      	movs	r2, #1
 8008178:	701a      	strb	r2, [r3, #0]
      break;
 800817a:	e023      	b.n	80081c4 <stts751_temp_data_rate_get+0xf4>

    case STTS751_TEMP_ODR_250mHz:
      *val = STTS751_TEMP_ODR_250mHz;
 800817c:	683b      	ldr	r3, [r7, #0]
 800817e:	2202      	movs	r2, #2
 8008180:	701a      	strb	r2, [r3, #0]
      break;
 8008182:	e01f      	b.n	80081c4 <stts751_temp_data_rate_get+0xf4>

    case STTS751_TEMP_ODR_500mHz:
      *val = STTS751_TEMP_ODR_500mHz;
 8008184:	683b      	ldr	r3, [r7, #0]
 8008186:	2203      	movs	r2, #3
 8008188:	701a      	strb	r2, [r3, #0]
      break;
 800818a:	e01b      	b.n	80081c4 <stts751_temp_data_rate_get+0xf4>

    case STTS751_TEMP_ODR_1Hz:
      *val = STTS751_TEMP_ODR_1Hz;
 800818c:	683b      	ldr	r3, [r7, #0]
 800818e:	2204      	movs	r2, #4
 8008190:	701a      	strb	r2, [r3, #0]
      break;
 8008192:	e017      	b.n	80081c4 <stts751_temp_data_rate_get+0xf4>

    case STTS751_TEMP_ODR_2Hz:
      *val = STTS751_TEMP_ODR_2Hz;
 8008194:	683b      	ldr	r3, [r7, #0]
 8008196:	2205      	movs	r2, #5
 8008198:	701a      	strb	r2, [r3, #0]
      break;
 800819a:	e013      	b.n	80081c4 <stts751_temp_data_rate_get+0xf4>

    case STTS751_TEMP_ODR_4Hz:
      *val = STTS751_TEMP_ODR_4Hz;
 800819c:	683b      	ldr	r3, [r7, #0]
 800819e:	2206      	movs	r2, #6
 80081a0:	701a      	strb	r2, [r3, #0]
      break;
 80081a2:	e00f      	b.n	80081c4 <stts751_temp_data_rate_get+0xf4>

    case STTS751_TEMP_ODR_8Hz:
      *val = STTS751_TEMP_ODR_8Hz;
 80081a4:	683b      	ldr	r3, [r7, #0]
 80081a6:	2207      	movs	r2, #7
 80081a8:	701a      	strb	r2, [r3, #0]
      break;
 80081aa:	e00b      	b.n	80081c4 <stts751_temp_data_rate_get+0xf4>

    case STTS751_TEMP_ODR_16Hz:
      *val = STTS751_TEMP_ODR_16Hz;
 80081ac:	683b      	ldr	r3, [r7, #0]
 80081ae:	2208      	movs	r2, #8
 80081b0:	701a      	strb	r2, [r3, #0]
      break;
 80081b2:	e007      	b.n	80081c4 <stts751_temp_data_rate_get+0xf4>

    case STTS751_TEMP_ODR_32Hz:
      *val = STTS751_TEMP_ODR_32Hz;
 80081b4:	683b      	ldr	r3, [r7, #0]
 80081b6:	2209      	movs	r2, #9
 80081b8:	701a      	strb	r2, [r3, #0]
      break;
 80081ba:	e003      	b.n	80081c4 <stts751_temp_data_rate_get+0xf4>

    default:
      *val = STTS751_TEMP_ODR_OFF;
 80081bc:	683b      	ldr	r3, [r7, #0]
 80081be:	2280      	movs	r2, #128	@ 0x80
 80081c0:	701a      	strb	r2, [r3, #0]
      break;
 80081c2:	bf00      	nop
  }

  return ret;
 80081c4:	697b      	ldr	r3, [r7, #20]
}
 80081c6:	4618      	mov	r0, r3
 80081c8:	3718      	adds	r7, #24
 80081ca:	46bd      	mov	sp, r7
 80081cc:	bd80      	pop	{r7, pc}
 80081ce:	bf00      	nop

080081d0 <stts751_resolution_set>:
  * @param  val      change the values of tres in reg CONFIGURATION
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t stts751_resolution_set(stmdev_ctx_t *ctx, stts751_tres_t val)
{
 80081d0:	b580      	push	{r7, lr}
 80081d2:	b084      	sub	sp, #16
 80081d4:	af00      	add	r7, sp, #0
 80081d6:	6078      	str	r0, [r7, #4]
 80081d8:	460b      	mov	r3, r1
 80081da:	70fb      	strb	r3, [r7, #3]
  stts751_configuration_t reg;
  int32_t ret;

  ret = stts751_read_reg(ctx, STTS751_CONFIGURATION, (uint8_t *) &reg, 1);
 80081dc:	f107 0208 	add.w	r2, r7, #8
 80081e0:	2301      	movs	r3, #1
 80081e2:	2103      	movs	r1, #3
 80081e4:	6878      	ldr	r0, [r7, #4]
 80081e6:	f7ff fed7 	bl	8007f98 <stts751_read_reg>
 80081ea:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 80081ec:	68fb      	ldr	r3, [r7, #12]
 80081ee:	2b00      	cmp	r3, #0
 80081f0:	d10f      	bne.n	8008212 <stts751_resolution_set+0x42>
  {
    reg.tres = (uint8_t) val;
 80081f2:	78fb      	ldrb	r3, [r7, #3]
 80081f4:	f003 0303 	and.w	r3, r3, #3
 80081f8:	b2da      	uxtb	r2, r3
 80081fa:	7a3b      	ldrb	r3, [r7, #8]
 80081fc:	f362 0383 	bfi	r3, r2, #2, #2
 8008200:	723b      	strb	r3, [r7, #8]
    ret = stts751_write_reg(ctx, STTS751_CONFIGURATION, (uint8_t *) &reg, 1);
 8008202:	f107 0208 	add.w	r2, r7, #8
 8008206:	2301      	movs	r3, #1
 8008208:	2103      	movs	r1, #3
 800820a:	6878      	ldr	r0, [r7, #4]
 800820c:	f7ff fedc 	bl	8007fc8 <stts751_write_reg>
 8008210:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8008212:	68fb      	ldr	r3, [r7, #12]
}
 8008214:	4618      	mov	r0, r3
 8008216:	3710      	adds	r7, #16
 8008218:	46bd      	mov	sp, r7
 800821a:	bd80      	pop	{r7, pc}

0800821c <stts751_resolution_get>:
  * @param  val      Get the values of tres in reg CONFIGURATION
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t stts751_resolution_get(stmdev_ctx_t *ctx, stts751_tres_t *val)
{
 800821c:	b580      	push	{r7, lr}
 800821e:	b084      	sub	sp, #16
 8008220:	af00      	add	r7, sp, #0
 8008222:	6078      	str	r0, [r7, #4]
 8008224:	6039      	str	r1, [r7, #0]
  stts751_configuration_t reg;
  int32_t ret;

  ret = stts751_read_reg(ctx, STTS751_CONFIGURATION, (uint8_t *) &reg, 1);
 8008226:	f107 0208 	add.w	r2, r7, #8
 800822a:	2301      	movs	r3, #1
 800822c:	2103      	movs	r1, #3
 800822e:	6878      	ldr	r0, [r7, #4]
 8008230:	f7ff feb2 	bl	8007f98 <stts751_read_reg>
 8008234:	60f8      	str	r0, [r7, #12]

  switch (reg.tres)
 8008236:	7a3b      	ldrb	r3, [r7, #8]
 8008238:	f3c3 0381 	ubfx	r3, r3, #2, #2
 800823c:	b2db      	uxtb	r3, r3
 800823e:	2b03      	cmp	r3, #3
 8008240:	d81a      	bhi.n	8008278 <stts751_resolution_get+0x5c>
 8008242:	a201      	add	r2, pc, #4	@ (adr r2, 8008248 <stts751_resolution_get+0x2c>)
 8008244:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008248:	08008261 	.word	0x08008261
 800824c:	08008269 	.word	0x08008269
 8008250:	08008259 	.word	0x08008259
 8008254:	08008271 	.word	0x08008271
  {
    case STTS751_9bit:
      *val = STTS751_9bit;
 8008258:	683b      	ldr	r3, [r7, #0]
 800825a:	2202      	movs	r2, #2
 800825c:	701a      	strb	r2, [r3, #0]
      break;
 800825e:	e00f      	b.n	8008280 <stts751_resolution_get+0x64>

    case STTS751_10bit:
      *val = STTS751_10bit;
 8008260:	683b      	ldr	r3, [r7, #0]
 8008262:	2200      	movs	r2, #0
 8008264:	701a      	strb	r2, [r3, #0]
      break;
 8008266:	e00b      	b.n	8008280 <stts751_resolution_get+0x64>

    case STTS751_11bit:
      *val = STTS751_11bit;
 8008268:	683b      	ldr	r3, [r7, #0]
 800826a:	2201      	movs	r2, #1
 800826c:	701a      	strb	r2, [r3, #0]
      break;
 800826e:	e007      	b.n	8008280 <stts751_resolution_get+0x64>

    case STTS751_12bit:
      *val = STTS751_12bit;
 8008270:	683b      	ldr	r3, [r7, #0]
 8008272:	2203      	movs	r2, #3
 8008274:	701a      	strb	r2, [r3, #0]
      break;
 8008276:	e003      	b.n	8008280 <stts751_resolution_get+0x64>

    default:
      *val = STTS751_9bit;
 8008278:	683b      	ldr	r3, [r7, #0]
 800827a:	2202      	movs	r2, #2
 800827c:	701a      	strb	r2, [r3, #0]
      break;
 800827e:	bf00      	nop
  }

  return ret;
 8008280:	68fb      	ldr	r3, [r7, #12]
}
 8008282:	4618      	mov	r0, r3
 8008284:	3710      	adds	r7, #16
 8008286:	46bd      	mov	sp, r7
 8008288:	bd80      	pop	{r7, pc}
 800828a:	bf00      	nop

0800828c <stts751_temperature_raw_get>:
  * @param  buff     buffer that stores data read
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t stts751_temperature_raw_get(stmdev_ctx_t *ctx, int16_t *val)
{
 800828c:	b580      	push	{r7, lr}
 800828e:	b084      	sub	sp, #16
 8008290:	af00      	add	r7, sp, #0
 8008292:	6078      	str	r0, [r7, #4]
 8008294:	6039      	str	r1, [r7, #0]
  uint8_t buff[2];
  int32_t ret;

  ret = stts751_read_reg(ctx, STTS751_TEMPERATURE_HIGH,
 8008296:	f107 0308 	add.w	r3, r7, #8
 800829a:	1c5a      	adds	r2, r3, #1
 800829c:	2301      	movs	r3, #1
 800829e:	2100      	movs	r1, #0
 80082a0:	6878      	ldr	r0, [r7, #4]
 80082a2:	f7ff fe79 	bl	8007f98 <stts751_read_reg>
 80082a6:	60f8      	str	r0, [r7, #12]
                         (uint8_t *)&buff[1], 1);

  if (ret == 0)
 80082a8:	68fb      	ldr	r3, [r7, #12]
 80082aa:	2b00      	cmp	r3, #0
 80082ac:	d117      	bne.n	80082de <stts751_temperature_raw_get+0x52>
  {
    ret = stts751_read_reg(ctx, STTS751_TEMPERATURE_LOW,
 80082ae:	f107 0208 	add.w	r2, r7, #8
 80082b2:	2301      	movs	r3, #1
 80082b4:	2102      	movs	r1, #2
 80082b6:	6878      	ldr	r0, [r7, #4]
 80082b8:	f7ff fe6e 	bl	8007f98 <stts751_read_reg>
 80082bc:	60f8      	str	r0, [r7, #12]
                           &buff[0], 1);
    *val = (int16_t)buff[1];
 80082be:	7a7b      	ldrb	r3, [r7, #9]
 80082c0:	b21a      	sxth	r2, r3
 80082c2:	683b      	ldr	r3, [r7, #0]
 80082c4:	801a      	strh	r2, [r3, #0]
    *val = (*val * 256) + (int16_t)buff[0];
 80082c6:	683b      	ldr	r3, [r7, #0]
 80082c8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80082cc:	b29b      	uxth	r3, r3
 80082ce:	021b      	lsls	r3, r3, #8
 80082d0:	b29b      	uxth	r3, r3
 80082d2:	7a3a      	ldrb	r2, [r7, #8]
 80082d4:	4413      	add	r3, r2
 80082d6:	b29b      	uxth	r3, r3
 80082d8:	b21a      	sxth	r2, r3
 80082da:	683b      	ldr	r3, [r7, #0]
 80082dc:	801a      	strh	r2, [r3, #0]
  }

  return ret;
 80082de:	68fb      	ldr	r3, [r7, #12]
}
 80082e0:	4618      	mov	r0, r3
 80082e2:	3710      	adds	r7, #16
 80082e4:	46bd      	mov	sp, r7
 80082e6:	bd80      	pop	{r7, pc}

080082e8 <stts751_pin_event_route_set>:
  * @param  val      set mask1 bit in register CONFIGURATION.
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t stts751_pin_event_route_set(stmdev_ctx_t *ctx, uint8_t val)
{
 80082e8:	b580      	push	{r7, lr}
 80082ea:	b084      	sub	sp, #16
 80082ec:	af00      	add	r7, sp, #0
 80082ee:	6078      	str	r0, [r7, #4]
 80082f0:	460b      	mov	r3, r1
 80082f2:	70fb      	strb	r3, [r7, #3]
  stts751_configuration_t reg;
  int32_t ret;

  ret = stts751_read_reg(ctx, STTS751_CONFIGURATION, (uint8_t *)&reg, 1);
 80082f4:	f107 0208 	add.w	r2, r7, #8
 80082f8:	2301      	movs	r3, #1
 80082fa:	2103      	movs	r1, #3
 80082fc:	6878      	ldr	r0, [r7, #4]
 80082fe:	f7ff fe4b 	bl	8007f98 <stts751_read_reg>
 8008302:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8008304:	68fb      	ldr	r3, [r7, #12]
 8008306:	2b00      	cmp	r3, #0
 8008308:	d10f      	bne.n	800832a <stts751_pin_event_route_set+0x42>
  {
    reg.mask1 = val;
 800830a:	78fb      	ldrb	r3, [r7, #3]
 800830c:	f003 0301 	and.w	r3, r3, #1
 8008310:	b2da      	uxtb	r2, r3
 8008312:	7a3b      	ldrb	r3, [r7, #8]
 8008314:	f362 13c7 	bfi	r3, r2, #7, #1
 8008318:	723b      	strb	r3, [r7, #8]
    ret = stts751_write_reg(ctx, STTS751_CONFIGURATION, (uint8_t *)&reg, 1);
 800831a:	f107 0208 	add.w	r2, r7, #8
 800831e:	2301      	movs	r3, #1
 8008320:	2103      	movs	r1, #3
 8008322:	6878      	ldr	r0, [r7, #4]
 8008324:	f7ff fe50 	bl	8007fc8 <stts751_write_reg>
 8008328:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 800832a:	68fb      	ldr	r3, [r7, #12]
}
 800832c:	4618      	mov	r0, r3
 800832e:	3710      	adds	r7, #16
 8008330:	46bd      	mov	sp, r7
 8008332:	bd80      	pop	{r7, pc}

08008334 <stts751_device_id_get>:
  * @param  buff     buffer that stores data read
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t stts751_device_id_get(stmdev_ctx_t *ctx, stts751_id_t *buff)
{
 8008334:	b580      	push	{r7, lr}
 8008336:	b084      	sub	sp, #16
 8008338:	af00      	add	r7, sp, #0
 800833a:	6078      	str	r0, [r7, #4]
 800833c:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret = stts751_read_reg(ctx, STTS751_PRODUCT_ID,
 800833e:	683a      	ldr	r2, [r7, #0]
 8008340:	2301      	movs	r3, #1
 8008342:	21fd      	movs	r1, #253	@ 0xfd
 8008344:	6878      	ldr	r0, [r7, #4]
 8008346:	f7ff fe27 	bl	8007f98 <stts751_read_reg>
 800834a:	60f8      	str	r0, [r7, #12]
                         (uint8_t *)&buff->product_id, 1);

  if (ret == 0)
 800834c:	68fb      	ldr	r3, [r7, #12]
 800834e:	2b00      	cmp	r3, #0
 8008350:	d107      	bne.n	8008362 <stts751_device_id_get+0x2e>
  {
    ret = stts751_read_reg(ctx, STTS751_MANUFACTURER_ID,
 8008352:	683b      	ldr	r3, [r7, #0]
 8008354:	1c5a      	adds	r2, r3, #1
 8008356:	2301      	movs	r3, #1
 8008358:	21fe      	movs	r1, #254	@ 0xfe
 800835a:	6878      	ldr	r0, [r7, #4]
 800835c:	f7ff fe1c 	bl	8007f98 <stts751_read_reg>
 8008360:	60f8      	str	r0, [r7, #12]
                           (uint8_t *)&buff->manufacturer_id, 1);
  }

  if (ret == 0)
 8008362:	68fb      	ldr	r3, [r7, #12]
 8008364:	2b00      	cmp	r3, #0
 8008366:	d107      	bne.n	8008378 <stts751_device_id_get+0x44>
  {
    ret = stts751_read_reg(ctx, STTS751_REVISION_ID,
 8008368:	683b      	ldr	r3, [r7, #0]
 800836a:	1c9a      	adds	r2, r3, #2
 800836c:	2301      	movs	r3, #1
 800836e:	21ff      	movs	r1, #255	@ 0xff
 8008370:	6878      	ldr	r0, [r7, #4]
 8008372:	f7ff fe11 	bl	8007f98 <stts751_read_reg>
 8008376:	60f8      	str	r0, [r7, #12]
                           (uint8_t *)&buff->revision_id, 1);
  }

  return ret;
 8008378:	68fb      	ldr	r3, [r7, #12]
}
 800837a:	4618      	mov	r0, r3
 800837c:	3710      	adds	r7, #16
 800837e:	46bd      	mov	sp, r7
 8008380:	bd80      	pop	{r7, pc}
	...

08008384 <IKS01A3_ENV_SENSOR_Init>:
  *         - ENV_TEMPERATURE and/or ENV_PRESSURE for instance 1
  *         - ENV_TEMPERATURE for instance 2
  * @retval BSP status
  */
int32_t IKS01A3_ENV_SENSOR_Init(uint32_t Instance, uint32_t Functions)
{
 8008384:	b580      	push	{r7, lr}
 8008386:	b08c      	sub	sp, #48	@ 0x30
 8008388:	af00      	add	r7, sp, #0
 800838a:	6078      	str	r0, [r7, #4]
 800838c:	6039      	str	r1, [r7, #0]
  int32_t ret = BSP_ERROR_NONE;
 800838e:	2300      	movs	r3, #0
 8008390:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint32_t function = ENV_TEMPERATURE;
 8008392:	2301      	movs	r3, #1
 8008394:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t i;
  uint32_t component_functions = 0;
 8008396:	2300      	movs	r3, #0
 8008398:	623b      	str	r3, [r7, #32]
  IKS01A3_ENV_SENSOR_Capabilities_t cap;

  switch (Instance)
 800839a:	687b      	ldr	r3, [r7, #4]
 800839c:	2b02      	cmp	r3, #2
 800839e:	d07c      	beq.n	800849a <IKS01A3_ENV_SENSOR_Init+0x116>
 80083a0:	687b      	ldr	r3, [r7, #4]
 80083a2:	2b02      	cmp	r3, #2
 80083a4:	f200 80b2 	bhi.w	800850c <IKS01A3_ENV_SENSOR_Init+0x188>
 80083a8:	687b      	ldr	r3, [r7, #4]
 80083aa:	2b00      	cmp	r3, #0
 80083ac:	d003      	beq.n	80083b6 <IKS01A3_ENV_SENSOR_Init+0x32>
 80083ae:	687b      	ldr	r3, [r7, #4]
 80083b0:	2b01      	cmp	r3, #1
 80083b2:	d039      	beq.n	8008428 <IKS01A3_ENV_SENSOR_Init+0xa4>
 80083b4:	e0aa      	b.n	800850c <IKS01A3_ENV_SENSOR_Init+0x188>
  {
#if (USE_IKS01A3_ENV_SENSOR_HTS221_0 == 1)
    case IKS01A3_HTS221_0:
      if (HTS221_0_Probe(Functions) != BSP_ERROR_NONE)
 80083b6:	6838      	ldr	r0, [r7, #0]
 80083b8:	f000 f934 	bl	8008624 <HTS221_0_Probe>
 80083bc:	4603      	mov	r3, r0
 80083be:	2b00      	cmp	r3, #0
 80083c0:	d002      	beq.n	80083c8 <IKS01A3_ENV_SENSOR_Init+0x44>
      {
        return BSP_ERROR_NO_INIT;
 80083c2:	f04f 33ff 	mov.w	r3, #4294967295
 80083c6:	e0df      	b.n	8008588 <IKS01A3_ENV_SENSOR_Init+0x204>
      }
      if (EnvDrv[Instance]->GetCapabilities(EnvCompObj[Instance], (void *)&cap) != BSP_ERROR_NONE)
 80083c8:	4a71      	ldr	r2, [pc, #452]	@ (8008590 <IKS01A3_ENV_SENSOR_Init+0x20c>)
 80083ca:	687b      	ldr	r3, [r7, #4]
 80083cc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80083d0:	68db      	ldr	r3, [r3, #12]
 80083d2:	4970      	ldr	r1, [pc, #448]	@ (8008594 <IKS01A3_ENV_SENSOR_Init+0x210>)
 80083d4:	687a      	ldr	r2, [r7, #4]
 80083d6:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 80083da:	f107 0108 	add.w	r1, r7, #8
 80083de:	4610      	mov	r0, r2
 80083e0:	4798      	blx	r3
 80083e2:	4603      	mov	r3, r0
 80083e4:	2b00      	cmp	r3, #0
 80083e6:	d002      	beq.n	80083ee <IKS01A3_ENV_SENSOR_Init+0x6a>
      {
        return BSP_ERROR_UNKNOWN_COMPONENT;
 80083e8:	f06f 0306 	mvn.w	r3, #6
 80083ec:	e0cc      	b.n	8008588 <IKS01A3_ENV_SENSOR_Init+0x204>
      }
      if (cap.Temperature == 1U)
 80083ee:	7a3b      	ldrb	r3, [r7, #8]
 80083f0:	2b01      	cmp	r3, #1
 80083f2:	d103      	bne.n	80083fc <IKS01A3_ENV_SENSOR_Init+0x78>
      {
        component_functions |= ENV_TEMPERATURE;
 80083f4:	6a3b      	ldr	r3, [r7, #32]
 80083f6:	f043 0301 	orr.w	r3, r3, #1
 80083fa:	623b      	str	r3, [r7, #32]
      }
      if (cap.Humidity == 1U)
 80083fc:	7abb      	ldrb	r3, [r7, #10]
 80083fe:	2b01      	cmp	r3, #1
 8008400:	d103      	bne.n	800840a <IKS01A3_ENV_SENSOR_Init+0x86>
      {
        component_functions |= ENV_HUMIDITY;
 8008402:	6a3b      	ldr	r3, [r7, #32]
 8008404:	f043 0304 	orr.w	r3, r3, #4
 8008408:	623b      	str	r3, [r7, #32]
      }
      if (cap.Pressure == 1U)
 800840a:	7a7b      	ldrb	r3, [r7, #9]
 800840c:	2b01      	cmp	r3, #1
 800840e:	d103      	bne.n	8008418 <IKS01A3_ENV_SENSOR_Init+0x94>
      {
        component_functions |= ENV_PRESSURE;
 8008410:	6a3b      	ldr	r3, [r7, #32]
 8008412:	f043 0302 	orr.w	r3, r3, #2
 8008416:	623b      	str	r3, [r7, #32]
      }
      if (cap.Gas == 1U)
 8008418:	7afb      	ldrb	r3, [r7, #11]
 800841a:	2b01      	cmp	r3, #1
 800841c:	d17a      	bne.n	8008514 <IKS01A3_ENV_SENSOR_Init+0x190>
      {
        component_functions |= ENV_GAS;
 800841e:	6a3b      	ldr	r3, [r7, #32]
 8008420:	f043 0308 	orr.w	r3, r3, #8
 8008424:	623b      	str	r3, [r7, #32]
      }
      break;
 8008426:	e075      	b.n	8008514 <IKS01A3_ENV_SENSOR_Init+0x190>
      break;
#endif

#if (USE_IKS01A3_ENV_SENSOR_LPS22HH_0 == 1)
    case IKS01A3_LPS22HH_0:
      if (LPS22HH_0_Probe(Functions) != BSP_ERROR_NONE)
 8008428:	6838      	ldr	r0, [r7, #0]
 800842a:	f000 f9c5 	bl	80087b8 <LPS22HH_0_Probe>
 800842e:	4603      	mov	r3, r0
 8008430:	2b00      	cmp	r3, #0
 8008432:	d002      	beq.n	800843a <IKS01A3_ENV_SENSOR_Init+0xb6>
      {
        return BSP_ERROR_NO_INIT;
 8008434:	f04f 33ff 	mov.w	r3, #4294967295
 8008438:	e0a6      	b.n	8008588 <IKS01A3_ENV_SENSOR_Init+0x204>
      }
      if (EnvDrv[Instance]->GetCapabilities(EnvCompObj[Instance], (void *)&cap) != BSP_ERROR_NONE)
 800843a:	4a55      	ldr	r2, [pc, #340]	@ (8008590 <IKS01A3_ENV_SENSOR_Init+0x20c>)
 800843c:	687b      	ldr	r3, [r7, #4]
 800843e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008442:	68db      	ldr	r3, [r3, #12]
 8008444:	4953      	ldr	r1, [pc, #332]	@ (8008594 <IKS01A3_ENV_SENSOR_Init+0x210>)
 8008446:	687a      	ldr	r2, [r7, #4]
 8008448:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800844c:	f107 0108 	add.w	r1, r7, #8
 8008450:	4610      	mov	r0, r2
 8008452:	4798      	blx	r3
 8008454:	4603      	mov	r3, r0
 8008456:	2b00      	cmp	r3, #0
 8008458:	d002      	beq.n	8008460 <IKS01A3_ENV_SENSOR_Init+0xdc>
      {
        return BSP_ERROR_UNKNOWN_COMPONENT;
 800845a:	f06f 0306 	mvn.w	r3, #6
 800845e:	e093      	b.n	8008588 <IKS01A3_ENV_SENSOR_Init+0x204>
      }
      if (cap.Temperature == 1U)
 8008460:	7a3b      	ldrb	r3, [r7, #8]
 8008462:	2b01      	cmp	r3, #1
 8008464:	d103      	bne.n	800846e <IKS01A3_ENV_SENSOR_Init+0xea>
      {
        component_functions |= ENV_TEMPERATURE;
 8008466:	6a3b      	ldr	r3, [r7, #32]
 8008468:	f043 0301 	orr.w	r3, r3, #1
 800846c:	623b      	str	r3, [r7, #32]
      }
      if (cap.Humidity == 1U)
 800846e:	7abb      	ldrb	r3, [r7, #10]
 8008470:	2b01      	cmp	r3, #1
 8008472:	d103      	bne.n	800847c <IKS01A3_ENV_SENSOR_Init+0xf8>
      {
        component_functions |= ENV_HUMIDITY;
 8008474:	6a3b      	ldr	r3, [r7, #32]
 8008476:	f043 0304 	orr.w	r3, r3, #4
 800847a:	623b      	str	r3, [r7, #32]
      }
      if (cap.Pressure == 1U)
 800847c:	7a7b      	ldrb	r3, [r7, #9]
 800847e:	2b01      	cmp	r3, #1
 8008480:	d103      	bne.n	800848a <IKS01A3_ENV_SENSOR_Init+0x106>
      {
        component_functions |= ENV_PRESSURE;
 8008482:	6a3b      	ldr	r3, [r7, #32]
 8008484:	f043 0302 	orr.w	r3, r3, #2
 8008488:	623b      	str	r3, [r7, #32]
      }
      if (cap.Gas == 1U)
 800848a:	7afb      	ldrb	r3, [r7, #11]
 800848c:	2b01      	cmp	r3, #1
 800848e:	d143      	bne.n	8008518 <IKS01A3_ENV_SENSOR_Init+0x194>
      {
        component_functions |= ENV_GAS;
 8008490:	6a3b      	ldr	r3, [r7, #32]
 8008492:	f043 0308 	orr.w	r3, r3, #8
 8008496:	623b      	str	r3, [r7, #32]
      }
      break;
 8008498:	e03e      	b.n	8008518 <IKS01A3_ENV_SENSOR_Init+0x194>
#endif

#if (USE_IKS01A3_ENV_SENSOR_STTS751_0 == 1)
    case IKS01A3_STTS751_0:
      if (STTS751_0_Probe(Functions) != BSP_ERROR_NONE)
 800849a:	6838      	ldr	r0, [r7, #0]
 800849c:	f000 fa58 	bl	8008950 <STTS751_0_Probe>
 80084a0:	4603      	mov	r3, r0
 80084a2:	2b00      	cmp	r3, #0
 80084a4:	d002      	beq.n	80084ac <IKS01A3_ENV_SENSOR_Init+0x128>
      {
        return BSP_ERROR_NO_INIT;
 80084a6:	f04f 33ff 	mov.w	r3, #4294967295
 80084aa:	e06d      	b.n	8008588 <IKS01A3_ENV_SENSOR_Init+0x204>
      }
      if (EnvDrv[Instance]->GetCapabilities(EnvCompObj[Instance], (void *)&cap) != BSP_ERROR_NONE)
 80084ac:	4a38      	ldr	r2, [pc, #224]	@ (8008590 <IKS01A3_ENV_SENSOR_Init+0x20c>)
 80084ae:	687b      	ldr	r3, [r7, #4]
 80084b0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80084b4:	68db      	ldr	r3, [r3, #12]
 80084b6:	4937      	ldr	r1, [pc, #220]	@ (8008594 <IKS01A3_ENV_SENSOR_Init+0x210>)
 80084b8:	687a      	ldr	r2, [r7, #4]
 80084ba:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 80084be:	f107 0108 	add.w	r1, r7, #8
 80084c2:	4610      	mov	r0, r2
 80084c4:	4798      	blx	r3
 80084c6:	4603      	mov	r3, r0
 80084c8:	2b00      	cmp	r3, #0
 80084ca:	d002      	beq.n	80084d2 <IKS01A3_ENV_SENSOR_Init+0x14e>
      {
        return BSP_ERROR_UNKNOWN_COMPONENT;
 80084cc:	f06f 0306 	mvn.w	r3, #6
 80084d0:	e05a      	b.n	8008588 <IKS01A3_ENV_SENSOR_Init+0x204>
      }
      if (cap.Temperature == 1U)
 80084d2:	7a3b      	ldrb	r3, [r7, #8]
 80084d4:	2b01      	cmp	r3, #1
 80084d6:	d103      	bne.n	80084e0 <IKS01A3_ENV_SENSOR_Init+0x15c>
      {
        component_functions |= ENV_TEMPERATURE;
 80084d8:	6a3b      	ldr	r3, [r7, #32]
 80084da:	f043 0301 	orr.w	r3, r3, #1
 80084de:	623b      	str	r3, [r7, #32]
      }
      if (cap.Humidity == 1U)
 80084e0:	7abb      	ldrb	r3, [r7, #10]
 80084e2:	2b01      	cmp	r3, #1
 80084e4:	d103      	bne.n	80084ee <IKS01A3_ENV_SENSOR_Init+0x16a>
      {
        component_functions |= ENV_HUMIDITY;
 80084e6:	6a3b      	ldr	r3, [r7, #32]
 80084e8:	f043 0304 	orr.w	r3, r3, #4
 80084ec:	623b      	str	r3, [r7, #32]
      }
      if (cap.Pressure == 1U)
 80084ee:	7a7b      	ldrb	r3, [r7, #9]
 80084f0:	2b01      	cmp	r3, #1
 80084f2:	d103      	bne.n	80084fc <IKS01A3_ENV_SENSOR_Init+0x178>
      {
        component_functions |= ENV_PRESSURE;
 80084f4:	6a3b      	ldr	r3, [r7, #32]
 80084f6:	f043 0302 	orr.w	r3, r3, #2
 80084fa:	623b      	str	r3, [r7, #32]
      }
      if (cap.Gas == 1U)
 80084fc:	7afb      	ldrb	r3, [r7, #11]
 80084fe:	2b01      	cmp	r3, #1
 8008500:	d10c      	bne.n	800851c <IKS01A3_ENV_SENSOR_Init+0x198>
      {
        component_functions |= ENV_GAS;
 8008502:	6a3b      	ldr	r3, [r7, #32]
 8008504:	f043 0308 	orr.w	r3, r3, #8
 8008508:	623b      	str	r3, [r7, #32]
      }
      break;
 800850a:	e007      	b.n	800851c <IKS01A3_ENV_SENSOR_Init+0x198>
      }
      break;
#endif

    default:
      ret = BSP_ERROR_WRONG_PARAM;
 800850c:	f06f 0301 	mvn.w	r3, #1
 8008510:	62fb      	str	r3, [r7, #44]	@ 0x2c
      break;
 8008512:	e004      	b.n	800851e <IKS01A3_ENV_SENSOR_Init+0x19a>
      break;
 8008514:	bf00      	nop
 8008516:	e002      	b.n	800851e <IKS01A3_ENV_SENSOR_Init+0x19a>
      break;
 8008518:	bf00      	nop
 800851a:	e000      	b.n	800851e <IKS01A3_ENV_SENSOR_Init+0x19a>
      break;
 800851c:	bf00      	nop
  }

  if (ret != BSP_ERROR_NONE)
 800851e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008520:	2b00      	cmp	r3, #0
 8008522:	d001      	beq.n	8008528 <IKS01A3_ENV_SENSOR_Init+0x1a4>
  {
    return ret;
 8008524:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008526:	e02f      	b.n	8008588 <IKS01A3_ENV_SENSOR_Init+0x204>
  }

  for (i = 0; i < IKS01A3_ENV_FUNCTIONS_NBR; i++)
 8008528:	2300      	movs	r3, #0
 800852a:	627b      	str	r3, [r7, #36]	@ 0x24
 800852c:	e028      	b.n	8008580 <IKS01A3_ENV_SENSOR_Init+0x1fc>
  {
    if (((Functions & function) == function) && ((component_functions & function) == function))
 800852e:	683a      	ldr	r2, [r7, #0]
 8008530:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008532:	4013      	ands	r3, r2
 8008534:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8008536:	429a      	cmp	r2, r3
 8008538:	d11c      	bne.n	8008574 <IKS01A3_ENV_SENSOR_Init+0x1f0>
 800853a:	6a3a      	ldr	r2, [r7, #32]
 800853c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800853e:	4013      	ands	r3, r2
 8008540:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8008542:	429a      	cmp	r2, r3
 8008544:	d116      	bne.n	8008574 <IKS01A3_ENV_SENSOR_Init+0x1f0>
    {
      if (EnvFuncDrv[Instance][FunctionIndex[function]]->Enable(EnvCompObj[Instance]) != BSP_ERROR_NONE)
 8008546:	4a14      	ldr	r2, [pc, #80]	@ (8008598 <IKS01A3_ENV_SENSOR_Init+0x214>)
 8008548:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800854a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800854e:	4913      	ldr	r1, [pc, #76]	@ (800859c <IKS01A3_ENV_SENSOR_Init+0x218>)
 8008550:	687a      	ldr	r2, [r7, #4]
 8008552:	0092      	lsls	r2, r2, #2
 8008554:	4413      	add	r3, r2
 8008556:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800855a:	681b      	ldr	r3, [r3, #0]
 800855c:	490d      	ldr	r1, [pc, #52]	@ (8008594 <IKS01A3_ENV_SENSOR_Init+0x210>)
 800855e:	687a      	ldr	r2, [r7, #4]
 8008560:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8008564:	4610      	mov	r0, r2
 8008566:	4798      	blx	r3
 8008568:	4603      	mov	r3, r0
 800856a:	2b00      	cmp	r3, #0
 800856c:	d002      	beq.n	8008574 <IKS01A3_ENV_SENSOR_Init+0x1f0>
      {
        return BSP_ERROR_COMPONENT_FAILURE;
 800856e:	f06f 0304 	mvn.w	r3, #4
 8008572:	e009      	b.n	8008588 <IKS01A3_ENV_SENSOR_Init+0x204>
      }
    }

    function = function << 1;
 8008574:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008576:	005b      	lsls	r3, r3, #1
 8008578:	62bb      	str	r3, [r7, #40]	@ 0x28
  for (i = 0; i < IKS01A3_ENV_FUNCTIONS_NBR; i++)
 800857a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800857c:	3301      	adds	r3, #1
 800857e:	627b      	str	r3, [r7, #36]	@ 0x24
 8008580:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008582:	2b03      	cmp	r3, #3
 8008584:	d9d3      	bls.n	800852e <IKS01A3_ENV_SENSOR_Init+0x1aa>
  }

  return ret;
 8008586:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 8008588:	4618      	mov	r0, r3
 800858a:	3730      	adds	r7, #48	@ 0x30
 800858c:	46bd      	mov	sp, r7
 800858e:	bd80      	pop	{r7, pc}
 8008590:	20000488 	.word	0x20000488
 8008594:	2000044c 	.word	0x2000044c
 8008598:	20000158 	.word	0x20000158
 800859c:	20000458 	.word	0x20000458

080085a0 <IKS01A3_ENV_SENSOR_GetValue>:
  * @param  Function Environmental sensor function
  * @param  Value pointer to environmental sensor value
  * @retval BSP status
  */
int32_t IKS01A3_ENV_SENSOR_GetValue(uint32_t Instance, uint32_t Function, float_t *Value)
{
 80085a0:	b580      	push	{r7, lr}
 80085a2:	b086      	sub	sp, #24
 80085a4:	af00      	add	r7, sp, #0
 80085a6:	60f8      	str	r0, [r7, #12]
 80085a8:	60b9      	str	r1, [r7, #8]
 80085aa:	607a      	str	r2, [r7, #4]
  int32_t ret;

  if (Instance >= IKS01A3_ENV_INSTANCES_NBR)
 80085ac:	68fb      	ldr	r3, [r7, #12]
 80085ae:	2b02      	cmp	r3, #2
 80085b0:	d903      	bls.n	80085ba <IKS01A3_ENV_SENSOR_GetValue+0x1a>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 80085b2:	f06f 0301 	mvn.w	r3, #1
 80085b6:	617b      	str	r3, [r7, #20]
 80085b8:	e027      	b.n	800860a <IKS01A3_ENV_SENSOR_GetValue+0x6a>
  }
  else
  {
    if ((EnvCtx[Instance].Functions & Function) == Function)
 80085ba:	4a16      	ldr	r2, [pc, #88]	@ (8008614 <IKS01A3_ENV_SENSOR_GetValue+0x74>)
 80085bc:	68fb      	ldr	r3, [r7, #12]
 80085be:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80085c2:	68bb      	ldr	r3, [r7, #8]
 80085c4:	4013      	ands	r3, r2
 80085c6:	68ba      	ldr	r2, [r7, #8]
 80085c8:	429a      	cmp	r2, r3
 80085ca:	d11b      	bne.n	8008604 <IKS01A3_ENV_SENSOR_GetValue+0x64>
    {
      if (EnvFuncDrv[Instance][FunctionIndex[Function]]->GetValue(EnvCompObj[Instance], Value) != BSP_ERROR_NONE)
 80085cc:	4a12      	ldr	r2, [pc, #72]	@ (8008618 <IKS01A3_ENV_SENSOR_GetValue+0x78>)
 80085ce:	68bb      	ldr	r3, [r7, #8]
 80085d0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80085d4:	4911      	ldr	r1, [pc, #68]	@ (800861c <IKS01A3_ENV_SENSOR_GetValue+0x7c>)
 80085d6:	68fa      	ldr	r2, [r7, #12]
 80085d8:	0092      	lsls	r2, r2, #2
 80085da:	4413      	add	r3, r2
 80085dc:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80085e0:	691b      	ldr	r3, [r3, #16]
 80085e2:	490f      	ldr	r1, [pc, #60]	@ (8008620 <IKS01A3_ENV_SENSOR_GetValue+0x80>)
 80085e4:	68fa      	ldr	r2, [r7, #12]
 80085e6:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 80085ea:	6879      	ldr	r1, [r7, #4]
 80085ec:	4610      	mov	r0, r2
 80085ee:	4798      	blx	r3
 80085f0:	4603      	mov	r3, r0
 80085f2:	2b00      	cmp	r3, #0
 80085f4:	d003      	beq.n	80085fe <IKS01A3_ENV_SENSOR_GetValue+0x5e>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 80085f6:	f06f 0304 	mvn.w	r3, #4
 80085fa:	617b      	str	r3, [r7, #20]
 80085fc:	e005      	b.n	800860a <IKS01A3_ENV_SENSOR_GetValue+0x6a>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 80085fe:	2300      	movs	r3, #0
 8008600:	617b      	str	r3, [r7, #20]
 8008602:	e002      	b.n	800860a <IKS01A3_ENV_SENSOR_GetValue+0x6a>
      }
    }
    else
    {
      ret = BSP_ERROR_WRONG_PARAM;
 8008604:	f06f 0301 	mvn.w	r3, #1
 8008608:	617b      	str	r3, [r7, #20]
    }
  }

  return ret;
 800860a:	697b      	ldr	r3, [r7, #20]
}
 800860c:	4618      	mov	r0, r3
 800860e:	3718      	adds	r7, #24
 8008610:	46bd      	mov	sp, r7
 8008612:	bd80      	pop	{r7, pc}
 8008614:	20000494 	.word	0x20000494
 8008618:	20000158 	.word	0x20000158
 800861c:	20000458 	.word	0x20000458
 8008620:	2000044c 	.word	0x2000044c

08008624 <HTS221_0_Probe>:
  * @param  Functions Environmental sensor functions. Could be :
  *         - ENV_TEMPERATURE and/or ENV_HUMIDITY
  * @retval BSP status
  */
static int32_t HTS221_0_Probe(uint32_t Functions)
{
 8008624:	b580      	push	{r7, lr}
 8008626:	b092      	sub	sp, #72	@ 0x48
 8008628:	af00      	add	r7, sp, #0
 800862a:	6078      	str	r0, [r7, #4]
  HTS221_IO_t            io_ctx;
  uint8_t                id;
  int32_t                ret = BSP_ERROR_NONE;
 800862c:	2300      	movs	r3, #0
 800862e:	647b      	str	r3, [r7, #68]	@ 0x44
  static HTS221_Object_t hts221_obj_0;
  HTS221_Capabilities_t  cap;

  /* Configure the environmental sensor driver */
  io_ctx.BusType     = HTS221_I2C_BUS; /* I2C */
 8008630:	2300      	movs	r3, #0
 8008632:	62fb      	str	r3, [r7, #44]	@ 0x2c
  io_ctx.Address     = HTS221_I2C_ADDRESS;
 8008634:	23bf      	movs	r3, #191	@ 0xbf
 8008636:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
  io_ctx.Init        = IKS01A3_I2C_INIT;
 800863a:	4b51      	ldr	r3, [pc, #324]	@ (8008780 <HTS221_0_Probe+0x15c>)
 800863c:	627b      	str	r3, [r7, #36]	@ 0x24
  io_ctx.DeInit      = IKS01A3_I2C_DEINIT;
 800863e:	4b51      	ldr	r3, [pc, #324]	@ (8008784 <HTS221_0_Probe+0x160>)
 8008640:	62bb      	str	r3, [r7, #40]	@ 0x28
  io_ctx.ReadReg     = IKS01A3_I2C_READ_REG;
 8008642:	4b51      	ldr	r3, [pc, #324]	@ (8008788 <HTS221_0_Probe+0x164>)
 8008644:	63bb      	str	r3, [r7, #56]	@ 0x38
  io_ctx.WriteReg    = IKS01A3_I2C_WRITE_REG;
 8008646:	4b51      	ldr	r3, [pc, #324]	@ (800878c <HTS221_0_Probe+0x168>)
 8008648:	637b      	str	r3, [r7, #52]	@ 0x34
  io_ctx.GetTick     = IKS01A3_GET_TICK;
 800864a:	4b51      	ldr	r3, [pc, #324]	@ (8008790 <HTS221_0_Probe+0x16c>)
 800864c:	63fb      	str	r3, [r7, #60]	@ 0x3c

  if (HTS221_RegisterBusIO(&hts221_obj_0, &io_ctx) != HTS221_OK)
 800864e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8008652:	4619      	mov	r1, r3
 8008654:	484f      	ldr	r0, [pc, #316]	@ (8008794 <HTS221_0_Probe+0x170>)
 8008656:	f7f9 fb23 	bl	8001ca0 <HTS221_RegisterBusIO>
 800865a:	4603      	mov	r3, r0
 800865c:	2b00      	cmp	r3, #0
 800865e:	d003      	beq.n	8008668 <HTS221_0_Probe+0x44>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8008660:	f06f 0306 	mvn.w	r3, #6
 8008664:	647b      	str	r3, [r7, #68]	@ 0x44
 8008666:	e085      	b.n	8008774 <HTS221_0_Probe+0x150>
  }
  else if (HTS221_ReadID(&hts221_obj_0, &id) != HTS221_OK)
 8008668:	f107 0323 	add.w	r3, r7, #35	@ 0x23
 800866c:	4619      	mov	r1, r3
 800866e:	4849      	ldr	r0, [pc, #292]	@ (8008794 <HTS221_0_Probe+0x170>)
 8008670:	f7f9 fb9f 	bl	8001db2 <HTS221_ReadID>
 8008674:	4603      	mov	r3, r0
 8008676:	2b00      	cmp	r3, #0
 8008678:	d003      	beq.n	8008682 <HTS221_0_Probe+0x5e>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 800867a:	f06f 0306 	mvn.w	r3, #6
 800867e:	647b      	str	r3, [r7, #68]	@ 0x44
 8008680:	e078      	b.n	8008774 <HTS221_0_Probe+0x150>
  }
  else if (id != HTS221_ID)
 8008682:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8008686:	2bbc      	cmp	r3, #188	@ 0xbc
 8008688:	d003      	beq.n	8008692 <HTS221_0_Probe+0x6e>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 800868a:	f06f 0306 	mvn.w	r3, #6
 800868e:	647b      	str	r3, [r7, #68]	@ 0x44
 8008690:	e070      	b.n	8008774 <HTS221_0_Probe+0x150>
  }
  else
  {
    (void)HTS221_GetCapabilities(&hts221_obj_0, &cap);
 8008692:	f107 0308 	add.w	r3, r7, #8
 8008696:	4619      	mov	r1, r3
 8008698:	483e      	ldr	r0, [pc, #248]	@ (8008794 <HTS221_0_Probe+0x170>)
 800869a:	f7f9 fba1 	bl	8001de0 <HTS221_GetCapabilities>
    EnvCtx[IKS01A3_HTS221_0].Functions = ((uint32_t)cap.Temperature)
 800869e:	7a3b      	ldrb	r3, [r7, #8]
 80086a0:	461a      	mov	r2, r3
                                       | ((uint32_t)cap.Pressure << 1)
 80086a2:	7a7b      	ldrb	r3, [r7, #9]
 80086a4:	005b      	lsls	r3, r3, #1
 80086a6:	431a      	orrs	r2, r3
                                       | ((uint32_t)cap.Humidity << 2)
 80086a8:	7abb      	ldrb	r3, [r7, #10]
 80086aa:	009b      	lsls	r3, r3, #2
 80086ac:	431a      	orrs	r2, r3
                                       | ((uint32_t)cap.Gas      << 3);
 80086ae:	7afb      	ldrb	r3, [r7, #11]
 80086b0:	00db      	lsls	r3, r3, #3
 80086b2:	4313      	orrs	r3, r2
    EnvCtx[IKS01A3_HTS221_0].Functions = ((uint32_t)cap.Temperature)
 80086b4:	4a38      	ldr	r2, [pc, #224]	@ (8008798 <HTS221_0_Probe+0x174>)
 80086b6:	6013      	str	r3, [r2, #0]

    EnvCompObj[IKS01A3_HTS221_0] = &hts221_obj_0;
 80086b8:	4b38      	ldr	r3, [pc, #224]	@ (800879c <HTS221_0_Probe+0x178>)
 80086ba:	4a36      	ldr	r2, [pc, #216]	@ (8008794 <HTS221_0_Probe+0x170>)
 80086bc:	601a      	str	r2, [r3, #0]
    /* The second cast (void *) is added to bypass Misra R11.3 rule */
    EnvDrv[IKS01A3_HTS221_0] = (ENV_SENSOR_CommonDrv_t *)(void *)&HTS221_COMMON_Driver;
 80086be:	4b38      	ldr	r3, [pc, #224]	@ (80087a0 <HTS221_0_Probe+0x17c>)
 80086c0:	4a38      	ldr	r2, [pc, #224]	@ (80087a4 <HTS221_0_Probe+0x180>)
 80086c2:	601a      	str	r2, [r3, #0]

    if ((ret == BSP_ERROR_NONE) && ((Functions & ENV_TEMPERATURE) == ENV_TEMPERATURE) && (cap.Temperature == 1U))
 80086c4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80086c6:	2b00      	cmp	r3, #0
 80086c8:	d11d      	bne.n	8008706 <HTS221_0_Probe+0xe2>
 80086ca:	687b      	ldr	r3, [r7, #4]
 80086cc:	f003 0301 	and.w	r3, r3, #1
 80086d0:	2b00      	cmp	r3, #0
 80086d2:	d018      	beq.n	8008706 <HTS221_0_Probe+0xe2>
 80086d4:	7a3b      	ldrb	r3, [r7, #8]
 80086d6:	2b01      	cmp	r3, #1
 80086d8:	d115      	bne.n	8008706 <HTS221_0_Probe+0xe2>
    {
      /* The second cast (void *) is added to bypass Misra R11.3 rule */
      EnvFuncDrv[IKS01A3_HTS221_0][FunctionIndex[ENV_TEMPERATURE]] = (ENV_SENSOR_FuncDrv_t *)(void *)&HTS221_TEMP_Driver;
 80086da:	4b33      	ldr	r3, [pc, #204]	@ (80087a8 <HTS221_0_Probe+0x184>)
 80086dc:	685b      	ldr	r3, [r3, #4]
 80086de:	4a33      	ldr	r2, [pc, #204]	@ (80087ac <HTS221_0_Probe+0x188>)
 80086e0:	4933      	ldr	r1, [pc, #204]	@ (80087b0 <HTS221_0_Probe+0x18c>)
 80086e2:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

      if (EnvDrv[IKS01A3_HTS221_0]->Init(EnvCompObj[IKS01A3_HTS221_0]) != HTS221_OK)
 80086e6:	4b2e      	ldr	r3, [pc, #184]	@ (80087a0 <HTS221_0_Probe+0x17c>)
 80086e8:	681b      	ldr	r3, [r3, #0]
 80086ea:	681b      	ldr	r3, [r3, #0]
 80086ec:	4a2b      	ldr	r2, [pc, #172]	@ (800879c <HTS221_0_Probe+0x178>)
 80086ee:	6812      	ldr	r2, [r2, #0]
 80086f0:	4610      	mov	r0, r2
 80086f2:	4798      	blx	r3
 80086f4:	4603      	mov	r3, r0
 80086f6:	2b00      	cmp	r3, #0
 80086f8:	d003      	beq.n	8008702 <HTS221_0_Probe+0xde>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 80086fa:	f06f 0304 	mvn.w	r3, #4
 80086fe:	647b      	str	r3, [r7, #68]	@ 0x44
 8008700:	e001      	b.n	8008706 <HTS221_0_Probe+0xe2>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 8008702:	2300      	movs	r3, #0
 8008704:	647b      	str	r3, [r7, #68]	@ 0x44
      }
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & ENV_HUMIDITY) == ENV_HUMIDITY) && (cap.Humidity == 1U))
 8008706:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008708:	2b00      	cmp	r3, #0
 800870a:	d11d      	bne.n	8008748 <HTS221_0_Probe+0x124>
 800870c:	687b      	ldr	r3, [r7, #4]
 800870e:	f003 0304 	and.w	r3, r3, #4
 8008712:	2b00      	cmp	r3, #0
 8008714:	d018      	beq.n	8008748 <HTS221_0_Probe+0x124>
 8008716:	7abb      	ldrb	r3, [r7, #10]
 8008718:	2b01      	cmp	r3, #1
 800871a:	d115      	bne.n	8008748 <HTS221_0_Probe+0x124>
    {
      /* The second cast (void *) is added to bypass Misra R11.3 rule */
      EnvFuncDrv[IKS01A3_HTS221_0][FunctionIndex[ENV_HUMIDITY]] = (ENV_SENSOR_FuncDrv_t *)(void *)&HTS221_HUM_Driver;
 800871c:	4b22      	ldr	r3, [pc, #136]	@ (80087a8 <HTS221_0_Probe+0x184>)
 800871e:	691b      	ldr	r3, [r3, #16]
 8008720:	4a22      	ldr	r2, [pc, #136]	@ (80087ac <HTS221_0_Probe+0x188>)
 8008722:	4924      	ldr	r1, [pc, #144]	@ (80087b4 <HTS221_0_Probe+0x190>)
 8008724:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

      if (EnvDrv[IKS01A3_HTS221_0]->Init(EnvCompObj[IKS01A3_HTS221_0]) != HTS221_OK)
 8008728:	4b1d      	ldr	r3, [pc, #116]	@ (80087a0 <HTS221_0_Probe+0x17c>)
 800872a:	681b      	ldr	r3, [r3, #0]
 800872c:	681b      	ldr	r3, [r3, #0]
 800872e:	4a1b      	ldr	r2, [pc, #108]	@ (800879c <HTS221_0_Probe+0x178>)
 8008730:	6812      	ldr	r2, [r2, #0]
 8008732:	4610      	mov	r0, r2
 8008734:	4798      	blx	r3
 8008736:	4603      	mov	r3, r0
 8008738:	2b00      	cmp	r3, #0
 800873a:	d003      	beq.n	8008744 <HTS221_0_Probe+0x120>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 800873c:	f06f 0304 	mvn.w	r3, #4
 8008740:	647b      	str	r3, [r7, #68]	@ 0x44
 8008742:	e001      	b.n	8008748 <HTS221_0_Probe+0x124>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 8008744:	2300      	movs	r3, #0
 8008746:	647b      	str	r3, [r7, #68]	@ 0x44
      }
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & ENV_PRESSURE) == ENV_PRESSURE))
 8008748:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800874a:	2b00      	cmp	r3, #0
 800874c:	d107      	bne.n	800875e <HTS221_0_Probe+0x13a>
 800874e:	687b      	ldr	r3, [r7, #4]
 8008750:	f003 0302 	and.w	r3, r3, #2
 8008754:	2b00      	cmp	r3, #0
 8008756:	d002      	beq.n	800875e <HTS221_0_Probe+0x13a>
    {
      /* Return an error if the application try to initialize a function not supported by the component */
      ret = BSP_ERROR_COMPONENT_FAILURE;
 8008758:	f06f 0304 	mvn.w	r3, #4
 800875c:	647b      	str	r3, [r7, #68]	@ 0x44
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & ENV_GAS) == ENV_GAS))
 800875e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008760:	2b00      	cmp	r3, #0
 8008762:	d107      	bne.n	8008774 <HTS221_0_Probe+0x150>
 8008764:	687b      	ldr	r3, [r7, #4]
 8008766:	f003 0308 	and.w	r3, r3, #8
 800876a:	2b00      	cmp	r3, #0
 800876c:	d002      	beq.n	8008774 <HTS221_0_Probe+0x150>
    {
      /* Return an error if the application try to initialize a function not supported by the component */
      ret = BSP_ERROR_COMPONENT_FAILURE;
 800876e:	f06f 0304 	mvn.w	r3, #4
 8008772:	647b      	str	r3, [r7, #68]	@ 0x44
    }
  }

  return ret;
 8008774:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
}
 8008776:	4618      	mov	r0, r3
 8008778:	3748      	adds	r7, #72	@ 0x48
 800877a:	46bd      	mov	sp, r7
 800877c:	bd80      	pop	{r7, pc}
 800877e:	bf00      	nop
 8008780:	0800180d 	.word	0x0800180d
 8008784:	08001871 	.word	0x08001871
 8008788:	08001925 	.word	0x08001925
 800878c:	080018c1 	.word	0x080018c1
 8008790:	08001989 	.word	0x08001989
 8008794:	200004a0 	.word	0x200004a0
 8008798:	20000494 	.word	0x20000494
 800879c:	2000044c 	.word	0x2000044c
 80087a0:	20000488 	.word	0x20000488
 80087a4:	20000004 	.word	0x20000004
 80087a8:	20000158 	.word	0x20000158
 80087ac:	20000458 	.word	0x20000458
 80087b0:	20000028 	.word	0x20000028
 80087b4:	20000014 	.word	0x20000014

080087b8 <LPS22HH_0_Probe>:
  * @param  Functions Environmental sensor functions. Could be :
  *         - ENV_TEMPERATURE and/or ENV_PRESSURE
  * @retval BSP status
  */
static int32_t LPS22HH_0_Probe(uint32_t Functions)
{
 80087b8:	b580      	push	{r7, lr}
 80087ba:	b092      	sub	sp, #72	@ 0x48
 80087bc:	af00      	add	r7, sp, #0
 80087be:	6078      	str	r0, [r7, #4]
  LPS22HH_IO_t            io_ctx;
  uint8_t                 id;
  int32_t                 ret = BSP_ERROR_NONE;
 80087c0:	2300      	movs	r3, #0
 80087c2:	647b      	str	r3, [r7, #68]	@ 0x44
  static LPS22HH_Object_t lps22hh_obj_0;
  LPS22HH_Capabilities_t  cap;

  /* Configure the pressure driver */
  io_ctx.BusType     = LPS22HH_I2C_BUS; /* I2C */
 80087c4:	2300      	movs	r3, #0
 80087c6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  io_ctx.Address     = LPS22HH_I2C_ADD_H;
 80087c8:	23bb      	movs	r3, #187	@ 0xbb
 80087ca:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
  io_ctx.Init        = IKS01A3_I2C_INIT;
 80087ce:	4b52      	ldr	r3, [pc, #328]	@ (8008918 <LPS22HH_0_Probe+0x160>)
 80087d0:	627b      	str	r3, [r7, #36]	@ 0x24
  io_ctx.DeInit      = IKS01A3_I2C_DEINIT;
 80087d2:	4b52      	ldr	r3, [pc, #328]	@ (800891c <LPS22HH_0_Probe+0x164>)
 80087d4:	62bb      	str	r3, [r7, #40]	@ 0x28
  io_ctx.ReadReg     = IKS01A3_I2C_READ_REG;
 80087d6:	4b52      	ldr	r3, [pc, #328]	@ (8008920 <LPS22HH_0_Probe+0x168>)
 80087d8:	63bb      	str	r3, [r7, #56]	@ 0x38
  io_ctx.WriteReg    = IKS01A3_I2C_WRITE_REG;
 80087da:	4b52      	ldr	r3, [pc, #328]	@ (8008924 <LPS22HH_0_Probe+0x16c>)
 80087dc:	637b      	str	r3, [r7, #52]	@ 0x34
  io_ctx.GetTick     = IKS01A3_GET_TICK;
 80087de:	4b52      	ldr	r3, [pc, #328]	@ (8008928 <LPS22HH_0_Probe+0x170>)
 80087e0:	63fb      	str	r3, [r7, #60]	@ 0x3c

  if (LPS22HH_RegisterBusIO(&lps22hh_obj_0, &io_ctx) != LPS22HH_OK)
 80087e2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80087e6:	4619      	mov	r1, r3
 80087e8:	4850      	ldr	r0, [pc, #320]	@ (800892c <LPS22HH_0_Probe+0x174>)
 80087ea:	f7fc facf 	bl	8004d8c <LPS22HH_RegisterBusIO>
 80087ee:	4603      	mov	r3, r0
 80087f0:	2b00      	cmp	r3, #0
 80087f2:	d003      	beq.n	80087fc <LPS22HH_0_Probe+0x44>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 80087f4:	f06f 0306 	mvn.w	r3, #6
 80087f8:	647b      	str	r3, [r7, #68]	@ 0x44
 80087fa:	e087      	b.n	800890c <LPS22HH_0_Probe+0x154>
  }
  else if (LPS22HH_ReadID(&lps22hh_obj_0, &id) != LPS22HH_OK)
 80087fc:	f107 0323 	add.w	r3, r7, #35	@ 0x23
 8008800:	4619      	mov	r1, r3
 8008802:	484a      	ldr	r0, [pc, #296]	@ (800892c <LPS22HH_0_Probe+0x174>)
 8008804:	f7fc fb6b 	bl	8004ede <LPS22HH_ReadID>
 8008808:	4603      	mov	r3, r0
 800880a:	2b00      	cmp	r3, #0
 800880c:	d003      	beq.n	8008816 <LPS22HH_0_Probe+0x5e>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 800880e:	f06f 0306 	mvn.w	r3, #6
 8008812:	647b      	str	r3, [r7, #68]	@ 0x44
 8008814:	e07a      	b.n	800890c <LPS22HH_0_Probe+0x154>
  }
  else if (id != LPS22HH_ID)
 8008816:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800881a:	2bb3      	cmp	r3, #179	@ 0xb3
 800881c:	d003      	beq.n	8008826 <LPS22HH_0_Probe+0x6e>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 800881e:	f06f 0306 	mvn.w	r3, #6
 8008822:	647b      	str	r3, [r7, #68]	@ 0x44
 8008824:	e072      	b.n	800890c <LPS22HH_0_Probe+0x154>
  }
  else
  {
    (void)LPS22HH_GetCapabilities(&lps22hh_obj_0, &cap);
 8008826:	f107 0308 	add.w	r3, r7, #8
 800882a:	4619      	mov	r1, r3
 800882c:	483f      	ldr	r0, [pc, #252]	@ (800892c <LPS22HH_0_Probe+0x174>)
 800882e:	f7fc fb6d 	bl	8004f0c <LPS22HH_GetCapabilities>

    EnvCtx[IKS01A3_LPS22HH_0].Functions = ((uint32_t)cap.Temperature)
 8008832:	7a3b      	ldrb	r3, [r7, #8]
 8008834:	461a      	mov	r2, r3
                                        | ((uint32_t)cap.Pressure << 1)
 8008836:	7a7b      	ldrb	r3, [r7, #9]
 8008838:	005b      	lsls	r3, r3, #1
 800883a:	431a      	orrs	r2, r3
                                        | ((uint32_t)cap.Humidity << 2)
 800883c:	7abb      	ldrb	r3, [r7, #10]
 800883e:	009b      	lsls	r3, r3, #2
 8008840:	431a      	orrs	r2, r3
                                        | ((uint32_t)cap.Gas      << 3);
 8008842:	7afb      	ldrb	r3, [r7, #11]
 8008844:	00db      	lsls	r3, r3, #3
 8008846:	4313      	orrs	r3, r2
    EnvCtx[IKS01A3_LPS22HH_0].Functions = ((uint32_t)cap.Temperature)
 8008848:	4a39      	ldr	r2, [pc, #228]	@ (8008930 <LPS22HH_0_Probe+0x178>)
 800884a:	6053      	str	r3, [r2, #4]

    EnvCompObj[IKS01A3_LPS22HH_0] = &lps22hh_obj_0;
 800884c:	4b39      	ldr	r3, [pc, #228]	@ (8008934 <LPS22HH_0_Probe+0x17c>)
 800884e:	4a37      	ldr	r2, [pc, #220]	@ (800892c <LPS22HH_0_Probe+0x174>)
 8008850:	605a      	str	r2, [r3, #4]
    /* The second cast (void *) is added to bypass Misra R11.3 rule */
    EnvDrv[IKS01A3_LPS22HH_0] = (ENV_SENSOR_CommonDrv_t *)(void *)&LPS22HH_COMMON_Driver;
 8008852:	4b39      	ldr	r3, [pc, #228]	@ (8008938 <LPS22HH_0_Probe+0x180>)
 8008854:	4a39      	ldr	r2, [pc, #228]	@ (800893c <LPS22HH_0_Probe+0x184>)
 8008856:	605a      	str	r2, [r3, #4]

    if ((ret == BSP_ERROR_NONE) && ((Functions & ENV_TEMPERATURE) == ENV_TEMPERATURE) && (cap.Temperature == 1U))
 8008858:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800885a:	2b00      	cmp	r3, #0
 800885c:	d11e      	bne.n	800889c <LPS22HH_0_Probe+0xe4>
 800885e:	687b      	ldr	r3, [r7, #4]
 8008860:	f003 0301 	and.w	r3, r3, #1
 8008864:	2b00      	cmp	r3, #0
 8008866:	d019      	beq.n	800889c <LPS22HH_0_Probe+0xe4>
 8008868:	7a3b      	ldrb	r3, [r7, #8]
 800886a:	2b01      	cmp	r3, #1
 800886c:	d116      	bne.n	800889c <LPS22HH_0_Probe+0xe4>
    {
      /* The second cast (void *) is added to bypass Misra R11.3 rule */
      EnvFuncDrv[IKS01A3_LPS22HH_0][FunctionIndex[ENV_TEMPERATURE]] = (ENV_SENSOR_FuncDrv_t *)(void *)&LPS22HH_TEMP_Driver;
 800886e:	4b34      	ldr	r3, [pc, #208]	@ (8008940 <LPS22HH_0_Probe+0x188>)
 8008870:	685b      	ldr	r3, [r3, #4]
 8008872:	4a34      	ldr	r2, [pc, #208]	@ (8008944 <LPS22HH_0_Probe+0x18c>)
 8008874:	3304      	adds	r3, #4
 8008876:	4934      	ldr	r1, [pc, #208]	@ (8008948 <LPS22HH_0_Probe+0x190>)
 8008878:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

      if (EnvDrv[IKS01A3_LPS22HH_0]->Init(EnvCompObj[IKS01A3_LPS22HH_0]) != LPS22HH_OK)
 800887c:	4b2e      	ldr	r3, [pc, #184]	@ (8008938 <LPS22HH_0_Probe+0x180>)
 800887e:	685b      	ldr	r3, [r3, #4]
 8008880:	681b      	ldr	r3, [r3, #0]
 8008882:	4a2c      	ldr	r2, [pc, #176]	@ (8008934 <LPS22HH_0_Probe+0x17c>)
 8008884:	6852      	ldr	r2, [r2, #4]
 8008886:	4610      	mov	r0, r2
 8008888:	4798      	blx	r3
 800888a:	4603      	mov	r3, r0
 800888c:	2b00      	cmp	r3, #0
 800888e:	d003      	beq.n	8008898 <LPS22HH_0_Probe+0xe0>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8008890:	f06f 0304 	mvn.w	r3, #4
 8008894:	647b      	str	r3, [r7, #68]	@ 0x44
 8008896:	e001      	b.n	800889c <LPS22HH_0_Probe+0xe4>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 8008898:	2300      	movs	r3, #0
 800889a:	647b      	str	r3, [r7, #68]	@ 0x44
      }
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & ENV_PRESSURE) == ENV_PRESSURE) && (cap.Pressure == 1U))
 800889c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800889e:	2b00      	cmp	r3, #0
 80088a0:	d11e      	bne.n	80088e0 <LPS22HH_0_Probe+0x128>
 80088a2:	687b      	ldr	r3, [r7, #4]
 80088a4:	f003 0302 	and.w	r3, r3, #2
 80088a8:	2b00      	cmp	r3, #0
 80088aa:	d019      	beq.n	80088e0 <LPS22HH_0_Probe+0x128>
 80088ac:	7a7b      	ldrb	r3, [r7, #9]
 80088ae:	2b01      	cmp	r3, #1
 80088b0:	d116      	bne.n	80088e0 <LPS22HH_0_Probe+0x128>
    {
      /* The second cast (void *) is added to bypass Misra R11.3 rule */
      EnvFuncDrv[IKS01A3_LPS22HH_0][FunctionIndex[ENV_PRESSURE]] = (ENV_SENSOR_FuncDrv_t *)(void *)&LPS22HH_PRESS_Driver;
 80088b2:	4b23      	ldr	r3, [pc, #140]	@ (8008940 <LPS22HH_0_Probe+0x188>)
 80088b4:	689b      	ldr	r3, [r3, #8]
 80088b6:	4a23      	ldr	r2, [pc, #140]	@ (8008944 <LPS22HH_0_Probe+0x18c>)
 80088b8:	3304      	adds	r3, #4
 80088ba:	4924      	ldr	r1, [pc, #144]	@ (800894c <LPS22HH_0_Probe+0x194>)
 80088bc:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

      if (EnvDrv[IKS01A3_LPS22HH_0]->Init(EnvCompObj[IKS01A3_LPS22HH_0]) != LPS22HH_OK)
 80088c0:	4b1d      	ldr	r3, [pc, #116]	@ (8008938 <LPS22HH_0_Probe+0x180>)
 80088c2:	685b      	ldr	r3, [r3, #4]
 80088c4:	681b      	ldr	r3, [r3, #0]
 80088c6:	4a1b      	ldr	r2, [pc, #108]	@ (8008934 <LPS22HH_0_Probe+0x17c>)
 80088c8:	6852      	ldr	r2, [r2, #4]
 80088ca:	4610      	mov	r0, r2
 80088cc:	4798      	blx	r3
 80088ce:	4603      	mov	r3, r0
 80088d0:	2b00      	cmp	r3, #0
 80088d2:	d003      	beq.n	80088dc <LPS22HH_0_Probe+0x124>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 80088d4:	f06f 0304 	mvn.w	r3, #4
 80088d8:	647b      	str	r3, [r7, #68]	@ 0x44
 80088da:	e001      	b.n	80088e0 <LPS22HH_0_Probe+0x128>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 80088dc:	2300      	movs	r3, #0
 80088de:	647b      	str	r3, [r7, #68]	@ 0x44
      }
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & ENV_HUMIDITY) == ENV_HUMIDITY))
 80088e0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80088e2:	2b00      	cmp	r3, #0
 80088e4:	d107      	bne.n	80088f6 <LPS22HH_0_Probe+0x13e>
 80088e6:	687b      	ldr	r3, [r7, #4]
 80088e8:	f003 0304 	and.w	r3, r3, #4
 80088ec:	2b00      	cmp	r3, #0
 80088ee:	d002      	beq.n	80088f6 <LPS22HH_0_Probe+0x13e>
    {
      /* Return an error if the application try to initialize a function not supported by the component */
      ret = BSP_ERROR_COMPONENT_FAILURE;
 80088f0:	f06f 0304 	mvn.w	r3, #4
 80088f4:	647b      	str	r3, [r7, #68]	@ 0x44
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & ENV_GAS) == ENV_GAS))
 80088f6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80088f8:	2b00      	cmp	r3, #0
 80088fa:	d107      	bne.n	800890c <LPS22HH_0_Probe+0x154>
 80088fc:	687b      	ldr	r3, [r7, #4]
 80088fe:	f003 0308 	and.w	r3, r3, #8
 8008902:	2b00      	cmp	r3, #0
 8008904:	d002      	beq.n	800890c <LPS22HH_0_Probe+0x154>
    {
      /* Return an error if the application try to initialize a function not supported by the component */
      ret = BSP_ERROR_COMPONENT_FAILURE;
 8008906:	f06f 0304 	mvn.w	r3, #4
 800890a:	647b      	str	r3, [r7, #68]	@ 0x44
    }
  }
  return ret;
 800890c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
}
 800890e:	4618      	mov	r0, r3
 8008910:	3748      	adds	r7, #72	@ 0x48
 8008912:	46bd      	mov	sp, r7
 8008914:	bd80      	pop	{r7, pc}
 8008916:	bf00      	nop
 8008918:	0800180d 	.word	0x0800180d
 800891c:	08001871 	.word	0x08001871
 8008920:	08001925 	.word	0x08001925
 8008924:	080018c1 	.word	0x080018c1
 8008928:	08001989 	.word	0x08001989
 800892c:	200004d4 	.word	0x200004d4
 8008930:	20000494 	.word	0x20000494
 8008934:	2000044c 	.word	0x2000044c
 8008938:	20000488 	.word	0x20000488
 800893c:	200000a4 	.word	0x200000a4
 8008940:	20000158 	.word	0x20000158
 8008944:	20000458 	.word	0x20000458
 8008948:	200000c8 	.word	0x200000c8
 800894c:	200000b4 	.word	0x200000b4

08008950 <STTS751_0_Probe>:
  * @param  Functions Environmental sensor functions. Could be :
  *         - ENV_TEMPERATURE
  * @retval BSP status
  */
static int32_t STTS751_0_Probe(uint32_t Functions)
{
 8008950:	b580      	push	{r7, lr}
 8008952:	b092      	sub	sp, #72	@ 0x48
 8008954:	af00      	add	r7, sp, #0
 8008956:	6078      	str	r0, [r7, #4]
  STTS751_IO_t            io_ctx;
  uint8_t                 id;
  int32_t                 ret = BSP_ERROR_NONE;
 8008958:	2300      	movs	r3, #0
 800895a:	647b      	str	r3, [r7, #68]	@ 0x44
  static STTS751_Object_t stts751_obj_0;
  STTS751_Capabilities_t  cap;

  /* Configure the pressure driver */
  io_ctx.BusType     = STTS751_I2C_BUS; /* I2C */
 800895c:	2300      	movs	r3, #0
 800895e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  io_ctx.Address     = STTS751_1xxxx_ADD_7K5;
 8008960:	2395      	movs	r3, #149	@ 0x95
 8008962:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
  io_ctx.Init        = IKS01A3_I2C_INIT;
 8008966:	4b46      	ldr	r3, [pc, #280]	@ (8008a80 <STTS751_0_Probe+0x130>)
 8008968:	627b      	str	r3, [r7, #36]	@ 0x24
  io_ctx.DeInit      = IKS01A3_I2C_DEINIT;
 800896a:	4b46      	ldr	r3, [pc, #280]	@ (8008a84 <STTS751_0_Probe+0x134>)
 800896c:	62bb      	str	r3, [r7, #40]	@ 0x28
  io_ctx.ReadReg     = IKS01A3_I2C_READ_REG;
 800896e:	4b46      	ldr	r3, [pc, #280]	@ (8008a88 <STTS751_0_Probe+0x138>)
 8008970:	63bb      	str	r3, [r7, #56]	@ 0x38
  io_ctx.WriteReg    = IKS01A3_I2C_WRITE_REG;
 8008972:	4b46      	ldr	r3, [pc, #280]	@ (8008a8c <STTS751_0_Probe+0x13c>)
 8008974:	637b      	str	r3, [r7, #52]	@ 0x34
  io_ctx.GetTick     = IKS01A3_GET_TICK;
 8008976:	4b46      	ldr	r3, [pc, #280]	@ (8008a90 <STTS751_0_Probe+0x140>)
 8008978:	63fb      	str	r3, [r7, #60]	@ 0x3c

  if (STTS751_RegisterBusIO(&stts751_obj_0, &io_ctx) != STTS751_OK)
 800897a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800897e:	4619      	mov	r1, r3
 8008980:	4844      	ldr	r0, [pc, #272]	@ (8008a94 <STTS751_0_Probe+0x144>)
 8008982:	f7ff f81f 	bl	80079c4 <STTS751_RegisterBusIO>
 8008986:	4603      	mov	r3, r0
 8008988:	2b00      	cmp	r3, #0
 800898a:	d003      	beq.n	8008994 <STTS751_0_Probe+0x44>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 800898c:	f06f 0306 	mvn.w	r3, #6
 8008990:	647b      	str	r3, [r7, #68]	@ 0x44
 8008992:	e070      	b.n	8008a76 <STTS751_0_Probe+0x126>
  }
  else if (STTS751_ReadID(&stts751_obj_0, &id) != STTS751_OK)
 8008994:	f107 0323 	add.w	r3, r7, #35	@ 0x23
 8008998:	4619      	mov	r1, r3
 800899a:	483e      	ldr	r0, [pc, #248]	@ (8008a94 <STTS751_0_Probe+0x144>)
 800899c:	f7ff f8b1 	bl	8007b02 <STTS751_ReadID>
 80089a0:	4603      	mov	r3, r0
 80089a2:	2b00      	cmp	r3, #0
 80089a4:	d003      	beq.n	80089ae <STTS751_0_Probe+0x5e>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 80089a6:	f06f 0306 	mvn.w	r3, #6
 80089aa:	647b      	str	r3, [r7, #68]	@ 0x44
 80089ac:	e063      	b.n	8008a76 <STTS751_0_Probe+0x126>
  }
  else if (id != STTS751_ID_MAN)
 80089ae:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80089b2:	2b53      	cmp	r3, #83	@ 0x53
 80089b4:	d003      	beq.n	80089be <STTS751_0_Probe+0x6e>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 80089b6:	f06f 0306 	mvn.w	r3, #6
 80089ba:	647b      	str	r3, [r7, #68]	@ 0x44
 80089bc:	e05b      	b.n	8008a76 <STTS751_0_Probe+0x126>
  }
  else
  {
    (void)STTS751_GetCapabilities(&stts751_obj_0, &cap);
 80089be:	f107 0308 	add.w	r3, r7, #8
 80089c2:	4619      	mov	r1, r3
 80089c4:	4833      	ldr	r0, [pc, #204]	@ (8008a94 <STTS751_0_Probe+0x144>)
 80089c6:	f7ff f8b7 	bl	8007b38 <STTS751_GetCapabilities>

    EnvCtx[IKS01A3_STTS751_0].Functions = ((uint32_t)cap.Temperature)
 80089ca:	7a3b      	ldrb	r3, [r7, #8]
 80089cc:	461a      	mov	r2, r3
                                        | ((uint32_t)cap.Pressure << 1)
 80089ce:	7a7b      	ldrb	r3, [r7, #9]
 80089d0:	005b      	lsls	r3, r3, #1
 80089d2:	431a      	orrs	r2, r3
                                        | ((uint32_t)cap.Humidity << 2)
 80089d4:	7abb      	ldrb	r3, [r7, #10]
 80089d6:	009b      	lsls	r3, r3, #2
 80089d8:	431a      	orrs	r2, r3
                                        | ((uint32_t)cap.Gas      << 3);
 80089da:	7afb      	ldrb	r3, [r7, #11]
 80089dc:	00db      	lsls	r3, r3, #3
 80089de:	4313      	orrs	r3, r2
    EnvCtx[IKS01A3_STTS751_0].Functions = ((uint32_t)cap.Temperature)
 80089e0:	4a2d      	ldr	r2, [pc, #180]	@ (8008a98 <STTS751_0_Probe+0x148>)
 80089e2:	6093      	str	r3, [r2, #8]

    EnvCompObj[IKS01A3_STTS751_0] = &stts751_obj_0;
 80089e4:	4b2d      	ldr	r3, [pc, #180]	@ (8008a9c <STTS751_0_Probe+0x14c>)
 80089e6:	4a2b      	ldr	r2, [pc, #172]	@ (8008a94 <STTS751_0_Probe+0x144>)
 80089e8:	609a      	str	r2, [r3, #8]
    /* The second cast (void *) is added to bypass Misra R11.3 rule */
    EnvDrv[IKS01A3_STTS751_0] = (ENV_SENSOR_CommonDrv_t *)(void *)&STTS751_COMMON_Driver;
 80089ea:	4b2d      	ldr	r3, [pc, #180]	@ (8008aa0 <STTS751_0_Probe+0x150>)
 80089ec:	4a2d      	ldr	r2, [pc, #180]	@ (8008aa4 <STTS751_0_Probe+0x154>)
 80089ee:	609a      	str	r2, [r3, #8]

    if ((ret == BSP_ERROR_NONE) && ((Functions & ENV_TEMPERATURE) == ENV_TEMPERATURE) && (cap.Temperature == 1U))
 80089f0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80089f2:	2b00      	cmp	r3, #0
 80089f4:	d11e      	bne.n	8008a34 <STTS751_0_Probe+0xe4>
 80089f6:	687b      	ldr	r3, [r7, #4]
 80089f8:	f003 0301 	and.w	r3, r3, #1
 80089fc:	2b00      	cmp	r3, #0
 80089fe:	d019      	beq.n	8008a34 <STTS751_0_Probe+0xe4>
 8008a00:	7a3b      	ldrb	r3, [r7, #8]
 8008a02:	2b01      	cmp	r3, #1
 8008a04:	d116      	bne.n	8008a34 <STTS751_0_Probe+0xe4>
    {
      /* The second cast (void *) is added to bypass Misra R11.3 rule */
      EnvFuncDrv[IKS01A3_STTS751_0][FunctionIndex[ENV_TEMPERATURE]] = (ENV_SENSOR_FuncDrv_t *)(void *)&STTS751_TEMP_Driver;
 8008a06:	4b28      	ldr	r3, [pc, #160]	@ (8008aa8 <STTS751_0_Probe+0x158>)
 8008a08:	685b      	ldr	r3, [r3, #4]
 8008a0a:	4a28      	ldr	r2, [pc, #160]	@ (8008aac <STTS751_0_Probe+0x15c>)
 8008a0c:	3308      	adds	r3, #8
 8008a0e:	4928      	ldr	r1, [pc, #160]	@ (8008ab0 <STTS751_0_Probe+0x160>)
 8008a10:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

      if (EnvDrv[IKS01A3_STTS751_0]->Init(EnvCompObj[IKS01A3_STTS751_0]) != STTS751_OK)
 8008a14:	4b22      	ldr	r3, [pc, #136]	@ (8008aa0 <STTS751_0_Probe+0x150>)
 8008a16:	689b      	ldr	r3, [r3, #8]
 8008a18:	681b      	ldr	r3, [r3, #0]
 8008a1a:	4a20      	ldr	r2, [pc, #128]	@ (8008a9c <STTS751_0_Probe+0x14c>)
 8008a1c:	6892      	ldr	r2, [r2, #8]
 8008a1e:	4610      	mov	r0, r2
 8008a20:	4798      	blx	r3
 8008a22:	4603      	mov	r3, r0
 8008a24:	2b00      	cmp	r3, #0
 8008a26:	d003      	beq.n	8008a30 <STTS751_0_Probe+0xe0>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8008a28:	f06f 0304 	mvn.w	r3, #4
 8008a2c:	647b      	str	r3, [r7, #68]	@ 0x44
 8008a2e:	e001      	b.n	8008a34 <STTS751_0_Probe+0xe4>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 8008a30:	2300      	movs	r3, #0
 8008a32:	647b      	str	r3, [r7, #68]	@ 0x44
      }
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & ENV_HUMIDITY) == ENV_HUMIDITY))
 8008a34:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008a36:	2b00      	cmp	r3, #0
 8008a38:	d107      	bne.n	8008a4a <STTS751_0_Probe+0xfa>
 8008a3a:	687b      	ldr	r3, [r7, #4]
 8008a3c:	f003 0304 	and.w	r3, r3, #4
 8008a40:	2b00      	cmp	r3, #0
 8008a42:	d002      	beq.n	8008a4a <STTS751_0_Probe+0xfa>
    {
      /* Return an error if the application try to initialize a function not supported by the component */
      ret = BSP_ERROR_COMPONENT_FAILURE;
 8008a44:	f06f 0304 	mvn.w	r3, #4
 8008a48:	647b      	str	r3, [r7, #68]	@ 0x44
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & ENV_PRESSURE) == ENV_PRESSURE))
 8008a4a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008a4c:	2b00      	cmp	r3, #0
 8008a4e:	d107      	bne.n	8008a60 <STTS751_0_Probe+0x110>
 8008a50:	687b      	ldr	r3, [r7, #4]
 8008a52:	f003 0302 	and.w	r3, r3, #2
 8008a56:	2b00      	cmp	r3, #0
 8008a58:	d002      	beq.n	8008a60 <STTS751_0_Probe+0x110>
    {
      /* Return an error if the application try to initialize a function not supported by the component */
      ret = BSP_ERROR_COMPONENT_FAILURE;
 8008a5a:	f06f 0304 	mvn.w	r3, #4
 8008a5e:	647b      	str	r3, [r7, #68]	@ 0x44
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & ENV_GAS) == ENV_GAS))
 8008a60:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008a62:	2b00      	cmp	r3, #0
 8008a64:	d107      	bne.n	8008a76 <STTS751_0_Probe+0x126>
 8008a66:	687b      	ldr	r3, [r7, #4]
 8008a68:	f003 0308 	and.w	r3, r3, #8
 8008a6c:	2b00      	cmp	r3, #0
 8008a6e:	d002      	beq.n	8008a76 <STTS751_0_Probe+0x126>
    {
      /* Return an error if the application try to initialize a function not supported by the component */
      ret = BSP_ERROR_COMPONENT_FAILURE;
 8008a70:	f06f 0304 	mvn.w	r3, #4
 8008a74:	647b      	str	r3, [r7, #68]	@ 0x44
    }
  }
  return ret;
 8008a76:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
}
 8008a78:	4618      	mov	r0, r3
 8008a7a:	3748      	adds	r7, #72	@ 0x48
 8008a7c:	46bd      	mov	sp, r7
 8008a7e:	bd80      	pop	{r7, pc}
 8008a80:	0800180d 	.word	0x0800180d
 8008a84:	08001871 	.word	0x08001871
 8008a88:	08001925 	.word	0x08001925
 8008a8c:	080018c1 	.word	0x080018c1
 8008a90:	08001989 	.word	0x08001989
 8008a94:	20000508 	.word	0x20000508
 8008a98:	20000494 	.word	0x20000494
 8008a9c:	2000044c 	.word	0x2000044c
 8008aa0:	20000488 	.word	0x20000488
 8008aa4:	20000134 	.word	0x20000134
 8008aa8:	20000158 	.word	0x20000158
 8008aac:	20000458 	.word	0x20000458
 8008ab0:	20000144 	.word	0x20000144

08008ab4 <IKS01A3_MOTION_SENSOR_Init>:
  *         - MOTION_ACCELERO for instance 1
  *         - MOTION_MAGNETO for instance 2
  * @retval BSP status
  */
int32_t IKS01A3_MOTION_SENSOR_Init(uint32_t Instance, uint32_t Functions)
{
 8008ab4:	b580      	push	{r7, lr}
 8008ab6:	b08e      	sub	sp, #56	@ 0x38
 8008ab8:	af00      	add	r7, sp, #0
 8008aba:	6078      	str	r0, [r7, #4]
 8008abc:	6039      	str	r1, [r7, #0]
  int32_t ret = BSP_ERROR_NONE;
 8008abe:	2300      	movs	r3, #0
 8008ac0:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t function = MOTION_GYRO;
 8008ac2:	2301      	movs	r3, #1
 8008ac4:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t i;
  uint32_t component_functions = 0;
 8008ac6:	2300      	movs	r3, #0
 8008ac8:	62bb      	str	r3, [r7, #40]	@ 0x28
  IKS01A3_MOTION_SENSOR_Capabilities_t cap;

  switch (Instance)
 8008aca:	687b      	ldr	r3, [r7, #4]
 8008acc:	2b02      	cmp	r3, #2
 8008ace:	d06e      	beq.n	8008bae <IKS01A3_MOTION_SENSOR_Init+0xfa>
 8008ad0:	687b      	ldr	r3, [r7, #4]
 8008ad2:	2b02      	cmp	r3, #2
 8008ad4:	f200 809d 	bhi.w	8008c12 <IKS01A3_MOTION_SENSOR_Init+0x15e>
 8008ad8:	687b      	ldr	r3, [r7, #4]
 8008ada:	2b00      	cmp	r3, #0
 8008adc:	d003      	beq.n	8008ae6 <IKS01A3_MOTION_SENSOR_Init+0x32>
 8008ade:	687b      	ldr	r3, [r7, #4]
 8008ae0:	2b01      	cmp	r3, #1
 8008ae2:	d032      	beq.n	8008b4a <IKS01A3_MOTION_SENSOR_Init+0x96>
 8008ae4:	e095      	b.n	8008c12 <IKS01A3_MOTION_SENSOR_Init+0x15e>
  {
#if (USE_IKS01A3_MOTION_SENSOR_LSM6DSO_0 == 1)
    case IKS01A3_LSM6DSO_0:
      if (LSM6DSO_0_Probe(Functions) != BSP_ERROR_NONE)
 8008ae6:	6838      	ldr	r0, [r7, #0]
 8008ae8:	f000 f8e0 	bl	8008cac <LSM6DSO_0_Probe>
 8008aec:	4603      	mov	r3, r0
 8008aee:	2b00      	cmp	r3, #0
 8008af0:	d002      	beq.n	8008af8 <IKS01A3_MOTION_SENSOR_Init+0x44>
      {
        return BSP_ERROR_NO_INIT;
 8008af2:	f04f 33ff 	mov.w	r3, #4294967295
 8008af6:	e0cc      	b.n	8008c92 <IKS01A3_MOTION_SENSOR_Init+0x1de>
      }
      if (MotionDrv[Instance]->GetCapabilities(MotionCompObj[Instance], (void *)&cap) != BSP_ERROR_NONE)
 8008af8:	4a68      	ldr	r2, [pc, #416]	@ (8008c9c <IKS01A3_MOTION_SENSOR_Init+0x1e8>)
 8008afa:	687b      	ldr	r3, [r7, #4]
 8008afc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008b00:	68db      	ldr	r3, [r3, #12]
 8008b02:	4967      	ldr	r1, [pc, #412]	@ (8008ca0 <IKS01A3_MOTION_SENSOR_Init+0x1ec>)
 8008b04:	687a      	ldr	r2, [r7, #4]
 8008b06:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8008b0a:	f107 010c 	add.w	r1, r7, #12
 8008b0e:	4610      	mov	r0, r2
 8008b10:	4798      	blx	r3
 8008b12:	4603      	mov	r3, r0
 8008b14:	2b00      	cmp	r3, #0
 8008b16:	d002      	beq.n	8008b1e <IKS01A3_MOTION_SENSOR_Init+0x6a>
      {
        return BSP_ERROR_UNKNOWN_COMPONENT;
 8008b18:	f06f 0306 	mvn.w	r3, #6
 8008b1c:	e0b9      	b.n	8008c92 <IKS01A3_MOTION_SENSOR_Init+0x1de>
      }
      if (cap.Acc == 1U)
 8008b1e:	7b3b      	ldrb	r3, [r7, #12]
 8008b20:	2b01      	cmp	r3, #1
 8008b22:	d103      	bne.n	8008b2c <IKS01A3_MOTION_SENSOR_Init+0x78>
      {
        component_functions |= MOTION_ACCELERO;
 8008b24:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008b26:	f043 0302 	orr.w	r3, r3, #2
 8008b2a:	62bb      	str	r3, [r7, #40]	@ 0x28
      }
      if (cap.Gyro == 1U)
 8008b2c:	7b7b      	ldrb	r3, [r7, #13]
 8008b2e:	2b01      	cmp	r3, #1
 8008b30:	d103      	bne.n	8008b3a <IKS01A3_MOTION_SENSOR_Init+0x86>
      {
        component_functions |= MOTION_GYRO;
 8008b32:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008b34:	f043 0301 	orr.w	r3, r3, #1
 8008b38:	62bb      	str	r3, [r7, #40]	@ 0x28
      }
      if (cap.Magneto == 1U)
 8008b3a:	7bbb      	ldrb	r3, [r7, #14]
 8008b3c:	2b01      	cmp	r3, #1
 8008b3e:	d16c      	bne.n	8008c1a <IKS01A3_MOTION_SENSOR_Init+0x166>
      {
        component_functions |= MOTION_MAGNETO;
 8008b40:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008b42:	f043 0304 	orr.w	r3, r3, #4
 8008b46:	62bb      	str	r3, [r7, #40]	@ 0x28
      }
      break;
 8008b48:	e067      	b.n	8008c1a <IKS01A3_MOTION_SENSOR_Init+0x166>
#endif

#if (USE_IKS01A3_MOTION_SENSOR_LIS2DW12_0 == 1)
    case IKS01A3_LIS2DW12_0:
      if (LIS2DW12_0_Probe(Functions) != BSP_ERROR_NONE)
 8008b4a:	6838      	ldr	r0, [r7, #0]
 8008b4c:	f000 f978 	bl	8008e40 <LIS2DW12_0_Probe>
 8008b50:	4603      	mov	r3, r0
 8008b52:	2b00      	cmp	r3, #0
 8008b54:	d002      	beq.n	8008b5c <IKS01A3_MOTION_SENSOR_Init+0xa8>
      {
        return BSP_ERROR_NO_INIT;
 8008b56:	f04f 33ff 	mov.w	r3, #4294967295
 8008b5a:	e09a      	b.n	8008c92 <IKS01A3_MOTION_SENSOR_Init+0x1de>
      }
      if (MotionDrv[Instance]->GetCapabilities(MotionCompObj[Instance], (void *)&cap) != BSP_ERROR_NONE)
 8008b5c:	4a4f      	ldr	r2, [pc, #316]	@ (8008c9c <IKS01A3_MOTION_SENSOR_Init+0x1e8>)
 8008b5e:	687b      	ldr	r3, [r7, #4]
 8008b60:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008b64:	68db      	ldr	r3, [r3, #12]
 8008b66:	494e      	ldr	r1, [pc, #312]	@ (8008ca0 <IKS01A3_MOTION_SENSOR_Init+0x1ec>)
 8008b68:	687a      	ldr	r2, [r7, #4]
 8008b6a:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8008b6e:	f107 010c 	add.w	r1, r7, #12
 8008b72:	4610      	mov	r0, r2
 8008b74:	4798      	blx	r3
 8008b76:	4603      	mov	r3, r0
 8008b78:	2b00      	cmp	r3, #0
 8008b7a:	d002      	beq.n	8008b82 <IKS01A3_MOTION_SENSOR_Init+0xce>
      {
        return BSP_ERROR_UNKNOWN_COMPONENT;
 8008b7c:	f06f 0306 	mvn.w	r3, #6
 8008b80:	e087      	b.n	8008c92 <IKS01A3_MOTION_SENSOR_Init+0x1de>
      }
      if (cap.Acc == 1U)
 8008b82:	7b3b      	ldrb	r3, [r7, #12]
 8008b84:	2b01      	cmp	r3, #1
 8008b86:	d103      	bne.n	8008b90 <IKS01A3_MOTION_SENSOR_Init+0xdc>
      {
        component_functions |= MOTION_ACCELERO;
 8008b88:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008b8a:	f043 0302 	orr.w	r3, r3, #2
 8008b8e:	62bb      	str	r3, [r7, #40]	@ 0x28
      }
      if (cap.Gyro == 1U)
 8008b90:	7b7b      	ldrb	r3, [r7, #13]
 8008b92:	2b01      	cmp	r3, #1
 8008b94:	d103      	bne.n	8008b9e <IKS01A3_MOTION_SENSOR_Init+0xea>
      {
        component_functions |= MOTION_GYRO;
 8008b96:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008b98:	f043 0301 	orr.w	r3, r3, #1
 8008b9c:	62bb      	str	r3, [r7, #40]	@ 0x28
      }
      if (cap.Magneto == 1U)
 8008b9e:	7bbb      	ldrb	r3, [r7, #14]
 8008ba0:	2b01      	cmp	r3, #1
 8008ba2:	d13c      	bne.n	8008c1e <IKS01A3_MOTION_SENSOR_Init+0x16a>
      {
        component_functions |= MOTION_MAGNETO;
 8008ba4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008ba6:	f043 0304 	orr.w	r3, r3, #4
 8008baa:	62bb      	str	r3, [r7, #40]	@ 0x28
      }
      break;
 8008bac:	e037      	b.n	8008c1e <IKS01A3_MOTION_SENSOR_Init+0x16a>
#endif

#if (USE_IKS01A3_MOTION_SENSOR_LIS2MDL_0 == 1)
    case IKS01A3_LIS2MDL_0:
      if (LIS2MDL_0_Probe(Functions) != BSP_ERROR_NONE)
 8008bae:	6838      	ldr	r0, [r7, #0]
 8008bb0:	f000 f9ee 	bl	8008f90 <LIS2MDL_0_Probe>
 8008bb4:	4603      	mov	r3, r0
 8008bb6:	2b00      	cmp	r3, #0
 8008bb8:	d002      	beq.n	8008bc0 <IKS01A3_MOTION_SENSOR_Init+0x10c>
      {
        return BSP_ERROR_NO_INIT;
 8008bba:	f04f 33ff 	mov.w	r3, #4294967295
 8008bbe:	e068      	b.n	8008c92 <IKS01A3_MOTION_SENSOR_Init+0x1de>
      }
      if (MotionDrv[Instance]->GetCapabilities(MotionCompObj[Instance], (void *)&cap) != BSP_ERROR_NONE)
 8008bc0:	4a36      	ldr	r2, [pc, #216]	@ (8008c9c <IKS01A3_MOTION_SENSOR_Init+0x1e8>)
 8008bc2:	687b      	ldr	r3, [r7, #4]
 8008bc4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008bc8:	68db      	ldr	r3, [r3, #12]
 8008bca:	4935      	ldr	r1, [pc, #212]	@ (8008ca0 <IKS01A3_MOTION_SENSOR_Init+0x1ec>)
 8008bcc:	687a      	ldr	r2, [r7, #4]
 8008bce:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8008bd2:	f107 010c 	add.w	r1, r7, #12
 8008bd6:	4610      	mov	r0, r2
 8008bd8:	4798      	blx	r3
 8008bda:	4603      	mov	r3, r0
 8008bdc:	2b00      	cmp	r3, #0
 8008bde:	d002      	beq.n	8008be6 <IKS01A3_MOTION_SENSOR_Init+0x132>
      {
        return BSP_ERROR_UNKNOWN_COMPONENT;
 8008be0:	f06f 0306 	mvn.w	r3, #6
 8008be4:	e055      	b.n	8008c92 <IKS01A3_MOTION_SENSOR_Init+0x1de>
      }
      if (cap.Acc == 1U)
 8008be6:	7b3b      	ldrb	r3, [r7, #12]
 8008be8:	2b01      	cmp	r3, #1
 8008bea:	d103      	bne.n	8008bf4 <IKS01A3_MOTION_SENSOR_Init+0x140>
      {
        component_functions |= MOTION_ACCELERO;
 8008bec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008bee:	f043 0302 	orr.w	r3, r3, #2
 8008bf2:	62bb      	str	r3, [r7, #40]	@ 0x28
      }
      if (cap.Gyro == 1U)
 8008bf4:	7b7b      	ldrb	r3, [r7, #13]
 8008bf6:	2b01      	cmp	r3, #1
 8008bf8:	d103      	bne.n	8008c02 <IKS01A3_MOTION_SENSOR_Init+0x14e>
      {
        component_functions |= MOTION_GYRO;
 8008bfa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008bfc:	f043 0301 	orr.w	r3, r3, #1
 8008c00:	62bb      	str	r3, [r7, #40]	@ 0x28
      }
      if (cap.Magneto == 1U)
 8008c02:	7bbb      	ldrb	r3, [r7, #14]
 8008c04:	2b01      	cmp	r3, #1
 8008c06:	d10c      	bne.n	8008c22 <IKS01A3_MOTION_SENSOR_Init+0x16e>
      {
        component_functions |= MOTION_MAGNETO;
 8008c08:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008c0a:	f043 0304 	orr.w	r3, r3, #4
 8008c0e:	62bb      	str	r3, [r7, #40]	@ 0x28
      }
      break;
 8008c10:	e007      	b.n	8008c22 <IKS01A3_MOTION_SENSOR_Init+0x16e>
      }
      break;
#endif

    default:
      ret = BSP_ERROR_WRONG_PARAM;
 8008c12:	f06f 0301 	mvn.w	r3, #1
 8008c16:	637b      	str	r3, [r7, #52]	@ 0x34
      break;
 8008c18:	e004      	b.n	8008c24 <IKS01A3_MOTION_SENSOR_Init+0x170>
      break;
 8008c1a:	bf00      	nop
 8008c1c:	e002      	b.n	8008c24 <IKS01A3_MOTION_SENSOR_Init+0x170>
      break;
 8008c1e:	bf00      	nop
 8008c20:	e000      	b.n	8008c24 <IKS01A3_MOTION_SENSOR_Init+0x170>
      break;
 8008c22:	bf00      	nop
  }

  if (ret != BSP_ERROR_NONE)
 8008c24:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008c26:	2b00      	cmp	r3, #0
 8008c28:	d001      	beq.n	8008c2e <IKS01A3_MOTION_SENSOR_Init+0x17a>
  {
    return ret;
 8008c2a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008c2c:	e031      	b.n	8008c92 <IKS01A3_MOTION_SENSOR_Init+0x1de>
  }

  for (i = 0; i < IKS01A3_MOTION_FUNCTIONS_NBR; i++)
 8008c2e:	2300      	movs	r3, #0
 8008c30:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8008c32:	e02a      	b.n	8008c8a <IKS01A3_MOTION_SENSOR_Init+0x1d6>
  {
    if (((Functions & function) == function) && ((component_functions & function) == function))
 8008c34:	683a      	ldr	r2, [r7, #0]
 8008c36:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008c38:	4013      	ands	r3, r2
 8008c3a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008c3c:	429a      	cmp	r2, r3
 8008c3e:	d11e      	bne.n	8008c7e <IKS01A3_MOTION_SENSOR_Init+0x1ca>
 8008c40:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8008c42:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008c44:	4013      	ands	r3, r2
 8008c46:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008c48:	429a      	cmp	r2, r3
 8008c4a:	d118      	bne.n	8008c7e <IKS01A3_MOTION_SENSOR_Init+0x1ca>
    {
      if (MotionFuncDrv[Instance][FunctionIndex[function]]->Enable(MotionCompObj[Instance]) != BSP_ERROR_NONE)
 8008c4c:	4a15      	ldr	r2, [pc, #84]	@ (8008ca4 <IKS01A3_MOTION_SENSOR_Init+0x1f0>)
 8008c4e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008c50:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8008c54:	4814      	ldr	r0, [pc, #80]	@ (8008ca8 <IKS01A3_MOTION_SENSOR_Init+0x1f4>)
 8008c56:	687a      	ldr	r2, [r7, #4]
 8008c58:	4613      	mov	r3, r2
 8008c5a:	005b      	lsls	r3, r3, #1
 8008c5c:	4413      	add	r3, r2
 8008c5e:	440b      	add	r3, r1
 8008c60:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8008c64:	681b      	ldr	r3, [r3, #0]
 8008c66:	490e      	ldr	r1, [pc, #56]	@ (8008ca0 <IKS01A3_MOTION_SENSOR_Init+0x1ec>)
 8008c68:	687a      	ldr	r2, [r7, #4]
 8008c6a:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8008c6e:	4610      	mov	r0, r2
 8008c70:	4798      	blx	r3
 8008c72:	4603      	mov	r3, r0
 8008c74:	2b00      	cmp	r3, #0
 8008c76:	d002      	beq.n	8008c7e <IKS01A3_MOTION_SENSOR_Init+0x1ca>
      {
        return BSP_ERROR_COMPONENT_FAILURE;
 8008c78:	f06f 0304 	mvn.w	r3, #4
 8008c7c:	e009      	b.n	8008c92 <IKS01A3_MOTION_SENSOR_Init+0x1de>
      }
    }
    function = function << 1;
 8008c7e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008c80:	005b      	lsls	r3, r3, #1
 8008c82:	633b      	str	r3, [r7, #48]	@ 0x30
  for (i = 0; i < IKS01A3_MOTION_FUNCTIONS_NBR; i++)
 8008c84:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008c86:	3301      	adds	r3, #1
 8008c88:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8008c8a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008c8c:	2b02      	cmp	r3, #2
 8008c8e:	d9d1      	bls.n	8008c34 <IKS01A3_MOTION_SENSOR_Init+0x180>
  }

  return ret;
 8008c90:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8008c92:	4618      	mov	r0, r3
 8008c94:	3738      	adds	r7, #56	@ 0x38
 8008c96:	46bd      	mov	sp, r7
 8008c98:	bd80      	pop	{r7, pc}
 8008c9a:	bf00      	nop
 8008c9c:	20000570 	.word	0x20000570
 8008ca0:	20000540 	.word	0x20000540
 8008ca4:	20000198 	.word	0x20000198
 8008ca8:	2000054c 	.word	0x2000054c

08008cac <LSM6DSO_0_Probe>:
/**
  * @brief  Register Bus IOs for instance 0 if component ID is OK
  * @retval BSP status
  */
static int32_t LSM6DSO_0_Probe(uint32_t Functions)
{
 8008cac:	b580      	push	{r7, lr}
 8008cae:	b094      	sub	sp, #80	@ 0x50
 8008cb0:	af00      	add	r7, sp, #0
 8008cb2:	6078      	str	r0, [r7, #4]
  LSM6DSO_IO_t            io_ctx;
  uint8_t                 id;
  static LSM6DSO_Object_t lsm6dso_obj_0;
  LSM6DSO_Capabilities_t  cap;
  int32_t ret = BSP_ERROR_NONE;
 8008cb4:	2300      	movs	r3, #0
 8008cb6:	64fb      	str	r3, [r7, #76]	@ 0x4c

  /* Configure the accelero driver */
  io_ctx.BusType     = LSM6DSO_I2C_BUS; /* I2C */
 8008cb8:	2300      	movs	r3, #0
 8008cba:	637b      	str	r3, [r7, #52]	@ 0x34
  io_ctx.Address     = LSM6DSO_I2C_ADD_H;
 8008cbc:	23d7      	movs	r3, #215	@ 0xd7
 8008cbe:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
  io_ctx.Init        = IKS01A3_I2C_INIT;
 8008cc2:	4b50      	ldr	r3, [pc, #320]	@ (8008e04 <LSM6DSO_0_Probe+0x158>)
 8008cc4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  io_ctx.DeInit      = IKS01A3_I2C_DEINIT;
 8008cc6:	4b50      	ldr	r3, [pc, #320]	@ (8008e08 <LSM6DSO_0_Probe+0x15c>)
 8008cc8:	633b      	str	r3, [r7, #48]	@ 0x30
  io_ctx.ReadReg     = IKS01A3_I2C_READ_REG;
 8008cca:	4b50      	ldr	r3, [pc, #320]	@ (8008e0c <LSM6DSO_0_Probe+0x160>)
 8008ccc:	643b      	str	r3, [r7, #64]	@ 0x40
  io_ctx.WriteReg    = IKS01A3_I2C_WRITE_REG;
 8008cce:	4b50      	ldr	r3, [pc, #320]	@ (8008e10 <LSM6DSO_0_Probe+0x164>)
 8008cd0:	63fb      	str	r3, [r7, #60]	@ 0x3c
  io_ctx.GetTick     = IKS01A3_GET_TICK;
 8008cd2:	4b50      	ldr	r3, [pc, #320]	@ (8008e14 <LSM6DSO_0_Probe+0x168>)
 8008cd4:	647b      	str	r3, [r7, #68]	@ 0x44
  io_ctx.Delay       = IKS01A3_DELAY;
 8008cd6:	4b50      	ldr	r3, [pc, #320]	@ (8008e18 <LSM6DSO_0_Probe+0x16c>)
 8008cd8:	64bb      	str	r3, [r7, #72]	@ 0x48

  if (LSM6DSO_RegisterBusIO(&lsm6dso_obj_0, &io_ctx) != LSM6DSO_OK)
 8008cda:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8008cde:	4619      	mov	r1, r3
 8008ce0:	484e      	ldr	r0, [pc, #312]	@ (8008e1c <LSM6DSO_0_Probe+0x170>)
 8008ce2:	f7fc fead 	bl	8005a40 <LSM6DSO_RegisterBusIO>
 8008ce6:	4603      	mov	r3, r0
 8008ce8:	2b00      	cmp	r3, #0
 8008cea:	d003      	beq.n	8008cf4 <LSM6DSO_0_Probe+0x48>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8008cec:	f06f 0306 	mvn.w	r3, #6
 8008cf0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008cf2:	e082      	b.n	8008dfa <LSM6DSO_0_Probe+0x14e>
  }
  else if (LSM6DSO_Set_Mem_Bank(&lsm6dso_obj_0, (uint8_t)LSM6DSO_USER_BANK) != LSM6DSO_OK)
 8008cf4:	2100      	movs	r1, #0
 8008cf6:	4849      	ldr	r0, [pc, #292]	@ (8008e1c <LSM6DSO_0_Probe+0x170>)
 8008cf8:	f7fd fe79 	bl	80069ee <LSM6DSO_Set_Mem_Bank>
 8008cfc:	4603      	mov	r3, r0
 8008cfe:	2b00      	cmp	r3, #0
 8008d00:	d003      	beq.n	8008d0a <LSM6DSO_0_Probe+0x5e>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8008d02:	f06f 0306 	mvn.w	r3, #6
 8008d06:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008d08:	e077      	b.n	8008dfa <LSM6DSO_0_Probe+0x14e>
  }
  else if (LSM6DSO_ReadID(&lsm6dso_obj_0, &id) != LSM6DSO_OK)
 8008d0a:	f107 032b 	add.w	r3, r7, #43	@ 0x2b
 8008d0e:	4619      	mov	r1, r3
 8008d10:	4842      	ldr	r0, [pc, #264]	@ (8008e1c <LSM6DSO_0_Probe+0x170>)
 8008d12:	f7fc ffa9 	bl	8005c68 <LSM6DSO_ReadID>
 8008d16:	4603      	mov	r3, r0
 8008d18:	2b00      	cmp	r3, #0
 8008d1a:	d003      	beq.n	8008d24 <LSM6DSO_0_Probe+0x78>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8008d1c:	f06f 0306 	mvn.w	r3, #6
 8008d20:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008d22:	e06a      	b.n	8008dfa <LSM6DSO_0_Probe+0x14e>
  }
  else if (id != (uint8_t)LSM6DSO_ID)
 8008d24:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8008d28:	2b6c      	cmp	r3, #108	@ 0x6c
 8008d2a:	d003      	beq.n	8008d34 <LSM6DSO_0_Probe+0x88>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8008d2c:	f06f 0306 	mvn.w	r3, #6
 8008d30:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008d32:	e062      	b.n	8008dfa <LSM6DSO_0_Probe+0x14e>
  }
  else
  {
    (void)LSM6DSO_GetCapabilities(&lsm6dso_obj_0, &cap);
 8008d34:	f107 030c 	add.w	r3, r7, #12
 8008d38:	4619      	mov	r1, r3
 8008d3a:	4838      	ldr	r0, [pc, #224]	@ (8008e1c <LSM6DSO_0_Probe+0x170>)
 8008d3c:	f7fc ffaa 	bl	8005c94 <LSM6DSO_GetCapabilities>
    MotionCtx[IKS01A3_LSM6DSO_0].Functions = ((uint32_t)cap.Gyro) | ((uint32_t)cap.Acc << 1) | ((uint32_t)cap.Magneto << 2);
 8008d40:	7b7b      	ldrb	r3, [r7, #13]
 8008d42:	461a      	mov	r2, r3
 8008d44:	7b3b      	ldrb	r3, [r7, #12]
 8008d46:	005b      	lsls	r3, r3, #1
 8008d48:	431a      	orrs	r2, r3
 8008d4a:	7bbb      	ldrb	r3, [r7, #14]
 8008d4c:	009b      	lsls	r3, r3, #2
 8008d4e:	4313      	orrs	r3, r2
 8008d50:	4a33      	ldr	r2, [pc, #204]	@ (8008e20 <LSM6DSO_0_Probe+0x174>)
 8008d52:	6013      	str	r3, [r2, #0]

    MotionCompObj[IKS01A3_LSM6DSO_0] = &lsm6dso_obj_0;
 8008d54:	4b33      	ldr	r3, [pc, #204]	@ (8008e24 <LSM6DSO_0_Probe+0x178>)
 8008d56:	4a31      	ldr	r2, [pc, #196]	@ (8008e1c <LSM6DSO_0_Probe+0x170>)
 8008d58:	601a      	str	r2, [r3, #0]
    /* The second cast (void *) is added to bypass Misra R11.3 rule */
    MotionDrv[IKS01A3_LSM6DSO_0] = (MOTION_SENSOR_CommonDrv_t *)(void *)&LSM6DSO_COMMON_Driver;
 8008d5a:	4b33      	ldr	r3, [pc, #204]	@ (8008e28 <LSM6DSO_0_Probe+0x17c>)
 8008d5c:	4a33      	ldr	r2, [pc, #204]	@ (8008e2c <LSM6DSO_0_Probe+0x180>)
 8008d5e:	601a      	str	r2, [r3, #0]

    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_GYRO) == MOTION_GYRO) && (cap.Gyro == 1U))
 8008d60:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008d62:	2b00      	cmp	r3, #0
 8008d64:	d11d      	bne.n	8008da2 <LSM6DSO_0_Probe+0xf6>
 8008d66:	687b      	ldr	r3, [r7, #4]
 8008d68:	f003 0301 	and.w	r3, r3, #1
 8008d6c:	2b00      	cmp	r3, #0
 8008d6e:	d018      	beq.n	8008da2 <LSM6DSO_0_Probe+0xf6>
 8008d70:	7b7b      	ldrb	r3, [r7, #13]
 8008d72:	2b01      	cmp	r3, #1
 8008d74:	d115      	bne.n	8008da2 <LSM6DSO_0_Probe+0xf6>
    {
      /* The second cast (void *) is added to bypass Misra R11.3 rule */
      MotionFuncDrv[IKS01A3_LSM6DSO_0][FunctionIndex[MOTION_GYRO]] = (MOTION_SENSOR_FuncDrv_t *)(void *)&LSM6DSO_GYRO_Driver;
 8008d76:	4b2e      	ldr	r3, [pc, #184]	@ (8008e30 <LSM6DSO_0_Probe+0x184>)
 8008d78:	685b      	ldr	r3, [r3, #4]
 8008d7a:	4a2e      	ldr	r2, [pc, #184]	@ (8008e34 <LSM6DSO_0_Probe+0x188>)
 8008d7c:	492e      	ldr	r1, [pc, #184]	@ (8008e38 <LSM6DSO_0_Probe+0x18c>)
 8008d7e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

      if (MotionDrv[IKS01A3_LSM6DSO_0]->Init(MotionCompObj[IKS01A3_LSM6DSO_0]) != LSM6DSO_OK)
 8008d82:	4b29      	ldr	r3, [pc, #164]	@ (8008e28 <LSM6DSO_0_Probe+0x17c>)
 8008d84:	681b      	ldr	r3, [r3, #0]
 8008d86:	681b      	ldr	r3, [r3, #0]
 8008d88:	4a26      	ldr	r2, [pc, #152]	@ (8008e24 <LSM6DSO_0_Probe+0x178>)
 8008d8a:	6812      	ldr	r2, [r2, #0]
 8008d8c:	4610      	mov	r0, r2
 8008d8e:	4798      	blx	r3
 8008d90:	4603      	mov	r3, r0
 8008d92:	2b00      	cmp	r3, #0
 8008d94:	d003      	beq.n	8008d9e <LSM6DSO_0_Probe+0xf2>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8008d96:	f06f 0304 	mvn.w	r3, #4
 8008d9a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008d9c:	e001      	b.n	8008da2 <LSM6DSO_0_Probe+0xf6>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 8008d9e:	2300      	movs	r3, #0
 8008da0:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_ACCELERO) == MOTION_ACCELERO) && (cap.Acc == 1U))
 8008da2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008da4:	2b00      	cmp	r3, #0
 8008da6:	d11d      	bne.n	8008de4 <LSM6DSO_0_Probe+0x138>
 8008da8:	687b      	ldr	r3, [r7, #4]
 8008daa:	f003 0302 	and.w	r3, r3, #2
 8008dae:	2b00      	cmp	r3, #0
 8008db0:	d018      	beq.n	8008de4 <LSM6DSO_0_Probe+0x138>
 8008db2:	7b3b      	ldrb	r3, [r7, #12]
 8008db4:	2b01      	cmp	r3, #1
 8008db6:	d115      	bne.n	8008de4 <LSM6DSO_0_Probe+0x138>
    {
      /* The second cast (void *) is added to bypass Misra R11.3 rule */
      MotionFuncDrv[IKS01A3_LSM6DSO_0][FunctionIndex[MOTION_ACCELERO]] = (MOTION_SENSOR_FuncDrv_t *)(
 8008db8:	4b1d      	ldr	r3, [pc, #116]	@ (8008e30 <LSM6DSO_0_Probe+0x184>)
 8008dba:	689b      	ldr	r3, [r3, #8]
 8008dbc:	4a1d      	ldr	r2, [pc, #116]	@ (8008e34 <LSM6DSO_0_Probe+0x188>)
 8008dbe:	491f      	ldr	r1, [pc, #124]	@ (8008e3c <LSM6DSO_0_Probe+0x190>)
 8008dc0:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
                                                                           void *)&LSM6DSO_ACC_Driver;

      if (MotionDrv[IKS01A3_LSM6DSO_0]->Init(MotionCompObj[IKS01A3_LSM6DSO_0]) != LSM6DSO_OK)
 8008dc4:	4b18      	ldr	r3, [pc, #96]	@ (8008e28 <LSM6DSO_0_Probe+0x17c>)
 8008dc6:	681b      	ldr	r3, [r3, #0]
 8008dc8:	681b      	ldr	r3, [r3, #0]
 8008dca:	4a16      	ldr	r2, [pc, #88]	@ (8008e24 <LSM6DSO_0_Probe+0x178>)
 8008dcc:	6812      	ldr	r2, [r2, #0]
 8008dce:	4610      	mov	r0, r2
 8008dd0:	4798      	blx	r3
 8008dd2:	4603      	mov	r3, r0
 8008dd4:	2b00      	cmp	r3, #0
 8008dd6:	d003      	beq.n	8008de0 <LSM6DSO_0_Probe+0x134>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8008dd8:	f06f 0304 	mvn.w	r3, #4
 8008ddc:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008dde:	e001      	b.n	8008de4 <LSM6DSO_0_Probe+0x138>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 8008de0:	2300      	movs	r3, #0
 8008de2:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_MAGNETO) == MOTION_MAGNETO))
 8008de4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008de6:	2b00      	cmp	r3, #0
 8008de8:	d107      	bne.n	8008dfa <LSM6DSO_0_Probe+0x14e>
 8008dea:	687b      	ldr	r3, [r7, #4]
 8008dec:	f003 0304 	and.w	r3, r3, #4
 8008df0:	2b00      	cmp	r3, #0
 8008df2:	d002      	beq.n	8008dfa <LSM6DSO_0_Probe+0x14e>
    {
      /* Return an error if the application try to initialize a function not supported by the component */
      ret = BSP_ERROR_COMPONENT_FAILURE;
 8008df4:	f06f 0304 	mvn.w	r3, #4
 8008df8:	64fb      	str	r3, [r7, #76]	@ 0x4c
    }
  }
  return ret;
 8008dfa:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
}
 8008dfc:	4618      	mov	r0, r3
 8008dfe:	3750      	adds	r7, #80	@ 0x50
 8008e00:	46bd      	mov	sp, r7
 8008e02:	bd80      	pop	{r7, pc}
 8008e04:	0800180d 	.word	0x0800180d
 8008e08:	08001871 	.word	0x08001871
 8008e0c:	08001925 	.word	0x08001925
 8008e10:	080018c1 	.word	0x080018c1
 8008e14:	08001989 	.word	0x08001989
 8008e18:	080091bd 	.word	0x080091bd
 8008e1c:	20000588 	.word	0x20000588
 8008e20:	2000057c 	.word	0x2000057c
 8008e24:	20000540 	.word	0x20000540
 8008e28:	20000570 	.word	0x20000570
 8008e2c:	200000dc 	.word	0x200000dc
 8008e30:	20000198 	.word	0x20000198
 8008e34:	2000054c 	.word	0x2000054c
 8008e38:	20000110 	.word	0x20000110
 8008e3c:	200000ec 	.word	0x200000ec

08008e40 <LIS2DW12_0_Probe>:
/**
  * @brief  Register Bus IOs for instance 1 if component ID is OK
  * @retval BSP status
  */
static int32_t LIS2DW12_0_Probe(uint32_t Functions)
{
 8008e40:	b580      	push	{r7, lr}
 8008e42:	b094      	sub	sp, #80	@ 0x50
 8008e44:	af00      	add	r7, sp, #0
 8008e46:	6078      	str	r0, [r7, #4]
  LIS2DW12_IO_t            io_ctx;
  uint8_t                  id;
  static LIS2DW12_Object_t lis2dw12_obj_0;
  LIS2DW12_Capabilities_t  cap;
  int32_t ret = BSP_ERROR_NONE;
 8008e48:	2300      	movs	r3, #0
 8008e4a:	64fb      	str	r3, [r7, #76]	@ 0x4c

  /* Configure the accelero driver */
  io_ctx.BusType     = LIS2DW12_I2C_BUS; /* I2C */
 8008e4c:	2300      	movs	r3, #0
 8008e4e:	637b      	str	r3, [r7, #52]	@ 0x34
  io_ctx.Address     = LIS2DW12_I2C_ADD_H;
 8008e50:	2333      	movs	r3, #51	@ 0x33
 8008e52:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
  io_ctx.Init        = IKS01A3_I2C_INIT;
 8008e56:	4b40      	ldr	r3, [pc, #256]	@ (8008f58 <LIS2DW12_0_Probe+0x118>)
 8008e58:	62fb      	str	r3, [r7, #44]	@ 0x2c
  io_ctx.DeInit      = IKS01A3_I2C_DEINIT;
 8008e5a:	4b40      	ldr	r3, [pc, #256]	@ (8008f5c <LIS2DW12_0_Probe+0x11c>)
 8008e5c:	633b      	str	r3, [r7, #48]	@ 0x30
  io_ctx.ReadReg     = IKS01A3_I2C_READ_REG;
 8008e5e:	4b40      	ldr	r3, [pc, #256]	@ (8008f60 <LIS2DW12_0_Probe+0x120>)
 8008e60:	643b      	str	r3, [r7, #64]	@ 0x40
  io_ctx.WriteReg    = IKS01A3_I2C_WRITE_REG;
 8008e62:	4b40      	ldr	r3, [pc, #256]	@ (8008f64 <LIS2DW12_0_Probe+0x124>)
 8008e64:	63fb      	str	r3, [r7, #60]	@ 0x3c
  io_ctx.GetTick     = IKS01A3_GET_TICK;
 8008e66:	4b40      	ldr	r3, [pc, #256]	@ (8008f68 <LIS2DW12_0_Probe+0x128>)
 8008e68:	647b      	str	r3, [r7, #68]	@ 0x44
  io_ctx.Delay       = IKS01A3_DELAY;
 8008e6a:	4b40      	ldr	r3, [pc, #256]	@ (8008f6c <LIS2DW12_0_Probe+0x12c>)
 8008e6c:	64bb      	str	r3, [r7, #72]	@ 0x48

  if (LIS2DW12_RegisterBusIO(&lis2dw12_obj_0, &io_ctx) != LIS2DW12_OK)
 8008e6e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8008e72:	4619      	mov	r1, r3
 8008e74:	483e      	ldr	r0, [pc, #248]	@ (8008f70 <LIS2DW12_0_Probe+0x130>)
 8008e76:	f7f9 fd33 	bl	80028e0 <LIS2DW12_RegisterBusIO>
 8008e7a:	4603      	mov	r3, r0
 8008e7c:	2b00      	cmp	r3, #0
 8008e7e:	d003      	beq.n	8008e88 <LIS2DW12_0_Probe+0x48>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8008e80:	f06f 0306 	mvn.w	r3, #6
 8008e84:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008e86:	e062      	b.n	8008f4e <LIS2DW12_0_Probe+0x10e>
  }
  else if (LIS2DW12_ReadID(&lis2dw12_obj_0, &id) != LIS2DW12_OK)
 8008e88:	f107 032b 	add.w	r3, r7, #43	@ 0x2b
 8008e8c:	4619      	mov	r1, r3
 8008e8e:	4838      	ldr	r0, [pc, #224]	@ (8008f70 <LIS2DW12_0_Probe+0x130>)
 8008e90:	f7f9 fe14 	bl	8002abc <LIS2DW12_ReadID>
 8008e94:	4603      	mov	r3, r0
 8008e96:	2b00      	cmp	r3, #0
 8008e98:	d003      	beq.n	8008ea2 <LIS2DW12_0_Probe+0x62>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8008e9a:	f06f 0306 	mvn.w	r3, #6
 8008e9e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008ea0:	e055      	b.n	8008f4e <LIS2DW12_0_Probe+0x10e>
  }
  else if (id != LIS2DW12_ID)
 8008ea2:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8008ea6:	2b44      	cmp	r3, #68	@ 0x44
 8008ea8:	d003      	beq.n	8008eb2 <LIS2DW12_0_Probe+0x72>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8008eaa:	f06f 0306 	mvn.w	r3, #6
 8008eae:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008eb0:	e04d      	b.n	8008f4e <LIS2DW12_0_Probe+0x10e>
  }
  else
  {
    (void)LIS2DW12_GetCapabilities(&lis2dw12_obj_0, &cap);
 8008eb2:	f107 030c 	add.w	r3, r7, #12
 8008eb6:	4619      	mov	r1, r3
 8008eb8:	482d      	ldr	r0, [pc, #180]	@ (8008f70 <LIS2DW12_0_Probe+0x130>)
 8008eba:	f7f9 fe15 	bl	8002ae8 <LIS2DW12_GetCapabilities>
    MotionCtx[IKS01A3_LIS2DW12_0].Functions = ((uint32_t)cap.Gyro) | ((uint32_t)cap.Acc << 1) | ((uint32_t)cap.Magneto << 2);
 8008ebe:	7b7b      	ldrb	r3, [r7, #13]
 8008ec0:	461a      	mov	r2, r3
 8008ec2:	7b3b      	ldrb	r3, [r7, #12]
 8008ec4:	005b      	lsls	r3, r3, #1
 8008ec6:	431a      	orrs	r2, r3
 8008ec8:	7bbb      	ldrb	r3, [r7, #14]
 8008eca:	009b      	lsls	r3, r3, #2
 8008ecc:	4313      	orrs	r3, r2
 8008ece:	4a29      	ldr	r2, [pc, #164]	@ (8008f74 <LIS2DW12_0_Probe+0x134>)
 8008ed0:	6053      	str	r3, [r2, #4]

    MotionCompObj[IKS01A3_LIS2DW12_0] = &lis2dw12_obj_0;
 8008ed2:	4b29      	ldr	r3, [pc, #164]	@ (8008f78 <LIS2DW12_0_Probe+0x138>)
 8008ed4:	4a26      	ldr	r2, [pc, #152]	@ (8008f70 <LIS2DW12_0_Probe+0x130>)
 8008ed6:	605a      	str	r2, [r3, #4]
    /* The second cast (void *) is added to bypass Misra R11.3 rule */
    MotionDrv[IKS01A3_LIS2DW12_0] = (MOTION_SENSOR_CommonDrv_t *)(void *)&LIS2DW12_COMMON_Driver;
 8008ed8:	4b28      	ldr	r3, [pc, #160]	@ (8008f7c <LIS2DW12_0_Probe+0x13c>)
 8008eda:	4a29      	ldr	r2, [pc, #164]	@ (8008f80 <LIS2DW12_0_Probe+0x140>)
 8008edc:	605a      	str	r2, [r3, #4]

    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_ACCELERO) == MOTION_ACCELERO) && (cap.Acc == 1U))
 8008ede:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008ee0:	2b00      	cmp	r3, #0
 8008ee2:	d11e      	bne.n	8008f22 <LIS2DW12_0_Probe+0xe2>
 8008ee4:	687b      	ldr	r3, [r7, #4]
 8008ee6:	f003 0302 	and.w	r3, r3, #2
 8008eea:	2b00      	cmp	r3, #0
 8008eec:	d019      	beq.n	8008f22 <LIS2DW12_0_Probe+0xe2>
 8008eee:	7b3b      	ldrb	r3, [r7, #12]
 8008ef0:	2b01      	cmp	r3, #1
 8008ef2:	d116      	bne.n	8008f22 <LIS2DW12_0_Probe+0xe2>
    {
      /* The second cast (void *) is added to bypass Misra R11.3 rule */
      MotionFuncDrv[IKS01A3_LIS2DW12_0][FunctionIndex[MOTION_ACCELERO]] = (MOTION_SENSOR_FuncDrv_t *)(
 8008ef4:	4b23      	ldr	r3, [pc, #140]	@ (8008f84 <LIS2DW12_0_Probe+0x144>)
 8008ef6:	689b      	ldr	r3, [r3, #8]
 8008ef8:	4a23      	ldr	r2, [pc, #140]	@ (8008f88 <LIS2DW12_0_Probe+0x148>)
 8008efa:	3303      	adds	r3, #3
 8008efc:	4923      	ldr	r1, [pc, #140]	@ (8008f8c <LIS2DW12_0_Probe+0x14c>)
 8008efe:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
                                                                            void *)&LIS2DW12_ACC_Driver;

      if (MotionDrv[IKS01A3_LIS2DW12_0]->Init(MotionCompObj[IKS01A3_LIS2DW12_0]) != LIS2DW12_OK)
 8008f02:	4b1e      	ldr	r3, [pc, #120]	@ (8008f7c <LIS2DW12_0_Probe+0x13c>)
 8008f04:	685b      	ldr	r3, [r3, #4]
 8008f06:	681b      	ldr	r3, [r3, #0]
 8008f08:	4a1b      	ldr	r2, [pc, #108]	@ (8008f78 <LIS2DW12_0_Probe+0x138>)
 8008f0a:	6852      	ldr	r2, [r2, #4]
 8008f0c:	4610      	mov	r0, r2
 8008f0e:	4798      	blx	r3
 8008f10:	4603      	mov	r3, r0
 8008f12:	2b00      	cmp	r3, #0
 8008f14:	d003      	beq.n	8008f1e <LIS2DW12_0_Probe+0xde>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8008f16:	f06f 0304 	mvn.w	r3, #4
 8008f1a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008f1c:	e001      	b.n	8008f22 <LIS2DW12_0_Probe+0xe2>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 8008f1e:	2300      	movs	r3, #0
 8008f20:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_GYRO) == MOTION_GYRO))
 8008f22:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008f24:	2b00      	cmp	r3, #0
 8008f26:	d107      	bne.n	8008f38 <LIS2DW12_0_Probe+0xf8>
 8008f28:	687b      	ldr	r3, [r7, #4]
 8008f2a:	f003 0301 	and.w	r3, r3, #1
 8008f2e:	2b00      	cmp	r3, #0
 8008f30:	d002      	beq.n	8008f38 <LIS2DW12_0_Probe+0xf8>
    {
      /* Return an error if the application try to initialize a function not supported by the component */
      ret = BSP_ERROR_COMPONENT_FAILURE;
 8008f32:	f06f 0304 	mvn.w	r3, #4
 8008f36:	64fb      	str	r3, [r7, #76]	@ 0x4c
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_MAGNETO) == MOTION_MAGNETO))
 8008f38:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008f3a:	2b00      	cmp	r3, #0
 8008f3c:	d107      	bne.n	8008f4e <LIS2DW12_0_Probe+0x10e>
 8008f3e:	687b      	ldr	r3, [r7, #4]
 8008f40:	f003 0304 	and.w	r3, r3, #4
 8008f44:	2b00      	cmp	r3, #0
 8008f46:	d002      	beq.n	8008f4e <LIS2DW12_0_Probe+0x10e>
    {
      /* Return an error if the application try to initialize a function not supported by the component */
      ret = BSP_ERROR_COMPONENT_FAILURE;
 8008f48:	f06f 0304 	mvn.w	r3, #4
 8008f4c:	64fb      	str	r3, [r7, #76]	@ 0x4c
    }
  }
  return ret;
 8008f4e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
}
 8008f50:	4618      	mov	r0, r3
 8008f52:	3750      	adds	r7, #80	@ 0x50
 8008f54:	46bd      	mov	sp, r7
 8008f56:	bd80      	pop	{r7, pc}
 8008f58:	0800180d 	.word	0x0800180d
 8008f5c:	08001871 	.word	0x08001871
 8008f60:	08001925 	.word	0x08001925
 8008f64:	080018c1 	.word	0x080018c1
 8008f68:	08001989 	.word	0x08001989
 8008f6c:	080091bd 	.word	0x080091bd
 8008f70:	200005c0 	.word	0x200005c0
 8008f74:	2000057c 	.word	0x2000057c
 8008f78:	20000540 	.word	0x20000540
 8008f7c:	20000570 	.word	0x20000570
 8008f80:	2000003c 	.word	0x2000003c
 8008f84:	20000198 	.word	0x20000198
 8008f88:	2000054c 	.word	0x2000054c
 8008f8c:	2000004c 	.word	0x2000004c

08008f90 <LIS2MDL_0_Probe>:
/**
  * @brief  Register Bus IOs for instance 1 if component ID is OK
  * @retval BSP status
  */
static int32_t LIS2MDL_0_Probe(uint32_t Functions)
{
 8008f90:	b580      	push	{r7, lr}
 8008f92:	b094      	sub	sp, #80	@ 0x50
 8008f94:	af00      	add	r7, sp, #0
 8008f96:	6078      	str	r0, [r7, #4]
  LIS2MDL_IO_t            io_ctx;
  uint8_t                 id;
  static LIS2MDL_Object_t lis2mdl_obj_0;
  LIS2MDL_Capabilities_t  cap;
  int32_t                 ret = BSP_ERROR_NONE;
 8008f98:	2300      	movs	r3, #0
 8008f9a:	64fb      	str	r3, [r7, #76]	@ 0x4c

  /* Configure the accelero driver */
  io_ctx.BusType     = LIS2MDL_I2C_BUS; /* I2C */
 8008f9c:	2300      	movs	r3, #0
 8008f9e:	637b      	str	r3, [r7, #52]	@ 0x34
  io_ctx.Address     = LIS2MDL_I2C_ADD;
 8008fa0:	233d      	movs	r3, #61	@ 0x3d
 8008fa2:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
  io_ctx.Init        = IKS01A3_I2C_INIT;
 8008fa6:	4b40      	ldr	r3, [pc, #256]	@ (80090a8 <LIS2MDL_0_Probe+0x118>)
 8008fa8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  io_ctx.DeInit      = IKS01A3_I2C_DEINIT;
 8008faa:	4b40      	ldr	r3, [pc, #256]	@ (80090ac <LIS2MDL_0_Probe+0x11c>)
 8008fac:	633b      	str	r3, [r7, #48]	@ 0x30
  io_ctx.ReadReg     = IKS01A3_I2C_READ_REG;
 8008fae:	4b40      	ldr	r3, [pc, #256]	@ (80090b0 <LIS2MDL_0_Probe+0x120>)
 8008fb0:	643b      	str	r3, [r7, #64]	@ 0x40
  io_ctx.WriteReg    = IKS01A3_I2C_WRITE_REG;
 8008fb2:	4b40      	ldr	r3, [pc, #256]	@ (80090b4 <LIS2MDL_0_Probe+0x124>)
 8008fb4:	63fb      	str	r3, [r7, #60]	@ 0x3c
  io_ctx.GetTick     = IKS01A3_GET_TICK;
 8008fb6:	4b40      	ldr	r3, [pc, #256]	@ (80090b8 <LIS2MDL_0_Probe+0x128>)
 8008fb8:	647b      	str	r3, [r7, #68]	@ 0x44
  io_ctx.Delay       = IKS01A3_DELAY;
 8008fba:	4b40      	ldr	r3, [pc, #256]	@ (80090bc <LIS2MDL_0_Probe+0x12c>)
 8008fbc:	64bb      	str	r3, [r7, #72]	@ 0x48

  if (LIS2MDL_RegisterBusIO(&lis2mdl_obj_0, &io_ctx) != LIS2MDL_OK)
 8008fbe:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8008fc2:	4619      	mov	r1, r3
 8008fc4:	483e      	ldr	r0, [pc, #248]	@ (80090c0 <LIS2MDL_0_Probe+0x130>)
 8008fc6:	f7fa fedf 	bl	8003d88 <LIS2MDL_RegisterBusIO>
 8008fca:	4603      	mov	r3, r0
 8008fcc:	2b00      	cmp	r3, #0
 8008fce:	d003      	beq.n	8008fd8 <LIS2MDL_0_Probe+0x48>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8008fd0:	f06f 0306 	mvn.w	r3, #6
 8008fd4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008fd6:	e062      	b.n	800909e <LIS2MDL_0_Probe+0x10e>
  }
  else if (LIS2MDL_ReadID(&lis2mdl_obj_0, &id) != LIS2MDL_OK)
 8008fd8:	f107 032b 	add.w	r3, r7, #43	@ 0x2b
 8008fdc:	4619      	mov	r1, r3
 8008fde:	4838      	ldr	r0, [pc, #224]	@ (80090c0 <LIS2MDL_0_Probe+0x130>)
 8008fe0:	f7fa ffee 	bl	8003fc0 <LIS2MDL_ReadID>
 8008fe4:	4603      	mov	r3, r0
 8008fe6:	2b00      	cmp	r3, #0
 8008fe8:	d003      	beq.n	8008ff2 <LIS2MDL_0_Probe+0x62>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8008fea:	f06f 0306 	mvn.w	r3, #6
 8008fee:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008ff0:	e055      	b.n	800909e <LIS2MDL_0_Probe+0x10e>
  }
  else if (id != LIS2MDL_ID)
 8008ff2:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8008ff6:	2b40      	cmp	r3, #64	@ 0x40
 8008ff8:	d003      	beq.n	8009002 <LIS2MDL_0_Probe+0x72>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8008ffa:	f06f 0306 	mvn.w	r3, #6
 8008ffe:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8009000:	e04d      	b.n	800909e <LIS2MDL_0_Probe+0x10e>
  }
  else
  {
    (void)LIS2MDL_GetCapabilities(&lis2mdl_obj_0, &cap);
 8009002:	f107 030c 	add.w	r3, r7, #12
 8009006:	4619      	mov	r1, r3
 8009008:	482d      	ldr	r0, [pc, #180]	@ (80090c0 <LIS2MDL_0_Probe+0x130>)
 800900a:	f7fa ffff 	bl	800400c <LIS2MDL_GetCapabilities>
    MotionCtx[IKS01A3_LIS2MDL_0].Functions = ((uint32_t)cap.Gyro) | ((uint32_t)cap.Acc << 1) | ((uint32_t)cap.Magneto << 2);
 800900e:	7b7b      	ldrb	r3, [r7, #13]
 8009010:	461a      	mov	r2, r3
 8009012:	7b3b      	ldrb	r3, [r7, #12]
 8009014:	005b      	lsls	r3, r3, #1
 8009016:	431a      	orrs	r2, r3
 8009018:	7bbb      	ldrb	r3, [r7, #14]
 800901a:	009b      	lsls	r3, r3, #2
 800901c:	4313      	orrs	r3, r2
 800901e:	4a29      	ldr	r2, [pc, #164]	@ (80090c4 <LIS2MDL_0_Probe+0x134>)
 8009020:	6093      	str	r3, [r2, #8]

    MotionCompObj[IKS01A3_LIS2MDL_0] = &lis2mdl_obj_0;
 8009022:	4b29      	ldr	r3, [pc, #164]	@ (80090c8 <LIS2MDL_0_Probe+0x138>)
 8009024:	4a26      	ldr	r2, [pc, #152]	@ (80090c0 <LIS2MDL_0_Probe+0x130>)
 8009026:	609a      	str	r2, [r3, #8]
    /* The second cast (void *) is added to bypass Misra R11.3 rule */
    MotionDrv[IKS01A3_LIS2MDL_0] = (MOTION_SENSOR_CommonDrv_t *)(void *)&LIS2MDL_COMMON_Driver;
 8009028:	4b28      	ldr	r3, [pc, #160]	@ (80090cc <LIS2MDL_0_Probe+0x13c>)
 800902a:	4a29      	ldr	r2, [pc, #164]	@ (80090d0 <LIS2MDL_0_Probe+0x140>)
 800902c:	609a      	str	r2, [r3, #8]

    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_MAGNETO) == MOTION_MAGNETO) && (cap.Magneto == 1U))
 800902e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009030:	2b00      	cmp	r3, #0
 8009032:	d11e      	bne.n	8009072 <LIS2MDL_0_Probe+0xe2>
 8009034:	687b      	ldr	r3, [r7, #4]
 8009036:	f003 0304 	and.w	r3, r3, #4
 800903a:	2b00      	cmp	r3, #0
 800903c:	d019      	beq.n	8009072 <LIS2MDL_0_Probe+0xe2>
 800903e:	7bbb      	ldrb	r3, [r7, #14]
 8009040:	2b01      	cmp	r3, #1
 8009042:	d116      	bne.n	8009072 <LIS2MDL_0_Probe+0xe2>
    {
      /* The second cast (void *) is added to bypass Misra R11.3 rule */
      MotionFuncDrv[IKS01A3_LIS2MDL_0][FunctionIndex[MOTION_MAGNETO]] = (MOTION_SENSOR_FuncDrv_t *)(
 8009044:	4b23      	ldr	r3, [pc, #140]	@ (80090d4 <LIS2MDL_0_Probe+0x144>)
 8009046:	691b      	ldr	r3, [r3, #16]
 8009048:	4a23      	ldr	r2, [pc, #140]	@ (80090d8 <LIS2MDL_0_Probe+0x148>)
 800904a:	3306      	adds	r3, #6
 800904c:	4923      	ldr	r1, [pc, #140]	@ (80090dc <LIS2MDL_0_Probe+0x14c>)
 800904e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
                                                                          void *)&LIS2MDL_MAG_Driver;

      if (MotionDrv[IKS01A3_LIS2MDL_0]->Init(MotionCompObj[IKS01A3_LIS2MDL_0]) != LIS2MDL_OK)
 8009052:	4b1e      	ldr	r3, [pc, #120]	@ (80090cc <LIS2MDL_0_Probe+0x13c>)
 8009054:	689b      	ldr	r3, [r3, #8]
 8009056:	681b      	ldr	r3, [r3, #0]
 8009058:	4a1b      	ldr	r2, [pc, #108]	@ (80090c8 <LIS2MDL_0_Probe+0x138>)
 800905a:	6892      	ldr	r2, [r2, #8]
 800905c:	4610      	mov	r0, r2
 800905e:	4798      	blx	r3
 8009060:	4603      	mov	r3, r0
 8009062:	2b00      	cmp	r3, #0
 8009064:	d003      	beq.n	800906e <LIS2MDL_0_Probe+0xde>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8009066:	f06f 0304 	mvn.w	r3, #4
 800906a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800906c:	e001      	b.n	8009072 <LIS2MDL_0_Probe+0xe2>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 800906e:	2300      	movs	r3, #0
 8009070:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_ACCELERO) == MOTION_ACCELERO))
 8009072:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009074:	2b00      	cmp	r3, #0
 8009076:	d107      	bne.n	8009088 <LIS2MDL_0_Probe+0xf8>
 8009078:	687b      	ldr	r3, [r7, #4]
 800907a:	f003 0302 	and.w	r3, r3, #2
 800907e:	2b00      	cmp	r3, #0
 8009080:	d002      	beq.n	8009088 <LIS2MDL_0_Probe+0xf8>
    {
      /* Return an error if the application try to initialize a function not supported by the component */
      ret = BSP_ERROR_COMPONENT_FAILURE;
 8009082:	f06f 0304 	mvn.w	r3, #4
 8009086:	64fb      	str	r3, [r7, #76]	@ 0x4c
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_GYRO) == MOTION_GYRO))
 8009088:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800908a:	2b00      	cmp	r3, #0
 800908c:	d107      	bne.n	800909e <LIS2MDL_0_Probe+0x10e>
 800908e:	687b      	ldr	r3, [r7, #4]
 8009090:	f003 0301 	and.w	r3, r3, #1
 8009094:	2b00      	cmp	r3, #0
 8009096:	d002      	beq.n	800909e <LIS2MDL_0_Probe+0x10e>
    {
      /* Return an error if the application try to initialize a function not supported by the component */
      ret = BSP_ERROR_COMPONENT_FAILURE;
 8009098:	f06f 0304 	mvn.w	r3, #4
 800909c:	64fb      	str	r3, [r7, #76]	@ 0x4c
    }
  }
  return ret;
 800909e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
}
 80090a0:	4618      	mov	r0, r3
 80090a2:	3750      	adds	r7, #80	@ 0x50
 80090a4:	46bd      	mov	sp, r7
 80090a6:	bd80      	pop	{r7, pc}
 80090a8:	0800180d 	.word	0x0800180d
 80090ac:	08001871 	.word	0x08001871
 80090b0:	08001925 	.word	0x08001925
 80090b4:	080018c1 	.word	0x080018c1
 80090b8:	08001989 	.word	0x08001989
 80090bc:	080091bd 	.word	0x080091bd
 80090c0:	200005fc 	.word	0x200005fc
 80090c4:	2000057c 	.word	0x2000057c
 80090c8:	20000540 	.word	0x20000540
 80090cc:	20000570 	.word	0x20000570
 80090d0:	20000070 	.word	0x20000070
 80090d4:	20000198 	.word	0x20000198
 80090d8:	2000054c 	.word	0x2000054c
 80090dc:	20000080 	.word	0x20000080

080090e0 <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80090e0:	b580      	push	{r7, lr}
 80090e2:	b082      	sub	sp, #8
 80090e4:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80090e6:	2300      	movs	r3, #0
 80090e8:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80090ea:	2003      	movs	r0, #3
 80090ec:	f000 f938 	bl	8009360 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80090f0:	2000      	movs	r0, #0
 80090f2:	f000 f80d 	bl	8009110 <HAL_InitTick>
 80090f6:	4603      	mov	r3, r0
 80090f8:	2b00      	cmp	r3, #0
 80090fa:	d002      	beq.n	8009102 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80090fc:	2301      	movs	r3, #1
 80090fe:	71fb      	strb	r3, [r7, #7]
 8009100:	e001      	b.n	8009106 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8009102:	f7f8 fae3 	bl	80016cc <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8009106:	79fb      	ldrb	r3, [r7, #7]
}
 8009108:	4618      	mov	r0, r3
 800910a:	3708      	adds	r7, #8
 800910c:	46bd      	mov	sp, r7
 800910e:	bd80      	pop	{r7, pc}

08009110 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8009110:	b580      	push	{r7, lr}
 8009112:	b084      	sub	sp, #16
 8009114:	af00      	add	r7, sp, #0
 8009116:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8009118:	2300      	movs	r3, #0
 800911a:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 800911c:	4b16      	ldr	r3, [pc, #88]	@ (8009178 <HAL_InitTick+0x68>)
 800911e:	681b      	ldr	r3, [r3, #0]
 8009120:	2b00      	cmp	r3, #0
 8009122:	d022      	beq.n	800916a <HAL_InitTick+0x5a>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8009124:	4b15      	ldr	r3, [pc, #84]	@ (800917c <HAL_InitTick+0x6c>)
 8009126:	681a      	ldr	r2, [r3, #0]
 8009128:	4b13      	ldr	r3, [pc, #76]	@ (8009178 <HAL_InitTick+0x68>)
 800912a:	681b      	ldr	r3, [r3, #0]
 800912c:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8009130:	fbb1 f3f3 	udiv	r3, r1, r3
 8009134:	fbb2 f3f3 	udiv	r3, r2, r3
 8009138:	4618      	mov	r0, r3
 800913a:	f000 f938 	bl	80093ae <HAL_SYSTICK_Config>
 800913e:	4603      	mov	r3, r0
 8009140:	2b00      	cmp	r3, #0
 8009142:	d10f      	bne.n	8009164 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8009144:	687b      	ldr	r3, [r7, #4]
 8009146:	2b0f      	cmp	r3, #15
 8009148:	d809      	bhi.n	800915e <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800914a:	2200      	movs	r2, #0
 800914c:	6879      	ldr	r1, [r7, #4]
 800914e:	f04f 30ff 	mov.w	r0, #4294967295
 8009152:	f000 f910 	bl	8009376 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8009156:	4a0a      	ldr	r2, [pc, #40]	@ (8009180 <HAL_InitTick+0x70>)
 8009158:	687b      	ldr	r3, [r7, #4]
 800915a:	6013      	str	r3, [r2, #0]
 800915c:	e007      	b.n	800916e <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 800915e:	2301      	movs	r3, #1
 8009160:	73fb      	strb	r3, [r7, #15]
 8009162:	e004      	b.n	800916e <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8009164:	2301      	movs	r3, #1
 8009166:	73fb      	strb	r3, [r7, #15]
 8009168:	e001      	b.n	800916e <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 800916a:	2301      	movs	r3, #1
 800916c:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800916e:	7bfb      	ldrb	r3, [r7, #15]
}
 8009170:	4618      	mov	r0, r3
 8009172:	3710      	adds	r7, #16
 8009174:	46bd      	mov	sp, r7
 8009176:	bd80      	pop	{r7, pc}
 8009178:	200001c0 	.word	0x200001c0
 800917c:	20000000 	.word	0x20000000
 8009180:	200001bc 	.word	0x200001bc

08009184 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8009184:	b480      	push	{r7}
 8009186:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8009188:	4b05      	ldr	r3, [pc, #20]	@ (80091a0 <HAL_IncTick+0x1c>)
 800918a:	681a      	ldr	r2, [r3, #0]
 800918c:	4b05      	ldr	r3, [pc, #20]	@ (80091a4 <HAL_IncTick+0x20>)
 800918e:	681b      	ldr	r3, [r3, #0]
 8009190:	4413      	add	r3, r2
 8009192:	4a03      	ldr	r2, [pc, #12]	@ (80091a0 <HAL_IncTick+0x1c>)
 8009194:	6013      	str	r3, [r2, #0]
}
 8009196:	bf00      	nop
 8009198:	46bd      	mov	sp, r7
 800919a:	bc80      	pop	{r7}
 800919c:	4770      	bx	lr
 800919e:	bf00      	nop
 80091a0:	20000630 	.word	0x20000630
 80091a4:	200001c0 	.word	0x200001c0

080091a8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80091a8:	b480      	push	{r7}
 80091aa:	af00      	add	r7, sp, #0
  return uwTick;
 80091ac:	4b02      	ldr	r3, [pc, #8]	@ (80091b8 <HAL_GetTick+0x10>)
 80091ae:	681b      	ldr	r3, [r3, #0]
}
 80091b0:	4618      	mov	r0, r3
 80091b2:	46bd      	mov	sp, r7
 80091b4:	bc80      	pop	{r7}
 80091b6:	4770      	bx	lr
 80091b8:	20000630 	.word	0x20000630

080091bc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80091bc:	b580      	push	{r7, lr}
 80091be:	b084      	sub	sp, #16
 80091c0:	af00      	add	r7, sp, #0
 80091c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80091c4:	f7ff fff0 	bl	80091a8 <HAL_GetTick>
 80091c8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80091ca:	687b      	ldr	r3, [r7, #4]
 80091cc:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80091ce:	68fb      	ldr	r3, [r7, #12]
 80091d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80091d4:	d004      	beq.n	80091e0 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 80091d6:	4b09      	ldr	r3, [pc, #36]	@ (80091fc <HAL_Delay+0x40>)
 80091d8:	681b      	ldr	r3, [r3, #0]
 80091da:	68fa      	ldr	r2, [r7, #12]
 80091dc:	4413      	add	r3, r2
 80091de:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80091e0:	bf00      	nop
 80091e2:	f7ff ffe1 	bl	80091a8 <HAL_GetTick>
 80091e6:	4602      	mov	r2, r0
 80091e8:	68bb      	ldr	r3, [r7, #8]
 80091ea:	1ad3      	subs	r3, r2, r3
 80091ec:	68fa      	ldr	r2, [r7, #12]
 80091ee:	429a      	cmp	r2, r3
 80091f0:	d8f7      	bhi.n	80091e2 <HAL_Delay+0x26>
  {
  }
}
 80091f2:	bf00      	nop
 80091f4:	bf00      	nop
 80091f6:	3710      	adds	r7, #16
 80091f8:	46bd      	mov	sp, r7
 80091fa:	bd80      	pop	{r7, pc}
 80091fc:	200001c0 	.word	0x200001c0

08009200 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8009200:	b480      	push	{r7}
 8009202:	b085      	sub	sp, #20
 8009204:	af00      	add	r7, sp, #0
 8009206:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8009208:	687b      	ldr	r3, [r7, #4]
 800920a:	f003 0307 	and.w	r3, r3, #7
 800920e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8009210:	4b0c      	ldr	r3, [pc, #48]	@ (8009244 <__NVIC_SetPriorityGrouping+0x44>)
 8009212:	68db      	ldr	r3, [r3, #12]
 8009214:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8009216:	68ba      	ldr	r2, [r7, #8]
 8009218:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800921c:	4013      	ands	r3, r2
 800921e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8009220:	68fb      	ldr	r3, [r7, #12]
 8009222:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8009224:	68bb      	ldr	r3, [r7, #8]
 8009226:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8009228:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800922c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8009230:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8009232:	4a04      	ldr	r2, [pc, #16]	@ (8009244 <__NVIC_SetPriorityGrouping+0x44>)
 8009234:	68bb      	ldr	r3, [r7, #8]
 8009236:	60d3      	str	r3, [r2, #12]
}
 8009238:	bf00      	nop
 800923a:	3714      	adds	r7, #20
 800923c:	46bd      	mov	sp, r7
 800923e:	bc80      	pop	{r7}
 8009240:	4770      	bx	lr
 8009242:	bf00      	nop
 8009244:	e000ed00 	.word	0xe000ed00

08009248 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8009248:	b480      	push	{r7}
 800924a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800924c:	4b04      	ldr	r3, [pc, #16]	@ (8009260 <__NVIC_GetPriorityGrouping+0x18>)
 800924e:	68db      	ldr	r3, [r3, #12]
 8009250:	0a1b      	lsrs	r3, r3, #8
 8009252:	f003 0307 	and.w	r3, r3, #7
}
 8009256:	4618      	mov	r0, r3
 8009258:	46bd      	mov	sp, r7
 800925a:	bc80      	pop	{r7}
 800925c:	4770      	bx	lr
 800925e:	bf00      	nop
 8009260:	e000ed00 	.word	0xe000ed00

08009264 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8009264:	b480      	push	{r7}
 8009266:	b083      	sub	sp, #12
 8009268:	af00      	add	r7, sp, #0
 800926a:	4603      	mov	r3, r0
 800926c:	6039      	str	r1, [r7, #0]
 800926e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8009270:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009274:	2b00      	cmp	r3, #0
 8009276:	db0a      	blt.n	800928e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8009278:	683b      	ldr	r3, [r7, #0]
 800927a:	b2da      	uxtb	r2, r3
 800927c:	490c      	ldr	r1, [pc, #48]	@ (80092b0 <__NVIC_SetPriority+0x4c>)
 800927e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009282:	0112      	lsls	r2, r2, #4
 8009284:	b2d2      	uxtb	r2, r2
 8009286:	440b      	add	r3, r1
 8009288:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800928c:	e00a      	b.n	80092a4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800928e:	683b      	ldr	r3, [r7, #0]
 8009290:	b2da      	uxtb	r2, r3
 8009292:	4908      	ldr	r1, [pc, #32]	@ (80092b4 <__NVIC_SetPriority+0x50>)
 8009294:	79fb      	ldrb	r3, [r7, #7]
 8009296:	f003 030f 	and.w	r3, r3, #15
 800929a:	3b04      	subs	r3, #4
 800929c:	0112      	lsls	r2, r2, #4
 800929e:	b2d2      	uxtb	r2, r2
 80092a0:	440b      	add	r3, r1
 80092a2:	761a      	strb	r2, [r3, #24]
}
 80092a4:	bf00      	nop
 80092a6:	370c      	adds	r7, #12
 80092a8:	46bd      	mov	sp, r7
 80092aa:	bc80      	pop	{r7}
 80092ac:	4770      	bx	lr
 80092ae:	bf00      	nop
 80092b0:	e000e100 	.word	0xe000e100
 80092b4:	e000ed00 	.word	0xe000ed00

080092b8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80092b8:	b480      	push	{r7}
 80092ba:	b089      	sub	sp, #36	@ 0x24
 80092bc:	af00      	add	r7, sp, #0
 80092be:	60f8      	str	r0, [r7, #12]
 80092c0:	60b9      	str	r1, [r7, #8]
 80092c2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80092c4:	68fb      	ldr	r3, [r7, #12]
 80092c6:	f003 0307 	and.w	r3, r3, #7
 80092ca:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80092cc:	69fb      	ldr	r3, [r7, #28]
 80092ce:	f1c3 0307 	rsb	r3, r3, #7
 80092d2:	2b04      	cmp	r3, #4
 80092d4:	bf28      	it	cs
 80092d6:	2304      	movcs	r3, #4
 80092d8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80092da:	69fb      	ldr	r3, [r7, #28]
 80092dc:	3304      	adds	r3, #4
 80092de:	2b06      	cmp	r3, #6
 80092e0:	d902      	bls.n	80092e8 <NVIC_EncodePriority+0x30>
 80092e2:	69fb      	ldr	r3, [r7, #28]
 80092e4:	3b03      	subs	r3, #3
 80092e6:	e000      	b.n	80092ea <NVIC_EncodePriority+0x32>
 80092e8:	2300      	movs	r3, #0
 80092ea:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80092ec:	f04f 32ff 	mov.w	r2, #4294967295
 80092f0:	69bb      	ldr	r3, [r7, #24]
 80092f2:	fa02 f303 	lsl.w	r3, r2, r3
 80092f6:	43da      	mvns	r2, r3
 80092f8:	68bb      	ldr	r3, [r7, #8]
 80092fa:	401a      	ands	r2, r3
 80092fc:	697b      	ldr	r3, [r7, #20]
 80092fe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8009300:	f04f 31ff 	mov.w	r1, #4294967295
 8009304:	697b      	ldr	r3, [r7, #20]
 8009306:	fa01 f303 	lsl.w	r3, r1, r3
 800930a:	43d9      	mvns	r1, r3
 800930c:	687b      	ldr	r3, [r7, #4]
 800930e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8009310:	4313      	orrs	r3, r2
         );
}
 8009312:	4618      	mov	r0, r3
 8009314:	3724      	adds	r7, #36	@ 0x24
 8009316:	46bd      	mov	sp, r7
 8009318:	bc80      	pop	{r7}
 800931a:	4770      	bx	lr

0800931c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800931c:	b580      	push	{r7, lr}
 800931e:	b082      	sub	sp, #8
 8009320:	af00      	add	r7, sp, #0
 8009322:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8009324:	687b      	ldr	r3, [r7, #4]
 8009326:	3b01      	subs	r3, #1
 8009328:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800932c:	d301      	bcc.n	8009332 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800932e:	2301      	movs	r3, #1
 8009330:	e00f      	b.n	8009352 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8009332:	4a0a      	ldr	r2, [pc, #40]	@ (800935c <SysTick_Config+0x40>)
 8009334:	687b      	ldr	r3, [r7, #4]
 8009336:	3b01      	subs	r3, #1
 8009338:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800933a:	210f      	movs	r1, #15
 800933c:	f04f 30ff 	mov.w	r0, #4294967295
 8009340:	f7ff ff90 	bl	8009264 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8009344:	4b05      	ldr	r3, [pc, #20]	@ (800935c <SysTick_Config+0x40>)
 8009346:	2200      	movs	r2, #0
 8009348:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800934a:	4b04      	ldr	r3, [pc, #16]	@ (800935c <SysTick_Config+0x40>)
 800934c:	2207      	movs	r2, #7
 800934e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8009350:	2300      	movs	r3, #0
}
 8009352:	4618      	mov	r0, r3
 8009354:	3708      	adds	r7, #8
 8009356:	46bd      	mov	sp, r7
 8009358:	bd80      	pop	{r7, pc}
 800935a:	bf00      	nop
 800935c:	e000e010 	.word	0xe000e010

08009360 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8009360:	b580      	push	{r7, lr}
 8009362:	b082      	sub	sp, #8
 8009364:	af00      	add	r7, sp, #0
 8009366:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8009368:	6878      	ldr	r0, [r7, #4]
 800936a:	f7ff ff49 	bl	8009200 <__NVIC_SetPriorityGrouping>
}
 800936e:	bf00      	nop
 8009370:	3708      	adds	r7, #8
 8009372:	46bd      	mov	sp, r7
 8009374:	bd80      	pop	{r7, pc}

08009376 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8009376:	b580      	push	{r7, lr}
 8009378:	b086      	sub	sp, #24
 800937a:	af00      	add	r7, sp, #0
 800937c:	4603      	mov	r3, r0
 800937e:	60b9      	str	r1, [r7, #8]
 8009380:	607a      	str	r2, [r7, #4]
 8009382:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8009384:	2300      	movs	r3, #0
 8009386:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8009388:	f7ff ff5e 	bl	8009248 <__NVIC_GetPriorityGrouping>
 800938c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800938e:	687a      	ldr	r2, [r7, #4]
 8009390:	68b9      	ldr	r1, [r7, #8]
 8009392:	6978      	ldr	r0, [r7, #20]
 8009394:	f7ff ff90 	bl	80092b8 <NVIC_EncodePriority>
 8009398:	4602      	mov	r2, r0
 800939a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800939e:	4611      	mov	r1, r2
 80093a0:	4618      	mov	r0, r3
 80093a2:	f7ff ff5f 	bl	8009264 <__NVIC_SetPriority>
}
 80093a6:	bf00      	nop
 80093a8:	3718      	adds	r7, #24
 80093aa:	46bd      	mov	sp, r7
 80093ac:	bd80      	pop	{r7, pc}

080093ae <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80093ae:	b580      	push	{r7, lr}
 80093b0:	b082      	sub	sp, #8
 80093b2:	af00      	add	r7, sp, #0
 80093b4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80093b6:	6878      	ldr	r0, [r7, #4]
 80093b8:	f7ff ffb0 	bl	800931c <SysTick_Config>
 80093bc:	4603      	mov	r3, r0
}
 80093be:	4618      	mov	r0, r3
 80093c0:	3708      	adds	r7, #8
 80093c2:	46bd      	mov	sp, r7
 80093c4:	bd80      	pop	{r7, pc}
	...

080093c8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80093c8:	b480      	push	{r7}
 80093ca:	b087      	sub	sp, #28
 80093cc:	af00      	add	r7, sp, #0
 80093ce:	6078      	str	r0, [r7, #4]
 80093d0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 80093d2:	2300      	movs	r3, #0
 80093d4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 80093d6:	2300      	movs	r3, #0
 80093d8:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00;
 80093da:	2300      	movs	r3, #0
 80093dc:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 80093de:	e160      	b.n	80096a2 <HAL_GPIO_Init+0x2da>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 80093e0:	683b      	ldr	r3, [r7, #0]
 80093e2:	681a      	ldr	r2, [r3, #0]
 80093e4:	2101      	movs	r1, #1
 80093e6:	697b      	ldr	r3, [r7, #20]
 80093e8:	fa01 f303 	lsl.w	r3, r1, r3
 80093ec:	4013      	ands	r3, r2
 80093ee:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 80093f0:	68fb      	ldr	r3, [r7, #12]
 80093f2:	2b00      	cmp	r3, #0
 80093f4:	f000 8152 	beq.w	800969c <HAL_GPIO_Init+0x2d4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80093f8:	683b      	ldr	r3, [r7, #0]
 80093fa:	685b      	ldr	r3, [r3, #4]
 80093fc:	f003 0303 	and.w	r3, r3, #3
 8009400:	2b01      	cmp	r3, #1
 8009402:	d005      	beq.n	8009410 <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8009404:	683b      	ldr	r3, [r7, #0]
 8009406:	685b      	ldr	r3, [r3, #4]
 8009408:	f003 0303 	and.w	r3, r3, #3
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800940c:	2b02      	cmp	r3, #2
 800940e:	d130      	bne.n	8009472 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8009410:	687b      	ldr	r3, [r7, #4]
 8009412:	689b      	ldr	r3, [r3, #8]
 8009414:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8009416:	697b      	ldr	r3, [r7, #20]
 8009418:	005b      	lsls	r3, r3, #1
 800941a:	2203      	movs	r2, #3
 800941c:	fa02 f303 	lsl.w	r3, r2, r3
 8009420:	43db      	mvns	r3, r3
 8009422:	693a      	ldr	r2, [r7, #16]
 8009424:	4013      	ands	r3, r2
 8009426:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, GPIO_Init->Speed << (position * 2));
 8009428:	683b      	ldr	r3, [r7, #0]
 800942a:	68da      	ldr	r2, [r3, #12]
 800942c:	697b      	ldr	r3, [r7, #20]
 800942e:	005b      	lsls	r3, r3, #1
 8009430:	fa02 f303 	lsl.w	r3, r2, r3
 8009434:	693a      	ldr	r2, [r7, #16]
 8009436:	4313      	orrs	r3, r2
 8009438:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800943a:	687b      	ldr	r3, [r7, #4]
 800943c:	693a      	ldr	r2, [r7, #16]
 800943e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8009440:	687b      	ldr	r3, [r7, #4]
 8009442:	685b      	ldr	r3, [r3, #4]
 8009444:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OTYPER_OT_0 << position) ;
 8009446:	2201      	movs	r2, #1
 8009448:	697b      	ldr	r3, [r7, #20]
 800944a:	fa02 f303 	lsl.w	r3, r2, r3
 800944e:	43db      	mvns	r3, r3
 8009450:	693a      	ldr	r2, [r7, #16]
 8009452:	4013      	ands	r3, r2
 8009454:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, ((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8009456:	683b      	ldr	r3, [r7, #0]
 8009458:	685b      	ldr	r3, [r3, #4]
 800945a:	091b      	lsrs	r3, r3, #4
 800945c:	f003 0201 	and.w	r2, r3, #1
 8009460:	697b      	ldr	r3, [r7, #20]
 8009462:	fa02 f303 	lsl.w	r3, r2, r3
 8009466:	693a      	ldr	r2, [r7, #16]
 8009468:	4313      	orrs	r3, r2
 800946a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800946c:	687b      	ldr	r3, [r7, #4]
 800946e:	693a      	ldr	r2, [r7, #16]
 8009470:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8009472:	683b      	ldr	r3, [r7, #0]
 8009474:	685b      	ldr	r3, [r3, #4]
 8009476:	f003 0303 	and.w	r3, r3, #3
 800947a:	2b03      	cmp	r3, #3
 800947c:	d017      	beq.n	80094ae <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800947e:	687b      	ldr	r3, [r7, #4]
 8009480:	68db      	ldr	r3, [r3, #12]
 8009482:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_PUPDR_PUPDR0 << (position * 2));
 8009484:	697b      	ldr	r3, [r7, #20]
 8009486:	005b      	lsls	r3, r3, #1
 8009488:	2203      	movs	r2, #3
 800948a:	fa02 f303 	lsl.w	r3, r2, r3
 800948e:	43db      	mvns	r3, r3
 8009490:	693a      	ldr	r2, [r7, #16]
 8009492:	4013      	ands	r3, r2
 8009494:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_Init->Pull) << (position * 2));
 8009496:	683b      	ldr	r3, [r7, #0]
 8009498:	689a      	ldr	r2, [r3, #8]
 800949a:	697b      	ldr	r3, [r7, #20]
 800949c:	005b      	lsls	r3, r3, #1
 800949e:	fa02 f303 	lsl.w	r3, r2, r3
 80094a2:	693a      	ldr	r2, [r7, #16]
 80094a4:	4313      	orrs	r3, r2
 80094a6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80094a8:	687b      	ldr	r3, [r7, #4]
 80094aa:	693a      	ldr	r2, [r7, #16]
 80094ac:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80094ae:	683b      	ldr	r3, [r7, #0]
 80094b0:	685b      	ldr	r3, [r3, #4]
 80094b2:	f003 0303 	and.w	r3, r3, #3
 80094b6:	2b02      	cmp	r3, #2
 80094b8:	d123      	bne.n	8009502 <HAL_GPIO_Init+0x13a>
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        /* Identify AFRL or AFRH register based on IO position*/
        temp = GPIOx->AFR[position >> 3];
 80094ba:	697b      	ldr	r3, [r7, #20]
 80094bc:	08da      	lsrs	r2, r3, #3
 80094be:	687b      	ldr	r3, [r7, #4]
 80094c0:	3208      	adds	r2, #8
 80094c2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80094c6:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, 0xFU << ((uint32_t)(position & 0x07U) * 4));
 80094c8:	697b      	ldr	r3, [r7, #20]
 80094ca:	f003 0307 	and.w	r3, r3, #7
 80094ce:	009b      	lsls	r3, r3, #2
 80094d0:	220f      	movs	r2, #15
 80094d2:	fa02 f303 	lsl.w	r3, r2, r3
 80094d6:	43db      	mvns	r3, r3
 80094d8:	693a      	ldr	r2, [r7, #16]
 80094da:	4013      	ands	r3, r2
 80094dc:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4));
 80094de:	683b      	ldr	r3, [r7, #0]
 80094e0:	691a      	ldr	r2, [r3, #16]
 80094e2:	697b      	ldr	r3, [r7, #20]
 80094e4:	f003 0307 	and.w	r3, r3, #7
 80094e8:	009b      	lsls	r3, r3, #2
 80094ea:	fa02 f303 	lsl.w	r3, r2, r3
 80094ee:	693a      	ldr	r2, [r7, #16]
 80094f0:	4313      	orrs	r3, r2
 80094f2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3] = temp;
 80094f4:	697b      	ldr	r3, [r7, #20]
 80094f6:	08da      	lsrs	r2, r3, #3
 80094f8:	687b      	ldr	r3, [r7, #4]
 80094fa:	3208      	adds	r2, #8
 80094fc:	6939      	ldr	r1, [r7, #16]
 80094fe:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8009502:	687b      	ldr	r3, [r7, #4]
 8009504:	681b      	ldr	r3, [r3, #0]
 8009506:	613b      	str	r3, [r7, #16]
      CLEAR_BIT(temp, GPIO_MODER_MODER0 << (position * 2));
 8009508:	697b      	ldr	r3, [r7, #20]
 800950a:	005b      	lsls	r3, r3, #1
 800950c:	2203      	movs	r2, #3
 800950e:	fa02 f303 	lsl.w	r3, r2, r3
 8009512:	43db      	mvns	r3, r3
 8009514:	693a      	ldr	r2, [r7, #16]
 8009516:	4013      	ands	r3, r2
 8009518:	613b      	str	r3, [r7, #16]
      SET_BIT(temp, (GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 800951a:	683b      	ldr	r3, [r7, #0]
 800951c:	685b      	ldr	r3, [r3, #4]
 800951e:	f003 0203 	and.w	r2, r3, #3
 8009522:	697b      	ldr	r3, [r7, #20]
 8009524:	005b      	lsls	r3, r3, #1
 8009526:	fa02 f303 	lsl.w	r3, r2, r3
 800952a:	693a      	ldr	r2, [r7, #16]
 800952c:	4313      	orrs	r3, r2
 800952e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8009530:	687b      	ldr	r3, [r7, #4]
 8009532:	693a      	ldr	r2, [r7, #16]
 8009534:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8009536:	683b      	ldr	r3, [r7, #0]
 8009538:	685b      	ldr	r3, [r3, #4]
 800953a:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800953e:	2b00      	cmp	r3, #0
 8009540:	f000 80ac 	beq.w	800969c <HAL_GPIO_Init+0x2d4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8009544:	4b5e      	ldr	r3, [pc, #376]	@ (80096c0 <HAL_GPIO_Init+0x2f8>)
 8009546:	6a1b      	ldr	r3, [r3, #32]
 8009548:	4a5d      	ldr	r2, [pc, #372]	@ (80096c0 <HAL_GPIO_Init+0x2f8>)
 800954a:	f043 0301 	orr.w	r3, r3, #1
 800954e:	6213      	str	r3, [r2, #32]
 8009550:	4b5b      	ldr	r3, [pc, #364]	@ (80096c0 <HAL_GPIO_Init+0x2f8>)
 8009552:	6a1b      	ldr	r3, [r3, #32]
 8009554:	f003 0301 	and.w	r3, r3, #1
 8009558:	60bb      	str	r3, [r7, #8]
 800955a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2];
 800955c:	4a59      	ldr	r2, [pc, #356]	@ (80096c4 <HAL_GPIO_Init+0x2fc>)
 800955e:	697b      	ldr	r3, [r7, #20]
 8009560:	089b      	lsrs	r3, r3, #2
 8009562:	3302      	adds	r3, #2
 8009564:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009568:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FU) << (4 * (position & 0x03)));
 800956a:	697b      	ldr	r3, [r7, #20]
 800956c:	f003 0303 	and.w	r3, r3, #3
 8009570:	009b      	lsls	r3, r3, #2
 8009572:	220f      	movs	r2, #15
 8009574:	fa02 f303 	lsl.w	r3, r2, r3
 8009578:	43db      	mvns	r3, r3
 800957a:	693a      	ldr	r2, [r7, #16]
 800957c:	4013      	ands	r3, r2
 800957e:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8009580:	687b      	ldr	r3, [r7, #4]
 8009582:	4a51      	ldr	r2, [pc, #324]	@ (80096c8 <HAL_GPIO_Init+0x300>)
 8009584:	4293      	cmp	r3, r2
 8009586:	d025      	beq.n	80095d4 <HAL_GPIO_Init+0x20c>
 8009588:	687b      	ldr	r3, [r7, #4]
 800958a:	4a50      	ldr	r2, [pc, #320]	@ (80096cc <HAL_GPIO_Init+0x304>)
 800958c:	4293      	cmp	r3, r2
 800958e:	d01f      	beq.n	80095d0 <HAL_GPIO_Init+0x208>
 8009590:	687b      	ldr	r3, [r7, #4]
 8009592:	4a4f      	ldr	r2, [pc, #316]	@ (80096d0 <HAL_GPIO_Init+0x308>)
 8009594:	4293      	cmp	r3, r2
 8009596:	d019      	beq.n	80095cc <HAL_GPIO_Init+0x204>
 8009598:	687b      	ldr	r3, [r7, #4]
 800959a:	4a4e      	ldr	r2, [pc, #312]	@ (80096d4 <HAL_GPIO_Init+0x30c>)
 800959c:	4293      	cmp	r3, r2
 800959e:	d013      	beq.n	80095c8 <HAL_GPIO_Init+0x200>
 80095a0:	687b      	ldr	r3, [r7, #4]
 80095a2:	4a4d      	ldr	r2, [pc, #308]	@ (80096d8 <HAL_GPIO_Init+0x310>)
 80095a4:	4293      	cmp	r3, r2
 80095a6:	d00d      	beq.n	80095c4 <HAL_GPIO_Init+0x1fc>
 80095a8:	687b      	ldr	r3, [r7, #4]
 80095aa:	4a4c      	ldr	r2, [pc, #304]	@ (80096dc <HAL_GPIO_Init+0x314>)
 80095ac:	4293      	cmp	r3, r2
 80095ae:	d007      	beq.n	80095c0 <HAL_GPIO_Init+0x1f8>
 80095b0:	687b      	ldr	r3, [r7, #4]
 80095b2:	4a4b      	ldr	r2, [pc, #300]	@ (80096e0 <HAL_GPIO_Init+0x318>)
 80095b4:	4293      	cmp	r3, r2
 80095b6:	d101      	bne.n	80095bc <HAL_GPIO_Init+0x1f4>
 80095b8:	2306      	movs	r3, #6
 80095ba:	e00c      	b.n	80095d6 <HAL_GPIO_Init+0x20e>
 80095bc:	2307      	movs	r3, #7
 80095be:	e00a      	b.n	80095d6 <HAL_GPIO_Init+0x20e>
 80095c0:	2305      	movs	r3, #5
 80095c2:	e008      	b.n	80095d6 <HAL_GPIO_Init+0x20e>
 80095c4:	2304      	movs	r3, #4
 80095c6:	e006      	b.n	80095d6 <HAL_GPIO_Init+0x20e>
 80095c8:	2303      	movs	r3, #3
 80095ca:	e004      	b.n	80095d6 <HAL_GPIO_Init+0x20e>
 80095cc:	2302      	movs	r3, #2
 80095ce:	e002      	b.n	80095d6 <HAL_GPIO_Init+0x20e>
 80095d0:	2301      	movs	r3, #1
 80095d2:	e000      	b.n	80095d6 <HAL_GPIO_Init+0x20e>
 80095d4:	2300      	movs	r3, #0
 80095d6:	697a      	ldr	r2, [r7, #20]
 80095d8:	f002 0203 	and.w	r2, r2, #3
 80095dc:	0092      	lsls	r2, r2, #2
 80095de:	4093      	lsls	r3, r2
 80095e0:	693a      	ldr	r2, [r7, #16]
 80095e2:	4313      	orrs	r3, r2
 80095e4:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2] = temp;
 80095e6:	4937      	ldr	r1, [pc, #220]	@ (80096c4 <HAL_GPIO_Init+0x2fc>)
 80095e8:	697b      	ldr	r3, [r7, #20]
 80095ea:	089b      	lsrs	r3, r3, #2
 80095ec:	3302      	adds	r3, #2
 80095ee:	693a      	ldr	r2, [r7, #16]
 80095f0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80095f4:	4b3b      	ldr	r3, [pc, #236]	@ (80096e4 <HAL_GPIO_Init+0x31c>)
 80095f6:	689b      	ldr	r3, [r3, #8]
 80095f8:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 80095fa:	68fb      	ldr	r3, [r7, #12]
 80095fc:	43db      	mvns	r3, r3
 80095fe:	693a      	ldr	r2, [r7, #16]
 8009600:	4013      	ands	r3, r2
 8009602:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8009604:	683b      	ldr	r3, [r7, #0]
 8009606:	685b      	ldr	r3, [r3, #4]
 8009608:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800960c:	2b00      	cmp	r3, #0
 800960e:	d003      	beq.n	8009618 <HAL_GPIO_Init+0x250>
        {
          SET_BIT(temp, iocurrent);
 8009610:	693a      	ldr	r2, [r7, #16]
 8009612:	68fb      	ldr	r3, [r7, #12]
 8009614:	4313      	orrs	r3, r2
 8009616:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8009618:	4a32      	ldr	r2, [pc, #200]	@ (80096e4 <HAL_GPIO_Init+0x31c>)
 800961a:	693b      	ldr	r3, [r7, #16]
 800961c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800961e:	4b31      	ldr	r3, [pc, #196]	@ (80096e4 <HAL_GPIO_Init+0x31c>)
 8009620:	68db      	ldr	r3, [r3, #12]
 8009622:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8009624:	68fb      	ldr	r3, [r7, #12]
 8009626:	43db      	mvns	r3, r3
 8009628:	693a      	ldr	r2, [r7, #16]
 800962a:	4013      	ands	r3, r2
 800962c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800962e:	683b      	ldr	r3, [r7, #0]
 8009630:	685b      	ldr	r3, [r3, #4]
 8009632:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8009636:	2b00      	cmp	r3, #0
 8009638:	d003      	beq.n	8009642 <HAL_GPIO_Init+0x27a>
        {
          SET_BIT(temp, iocurrent);
 800963a:	693a      	ldr	r2, [r7, #16]
 800963c:	68fb      	ldr	r3, [r7, #12]
 800963e:	4313      	orrs	r3, r2
 8009640:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8009642:	4a28      	ldr	r2, [pc, #160]	@ (80096e4 <HAL_GPIO_Init+0x31c>)
 8009644:	693b      	ldr	r3, [r7, #16]
 8009646:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8009648:	4b26      	ldr	r3, [pc, #152]	@ (80096e4 <HAL_GPIO_Init+0x31c>)
 800964a:	685b      	ldr	r3, [r3, #4]
 800964c:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 800964e:	68fb      	ldr	r3, [r7, #12]
 8009650:	43db      	mvns	r3, r3
 8009652:	693a      	ldr	r2, [r7, #16]
 8009654:	4013      	ands	r3, r2
 8009656:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8009658:	683b      	ldr	r3, [r7, #0]
 800965a:	685b      	ldr	r3, [r3, #4]
 800965c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009660:	2b00      	cmp	r3, #0
 8009662:	d003      	beq.n	800966c <HAL_GPIO_Init+0x2a4>
        {
          SET_BIT(temp, iocurrent);
 8009664:	693a      	ldr	r2, [r7, #16]
 8009666:	68fb      	ldr	r3, [r7, #12]
 8009668:	4313      	orrs	r3, r2
 800966a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 800966c:	4a1d      	ldr	r2, [pc, #116]	@ (80096e4 <HAL_GPIO_Init+0x31c>)
 800966e:	693b      	ldr	r3, [r7, #16]
 8009670:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8009672:	4b1c      	ldr	r3, [pc, #112]	@ (80096e4 <HAL_GPIO_Init+0x31c>)
 8009674:	681b      	ldr	r3, [r3, #0]
 8009676:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8009678:	68fb      	ldr	r3, [r7, #12]
 800967a:	43db      	mvns	r3, r3
 800967c:	693a      	ldr	r2, [r7, #16]
 800967e:	4013      	ands	r3, r2
 8009680:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8009682:	683b      	ldr	r3, [r7, #0]
 8009684:	685b      	ldr	r3, [r3, #4]
 8009686:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800968a:	2b00      	cmp	r3, #0
 800968c:	d003      	beq.n	8009696 <HAL_GPIO_Init+0x2ce>
        {
          SET_BIT(temp, iocurrent);
 800968e:	693a      	ldr	r2, [r7, #16]
 8009690:	68fb      	ldr	r3, [r7, #12]
 8009692:	4313      	orrs	r3, r2
 8009694:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8009696:	4a13      	ldr	r2, [pc, #76]	@ (80096e4 <HAL_GPIO_Init+0x31c>)
 8009698:	693b      	ldr	r3, [r7, #16]
 800969a:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800969c:	697b      	ldr	r3, [r7, #20]
 800969e:	3301      	adds	r3, #1
 80096a0:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 80096a2:	683b      	ldr	r3, [r7, #0]
 80096a4:	681a      	ldr	r2, [r3, #0]
 80096a6:	697b      	ldr	r3, [r7, #20]
 80096a8:	fa22 f303 	lsr.w	r3, r2, r3
 80096ac:	2b00      	cmp	r3, #0
 80096ae:	f47f ae97 	bne.w	80093e0 <HAL_GPIO_Init+0x18>
  }
}
 80096b2:	bf00      	nop
 80096b4:	bf00      	nop
 80096b6:	371c      	adds	r7, #28
 80096b8:	46bd      	mov	sp, r7
 80096ba:	bc80      	pop	{r7}
 80096bc:	4770      	bx	lr
 80096be:	bf00      	nop
 80096c0:	40023800 	.word	0x40023800
 80096c4:	40010000 	.word	0x40010000
 80096c8:	40020000 	.word	0x40020000
 80096cc:	40020400 	.word	0x40020400
 80096d0:	40020800 	.word	0x40020800
 80096d4:	40020c00 	.word	0x40020c00
 80096d8:	40021000 	.word	0x40021000
 80096dc:	40021400 	.word	0x40021400
 80096e0:	40021800 	.word	0x40021800
 80096e4:	40010400 	.word	0x40010400

080096e8 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *         This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 80096e8:	b480      	push	{r7}
 80096ea:	b087      	sub	sp, #28
 80096ec:	af00      	add	r7, sp, #0
 80096ee:	6078      	str	r0, [r7, #4]
 80096f0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 80096f2:	2300      	movs	r3, #0
 80096f4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 80096f6:	2300      	movs	r3, #0
 80096f8:	613b      	str	r3, [r7, #16]
  uint32_t tmp = 0x00;
 80096fa:	2300      	movs	r3, #0
 80096fc:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0)
 80096fe:	e0c4      	b.n	800988a <HAL_GPIO_DeInit+0x1a2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1U << position);
 8009700:	2201      	movs	r2, #1
 8009702:	697b      	ldr	r3, [r7, #20]
 8009704:	fa02 f303 	lsl.w	r3, r2, r3
 8009708:	683a      	ldr	r2, [r7, #0]
 800970a:	4013      	ands	r3, r2
 800970c:	613b      	str	r3, [r7, #16]

    if (iocurrent)
 800970e:	693b      	ldr	r3, [r7, #16]
 8009710:	2b00      	cmp	r3, #0
 8009712:	f000 80b7 	beq.w	8009884 <HAL_GPIO_DeInit+0x19c>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2];
 8009716:	4a63      	ldr	r2, [pc, #396]	@ (80098a4 <HAL_GPIO_DeInit+0x1bc>)
 8009718:	697b      	ldr	r3, [r7, #20]
 800971a:	089b      	lsrs	r3, r3, #2
 800971c:	3302      	adds	r3, #2
 800971e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009722:	60fb      	str	r3, [r7, #12]
      tmp &= ((0x0FU) << (4 * (position & 0x03)));
 8009724:	697b      	ldr	r3, [r7, #20]
 8009726:	f003 0303 	and.w	r3, r3, #3
 800972a:	009b      	lsls	r3, r3, #2
 800972c:	220f      	movs	r2, #15
 800972e:	fa02 f303 	lsl.w	r3, r2, r3
 8009732:	68fa      	ldr	r2, [r7, #12]
 8009734:	4013      	ands	r3, r2
 8009736:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4 * (position & 0x03))))
 8009738:	687b      	ldr	r3, [r7, #4]
 800973a:	4a5b      	ldr	r2, [pc, #364]	@ (80098a8 <HAL_GPIO_DeInit+0x1c0>)
 800973c:	4293      	cmp	r3, r2
 800973e:	d025      	beq.n	800978c <HAL_GPIO_DeInit+0xa4>
 8009740:	687b      	ldr	r3, [r7, #4]
 8009742:	4a5a      	ldr	r2, [pc, #360]	@ (80098ac <HAL_GPIO_DeInit+0x1c4>)
 8009744:	4293      	cmp	r3, r2
 8009746:	d01f      	beq.n	8009788 <HAL_GPIO_DeInit+0xa0>
 8009748:	687b      	ldr	r3, [r7, #4]
 800974a:	4a59      	ldr	r2, [pc, #356]	@ (80098b0 <HAL_GPIO_DeInit+0x1c8>)
 800974c:	4293      	cmp	r3, r2
 800974e:	d019      	beq.n	8009784 <HAL_GPIO_DeInit+0x9c>
 8009750:	687b      	ldr	r3, [r7, #4]
 8009752:	4a58      	ldr	r2, [pc, #352]	@ (80098b4 <HAL_GPIO_DeInit+0x1cc>)
 8009754:	4293      	cmp	r3, r2
 8009756:	d013      	beq.n	8009780 <HAL_GPIO_DeInit+0x98>
 8009758:	687b      	ldr	r3, [r7, #4]
 800975a:	4a57      	ldr	r2, [pc, #348]	@ (80098b8 <HAL_GPIO_DeInit+0x1d0>)
 800975c:	4293      	cmp	r3, r2
 800975e:	d00d      	beq.n	800977c <HAL_GPIO_DeInit+0x94>
 8009760:	687b      	ldr	r3, [r7, #4]
 8009762:	4a56      	ldr	r2, [pc, #344]	@ (80098bc <HAL_GPIO_DeInit+0x1d4>)
 8009764:	4293      	cmp	r3, r2
 8009766:	d007      	beq.n	8009778 <HAL_GPIO_DeInit+0x90>
 8009768:	687b      	ldr	r3, [r7, #4]
 800976a:	4a55      	ldr	r2, [pc, #340]	@ (80098c0 <HAL_GPIO_DeInit+0x1d8>)
 800976c:	4293      	cmp	r3, r2
 800976e:	d101      	bne.n	8009774 <HAL_GPIO_DeInit+0x8c>
 8009770:	2306      	movs	r3, #6
 8009772:	e00c      	b.n	800978e <HAL_GPIO_DeInit+0xa6>
 8009774:	2307      	movs	r3, #7
 8009776:	e00a      	b.n	800978e <HAL_GPIO_DeInit+0xa6>
 8009778:	2305      	movs	r3, #5
 800977a:	e008      	b.n	800978e <HAL_GPIO_DeInit+0xa6>
 800977c:	2304      	movs	r3, #4
 800977e:	e006      	b.n	800978e <HAL_GPIO_DeInit+0xa6>
 8009780:	2303      	movs	r3, #3
 8009782:	e004      	b.n	800978e <HAL_GPIO_DeInit+0xa6>
 8009784:	2302      	movs	r3, #2
 8009786:	e002      	b.n	800978e <HAL_GPIO_DeInit+0xa6>
 8009788:	2301      	movs	r3, #1
 800978a:	e000      	b.n	800978e <HAL_GPIO_DeInit+0xa6>
 800978c:	2300      	movs	r3, #0
 800978e:	697a      	ldr	r2, [r7, #20]
 8009790:	f002 0203 	and.w	r2, r2, #3
 8009794:	0092      	lsls	r2, r2, #2
 8009796:	4093      	lsls	r3, r2
 8009798:	68fa      	ldr	r2, [r7, #12]
 800979a:	429a      	cmp	r2, r3
 800979c:	d132      	bne.n	8009804 <HAL_GPIO_DeInit+0x11c>
      {
        /* Clear EXTI line configuration */
        CLEAR_BIT(EXTI->IMR, (uint32_t)iocurrent);
 800979e:	4b49      	ldr	r3, [pc, #292]	@ (80098c4 <HAL_GPIO_DeInit+0x1dc>)
 80097a0:	681a      	ldr	r2, [r3, #0]
 80097a2:	693b      	ldr	r3, [r7, #16]
 80097a4:	43db      	mvns	r3, r3
 80097a6:	4947      	ldr	r1, [pc, #284]	@ (80098c4 <HAL_GPIO_DeInit+0x1dc>)
 80097a8:	4013      	ands	r3, r2
 80097aa:	600b      	str	r3, [r1, #0]
        CLEAR_BIT(EXTI->EMR, (uint32_t)iocurrent);
 80097ac:	4b45      	ldr	r3, [pc, #276]	@ (80098c4 <HAL_GPIO_DeInit+0x1dc>)
 80097ae:	685a      	ldr	r2, [r3, #4]
 80097b0:	693b      	ldr	r3, [r7, #16]
 80097b2:	43db      	mvns	r3, r3
 80097b4:	4943      	ldr	r1, [pc, #268]	@ (80098c4 <HAL_GPIO_DeInit+0x1dc>)
 80097b6:	4013      	ands	r3, r2
 80097b8:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        CLEAR_BIT(EXTI->FTSR, (uint32_t)iocurrent);
 80097ba:	4b42      	ldr	r3, [pc, #264]	@ (80098c4 <HAL_GPIO_DeInit+0x1dc>)
 80097bc:	68da      	ldr	r2, [r3, #12]
 80097be:	693b      	ldr	r3, [r7, #16]
 80097c0:	43db      	mvns	r3, r3
 80097c2:	4940      	ldr	r1, [pc, #256]	@ (80098c4 <HAL_GPIO_DeInit+0x1dc>)
 80097c4:	4013      	ands	r3, r2
 80097c6:	60cb      	str	r3, [r1, #12]
        CLEAR_BIT(EXTI->RTSR, (uint32_t)iocurrent);
 80097c8:	4b3e      	ldr	r3, [pc, #248]	@ (80098c4 <HAL_GPIO_DeInit+0x1dc>)
 80097ca:	689a      	ldr	r2, [r3, #8]
 80097cc:	693b      	ldr	r3, [r7, #16]
 80097ce:	43db      	mvns	r3, r3
 80097d0:	493c      	ldr	r1, [pc, #240]	@ (80098c4 <HAL_GPIO_DeInit+0x1dc>)
 80097d2:	4013      	ands	r3, r2
 80097d4:	608b      	str	r3, [r1, #8]

        tmp = (0x0FU) << (4 * (position & 0x03));
 80097d6:	697b      	ldr	r3, [r7, #20]
 80097d8:	f003 0303 	and.w	r3, r3, #3
 80097dc:	009b      	lsls	r3, r3, #2
 80097de:	220f      	movs	r2, #15
 80097e0:	fa02 f303 	lsl.w	r3, r2, r3
 80097e4:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(SYSCFG->EXTICR[position >> 2], tmp);
 80097e6:	4a2f      	ldr	r2, [pc, #188]	@ (80098a4 <HAL_GPIO_DeInit+0x1bc>)
 80097e8:	697b      	ldr	r3, [r7, #20]
 80097ea:	089b      	lsrs	r3, r3, #2
 80097ec:	3302      	adds	r3, #2
 80097ee:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 80097f2:	68fb      	ldr	r3, [r7, #12]
 80097f4:	43da      	mvns	r2, r3
 80097f6:	482b      	ldr	r0, [pc, #172]	@ (80098a4 <HAL_GPIO_DeInit+0x1bc>)
 80097f8:	697b      	ldr	r3, [r7, #20]
 80097fa:	089b      	lsrs	r3, r3, #2
 80097fc:	400a      	ands	r2, r1
 80097fe:	3302      	adds	r3, #2
 8009800:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      CLEAR_BIT(GPIOx->MODER, GPIO_MODER_MODER0 << (position * 2));
 8009804:	687b      	ldr	r3, [r7, #4]
 8009806:	681a      	ldr	r2, [r3, #0]
 8009808:	697b      	ldr	r3, [r7, #20]
 800980a:	005b      	lsls	r3, r3, #1
 800980c:	2103      	movs	r1, #3
 800980e:	fa01 f303 	lsl.w	r3, r1, r3
 8009812:	43db      	mvns	r3, r3
 8009814:	401a      	ands	r2, r3
 8009816:	687b      	ldr	r3, [r7, #4]
 8009818:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      CLEAR_BIT(GPIOx->AFR[position >> 3], 0xFU << ((uint32_t)(position & 0x07U) * 4)) ;
 800981a:	697b      	ldr	r3, [r7, #20]
 800981c:	08da      	lsrs	r2, r3, #3
 800981e:	687b      	ldr	r3, [r7, #4]
 8009820:	3208      	adds	r2, #8
 8009822:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8009826:	697b      	ldr	r3, [r7, #20]
 8009828:	f003 0307 	and.w	r3, r3, #7
 800982c:	009b      	lsls	r3, r3, #2
 800982e:	220f      	movs	r2, #15
 8009830:	fa02 f303 	lsl.w	r3, r2, r3
 8009834:	43db      	mvns	r3, r3
 8009836:	697a      	ldr	r2, [r7, #20]
 8009838:	08d2      	lsrs	r2, r2, #3
 800983a:	4019      	ands	r1, r3
 800983c:	687b      	ldr	r3, [r7, #4]
 800983e:	3208      	adds	r2, #8
 8009840:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      /* Deactivate the Pull-up oand Pull-down resistor for the current IO */
      CLEAR_BIT(GPIOx->PUPDR, GPIO_PUPDR_PUPDR0 << (position * 2));
 8009844:	687b      	ldr	r3, [r7, #4]
 8009846:	68da      	ldr	r2, [r3, #12]
 8009848:	697b      	ldr	r3, [r7, #20]
 800984a:	005b      	lsls	r3, r3, #1
 800984c:	2103      	movs	r1, #3
 800984e:	fa01 f303 	lsl.w	r3, r1, r3
 8009852:	43db      	mvns	r3, r3
 8009854:	401a      	ands	r2, r3
 8009856:	687b      	ldr	r3, [r7, #4]
 8009858:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      CLEAR_BIT(GPIOx->OTYPER, GPIO_OTYPER_OT_0 << position) ;
 800985a:	687b      	ldr	r3, [r7, #4]
 800985c:	685a      	ldr	r2, [r3, #4]
 800985e:	2101      	movs	r1, #1
 8009860:	697b      	ldr	r3, [r7, #20]
 8009862:	fa01 f303 	lsl.w	r3, r1, r3
 8009866:	43db      	mvns	r3, r3
 8009868:	401a      	ands	r2, r3
 800986a:	687b      	ldr	r3, [r7, #4]
 800986c:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      CLEAR_BIT(GPIOx->OSPEEDR, GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 800986e:	687b      	ldr	r3, [r7, #4]
 8009870:	689a      	ldr	r2, [r3, #8]
 8009872:	697b      	ldr	r3, [r7, #20]
 8009874:	005b      	lsls	r3, r3, #1
 8009876:	2103      	movs	r1, #3
 8009878:	fa01 f303 	lsl.w	r3, r1, r3
 800987c:	43db      	mvns	r3, r3
 800987e:	401a      	ands	r2, r3
 8009880:	687b      	ldr	r3, [r7, #4]
 8009882:	609a      	str	r2, [r3, #8]
    }

    position++;
 8009884:	697b      	ldr	r3, [r7, #20]
 8009886:	3301      	adds	r3, #1
 8009888:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0)
 800988a:	683a      	ldr	r2, [r7, #0]
 800988c:	697b      	ldr	r3, [r7, #20]
 800988e:	fa22 f303 	lsr.w	r3, r2, r3
 8009892:	2b00      	cmp	r3, #0
 8009894:	f47f af34 	bne.w	8009700 <HAL_GPIO_DeInit+0x18>
  }
}
 8009898:	bf00      	nop
 800989a:	bf00      	nop
 800989c:	371c      	adds	r7, #28
 800989e:	46bd      	mov	sp, r7
 80098a0:	bc80      	pop	{r7}
 80098a2:	4770      	bx	lr
 80098a4:	40010000 	.word	0x40010000
 80098a8:	40020000 	.word	0x40020000
 80098ac:	40020400 	.word	0x40020400
 80098b0:	40020800 	.word	0x40020800
 80098b4:	40020c00 	.word	0x40020c00
 80098b8:	40021000 	.word	0x40021000
 80098bc:	40021400 	.word	0x40021400
 80098c0:	40021800 	.word	0x40021800
 80098c4:	40010400 	.word	0x40010400

080098c8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80098c8:	b480      	push	{r7}
 80098ca:	b083      	sub	sp, #12
 80098cc:	af00      	add	r7, sp, #0
 80098ce:	6078      	str	r0, [r7, #4]
 80098d0:	460b      	mov	r3, r1
 80098d2:	807b      	strh	r3, [r7, #2]
 80098d4:	4613      	mov	r3, r2
 80098d6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80098d8:	787b      	ldrb	r3, [r7, #1]
 80098da:	2b00      	cmp	r3, #0
 80098dc:	d003      	beq.n	80098e6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80098de:	887a      	ldrh	r2, [r7, #2]
 80098e0:	687b      	ldr	r3, [r7, #4]
 80098e2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16 ;
  }
}
 80098e4:	e003      	b.n	80098ee <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16 ;
 80098e6:	887b      	ldrh	r3, [r7, #2]
 80098e8:	041a      	lsls	r2, r3, #16
 80098ea:	687b      	ldr	r3, [r7, #4]
 80098ec:	619a      	str	r2, [r3, #24]
}
 80098ee:	bf00      	nop
 80098f0:	370c      	adds	r7, #12
 80098f2:	46bd      	mov	sp, r7
 80098f4:	bc80      	pop	{r7}
 80098f6:	4770      	bx	lr

080098f8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80098f8:	b580      	push	{r7, lr}
 80098fa:	b084      	sub	sp, #16
 80098fc:	af00      	add	r7, sp, #0
 80098fe:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8009900:	687b      	ldr	r3, [r7, #4]
 8009902:	2b00      	cmp	r3, #0
 8009904:	d101      	bne.n	800990a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8009906:	2301      	movs	r3, #1
 8009908:	e12b      	b.n	8009b62 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800990a:	687b      	ldr	r3, [r7, #4]
 800990c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8009910:	b2db      	uxtb	r3, r3
 8009912:	2b00      	cmp	r3, #0
 8009914:	d106      	bne.n	8009924 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8009916:	687b      	ldr	r3, [r7, #4]
 8009918:	2200      	movs	r2, #0
 800991a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800991e:	6878      	ldr	r0, [r7, #4]
 8009920:	f000 f95d 	bl	8009bde <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8009924:	687b      	ldr	r3, [r7, #4]
 8009926:	2224      	movs	r2, #36	@ 0x24
 8009928:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800992c:	687b      	ldr	r3, [r7, #4]
 800992e:	681b      	ldr	r3, [r3, #0]
 8009930:	681a      	ldr	r2, [r3, #0]
 8009932:	687b      	ldr	r3, [r7, #4]
 8009934:	681b      	ldr	r3, [r3, #0]
 8009936:	f022 0201 	bic.w	r2, r2, #1
 800993a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800993c:	687b      	ldr	r3, [r7, #4]
 800993e:	681b      	ldr	r3, [r3, #0]
 8009940:	681a      	ldr	r2, [r3, #0]
 8009942:	687b      	ldr	r3, [r7, #4]
 8009944:	681b      	ldr	r3, [r3, #0]
 8009946:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800994a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800994c:	687b      	ldr	r3, [r7, #4]
 800994e:	681b      	ldr	r3, [r3, #0]
 8009950:	681a      	ldr	r2, [r3, #0]
 8009952:	687b      	ldr	r3, [r7, #4]
 8009954:	681b      	ldr	r3, [r3, #0]
 8009956:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800995a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800995c:	f001 fdb8 	bl	800b4d0 <HAL_RCC_GetPCLK1Freq>
 8009960:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8009962:	687b      	ldr	r3, [r7, #4]
 8009964:	685b      	ldr	r3, [r3, #4]
 8009966:	4a81      	ldr	r2, [pc, #516]	@ (8009b6c <HAL_I2C_Init+0x274>)
 8009968:	4293      	cmp	r3, r2
 800996a:	d807      	bhi.n	800997c <HAL_I2C_Init+0x84>
 800996c:	68fb      	ldr	r3, [r7, #12]
 800996e:	4a80      	ldr	r2, [pc, #512]	@ (8009b70 <HAL_I2C_Init+0x278>)
 8009970:	4293      	cmp	r3, r2
 8009972:	bf94      	ite	ls
 8009974:	2301      	movls	r3, #1
 8009976:	2300      	movhi	r3, #0
 8009978:	b2db      	uxtb	r3, r3
 800997a:	e006      	b.n	800998a <HAL_I2C_Init+0x92>
 800997c:	68fb      	ldr	r3, [r7, #12]
 800997e:	4a7d      	ldr	r2, [pc, #500]	@ (8009b74 <HAL_I2C_Init+0x27c>)
 8009980:	4293      	cmp	r3, r2
 8009982:	bf94      	ite	ls
 8009984:	2301      	movls	r3, #1
 8009986:	2300      	movhi	r3, #0
 8009988:	b2db      	uxtb	r3, r3
 800998a:	2b00      	cmp	r3, #0
 800998c:	d001      	beq.n	8009992 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800998e:	2301      	movs	r3, #1
 8009990:	e0e7      	b.n	8009b62 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8009992:	68fb      	ldr	r3, [r7, #12]
 8009994:	4a78      	ldr	r2, [pc, #480]	@ (8009b78 <HAL_I2C_Init+0x280>)
 8009996:	fba2 2303 	umull	r2, r3, r2, r3
 800999a:	0c9b      	lsrs	r3, r3, #18
 800999c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800999e:	687b      	ldr	r3, [r7, #4]
 80099a0:	681b      	ldr	r3, [r3, #0]
 80099a2:	685b      	ldr	r3, [r3, #4]
 80099a4:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80099a8:	687b      	ldr	r3, [r7, #4]
 80099aa:	681b      	ldr	r3, [r3, #0]
 80099ac:	68ba      	ldr	r2, [r7, #8]
 80099ae:	430a      	orrs	r2, r1
 80099b0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80099b2:	687b      	ldr	r3, [r7, #4]
 80099b4:	681b      	ldr	r3, [r3, #0]
 80099b6:	6a1b      	ldr	r3, [r3, #32]
 80099b8:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80099bc:	687b      	ldr	r3, [r7, #4]
 80099be:	685b      	ldr	r3, [r3, #4]
 80099c0:	4a6a      	ldr	r2, [pc, #424]	@ (8009b6c <HAL_I2C_Init+0x274>)
 80099c2:	4293      	cmp	r3, r2
 80099c4:	d802      	bhi.n	80099cc <HAL_I2C_Init+0xd4>
 80099c6:	68bb      	ldr	r3, [r7, #8]
 80099c8:	3301      	adds	r3, #1
 80099ca:	e009      	b.n	80099e0 <HAL_I2C_Init+0xe8>
 80099cc:	68bb      	ldr	r3, [r7, #8]
 80099ce:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 80099d2:	fb02 f303 	mul.w	r3, r2, r3
 80099d6:	4a69      	ldr	r2, [pc, #420]	@ (8009b7c <HAL_I2C_Init+0x284>)
 80099d8:	fba2 2303 	umull	r2, r3, r2, r3
 80099dc:	099b      	lsrs	r3, r3, #6
 80099de:	3301      	adds	r3, #1
 80099e0:	687a      	ldr	r2, [r7, #4]
 80099e2:	6812      	ldr	r2, [r2, #0]
 80099e4:	430b      	orrs	r3, r1
 80099e6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80099e8:	687b      	ldr	r3, [r7, #4]
 80099ea:	681b      	ldr	r3, [r3, #0]
 80099ec:	69db      	ldr	r3, [r3, #28]
 80099ee:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 80099f2:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 80099f6:	687b      	ldr	r3, [r7, #4]
 80099f8:	685b      	ldr	r3, [r3, #4]
 80099fa:	495c      	ldr	r1, [pc, #368]	@ (8009b6c <HAL_I2C_Init+0x274>)
 80099fc:	428b      	cmp	r3, r1
 80099fe:	d819      	bhi.n	8009a34 <HAL_I2C_Init+0x13c>
 8009a00:	68fb      	ldr	r3, [r7, #12]
 8009a02:	1e59      	subs	r1, r3, #1
 8009a04:	687b      	ldr	r3, [r7, #4]
 8009a06:	685b      	ldr	r3, [r3, #4]
 8009a08:	005b      	lsls	r3, r3, #1
 8009a0a:	fbb1 f3f3 	udiv	r3, r1, r3
 8009a0e:	1c59      	adds	r1, r3, #1
 8009a10:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8009a14:	400b      	ands	r3, r1
 8009a16:	2b00      	cmp	r3, #0
 8009a18:	d00a      	beq.n	8009a30 <HAL_I2C_Init+0x138>
 8009a1a:	68fb      	ldr	r3, [r7, #12]
 8009a1c:	1e59      	subs	r1, r3, #1
 8009a1e:	687b      	ldr	r3, [r7, #4]
 8009a20:	685b      	ldr	r3, [r3, #4]
 8009a22:	005b      	lsls	r3, r3, #1
 8009a24:	fbb1 f3f3 	udiv	r3, r1, r3
 8009a28:	3301      	adds	r3, #1
 8009a2a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009a2e:	e051      	b.n	8009ad4 <HAL_I2C_Init+0x1dc>
 8009a30:	2304      	movs	r3, #4
 8009a32:	e04f      	b.n	8009ad4 <HAL_I2C_Init+0x1dc>
 8009a34:	687b      	ldr	r3, [r7, #4]
 8009a36:	689b      	ldr	r3, [r3, #8]
 8009a38:	2b00      	cmp	r3, #0
 8009a3a:	d111      	bne.n	8009a60 <HAL_I2C_Init+0x168>
 8009a3c:	68fb      	ldr	r3, [r7, #12]
 8009a3e:	1e58      	subs	r0, r3, #1
 8009a40:	687b      	ldr	r3, [r7, #4]
 8009a42:	6859      	ldr	r1, [r3, #4]
 8009a44:	460b      	mov	r3, r1
 8009a46:	005b      	lsls	r3, r3, #1
 8009a48:	440b      	add	r3, r1
 8009a4a:	fbb0 f3f3 	udiv	r3, r0, r3
 8009a4e:	3301      	adds	r3, #1
 8009a50:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009a54:	2b00      	cmp	r3, #0
 8009a56:	bf0c      	ite	eq
 8009a58:	2301      	moveq	r3, #1
 8009a5a:	2300      	movne	r3, #0
 8009a5c:	b2db      	uxtb	r3, r3
 8009a5e:	e012      	b.n	8009a86 <HAL_I2C_Init+0x18e>
 8009a60:	68fb      	ldr	r3, [r7, #12]
 8009a62:	1e58      	subs	r0, r3, #1
 8009a64:	687b      	ldr	r3, [r7, #4]
 8009a66:	6859      	ldr	r1, [r3, #4]
 8009a68:	460b      	mov	r3, r1
 8009a6a:	009b      	lsls	r3, r3, #2
 8009a6c:	440b      	add	r3, r1
 8009a6e:	0099      	lsls	r1, r3, #2
 8009a70:	440b      	add	r3, r1
 8009a72:	fbb0 f3f3 	udiv	r3, r0, r3
 8009a76:	3301      	adds	r3, #1
 8009a78:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009a7c:	2b00      	cmp	r3, #0
 8009a7e:	bf0c      	ite	eq
 8009a80:	2301      	moveq	r3, #1
 8009a82:	2300      	movne	r3, #0
 8009a84:	b2db      	uxtb	r3, r3
 8009a86:	2b00      	cmp	r3, #0
 8009a88:	d001      	beq.n	8009a8e <HAL_I2C_Init+0x196>
 8009a8a:	2301      	movs	r3, #1
 8009a8c:	e022      	b.n	8009ad4 <HAL_I2C_Init+0x1dc>
 8009a8e:	687b      	ldr	r3, [r7, #4]
 8009a90:	689b      	ldr	r3, [r3, #8]
 8009a92:	2b00      	cmp	r3, #0
 8009a94:	d10e      	bne.n	8009ab4 <HAL_I2C_Init+0x1bc>
 8009a96:	68fb      	ldr	r3, [r7, #12]
 8009a98:	1e58      	subs	r0, r3, #1
 8009a9a:	687b      	ldr	r3, [r7, #4]
 8009a9c:	6859      	ldr	r1, [r3, #4]
 8009a9e:	460b      	mov	r3, r1
 8009aa0:	005b      	lsls	r3, r3, #1
 8009aa2:	440b      	add	r3, r1
 8009aa4:	fbb0 f3f3 	udiv	r3, r0, r3
 8009aa8:	3301      	adds	r3, #1
 8009aaa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009aae:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8009ab2:	e00f      	b.n	8009ad4 <HAL_I2C_Init+0x1dc>
 8009ab4:	68fb      	ldr	r3, [r7, #12]
 8009ab6:	1e58      	subs	r0, r3, #1
 8009ab8:	687b      	ldr	r3, [r7, #4]
 8009aba:	6859      	ldr	r1, [r3, #4]
 8009abc:	460b      	mov	r3, r1
 8009abe:	009b      	lsls	r3, r3, #2
 8009ac0:	440b      	add	r3, r1
 8009ac2:	0099      	lsls	r1, r3, #2
 8009ac4:	440b      	add	r3, r1
 8009ac6:	fbb0 f3f3 	udiv	r3, r0, r3
 8009aca:	3301      	adds	r3, #1
 8009acc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009ad0:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8009ad4:	6879      	ldr	r1, [r7, #4]
 8009ad6:	6809      	ldr	r1, [r1, #0]
 8009ad8:	4313      	orrs	r3, r2
 8009ada:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8009adc:	687b      	ldr	r3, [r7, #4]
 8009ade:	681b      	ldr	r3, [r3, #0]
 8009ae0:	681b      	ldr	r3, [r3, #0]
 8009ae2:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8009ae6:	687b      	ldr	r3, [r7, #4]
 8009ae8:	69da      	ldr	r2, [r3, #28]
 8009aea:	687b      	ldr	r3, [r7, #4]
 8009aec:	6a1b      	ldr	r3, [r3, #32]
 8009aee:	431a      	orrs	r2, r3
 8009af0:	687b      	ldr	r3, [r7, #4]
 8009af2:	681b      	ldr	r3, [r3, #0]
 8009af4:	430a      	orrs	r2, r1
 8009af6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8009af8:	687b      	ldr	r3, [r7, #4]
 8009afa:	681b      	ldr	r3, [r3, #0]
 8009afc:	689b      	ldr	r3, [r3, #8]
 8009afe:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8009b02:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8009b06:	687a      	ldr	r2, [r7, #4]
 8009b08:	6911      	ldr	r1, [r2, #16]
 8009b0a:	687a      	ldr	r2, [r7, #4]
 8009b0c:	68d2      	ldr	r2, [r2, #12]
 8009b0e:	4311      	orrs	r1, r2
 8009b10:	687a      	ldr	r2, [r7, #4]
 8009b12:	6812      	ldr	r2, [r2, #0]
 8009b14:	430b      	orrs	r3, r1
 8009b16:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8009b18:	687b      	ldr	r3, [r7, #4]
 8009b1a:	681b      	ldr	r3, [r3, #0]
 8009b1c:	68db      	ldr	r3, [r3, #12]
 8009b1e:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8009b22:	687b      	ldr	r3, [r7, #4]
 8009b24:	695a      	ldr	r2, [r3, #20]
 8009b26:	687b      	ldr	r3, [r7, #4]
 8009b28:	699b      	ldr	r3, [r3, #24]
 8009b2a:	431a      	orrs	r2, r3
 8009b2c:	687b      	ldr	r3, [r7, #4]
 8009b2e:	681b      	ldr	r3, [r3, #0]
 8009b30:	430a      	orrs	r2, r1
 8009b32:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8009b34:	687b      	ldr	r3, [r7, #4]
 8009b36:	681b      	ldr	r3, [r3, #0]
 8009b38:	681a      	ldr	r2, [r3, #0]
 8009b3a:	687b      	ldr	r3, [r7, #4]
 8009b3c:	681b      	ldr	r3, [r3, #0]
 8009b3e:	f042 0201 	orr.w	r2, r2, #1
 8009b42:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8009b44:	687b      	ldr	r3, [r7, #4]
 8009b46:	2200      	movs	r2, #0
 8009b48:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8009b4a:	687b      	ldr	r3, [r7, #4]
 8009b4c:	2220      	movs	r2, #32
 8009b4e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8009b52:	687b      	ldr	r3, [r7, #4]
 8009b54:	2200      	movs	r2, #0
 8009b56:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8009b58:	687b      	ldr	r3, [r7, #4]
 8009b5a:	2200      	movs	r2, #0
 8009b5c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8009b60:	2300      	movs	r3, #0
}
 8009b62:	4618      	mov	r0, r3
 8009b64:	3710      	adds	r7, #16
 8009b66:	46bd      	mov	sp, r7
 8009b68:	bd80      	pop	{r7, pc}
 8009b6a:	bf00      	nop
 8009b6c:	000186a0 	.word	0x000186a0
 8009b70:	001e847f 	.word	0x001e847f
 8009b74:	003d08ff 	.word	0x003d08ff
 8009b78:	431bde83 	.word	0x431bde83
 8009b7c:	10624dd3 	.word	0x10624dd3

08009b80 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 8009b80:	b580      	push	{r7, lr}
 8009b82:	b082      	sub	sp, #8
 8009b84:	af00      	add	r7, sp, #0
 8009b86:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8009b88:	687b      	ldr	r3, [r7, #4]
 8009b8a:	2b00      	cmp	r3, #0
 8009b8c:	d101      	bne.n	8009b92 <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 8009b8e:	2301      	movs	r3, #1
 8009b90:	e021      	b.n	8009bd6 <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 8009b92:	687b      	ldr	r3, [r7, #4]
 8009b94:	2224      	movs	r2, #36	@ 0x24
 8009b96:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 8009b9a:	687b      	ldr	r3, [r7, #4]
 8009b9c:	681b      	ldr	r3, [r3, #0]
 8009b9e:	681a      	ldr	r2, [r3, #0]
 8009ba0:	687b      	ldr	r3, [r7, #4]
 8009ba2:	681b      	ldr	r3, [r3, #0]
 8009ba4:	f022 0201 	bic.w	r2, r2, #1
 8009ba8:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 8009baa:	6878      	ldr	r0, [r7, #4]
 8009bac:	f000 f820 	bl	8009bf0 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8009bb0:	687b      	ldr	r3, [r7, #4]
 8009bb2:	2200      	movs	r2, #0
 8009bb4:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State         = HAL_I2C_STATE_RESET;
 8009bb6:	687b      	ldr	r3, [r7, #4]
 8009bb8:	2200      	movs	r2, #0
 8009bba:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8009bbe:	687b      	ldr	r3, [r7, #4]
 8009bc0:	2200      	movs	r2, #0
 8009bc2:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8009bc4:	687b      	ldr	r3, [r7, #4]
 8009bc6:	2200      	movs	r2, #0
 8009bc8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 8009bcc:	687b      	ldr	r3, [r7, #4]
 8009bce:	2200      	movs	r2, #0
 8009bd0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8009bd4:	2300      	movs	r3, #0
}
 8009bd6:	4618      	mov	r0, r3
 8009bd8:	3708      	adds	r7, #8
 8009bda:	46bd      	mov	sp, r7
 8009bdc:	bd80      	pop	{r7, pc}

08009bde <HAL_I2C_MspInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspInit(I2C_HandleTypeDef *hi2c)
{
 8009bde:	b480      	push	{r7}
 8009be0:	b083      	sub	sp, #12
 8009be2:	af00      	add	r7, sp, #0
 8009be4:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspInit could be implemented in the user file
   */
}
 8009be6:	bf00      	nop
 8009be8:	370c      	adds	r7, #12
 8009bea:	46bd      	mov	sp, r7
 8009bec:	bc80      	pop	{r7}
 8009bee:	4770      	bx	lr

08009bf0 <HAL_I2C_MspDeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspDeInit(I2C_HandleTypeDef *hi2c)
{
 8009bf0:	b480      	push	{r7}
 8009bf2:	b083      	sub	sp, #12
 8009bf4:	af00      	add	r7, sp, #0
 8009bf6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspDeInit could be implemented in the user file
   */
}
 8009bf8:	bf00      	nop
 8009bfa:	370c      	adds	r7, #12
 8009bfc:	46bd      	mov	sp, r7
 8009bfe:	bc80      	pop	{r7}
 8009c00:	4770      	bx	lr
	...

08009c04 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009c04:	b580      	push	{r7, lr}
 8009c06:	b088      	sub	sp, #32
 8009c08:	af02      	add	r7, sp, #8
 8009c0a:	60f8      	str	r0, [r7, #12]
 8009c0c:	4608      	mov	r0, r1
 8009c0e:	4611      	mov	r1, r2
 8009c10:	461a      	mov	r2, r3
 8009c12:	4603      	mov	r3, r0
 8009c14:	817b      	strh	r3, [r7, #10]
 8009c16:	460b      	mov	r3, r1
 8009c18:	813b      	strh	r3, [r7, #8]
 8009c1a:	4613      	mov	r3, r2
 8009c1c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8009c1e:	f7ff fac3 	bl	80091a8 <HAL_GetTick>
 8009c22:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8009c24:	68fb      	ldr	r3, [r7, #12]
 8009c26:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8009c2a:	b2db      	uxtb	r3, r3
 8009c2c:	2b20      	cmp	r3, #32
 8009c2e:	f040 80d9 	bne.w	8009de4 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8009c32:	697b      	ldr	r3, [r7, #20]
 8009c34:	9300      	str	r3, [sp, #0]
 8009c36:	2319      	movs	r3, #25
 8009c38:	2201      	movs	r2, #1
 8009c3a:	496d      	ldr	r1, [pc, #436]	@ (8009df0 <HAL_I2C_Mem_Write+0x1ec>)
 8009c3c:	68f8      	ldr	r0, [r7, #12]
 8009c3e:	f000 fca3 	bl	800a588 <I2C_WaitOnFlagUntilTimeout>
 8009c42:	4603      	mov	r3, r0
 8009c44:	2b00      	cmp	r3, #0
 8009c46:	d001      	beq.n	8009c4c <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8009c48:	2302      	movs	r3, #2
 8009c4a:	e0cc      	b.n	8009de6 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8009c4c:	68fb      	ldr	r3, [r7, #12]
 8009c4e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8009c52:	2b01      	cmp	r3, #1
 8009c54:	d101      	bne.n	8009c5a <HAL_I2C_Mem_Write+0x56>
 8009c56:	2302      	movs	r3, #2
 8009c58:	e0c5      	b.n	8009de6 <HAL_I2C_Mem_Write+0x1e2>
 8009c5a:	68fb      	ldr	r3, [r7, #12]
 8009c5c:	2201      	movs	r2, #1
 8009c5e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8009c62:	68fb      	ldr	r3, [r7, #12]
 8009c64:	681b      	ldr	r3, [r3, #0]
 8009c66:	681b      	ldr	r3, [r3, #0]
 8009c68:	f003 0301 	and.w	r3, r3, #1
 8009c6c:	2b01      	cmp	r3, #1
 8009c6e:	d007      	beq.n	8009c80 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8009c70:	68fb      	ldr	r3, [r7, #12]
 8009c72:	681b      	ldr	r3, [r3, #0]
 8009c74:	681a      	ldr	r2, [r3, #0]
 8009c76:	68fb      	ldr	r3, [r7, #12]
 8009c78:	681b      	ldr	r3, [r3, #0]
 8009c7a:	f042 0201 	orr.w	r2, r2, #1
 8009c7e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8009c80:	68fb      	ldr	r3, [r7, #12]
 8009c82:	681b      	ldr	r3, [r3, #0]
 8009c84:	681a      	ldr	r2, [r3, #0]
 8009c86:	68fb      	ldr	r3, [r7, #12]
 8009c88:	681b      	ldr	r3, [r3, #0]
 8009c8a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8009c8e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8009c90:	68fb      	ldr	r3, [r7, #12]
 8009c92:	2221      	movs	r2, #33	@ 0x21
 8009c94:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8009c98:	68fb      	ldr	r3, [r7, #12]
 8009c9a:	2240      	movs	r2, #64	@ 0x40
 8009c9c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8009ca0:	68fb      	ldr	r3, [r7, #12]
 8009ca2:	2200      	movs	r2, #0
 8009ca4:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8009ca6:	68fb      	ldr	r3, [r7, #12]
 8009ca8:	6a3a      	ldr	r2, [r7, #32]
 8009caa:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8009cac:	68fb      	ldr	r3, [r7, #12]
 8009cae:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8009cb0:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8009cb2:	68fb      	ldr	r3, [r7, #12]
 8009cb4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009cb6:	b29a      	uxth	r2, r3
 8009cb8:	68fb      	ldr	r3, [r7, #12]
 8009cba:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8009cbc:	68fb      	ldr	r3, [r7, #12]
 8009cbe:	4a4d      	ldr	r2, [pc, #308]	@ (8009df4 <HAL_I2C_Mem_Write+0x1f0>)
 8009cc0:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8009cc2:	88f8      	ldrh	r0, [r7, #6]
 8009cc4:	893a      	ldrh	r2, [r7, #8]
 8009cc6:	8979      	ldrh	r1, [r7, #10]
 8009cc8:	697b      	ldr	r3, [r7, #20]
 8009cca:	9301      	str	r3, [sp, #4]
 8009ccc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009cce:	9300      	str	r3, [sp, #0]
 8009cd0:	4603      	mov	r3, r0
 8009cd2:	68f8      	ldr	r0, [r7, #12]
 8009cd4:	f000 fada 	bl	800a28c <I2C_RequestMemoryWrite>
 8009cd8:	4603      	mov	r3, r0
 8009cda:	2b00      	cmp	r3, #0
 8009cdc:	d052      	beq.n	8009d84 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8009cde:	2301      	movs	r3, #1
 8009ce0:	e081      	b.n	8009de6 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8009ce2:	697a      	ldr	r2, [r7, #20]
 8009ce4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8009ce6:	68f8      	ldr	r0, [r7, #12]
 8009ce8:	f000 fd68 	bl	800a7bc <I2C_WaitOnTXEFlagUntilTimeout>
 8009cec:	4603      	mov	r3, r0
 8009cee:	2b00      	cmp	r3, #0
 8009cf0:	d00d      	beq.n	8009d0e <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8009cf2:	68fb      	ldr	r3, [r7, #12]
 8009cf4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009cf6:	2b04      	cmp	r3, #4
 8009cf8:	d107      	bne.n	8009d0a <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009cfa:	68fb      	ldr	r3, [r7, #12]
 8009cfc:	681b      	ldr	r3, [r3, #0]
 8009cfe:	681a      	ldr	r2, [r3, #0]
 8009d00:	68fb      	ldr	r3, [r7, #12]
 8009d02:	681b      	ldr	r3, [r3, #0]
 8009d04:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8009d08:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8009d0a:	2301      	movs	r3, #1
 8009d0c:	e06b      	b.n	8009de6 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8009d0e:	68fb      	ldr	r3, [r7, #12]
 8009d10:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009d12:	781a      	ldrb	r2, [r3, #0]
 8009d14:	68fb      	ldr	r3, [r7, #12]
 8009d16:	681b      	ldr	r3, [r3, #0]
 8009d18:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8009d1a:	68fb      	ldr	r3, [r7, #12]
 8009d1c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009d1e:	1c5a      	adds	r2, r3, #1
 8009d20:	68fb      	ldr	r3, [r7, #12]
 8009d22:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 8009d24:	68fb      	ldr	r3, [r7, #12]
 8009d26:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8009d28:	3b01      	subs	r3, #1
 8009d2a:	b29a      	uxth	r2, r3
 8009d2c:	68fb      	ldr	r3, [r7, #12]
 8009d2e:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8009d30:	68fb      	ldr	r3, [r7, #12]
 8009d32:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009d34:	b29b      	uxth	r3, r3
 8009d36:	3b01      	subs	r3, #1
 8009d38:	b29a      	uxth	r2, r3
 8009d3a:	68fb      	ldr	r3, [r7, #12]
 8009d3c:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8009d3e:	68fb      	ldr	r3, [r7, #12]
 8009d40:	681b      	ldr	r3, [r3, #0]
 8009d42:	695b      	ldr	r3, [r3, #20]
 8009d44:	f003 0304 	and.w	r3, r3, #4
 8009d48:	2b04      	cmp	r3, #4
 8009d4a:	d11b      	bne.n	8009d84 <HAL_I2C_Mem_Write+0x180>
 8009d4c:	68fb      	ldr	r3, [r7, #12]
 8009d4e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8009d50:	2b00      	cmp	r3, #0
 8009d52:	d017      	beq.n	8009d84 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8009d54:	68fb      	ldr	r3, [r7, #12]
 8009d56:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009d58:	781a      	ldrb	r2, [r3, #0]
 8009d5a:	68fb      	ldr	r3, [r7, #12]
 8009d5c:	681b      	ldr	r3, [r3, #0]
 8009d5e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8009d60:	68fb      	ldr	r3, [r7, #12]
 8009d62:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009d64:	1c5a      	adds	r2, r3, #1
 8009d66:	68fb      	ldr	r3, [r7, #12]
 8009d68:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8009d6a:	68fb      	ldr	r3, [r7, #12]
 8009d6c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8009d6e:	3b01      	subs	r3, #1
 8009d70:	b29a      	uxth	r2, r3
 8009d72:	68fb      	ldr	r3, [r7, #12]
 8009d74:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8009d76:	68fb      	ldr	r3, [r7, #12]
 8009d78:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009d7a:	b29b      	uxth	r3, r3
 8009d7c:	3b01      	subs	r3, #1
 8009d7e:	b29a      	uxth	r2, r3
 8009d80:	68fb      	ldr	r3, [r7, #12]
 8009d82:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8009d84:	68fb      	ldr	r3, [r7, #12]
 8009d86:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8009d88:	2b00      	cmp	r3, #0
 8009d8a:	d1aa      	bne.n	8009ce2 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8009d8c:	697a      	ldr	r2, [r7, #20]
 8009d8e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8009d90:	68f8      	ldr	r0, [r7, #12]
 8009d92:	f000 fd5b 	bl	800a84c <I2C_WaitOnBTFFlagUntilTimeout>
 8009d96:	4603      	mov	r3, r0
 8009d98:	2b00      	cmp	r3, #0
 8009d9a:	d00d      	beq.n	8009db8 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8009d9c:	68fb      	ldr	r3, [r7, #12]
 8009d9e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009da0:	2b04      	cmp	r3, #4
 8009da2:	d107      	bne.n	8009db4 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009da4:	68fb      	ldr	r3, [r7, #12]
 8009da6:	681b      	ldr	r3, [r3, #0]
 8009da8:	681a      	ldr	r2, [r3, #0]
 8009daa:	68fb      	ldr	r3, [r7, #12]
 8009dac:	681b      	ldr	r3, [r3, #0]
 8009dae:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8009db2:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8009db4:	2301      	movs	r3, #1
 8009db6:	e016      	b.n	8009de6 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009db8:	68fb      	ldr	r3, [r7, #12]
 8009dba:	681b      	ldr	r3, [r3, #0]
 8009dbc:	681a      	ldr	r2, [r3, #0]
 8009dbe:	68fb      	ldr	r3, [r7, #12]
 8009dc0:	681b      	ldr	r3, [r3, #0]
 8009dc2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8009dc6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8009dc8:	68fb      	ldr	r3, [r7, #12]
 8009dca:	2220      	movs	r2, #32
 8009dcc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8009dd0:	68fb      	ldr	r3, [r7, #12]
 8009dd2:	2200      	movs	r2, #0
 8009dd4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009dd8:	68fb      	ldr	r3, [r7, #12]
 8009dda:	2200      	movs	r2, #0
 8009ddc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8009de0:	2300      	movs	r3, #0
 8009de2:	e000      	b.n	8009de6 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8009de4:	2302      	movs	r3, #2
  }
}
 8009de6:	4618      	mov	r0, r3
 8009de8:	3718      	adds	r7, #24
 8009dea:	46bd      	mov	sp, r7
 8009dec:	bd80      	pop	{r7, pc}
 8009dee:	bf00      	nop
 8009df0:	00100002 	.word	0x00100002
 8009df4:	ffff0000 	.word	0xffff0000

08009df8 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009df8:	b580      	push	{r7, lr}
 8009dfa:	b08c      	sub	sp, #48	@ 0x30
 8009dfc:	af02      	add	r7, sp, #8
 8009dfe:	60f8      	str	r0, [r7, #12]
 8009e00:	4608      	mov	r0, r1
 8009e02:	4611      	mov	r1, r2
 8009e04:	461a      	mov	r2, r3
 8009e06:	4603      	mov	r3, r0
 8009e08:	817b      	strh	r3, [r7, #10]
 8009e0a:	460b      	mov	r3, r1
 8009e0c:	813b      	strh	r3, [r7, #8]
 8009e0e:	4613      	mov	r3, r2
 8009e10:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8009e12:	f7ff f9c9 	bl	80091a8 <HAL_GetTick>
 8009e16:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8009e18:	68fb      	ldr	r3, [r7, #12]
 8009e1a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8009e1e:	b2db      	uxtb	r3, r3
 8009e20:	2b20      	cmp	r3, #32
 8009e22:	f040 8214 	bne.w	800a24e <HAL_I2C_Mem_Read+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8009e26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009e28:	9300      	str	r3, [sp, #0]
 8009e2a:	2319      	movs	r3, #25
 8009e2c:	2201      	movs	r2, #1
 8009e2e:	497b      	ldr	r1, [pc, #492]	@ (800a01c <HAL_I2C_Mem_Read+0x224>)
 8009e30:	68f8      	ldr	r0, [r7, #12]
 8009e32:	f000 fba9 	bl	800a588 <I2C_WaitOnFlagUntilTimeout>
 8009e36:	4603      	mov	r3, r0
 8009e38:	2b00      	cmp	r3, #0
 8009e3a:	d001      	beq.n	8009e40 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8009e3c:	2302      	movs	r3, #2
 8009e3e:	e207      	b.n	800a250 <HAL_I2C_Mem_Read+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8009e40:	68fb      	ldr	r3, [r7, #12]
 8009e42:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8009e46:	2b01      	cmp	r3, #1
 8009e48:	d101      	bne.n	8009e4e <HAL_I2C_Mem_Read+0x56>
 8009e4a:	2302      	movs	r3, #2
 8009e4c:	e200      	b.n	800a250 <HAL_I2C_Mem_Read+0x458>
 8009e4e:	68fb      	ldr	r3, [r7, #12]
 8009e50:	2201      	movs	r2, #1
 8009e52:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8009e56:	68fb      	ldr	r3, [r7, #12]
 8009e58:	681b      	ldr	r3, [r3, #0]
 8009e5a:	681b      	ldr	r3, [r3, #0]
 8009e5c:	f003 0301 	and.w	r3, r3, #1
 8009e60:	2b01      	cmp	r3, #1
 8009e62:	d007      	beq.n	8009e74 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8009e64:	68fb      	ldr	r3, [r7, #12]
 8009e66:	681b      	ldr	r3, [r3, #0]
 8009e68:	681a      	ldr	r2, [r3, #0]
 8009e6a:	68fb      	ldr	r3, [r7, #12]
 8009e6c:	681b      	ldr	r3, [r3, #0]
 8009e6e:	f042 0201 	orr.w	r2, r2, #1
 8009e72:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8009e74:	68fb      	ldr	r3, [r7, #12]
 8009e76:	681b      	ldr	r3, [r3, #0]
 8009e78:	681a      	ldr	r2, [r3, #0]
 8009e7a:	68fb      	ldr	r3, [r7, #12]
 8009e7c:	681b      	ldr	r3, [r3, #0]
 8009e7e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8009e82:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8009e84:	68fb      	ldr	r3, [r7, #12]
 8009e86:	2222      	movs	r2, #34	@ 0x22
 8009e88:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8009e8c:	68fb      	ldr	r3, [r7, #12]
 8009e8e:	2240      	movs	r2, #64	@ 0x40
 8009e90:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8009e94:	68fb      	ldr	r3, [r7, #12]
 8009e96:	2200      	movs	r2, #0
 8009e98:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8009e9a:	68fb      	ldr	r3, [r7, #12]
 8009e9c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009e9e:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8009ea0:	68fb      	ldr	r3, [r7, #12]
 8009ea2:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8009ea4:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8009ea6:	68fb      	ldr	r3, [r7, #12]
 8009ea8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009eaa:	b29a      	uxth	r2, r3
 8009eac:	68fb      	ldr	r3, [r7, #12]
 8009eae:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8009eb0:	68fb      	ldr	r3, [r7, #12]
 8009eb2:	4a5b      	ldr	r2, [pc, #364]	@ (800a020 <HAL_I2C_Mem_Read+0x228>)
 8009eb4:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8009eb6:	88f8      	ldrh	r0, [r7, #6]
 8009eb8:	893a      	ldrh	r2, [r7, #8]
 8009eba:	8979      	ldrh	r1, [r7, #10]
 8009ebc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009ebe:	9301      	str	r3, [sp, #4]
 8009ec0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009ec2:	9300      	str	r3, [sp, #0]
 8009ec4:	4603      	mov	r3, r0
 8009ec6:	68f8      	ldr	r0, [r7, #12]
 8009ec8:	f000 fa76 	bl	800a3b8 <I2C_RequestMemoryRead>
 8009ecc:	4603      	mov	r3, r0
 8009ece:	2b00      	cmp	r3, #0
 8009ed0:	d001      	beq.n	8009ed6 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8009ed2:	2301      	movs	r3, #1
 8009ed4:	e1bc      	b.n	800a250 <HAL_I2C_Mem_Read+0x458>
    }

    if (hi2c->XferSize == 0U)
 8009ed6:	68fb      	ldr	r3, [r7, #12]
 8009ed8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8009eda:	2b00      	cmp	r3, #0
 8009edc:	d113      	bne.n	8009f06 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8009ede:	2300      	movs	r3, #0
 8009ee0:	623b      	str	r3, [r7, #32]
 8009ee2:	68fb      	ldr	r3, [r7, #12]
 8009ee4:	681b      	ldr	r3, [r3, #0]
 8009ee6:	695b      	ldr	r3, [r3, #20]
 8009ee8:	623b      	str	r3, [r7, #32]
 8009eea:	68fb      	ldr	r3, [r7, #12]
 8009eec:	681b      	ldr	r3, [r3, #0]
 8009eee:	699b      	ldr	r3, [r3, #24]
 8009ef0:	623b      	str	r3, [r7, #32]
 8009ef2:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009ef4:	68fb      	ldr	r3, [r7, #12]
 8009ef6:	681b      	ldr	r3, [r3, #0]
 8009ef8:	681a      	ldr	r2, [r3, #0]
 8009efa:	68fb      	ldr	r3, [r7, #12]
 8009efc:	681b      	ldr	r3, [r3, #0]
 8009efe:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8009f02:	601a      	str	r2, [r3, #0]
 8009f04:	e190      	b.n	800a228 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 1U)
 8009f06:	68fb      	ldr	r3, [r7, #12]
 8009f08:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8009f0a:	2b01      	cmp	r3, #1
 8009f0c:	d11b      	bne.n	8009f46 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8009f0e:	68fb      	ldr	r3, [r7, #12]
 8009f10:	681b      	ldr	r3, [r3, #0]
 8009f12:	681a      	ldr	r2, [r3, #0]
 8009f14:	68fb      	ldr	r3, [r7, #12]
 8009f16:	681b      	ldr	r3, [r3, #0]
 8009f18:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8009f1c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8009f1e:	2300      	movs	r3, #0
 8009f20:	61fb      	str	r3, [r7, #28]
 8009f22:	68fb      	ldr	r3, [r7, #12]
 8009f24:	681b      	ldr	r3, [r3, #0]
 8009f26:	695b      	ldr	r3, [r3, #20]
 8009f28:	61fb      	str	r3, [r7, #28]
 8009f2a:	68fb      	ldr	r3, [r7, #12]
 8009f2c:	681b      	ldr	r3, [r3, #0]
 8009f2e:	699b      	ldr	r3, [r3, #24]
 8009f30:	61fb      	str	r3, [r7, #28]
 8009f32:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009f34:	68fb      	ldr	r3, [r7, #12]
 8009f36:	681b      	ldr	r3, [r3, #0]
 8009f38:	681a      	ldr	r2, [r3, #0]
 8009f3a:	68fb      	ldr	r3, [r7, #12]
 8009f3c:	681b      	ldr	r3, [r3, #0]
 8009f3e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8009f42:	601a      	str	r2, [r3, #0]
 8009f44:	e170      	b.n	800a228 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 2U)
 8009f46:	68fb      	ldr	r3, [r7, #12]
 8009f48:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8009f4a:	2b02      	cmp	r3, #2
 8009f4c:	d11b      	bne.n	8009f86 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8009f4e:	68fb      	ldr	r3, [r7, #12]
 8009f50:	681b      	ldr	r3, [r3, #0]
 8009f52:	681a      	ldr	r2, [r3, #0]
 8009f54:	68fb      	ldr	r3, [r7, #12]
 8009f56:	681b      	ldr	r3, [r3, #0]
 8009f58:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8009f5c:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8009f5e:	68fb      	ldr	r3, [r7, #12]
 8009f60:	681b      	ldr	r3, [r3, #0]
 8009f62:	681a      	ldr	r2, [r3, #0]
 8009f64:	68fb      	ldr	r3, [r7, #12]
 8009f66:	681b      	ldr	r3, [r3, #0]
 8009f68:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8009f6c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8009f6e:	2300      	movs	r3, #0
 8009f70:	61bb      	str	r3, [r7, #24]
 8009f72:	68fb      	ldr	r3, [r7, #12]
 8009f74:	681b      	ldr	r3, [r3, #0]
 8009f76:	695b      	ldr	r3, [r3, #20]
 8009f78:	61bb      	str	r3, [r7, #24]
 8009f7a:	68fb      	ldr	r3, [r7, #12]
 8009f7c:	681b      	ldr	r3, [r3, #0]
 8009f7e:	699b      	ldr	r3, [r3, #24]
 8009f80:	61bb      	str	r3, [r7, #24]
 8009f82:	69bb      	ldr	r3, [r7, #24]
 8009f84:	e150      	b.n	800a228 <HAL_I2C_Mem_Read+0x430>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8009f86:	2300      	movs	r3, #0
 8009f88:	617b      	str	r3, [r7, #20]
 8009f8a:	68fb      	ldr	r3, [r7, #12]
 8009f8c:	681b      	ldr	r3, [r3, #0]
 8009f8e:	695b      	ldr	r3, [r3, #20]
 8009f90:	617b      	str	r3, [r7, #20]
 8009f92:	68fb      	ldr	r3, [r7, #12]
 8009f94:	681b      	ldr	r3, [r3, #0]
 8009f96:	699b      	ldr	r3, [r3, #24]
 8009f98:	617b      	str	r3, [r7, #20]
 8009f9a:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8009f9c:	e144      	b.n	800a228 <HAL_I2C_Mem_Read+0x430>
    {
      if (hi2c->XferSize <= 3U)
 8009f9e:	68fb      	ldr	r3, [r7, #12]
 8009fa0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8009fa2:	2b03      	cmp	r3, #3
 8009fa4:	f200 80f1 	bhi.w	800a18a <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8009fa8:	68fb      	ldr	r3, [r7, #12]
 8009faa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8009fac:	2b01      	cmp	r3, #1
 8009fae:	d123      	bne.n	8009ff8 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8009fb0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009fb2:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8009fb4:	68f8      	ldr	r0, [r7, #12]
 8009fb6:	f000 fc91 	bl	800a8dc <I2C_WaitOnRXNEFlagUntilTimeout>
 8009fba:	4603      	mov	r3, r0
 8009fbc:	2b00      	cmp	r3, #0
 8009fbe:	d001      	beq.n	8009fc4 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8009fc0:	2301      	movs	r3, #1
 8009fc2:	e145      	b.n	800a250 <HAL_I2C_Mem_Read+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009fc4:	68fb      	ldr	r3, [r7, #12]
 8009fc6:	681b      	ldr	r3, [r3, #0]
 8009fc8:	691a      	ldr	r2, [r3, #16]
 8009fca:	68fb      	ldr	r3, [r7, #12]
 8009fcc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009fce:	b2d2      	uxtb	r2, r2
 8009fd0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8009fd2:	68fb      	ldr	r3, [r7, #12]
 8009fd4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009fd6:	1c5a      	adds	r2, r3, #1
 8009fd8:	68fb      	ldr	r3, [r7, #12]
 8009fda:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8009fdc:	68fb      	ldr	r3, [r7, #12]
 8009fde:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8009fe0:	3b01      	subs	r3, #1
 8009fe2:	b29a      	uxth	r2, r3
 8009fe4:	68fb      	ldr	r3, [r7, #12]
 8009fe6:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8009fe8:	68fb      	ldr	r3, [r7, #12]
 8009fea:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009fec:	b29b      	uxth	r3, r3
 8009fee:	3b01      	subs	r3, #1
 8009ff0:	b29a      	uxth	r2, r3
 8009ff2:	68fb      	ldr	r3, [r7, #12]
 8009ff4:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8009ff6:	e117      	b.n	800a228 <HAL_I2C_Mem_Read+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8009ff8:	68fb      	ldr	r3, [r7, #12]
 8009ffa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8009ffc:	2b02      	cmp	r3, #2
 8009ffe:	d14e      	bne.n	800a09e <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800a000:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a002:	9300      	str	r3, [sp, #0]
 800a004:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a006:	2200      	movs	r2, #0
 800a008:	4906      	ldr	r1, [pc, #24]	@ (800a024 <HAL_I2C_Mem_Read+0x22c>)
 800a00a:	68f8      	ldr	r0, [r7, #12]
 800a00c:	f000 fabc 	bl	800a588 <I2C_WaitOnFlagUntilTimeout>
 800a010:	4603      	mov	r3, r0
 800a012:	2b00      	cmp	r3, #0
 800a014:	d008      	beq.n	800a028 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 800a016:	2301      	movs	r3, #1
 800a018:	e11a      	b.n	800a250 <HAL_I2C_Mem_Read+0x458>
 800a01a:	bf00      	nop
 800a01c:	00100002 	.word	0x00100002
 800a020:	ffff0000 	.word	0xffff0000
 800a024:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a028:	68fb      	ldr	r3, [r7, #12]
 800a02a:	681b      	ldr	r3, [r3, #0]
 800a02c:	681a      	ldr	r2, [r3, #0]
 800a02e:	68fb      	ldr	r3, [r7, #12]
 800a030:	681b      	ldr	r3, [r3, #0]
 800a032:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800a036:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800a038:	68fb      	ldr	r3, [r7, #12]
 800a03a:	681b      	ldr	r3, [r3, #0]
 800a03c:	691a      	ldr	r2, [r3, #16]
 800a03e:	68fb      	ldr	r3, [r7, #12]
 800a040:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a042:	b2d2      	uxtb	r2, r2
 800a044:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800a046:	68fb      	ldr	r3, [r7, #12]
 800a048:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a04a:	1c5a      	adds	r2, r3, #1
 800a04c:	68fb      	ldr	r3, [r7, #12]
 800a04e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800a050:	68fb      	ldr	r3, [r7, #12]
 800a052:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800a054:	3b01      	subs	r3, #1
 800a056:	b29a      	uxth	r2, r3
 800a058:	68fb      	ldr	r3, [r7, #12]
 800a05a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800a05c:	68fb      	ldr	r3, [r7, #12]
 800a05e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800a060:	b29b      	uxth	r3, r3
 800a062:	3b01      	subs	r3, #1
 800a064:	b29a      	uxth	r2, r3
 800a066:	68fb      	ldr	r3, [r7, #12]
 800a068:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800a06a:	68fb      	ldr	r3, [r7, #12]
 800a06c:	681b      	ldr	r3, [r3, #0]
 800a06e:	691a      	ldr	r2, [r3, #16]
 800a070:	68fb      	ldr	r3, [r7, #12]
 800a072:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a074:	b2d2      	uxtb	r2, r2
 800a076:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800a078:	68fb      	ldr	r3, [r7, #12]
 800a07a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a07c:	1c5a      	adds	r2, r3, #1
 800a07e:	68fb      	ldr	r3, [r7, #12]
 800a080:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800a082:	68fb      	ldr	r3, [r7, #12]
 800a084:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800a086:	3b01      	subs	r3, #1
 800a088:	b29a      	uxth	r2, r3
 800a08a:	68fb      	ldr	r3, [r7, #12]
 800a08c:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800a08e:	68fb      	ldr	r3, [r7, #12]
 800a090:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800a092:	b29b      	uxth	r3, r3
 800a094:	3b01      	subs	r3, #1
 800a096:	b29a      	uxth	r2, r3
 800a098:	68fb      	ldr	r3, [r7, #12]
 800a09a:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800a09c:	e0c4      	b.n	800a228 <HAL_I2C_Mem_Read+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800a09e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a0a0:	9300      	str	r3, [sp, #0]
 800a0a2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a0a4:	2200      	movs	r2, #0
 800a0a6:	496c      	ldr	r1, [pc, #432]	@ (800a258 <HAL_I2C_Mem_Read+0x460>)
 800a0a8:	68f8      	ldr	r0, [r7, #12]
 800a0aa:	f000 fa6d 	bl	800a588 <I2C_WaitOnFlagUntilTimeout>
 800a0ae:	4603      	mov	r3, r0
 800a0b0:	2b00      	cmp	r3, #0
 800a0b2:	d001      	beq.n	800a0b8 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 800a0b4:	2301      	movs	r3, #1
 800a0b6:	e0cb      	b.n	800a250 <HAL_I2C_Mem_Read+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800a0b8:	68fb      	ldr	r3, [r7, #12]
 800a0ba:	681b      	ldr	r3, [r3, #0]
 800a0bc:	681a      	ldr	r2, [r3, #0]
 800a0be:	68fb      	ldr	r3, [r7, #12]
 800a0c0:	681b      	ldr	r3, [r3, #0]
 800a0c2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800a0c6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800a0c8:	68fb      	ldr	r3, [r7, #12]
 800a0ca:	681b      	ldr	r3, [r3, #0]
 800a0cc:	691a      	ldr	r2, [r3, #16]
 800a0ce:	68fb      	ldr	r3, [r7, #12]
 800a0d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a0d2:	b2d2      	uxtb	r2, r2
 800a0d4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800a0d6:	68fb      	ldr	r3, [r7, #12]
 800a0d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a0da:	1c5a      	adds	r2, r3, #1
 800a0dc:	68fb      	ldr	r3, [r7, #12]
 800a0de:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800a0e0:	68fb      	ldr	r3, [r7, #12]
 800a0e2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800a0e4:	3b01      	subs	r3, #1
 800a0e6:	b29a      	uxth	r2, r3
 800a0e8:	68fb      	ldr	r3, [r7, #12]
 800a0ea:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800a0ec:	68fb      	ldr	r3, [r7, #12]
 800a0ee:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800a0f0:	b29b      	uxth	r3, r3
 800a0f2:	3b01      	subs	r3, #1
 800a0f4:	b29a      	uxth	r2, r3
 800a0f6:	68fb      	ldr	r3, [r7, #12]
 800a0f8:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800a0fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a0fc:	9300      	str	r3, [sp, #0]
 800a0fe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a100:	2200      	movs	r2, #0
 800a102:	4955      	ldr	r1, [pc, #340]	@ (800a258 <HAL_I2C_Mem_Read+0x460>)
 800a104:	68f8      	ldr	r0, [r7, #12]
 800a106:	f000 fa3f 	bl	800a588 <I2C_WaitOnFlagUntilTimeout>
 800a10a:	4603      	mov	r3, r0
 800a10c:	2b00      	cmp	r3, #0
 800a10e:	d001      	beq.n	800a114 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 800a110:	2301      	movs	r3, #1
 800a112:	e09d      	b.n	800a250 <HAL_I2C_Mem_Read+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a114:	68fb      	ldr	r3, [r7, #12]
 800a116:	681b      	ldr	r3, [r3, #0]
 800a118:	681a      	ldr	r2, [r3, #0]
 800a11a:	68fb      	ldr	r3, [r7, #12]
 800a11c:	681b      	ldr	r3, [r3, #0]
 800a11e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800a122:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800a124:	68fb      	ldr	r3, [r7, #12]
 800a126:	681b      	ldr	r3, [r3, #0]
 800a128:	691a      	ldr	r2, [r3, #16]
 800a12a:	68fb      	ldr	r3, [r7, #12]
 800a12c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a12e:	b2d2      	uxtb	r2, r2
 800a130:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800a132:	68fb      	ldr	r3, [r7, #12]
 800a134:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a136:	1c5a      	adds	r2, r3, #1
 800a138:	68fb      	ldr	r3, [r7, #12]
 800a13a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800a13c:	68fb      	ldr	r3, [r7, #12]
 800a13e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800a140:	3b01      	subs	r3, #1
 800a142:	b29a      	uxth	r2, r3
 800a144:	68fb      	ldr	r3, [r7, #12]
 800a146:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800a148:	68fb      	ldr	r3, [r7, #12]
 800a14a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800a14c:	b29b      	uxth	r3, r3
 800a14e:	3b01      	subs	r3, #1
 800a150:	b29a      	uxth	r2, r3
 800a152:	68fb      	ldr	r3, [r7, #12]
 800a154:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800a156:	68fb      	ldr	r3, [r7, #12]
 800a158:	681b      	ldr	r3, [r3, #0]
 800a15a:	691a      	ldr	r2, [r3, #16]
 800a15c:	68fb      	ldr	r3, [r7, #12]
 800a15e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a160:	b2d2      	uxtb	r2, r2
 800a162:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800a164:	68fb      	ldr	r3, [r7, #12]
 800a166:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a168:	1c5a      	adds	r2, r3, #1
 800a16a:	68fb      	ldr	r3, [r7, #12]
 800a16c:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800a16e:	68fb      	ldr	r3, [r7, #12]
 800a170:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800a172:	3b01      	subs	r3, #1
 800a174:	b29a      	uxth	r2, r3
 800a176:	68fb      	ldr	r3, [r7, #12]
 800a178:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800a17a:	68fb      	ldr	r3, [r7, #12]
 800a17c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800a17e:	b29b      	uxth	r3, r3
 800a180:	3b01      	subs	r3, #1
 800a182:	b29a      	uxth	r2, r3
 800a184:	68fb      	ldr	r3, [r7, #12]
 800a186:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800a188:	e04e      	b.n	800a228 <HAL_I2C_Mem_Read+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800a18a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a18c:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800a18e:	68f8      	ldr	r0, [r7, #12]
 800a190:	f000 fba4 	bl	800a8dc <I2C_WaitOnRXNEFlagUntilTimeout>
 800a194:	4603      	mov	r3, r0
 800a196:	2b00      	cmp	r3, #0
 800a198:	d001      	beq.n	800a19e <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 800a19a:	2301      	movs	r3, #1
 800a19c:	e058      	b.n	800a250 <HAL_I2C_Mem_Read+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800a19e:	68fb      	ldr	r3, [r7, #12]
 800a1a0:	681b      	ldr	r3, [r3, #0]
 800a1a2:	691a      	ldr	r2, [r3, #16]
 800a1a4:	68fb      	ldr	r3, [r7, #12]
 800a1a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a1a8:	b2d2      	uxtb	r2, r2
 800a1aa:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800a1ac:	68fb      	ldr	r3, [r7, #12]
 800a1ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a1b0:	1c5a      	adds	r2, r3, #1
 800a1b2:	68fb      	ldr	r3, [r7, #12]
 800a1b4:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 800a1b6:	68fb      	ldr	r3, [r7, #12]
 800a1b8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800a1ba:	3b01      	subs	r3, #1
 800a1bc:	b29a      	uxth	r2, r3
 800a1be:	68fb      	ldr	r3, [r7, #12]
 800a1c0:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 800a1c2:	68fb      	ldr	r3, [r7, #12]
 800a1c4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800a1c6:	b29b      	uxth	r3, r3
 800a1c8:	3b01      	subs	r3, #1
 800a1ca:	b29a      	uxth	r2, r3
 800a1cc:	68fb      	ldr	r3, [r7, #12]
 800a1ce:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800a1d0:	68fb      	ldr	r3, [r7, #12]
 800a1d2:	681b      	ldr	r3, [r3, #0]
 800a1d4:	695b      	ldr	r3, [r3, #20]
 800a1d6:	f003 0304 	and.w	r3, r3, #4
 800a1da:	2b04      	cmp	r3, #4
 800a1dc:	d124      	bne.n	800a228 <HAL_I2C_Mem_Read+0x430>
        {
          if (hi2c->XferSize == 3U)
 800a1de:	68fb      	ldr	r3, [r7, #12]
 800a1e0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800a1e2:	2b03      	cmp	r3, #3
 800a1e4:	d107      	bne.n	800a1f6 <HAL_I2C_Mem_Read+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800a1e6:	68fb      	ldr	r3, [r7, #12]
 800a1e8:	681b      	ldr	r3, [r3, #0]
 800a1ea:	681a      	ldr	r2, [r3, #0]
 800a1ec:	68fb      	ldr	r3, [r7, #12]
 800a1ee:	681b      	ldr	r3, [r3, #0]
 800a1f0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800a1f4:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800a1f6:	68fb      	ldr	r3, [r7, #12]
 800a1f8:	681b      	ldr	r3, [r3, #0]
 800a1fa:	691a      	ldr	r2, [r3, #16]
 800a1fc:	68fb      	ldr	r3, [r7, #12]
 800a1fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a200:	b2d2      	uxtb	r2, r2
 800a202:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800a204:	68fb      	ldr	r3, [r7, #12]
 800a206:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a208:	1c5a      	adds	r2, r3, #1
 800a20a:	68fb      	ldr	r3, [r7, #12]
 800a20c:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800a20e:	68fb      	ldr	r3, [r7, #12]
 800a210:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800a212:	3b01      	subs	r3, #1
 800a214:	b29a      	uxth	r2, r3
 800a216:	68fb      	ldr	r3, [r7, #12]
 800a218:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800a21a:	68fb      	ldr	r3, [r7, #12]
 800a21c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800a21e:	b29b      	uxth	r3, r3
 800a220:	3b01      	subs	r3, #1
 800a222:	b29a      	uxth	r2, r3
 800a224:	68fb      	ldr	r3, [r7, #12]
 800a226:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 800a228:	68fb      	ldr	r3, [r7, #12]
 800a22a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800a22c:	2b00      	cmp	r3, #0
 800a22e:	f47f aeb6 	bne.w	8009f9e <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800a232:	68fb      	ldr	r3, [r7, #12]
 800a234:	2220      	movs	r2, #32
 800a236:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800a23a:	68fb      	ldr	r3, [r7, #12]
 800a23c:	2200      	movs	r2, #0
 800a23e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800a242:	68fb      	ldr	r3, [r7, #12]
 800a244:	2200      	movs	r2, #0
 800a246:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 800a24a:	2300      	movs	r3, #0
 800a24c:	e000      	b.n	800a250 <HAL_I2C_Mem_Read+0x458>
  }
  else
  {
    return HAL_BUSY;
 800a24e:	2302      	movs	r3, #2
  }
}
 800a250:	4618      	mov	r0, r3
 800a252:	3728      	adds	r7, #40	@ 0x28
 800a254:	46bd      	mov	sp, r7
 800a256:	bd80      	pop	{r7, pc}
 800a258:	00010004 	.word	0x00010004

0800a25c <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 800a25c:	b480      	push	{r7}
 800a25e:	b083      	sub	sp, #12
 800a260:	af00      	add	r7, sp, #0
 800a262:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 800a264:	687b      	ldr	r3, [r7, #4]
 800a266:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800a26a:	b2db      	uxtb	r3, r3
}
 800a26c:	4618      	mov	r0, r3
 800a26e:	370c      	adds	r7, #12
 800a270:	46bd      	mov	sp, r7
 800a272:	bc80      	pop	{r7}
 800a274:	4770      	bx	lr

0800a276 <HAL_I2C_GetError>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *              the configuration information for the specified I2C.
  * @retval I2C Error Code
  */
uint32_t HAL_I2C_GetError(I2C_HandleTypeDef *hi2c)
{
 800a276:	b480      	push	{r7}
 800a278:	b083      	sub	sp, #12
 800a27a:	af00      	add	r7, sp, #0
 800a27c:	6078      	str	r0, [r7, #4]
  return hi2c->ErrorCode;
 800a27e:	687b      	ldr	r3, [r7, #4]
 800a280:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
}
 800a282:	4618      	mov	r0, r3
 800a284:	370c      	adds	r7, #12
 800a286:	46bd      	mov	sp, r7
 800a288:	bc80      	pop	{r7}
 800a28a:	4770      	bx	lr

0800a28c <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800a28c:	b580      	push	{r7, lr}
 800a28e:	b088      	sub	sp, #32
 800a290:	af02      	add	r7, sp, #8
 800a292:	60f8      	str	r0, [r7, #12]
 800a294:	4608      	mov	r0, r1
 800a296:	4611      	mov	r1, r2
 800a298:	461a      	mov	r2, r3
 800a29a:	4603      	mov	r3, r0
 800a29c:	817b      	strh	r3, [r7, #10]
 800a29e:	460b      	mov	r3, r1
 800a2a0:	813b      	strh	r3, [r7, #8]
 800a2a2:	4613      	mov	r3, r2
 800a2a4:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800a2a6:	68fb      	ldr	r3, [r7, #12]
 800a2a8:	681b      	ldr	r3, [r3, #0]
 800a2aa:	681a      	ldr	r2, [r3, #0]
 800a2ac:	68fb      	ldr	r3, [r7, #12]
 800a2ae:	681b      	ldr	r3, [r3, #0]
 800a2b0:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800a2b4:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800a2b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a2b8:	9300      	str	r3, [sp, #0]
 800a2ba:	6a3b      	ldr	r3, [r7, #32]
 800a2bc:	2200      	movs	r2, #0
 800a2be:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800a2c2:	68f8      	ldr	r0, [r7, #12]
 800a2c4:	f000 f960 	bl	800a588 <I2C_WaitOnFlagUntilTimeout>
 800a2c8:	4603      	mov	r3, r0
 800a2ca:	2b00      	cmp	r3, #0
 800a2cc:	d00d      	beq.n	800a2ea <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800a2ce:	68fb      	ldr	r3, [r7, #12]
 800a2d0:	681b      	ldr	r3, [r3, #0]
 800a2d2:	681b      	ldr	r3, [r3, #0]
 800a2d4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a2d8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a2dc:	d103      	bne.n	800a2e6 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800a2de:	68fb      	ldr	r3, [r7, #12]
 800a2e0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800a2e4:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800a2e6:	2303      	movs	r3, #3
 800a2e8:	e05f      	b.n	800a3aa <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800a2ea:	897b      	ldrh	r3, [r7, #10]
 800a2ec:	b2db      	uxtb	r3, r3
 800a2ee:	461a      	mov	r2, r3
 800a2f0:	68fb      	ldr	r3, [r7, #12]
 800a2f2:	681b      	ldr	r3, [r3, #0]
 800a2f4:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 800a2f8:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800a2fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a2fc:	6a3a      	ldr	r2, [r7, #32]
 800a2fe:	492d      	ldr	r1, [pc, #180]	@ (800a3b4 <I2C_RequestMemoryWrite+0x128>)
 800a300:	68f8      	ldr	r0, [r7, #12]
 800a302:	f000 f9bb 	bl	800a67c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800a306:	4603      	mov	r3, r0
 800a308:	2b00      	cmp	r3, #0
 800a30a:	d001      	beq.n	800a310 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 800a30c:	2301      	movs	r3, #1
 800a30e:	e04c      	b.n	800a3aa <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800a310:	2300      	movs	r3, #0
 800a312:	617b      	str	r3, [r7, #20]
 800a314:	68fb      	ldr	r3, [r7, #12]
 800a316:	681b      	ldr	r3, [r3, #0]
 800a318:	695b      	ldr	r3, [r3, #20]
 800a31a:	617b      	str	r3, [r7, #20]
 800a31c:	68fb      	ldr	r3, [r7, #12]
 800a31e:	681b      	ldr	r3, [r3, #0]
 800a320:	699b      	ldr	r3, [r3, #24]
 800a322:	617b      	str	r3, [r7, #20]
 800a324:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800a326:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a328:	6a39      	ldr	r1, [r7, #32]
 800a32a:	68f8      	ldr	r0, [r7, #12]
 800a32c:	f000 fa46 	bl	800a7bc <I2C_WaitOnTXEFlagUntilTimeout>
 800a330:	4603      	mov	r3, r0
 800a332:	2b00      	cmp	r3, #0
 800a334:	d00d      	beq.n	800a352 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800a336:	68fb      	ldr	r3, [r7, #12]
 800a338:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a33a:	2b04      	cmp	r3, #4
 800a33c:	d107      	bne.n	800a34e <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a33e:	68fb      	ldr	r3, [r7, #12]
 800a340:	681b      	ldr	r3, [r3, #0]
 800a342:	681a      	ldr	r2, [r3, #0]
 800a344:	68fb      	ldr	r3, [r7, #12]
 800a346:	681b      	ldr	r3, [r3, #0]
 800a348:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800a34c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800a34e:	2301      	movs	r3, #1
 800a350:	e02b      	b.n	800a3aa <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800a352:	88fb      	ldrh	r3, [r7, #6]
 800a354:	2b01      	cmp	r3, #1
 800a356:	d105      	bne.n	800a364 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800a358:	893b      	ldrh	r3, [r7, #8]
 800a35a:	b2da      	uxtb	r2, r3
 800a35c:	68fb      	ldr	r3, [r7, #12]
 800a35e:	681b      	ldr	r3, [r3, #0]
 800a360:	611a      	str	r2, [r3, #16]
 800a362:	e021      	b.n	800a3a8 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800a364:	893b      	ldrh	r3, [r7, #8]
 800a366:	0a1b      	lsrs	r3, r3, #8
 800a368:	b29b      	uxth	r3, r3
 800a36a:	b2da      	uxtb	r2, r3
 800a36c:	68fb      	ldr	r3, [r7, #12]
 800a36e:	681b      	ldr	r3, [r3, #0]
 800a370:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800a372:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a374:	6a39      	ldr	r1, [r7, #32]
 800a376:	68f8      	ldr	r0, [r7, #12]
 800a378:	f000 fa20 	bl	800a7bc <I2C_WaitOnTXEFlagUntilTimeout>
 800a37c:	4603      	mov	r3, r0
 800a37e:	2b00      	cmp	r3, #0
 800a380:	d00d      	beq.n	800a39e <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800a382:	68fb      	ldr	r3, [r7, #12]
 800a384:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a386:	2b04      	cmp	r3, #4
 800a388:	d107      	bne.n	800a39a <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a38a:	68fb      	ldr	r3, [r7, #12]
 800a38c:	681b      	ldr	r3, [r3, #0]
 800a38e:	681a      	ldr	r2, [r3, #0]
 800a390:	68fb      	ldr	r3, [r7, #12]
 800a392:	681b      	ldr	r3, [r3, #0]
 800a394:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800a398:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800a39a:	2301      	movs	r3, #1
 800a39c:	e005      	b.n	800a3aa <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800a39e:	893b      	ldrh	r3, [r7, #8]
 800a3a0:	b2da      	uxtb	r2, r3
 800a3a2:	68fb      	ldr	r3, [r7, #12]
 800a3a4:	681b      	ldr	r3, [r3, #0]
 800a3a6:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 800a3a8:	2300      	movs	r3, #0
}
 800a3aa:	4618      	mov	r0, r3
 800a3ac:	3718      	adds	r7, #24
 800a3ae:	46bd      	mov	sp, r7
 800a3b0:	bd80      	pop	{r7, pc}
 800a3b2:	bf00      	nop
 800a3b4:	00010002 	.word	0x00010002

0800a3b8 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800a3b8:	b580      	push	{r7, lr}
 800a3ba:	b088      	sub	sp, #32
 800a3bc:	af02      	add	r7, sp, #8
 800a3be:	60f8      	str	r0, [r7, #12]
 800a3c0:	4608      	mov	r0, r1
 800a3c2:	4611      	mov	r1, r2
 800a3c4:	461a      	mov	r2, r3
 800a3c6:	4603      	mov	r3, r0
 800a3c8:	817b      	strh	r3, [r7, #10]
 800a3ca:	460b      	mov	r3, r1
 800a3cc:	813b      	strh	r3, [r7, #8]
 800a3ce:	4613      	mov	r3, r2
 800a3d0:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800a3d2:	68fb      	ldr	r3, [r7, #12]
 800a3d4:	681b      	ldr	r3, [r3, #0]
 800a3d6:	681a      	ldr	r2, [r3, #0]
 800a3d8:	68fb      	ldr	r3, [r7, #12]
 800a3da:	681b      	ldr	r3, [r3, #0]
 800a3dc:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800a3e0:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800a3e2:	68fb      	ldr	r3, [r7, #12]
 800a3e4:	681b      	ldr	r3, [r3, #0]
 800a3e6:	681a      	ldr	r2, [r3, #0]
 800a3e8:	68fb      	ldr	r3, [r7, #12]
 800a3ea:	681b      	ldr	r3, [r3, #0]
 800a3ec:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800a3f0:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800a3f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a3f4:	9300      	str	r3, [sp, #0]
 800a3f6:	6a3b      	ldr	r3, [r7, #32]
 800a3f8:	2200      	movs	r2, #0
 800a3fa:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800a3fe:	68f8      	ldr	r0, [r7, #12]
 800a400:	f000 f8c2 	bl	800a588 <I2C_WaitOnFlagUntilTimeout>
 800a404:	4603      	mov	r3, r0
 800a406:	2b00      	cmp	r3, #0
 800a408:	d00d      	beq.n	800a426 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800a40a:	68fb      	ldr	r3, [r7, #12]
 800a40c:	681b      	ldr	r3, [r3, #0]
 800a40e:	681b      	ldr	r3, [r3, #0]
 800a410:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a414:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a418:	d103      	bne.n	800a422 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800a41a:	68fb      	ldr	r3, [r7, #12]
 800a41c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800a420:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800a422:	2303      	movs	r3, #3
 800a424:	e0aa      	b.n	800a57c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800a426:	897b      	ldrh	r3, [r7, #10]
 800a428:	b2db      	uxtb	r3, r3
 800a42a:	461a      	mov	r2, r3
 800a42c:	68fb      	ldr	r3, [r7, #12]
 800a42e:	681b      	ldr	r3, [r3, #0]
 800a430:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 800a434:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800a436:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a438:	6a3a      	ldr	r2, [r7, #32]
 800a43a:	4952      	ldr	r1, [pc, #328]	@ (800a584 <I2C_RequestMemoryRead+0x1cc>)
 800a43c:	68f8      	ldr	r0, [r7, #12]
 800a43e:	f000 f91d 	bl	800a67c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800a442:	4603      	mov	r3, r0
 800a444:	2b00      	cmp	r3, #0
 800a446:	d001      	beq.n	800a44c <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 800a448:	2301      	movs	r3, #1
 800a44a:	e097      	b.n	800a57c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800a44c:	2300      	movs	r3, #0
 800a44e:	617b      	str	r3, [r7, #20]
 800a450:	68fb      	ldr	r3, [r7, #12]
 800a452:	681b      	ldr	r3, [r3, #0]
 800a454:	695b      	ldr	r3, [r3, #20]
 800a456:	617b      	str	r3, [r7, #20]
 800a458:	68fb      	ldr	r3, [r7, #12]
 800a45a:	681b      	ldr	r3, [r3, #0]
 800a45c:	699b      	ldr	r3, [r3, #24]
 800a45e:	617b      	str	r3, [r7, #20]
 800a460:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800a462:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a464:	6a39      	ldr	r1, [r7, #32]
 800a466:	68f8      	ldr	r0, [r7, #12]
 800a468:	f000 f9a8 	bl	800a7bc <I2C_WaitOnTXEFlagUntilTimeout>
 800a46c:	4603      	mov	r3, r0
 800a46e:	2b00      	cmp	r3, #0
 800a470:	d00d      	beq.n	800a48e <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800a472:	68fb      	ldr	r3, [r7, #12]
 800a474:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a476:	2b04      	cmp	r3, #4
 800a478:	d107      	bne.n	800a48a <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a47a:	68fb      	ldr	r3, [r7, #12]
 800a47c:	681b      	ldr	r3, [r3, #0]
 800a47e:	681a      	ldr	r2, [r3, #0]
 800a480:	68fb      	ldr	r3, [r7, #12]
 800a482:	681b      	ldr	r3, [r3, #0]
 800a484:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800a488:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800a48a:	2301      	movs	r3, #1
 800a48c:	e076      	b.n	800a57c <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800a48e:	88fb      	ldrh	r3, [r7, #6]
 800a490:	2b01      	cmp	r3, #1
 800a492:	d105      	bne.n	800a4a0 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800a494:	893b      	ldrh	r3, [r7, #8]
 800a496:	b2da      	uxtb	r2, r3
 800a498:	68fb      	ldr	r3, [r7, #12]
 800a49a:	681b      	ldr	r3, [r3, #0]
 800a49c:	611a      	str	r2, [r3, #16]
 800a49e:	e021      	b.n	800a4e4 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800a4a0:	893b      	ldrh	r3, [r7, #8]
 800a4a2:	0a1b      	lsrs	r3, r3, #8
 800a4a4:	b29b      	uxth	r3, r3
 800a4a6:	b2da      	uxtb	r2, r3
 800a4a8:	68fb      	ldr	r3, [r7, #12]
 800a4aa:	681b      	ldr	r3, [r3, #0]
 800a4ac:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800a4ae:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a4b0:	6a39      	ldr	r1, [r7, #32]
 800a4b2:	68f8      	ldr	r0, [r7, #12]
 800a4b4:	f000 f982 	bl	800a7bc <I2C_WaitOnTXEFlagUntilTimeout>
 800a4b8:	4603      	mov	r3, r0
 800a4ba:	2b00      	cmp	r3, #0
 800a4bc:	d00d      	beq.n	800a4da <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800a4be:	68fb      	ldr	r3, [r7, #12]
 800a4c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a4c2:	2b04      	cmp	r3, #4
 800a4c4:	d107      	bne.n	800a4d6 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a4c6:	68fb      	ldr	r3, [r7, #12]
 800a4c8:	681b      	ldr	r3, [r3, #0]
 800a4ca:	681a      	ldr	r2, [r3, #0]
 800a4cc:	68fb      	ldr	r3, [r7, #12]
 800a4ce:	681b      	ldr	r3, [r3, #0]
 800a4d0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800a4d4:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800a4d6:	2301      	movs	r3, #1
 800a4d8:	e050      	b.n	800a57c <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800a4da:	893b      	ldrh	r3, [r7, #8]
 800a4dc:	b2da      	uxtb	r2, r3
 800a4de:	68fb      	ldr	r3, [r7, #12]
 800a4e0:	681b      	ldr	r3, [r3, #0]
 800a4e2:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800a4e4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a4e6:	6a39      	ldr	r1, [r7, #32]
 800a4e8:	68f8      	ldr	r0, [r7, #12]
 800a4ea:	f000 f967 	bl	800a7bc <I2C_WaitOnTXEFlagUntilTimeout>
 800a4ee:	4603      	mov	r3, r0
 800a4f0:	2b00      	cmp	r3, #0
 800a4f2:	d00d      	beq.n	800a510 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800a4f4:	68fb      	ldr	r3, [r7, #12]
 800a4f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a4f8:	2b04      	cmp	r3, #4
 800a4fa:	d107      	bne.n	800a50c <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a4fc:	68fb      	ldr	r3, [r7, #12]
 800a4fe:	681b      	ldr	r3, [r3, #0]
 800a500:	681a      	ldr	r2, [r3, #0]
 800a502:	68fb      	ldr	r3, [r7, #12]
 800a504:	681b      	ldr	r3, [r3, #0]
 800a506:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800a50a:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800a50c:	2301      	movs	r3, #1
 800a50e:	e035      	b.n	800a57c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800a510:	68fb      	ldr	r3, [r7, #12]
 800a512:	681b      	ldr	r3, [r3, #0]
 800a514:	681a      	ldr	r2, [r3, #0]
 800a516:	68fb      	ldr	r3, [r7, #12]
 800a518:	681b      	ldr	r3, [r3, #0]
 800a51a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800a51e:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800a520:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a522:	9300      	str	r3, [sp, #0]
 800a524:	6a3b      	ldr	r3, [r7, #32]
 800a526:	2200      	movs	r2, #0
 800a528:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800a52c:	68f8      	ldr	r0, [r7, #12]
 800a52e:	f000 f82b 	bl	800a588 <I2C_WaitOnFlagUntilTimeout>
 800a532:	4603      	mov	r3, r0
 800a534:	2b00      	cmp	r3, #0
 800a536:	d00d      	beq.n	800a554 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800a538:	68fb      	ldr	r3, [r7, #12]
 800a53a:	681b      	ldr	r3, [r3, #0]
 800a53c:	681b      	ldr	r3, [r3, #0]
 800a53e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a542:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a546:	d103      	bne.n	800a550 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800a548:	68fb      	ldr	r3, [r7, #12]
 800a54a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800a54e:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800a550:	2303      	movs	r3, #3
 800a552:	e013      	b.n	800a57c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800a554:	897b      	ldrh	r3, [r7, #10]
 800a556:	b2db      	uxtb	r3, r3
 800a558:	f043 0301 	orr.w	r3, r3, #1
 800a55c:	b2da      	uxtb	r2, r3
 800a55e:	68fb      	ldr	r3, [r7, #12]
 800a560:	681b      	ldr	r3, [r3, #0]
 800a562:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800a564:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a566:	6a3a      	ldr	r2, [r7, #32]
 800a568:	4906      	ldr	r1, [pc, #24]	@ (800a584 <I2C_RequestMemoryRead+0x1cc>)
 800a56a:	68f8      	ldr	r0, [r7, #12]
 800a56c:	f000 f886 	bl	800a67c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800a570:	4603      	mov	r3, r0
 800a572:	2b00      	cmp	r3, #0
 800a574:	d001      	beq.n	800a57a <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 800a576:	2301      	movs	r3, #1
 800a578:	e000      	b.n	800a57c <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 800a57a:	2300      	movs	r3, #0
}
 800a57c:	4618      	mov	r0, r3
 800a57e:	3718      	adds	r7, #24
 800a580:	46bd      	mov	sp, r7
 800a582:	bd80      	pop	{r7, pc}
 800a584:	00010002 	.word	0x00010002

0800a588 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800a588:	b580      	push	{r7, lr}
 800a58a:	b084      	sub	sp, #16
 800a58c:	af00      	add	r7, sp, #0
 800a58e:	60f8      	str	r0, [r7, #12]
 800a590:	60b9      	str	r1, [r7, #8]
 800a592:	603b      	str	r3, [r7, #0]
 800a594:	4613      	mov	r3, r2
 800a596:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800a598:	e048      	b.n	800a62c <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a59a:	683b      	ldr	r3, [r7, #0]
 800a59c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a5a0:	d044      	beq.n	800a62c <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a5a2:	f7fe fe01 	bl	80091a8 <HAL_GetTick>
 800a5a6:	4602      	mov	r2, r0
 800a5a8:	69bb      	ldr	r3, [r7, #24]
 800a5aa:	1ad3      	subs	r3, r2, r3
 800a5ac:	683a      	ldr	r2, [r7, #0]
 800a5ae:	429a      	cmp	r2, r3
 800a5b0:	d302      	bcc.n	800a5b8 <I2C_WaitOnFlagUntilTimeout+0x30>
 800a5b2:	683b      	ldr	r3, [r7, #0]
 800a5b4:	2b00      	cmp	r3, #0
 800a5b6:	d139      	bne.n	800a62c <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800a5b8:	68bb      	ldr	r3, [r7, #8]
 800a5ba:	0c1b      	lsrs	r3, r3, #16
 800a5bc:	b2db      	uxtb	r3, r3
 800a5be:	2b01      	cmp	r3, #1
 800a5c0:	d10d      	bne.n	800a5de <I2C_WaitOnFlagUntilTimeout+0x56>
 800a5c2:	68fb      	ldr	r3, [r7, #12]
 800a5c4:	681b      	ldr	r3, [r3, #0]
 800a5c6:	695b      	ldr	r3, [r3, #20]
 800a5c8:	43da      	mvns	r2, r3
 800a5ca:	68bb      	ldr	r3, [r7, #8]
 800a5cc:	4013      	ands	r3, r2
 800a5ce:	b29b      	uxth	r3, r3
 800a5d0:	2b00      	cmp	r3, #0
 800a5d2:	bf0c      	ite	eq
 800a5d4:	2301      	moveq	r3, #1
 800a5d6:	2300      	movne	r3, #0
 800a5d8:	b2db      	uxtb	r3, r3
 800a5da:	461a      	mov	r2, r3
 800a5dc:	e00c      	b.n	800a5f8 <I2C_WaitOnFlagUntilTimeout+0x70>
 800a5de:	68fb      	ldr	r3, [r7, #12]
 800a5e0:	681b      	ldr	r3, [r3, #0]
 800a5e2:	699b      	ldr	r3, [r3, #24]
 800a5e4:	43da      	mvns	r2, r3
 800a5e6:	68bb      	ldr	r3, [r7, #8]
 800a5e8:	4013      	ands	r3, r2
 800a5ea:	b29b      	uxth	r3, r3
 800a5ec:	2b00      	cmp	r3, #0
 800a5ee:	bf0c      	ite	eq
 800a5f0:	2301      	moveq	r3, #1
 800a5f2:	2300      	movne	r3, #0
 800a5f4:	b2db      	uxtb	r3, r3
 800a5f6:	461a      	mov	r2, r3
 800a5f8:	79fb      	ldrb	r3, [r7, #7]
 800a5fa:	429a      	cmp	r2, r3
 800a5fc:	d116      	bne.n	800a62c <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 800a5fe:	68fb      	ldr	r3, [r7, #12]
 800a600:	2200      	movs	r2, #0
 800a602:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 800a604:	68fb      	ldr	r3, [r7, #12]
 800a606:	2220      	movs	r2, #32
 800a608:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 800a60c:	68fb      	ldr	r3, [r7, #12]
 800a60e:	2200      	movs	r2, #0
 800a610:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800a614:	68fb      	ldr	r3, [r7, #12]
 800a616:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a618:	f043 0220 	orr.w	r2, r3, #32
 800a61c:	68fb      	ldr	r3, [r7, #12]
 800a61e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800a620:	68fb      	ldr	r3, [r7, #12]
 800a622:	2200      	movs	r2, #0
 800a624:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800a628:	2301      	movs	r3, #1
 800a62a:	e023      	b.n	800a674 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800a62c:	68bb      	ldr	r3, [r7, #8]
 800a62e:	0c1b      	lsrs	r3, r3, #16
 800a630:	b2db      	uxtb	r3, r3
 800a632:	2b01      	cmp	r3, #1
 800a634:	d10d      	bne.n	800a652 <I2C_WaitOnFlagUntilTimeout+0xca>
 800a636:	68fb      	ldr	r3, [r7, #12]
 800a638:	681b      	ldr	r3, [r3, #0]
 800a63a:	695b      	ldr	r3, [r3, #20]
 800a63c:	43da      	mvns	r2, r3
 800a63e:	68bb      	ldr	r3, [r7, #8]
 800a640:	4013      	ands	r3, r2
 800a642:	b29b      	uxth	r3, r3
 800a644:	2b00      	cmp	r3, #0
 800a646:	bf0c      	ite	eq
 800a648:	2301      	moveq	r3, #1
 800a64a:	2300      	movne	r3, #0
 800a64c:	b2db      	uxtb	r3, r3
 800a64e:	461a      	mov	r2, r3
 800a650:	e00c      	b.n	800a66c <I2C_WaitOnFlagUntilTimeout+0xe4>
 800a652:	68fb      	ldr	r3, [r7, #12]
 800a654:	681b      	ldr	r3, [r3, #0]
 800a656:	699b      	ldr	r3, [r3, #24]
 800a658:	43da      	mvns	r2, r3
 800a65a:	68bb      	ldr	r3, [r7, #8]
 800a65c:	4013      	ands	r3, r2
 800a65e:	b29b      	uxth	r3, r3
 800a660:	2b00      	cmp	r3, #0
 800a662:	bf0c      	ite	eq
 800a664:	2301      	moveq	r3, #1
 800a666:	2300      	movne	r3, #0
 800a668:	b2db      	uxtb	r3, r3
 800a66a:	461a      	mov	r2, r3
 800a66c:	79fb      	ldrb	r3, [r7, #7]
 800a66e:	429a      	cmp	r2, r3
 800a670:	d093      	beq.n	800a59a <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800a672:	2300      	movs	r3, #0
}
 800a674:	4618      	mov	r0, r3
 800a676:	3710      	adds	r7, #16
 800a678:	46bd      	mov	sp, r7
 800a67a:	bd80      	pop	{r7, pc}

0800a67c <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800a67c:	b580      	push	{r7, lr}
 800a67e:	b084      	sub	sp, #16
 800a680:	af00      	add	r7, sp, #0
 800a682:	60f8      	str	r0, [r7, #12]
 800a684:	60b9      	str	r1, [r7, #8]
 800a686:	607a      	str	r2, [r7, #4]
 800a688:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800a68a:	e071      	b.n	800a770 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800a68c:	68fb      	ldr	r3, [r7, #12]
 800a68e:	681b      	ldr	r3, [r3, #0]
 800a690:	695b      	ldr	r3, [r3, #20]
 800a692:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800a696:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800a69a:	d123      	bne.n	800a6e4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a69c:	68fb      	ldr	r3, [r7, #12]
 800a69e:	681b      	ldr	r3, [r3, #0]
 800a6a0:	681a      	ldr	r2, [r3, #0]
 800a6a2:	68fb      	ldr	r3, [r7, #12]
 800a6a4:	681b      	ldr	r3, [r3, #0]
 800a6a6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800a6aa:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800a6ac:	68fb      	ldr	r3, [r7, #12]
 800a6ae:	681b      	ldr	r3, [r3, #0]
 800a6b0:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800a6b4:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800a6b6:	68fb      	ldr	r3, [r7, #12]
 800a6b8:	2200      	movs	r2, #0
 800a6ba:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800a6bc:	68fb      	ldr	r3, [r7, #12]
 800a6be:	2220      	movs	r2, #32
 800a6c0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800a6c4:	68fb      	ldr	r3, [r7, #12]
 800a6c6:	2200      	movs	r2, #0
 800a6c8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800a6cc:	68fb      	ldr	r3, [r7, #12]
 800a6ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a6d0:	f043 0204 	orr.w	r2, r3, #4
 800a6d4:	68fb      	ldr	r3, [r7, #12]
 800a6d6:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800a6d8:	68fb      	ldr	r3, [r7, #12]
 800a6da:	2200      	movs	r2, #0
 800a6dc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 800a6e0:	2301      	movs	r3, #1
 800a6e2:	e067      	b.n	800a7b4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a6e4:	687b      	ldr	r3, [r7, #4]
 800a6e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a6ea:	d041      	beq.n	800a770 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a6ec:	f7fe fd5c 	bl	80091a8 <HAL_GetTick>
 800a6f0:	4602      	mov	r2, r0
 800a6f2:	683b      	ldr	r3, [r7, #0]
 800a6f4:	1ad3      	subs	r3, r2, r3
 800a6f6:	687a      	ldr	r2, [r7, #4]
 800a6f8:	429a      	cmp	r2, r3
 800a6fa:	d302      	bcc.n	800a702 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800a6fc:	687b      	ldr	r3, [r7, #4]
 800a6fe:	2b00      	cmp	r3, #0
 800a700:	d136      	bne.n	800a770 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 800a702:	68bb      	ldr	r3, [r7, #8]
 800a704:	0c1b      	lsrs	r3, r3, #16
 800a706:	b2db      	uxtb	r3, r3
 800a708:	2b01      	cmp	r3, #1
 800a70a:	d10c      	bne.n	800a726 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 800a70c:	68fb      	ldr	r3, [r7, #12]
 800a70e:	681b      	ldr	r3, [r3, #0]
 800a710:	695b      	ldr	r3, [r3, #20]
 800a712:	43da      	mvns	r2, r3
 800a714:	68bb      	ldr	r3, [r7, #8]
 800a716:	4013      	ands	r3, r2
 800a718:	b29b      	uxth	r3, r3
 800a71a:	2b00      	cmp	r3, #0
 800a71c:	bf14      	ite	ne
 800a71e:	2301      	movne	r3, #1
 800a720:	2300      	moveq	r3, #0
 800a722:	b2db      	uxtb	r3, r3
 800a724:	e00b      	b.n	800a73e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 800a726:	68fb      	ldr	r3, [r7, #12]
 800a728:	681b      	ldr	r3, [r3, #0]
 800a72a:	699b      	ldr	r3, [r3, #24]
 800a72c:	43da      	mvns	r2, r3
 800a72e:	68bb      	ldr	r3, [r7, #8]
 800a730:	4013      	ands	r3, r2
 800a732:	b29b      	uxth	r3, r3
 800a734:	2b00      	cmp	r3, #0
 800a736:	bf14      	ite	ne
 800a738:	2301      	movne	r3, #1
 800a73a:	2300      	moveq	r3, #0
 800a73c:	b2db      	uxtb	r3, r3
 800a73e:	2b00      	cmp	r3, #0
 800a740:	d016      	beq.n	800a770 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800a742:	68fb      	ldr	r3, [r7, #12]
 800a744:	2200      	movs	r2, #0
 800a746:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800a748:	68fb      	ldr	r3, [r7, #12]
 800a74a:	2220      	movs	r2, #32
 800a74c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800a750:	68fb      	ldr	r3, [r7, #12]
 800a752:	2200      	movs	r2, #0
 800a754:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800a758:	68fb      	ldr	r3, [r7, #12]
 800a75a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a75c:	f043 0220 	orr.w	r2, r3, #32
 800a760:	68fb      	ldr	r3, [r7, #12]
 800a762:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800a764:	68fb      	ldr	r3, [r7, #12]
 800a766:	2200      	movs	r2, #0
 800a768:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800a76c:	2301      	movs	r3, #1
 800a76e:	e021      	b.n	800a7b4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800a770:	68bb      	ldr	r3, [r7, #8]
 800a772:	0c1b      	lsrs	r3, r3, #16
 800a774:	b2db      	uxtb	r3, r3
 800a776:	2b01      	cmp	r3, #1
 800a778:	d10c      	bne.n	800a794 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 800a77a:	68fb      	ldr	r3, [r7, #12]
 800a77c:	681b      	ldr	r3, [r3, #0]
 800a77e:	695b      	ldr	r3, [r3, #20]
 800a780:	43da      	mvns	r2, r3
 800a782:	68bb      	ldr	r3, [r7, #8]
 800a784:	4013      	ands	r3, r2
 800a786:	b29b      	uxth	r3, r3
 800a788:	2b00      	cmp	r3, #0
 800a78a:	bf14      	ite	ne
 800a78c:	2301      	movne	r3, #1
 800a78e:	2300      	moveq	r3, #0
 800a790:	b2db      	uxtb	r3, r3
 800a792:	e00b      	b.n	800a7ac <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 800a794:	68fb      	ldr	r3, [r7, #12]
 800a796:	681b      	ldr	r3, [r3, #0]
 800a798:	699b      	ldr	r3, [r3, #24]
 800a79a:	43da      	mvns	r2, r3
 800a79c:	68bb      	ldr	r3, [r7, #8]
 800a79e:	4013      	ands	r3, r2
 800a7a0:	b29b      	uxth	r3, r3
 800a7a2:	2b00      	cmp	r3, #0
 800a7a4:	bf14      	ite	ne
 800a7a6:	2301      	movne	r3, #1
 800a7a8:	2300      	moveq	r3, #0
 800a7aa:	b2db      	uxtb	r3, r3
 800a7ac:	2b00      	cmp	r3, #0
 800a7ae:	f47f af6d 	bne.w	800a68c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 800a7b2:	2300      	movs	r3, #0
}
 800a7b4:	4618      	mov	r0, r3
 800a7b6:	3710      	adds	r7, #16
 800a7b8:	46bd      	mov	sp, r7
 800a7ba:	bd80      	pop	{r7, pc}

0800a7bc <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800a7bc:	b580      	push	{r7, lr}
 800a7be:	b084      	sub	sp, #16
 800a7c0:	af00      	add	r7, sp, #0
 800a7c2:	60f8      	str	r0, [r7, #12]
 800a7c4:	60b9      	str	r1, [r7, #8]
 800a7c6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800a7c8:	e034      	b.n	800a834 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800a7ca:	68f8      	ldr	r0, [r7, #12]
 800a7cc:	f000 f8e3 	bl	800a996 <I2C_IsAcknowledgeFailed>
 800a7d0:	4603      	mov	r3, r0
 800a7d2:	2b00      	cmp	r3, #0
 800a7d4:	d001      	beq.n	800a7da <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800a7d6:	2301      	movs	r3, #1
 800a7d8:	e034      	b.n	800a844 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a7da:	68bb      	ldr	r3, [r7, #8]
 800a7dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a7e0:	d028      	beq.n	800a834 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a7e2:	f7fe fce1 	bl	80091a8 <HAL_GetTick>
 800a7e6:	4602      	mov	r2, r0
 800a7e8:	687b      	ldr	r3, [r7, #4]
 800a7ea:	1ad3      	subs	r3, r2, r3
 800a7ec:	68ba      	ldr	r2, [r7, #8]
 800a7ee:	429a      	cmp	r2, r3
 800a7f0:	d302      	bcc.n	800a7f8 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800a7f2:	68bb      	ldr	r3, [r7, #8]
 800a7f4:	2b00      	cmp	r3, #0
 800a7f6:	d11d      	bne.n	800a834 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 800a7f8:	68fb      	ldr	r3, [r7, #12]
 800a7fa:	681b      	ldr	r3, [r3, #0]
 800a7fc:	695b      	ldr	r3, [r3, #20]
 800a7fe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a802:	2b80      	cmp	r3, #128	@ 0x80
 800a804:	d016      	beq.n	800a834 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800a806:	68fb      	ldr	r3, [r7, #12]
 800a808:	2200      	movs	r2, #0
 800a80a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800a80c:	68fb      	ldr	r3, [r7, #12]
 800a80e:	2220      	movs	r2, #32
 800a810:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800a814:	68fb      	ldr	r3, [r7, #12]
 800a816:	2200      	movs	r2, #0
 800a818:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800a81c:	68fb      	ldr	r3, [r7, #12]
 800a81e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a820:	f043 0220 	orr.w	r2, r3, #32
 800a824:	68fb      	ldr	r3, [r7, #12]
 800a826:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800a828:	68fb      	ldr	r3, [r7, #12]
 800a82a:	2200      	movs	r2, #0
 800a82c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800a830:	2301      	movs	r3, #1
 800a832:	e007      	b.n	800a844 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800a834:	68fb      	ldr	r3, [r7, #12]
 800a836:	681b      	ldr	r3, [r3, #0]
 800a838:	695b      	ldr	r3, [r3, #20]
 800a83a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a83e:	2b80      	cmp	r3, #128	@ 0x80
 800a840:	d1c3      	bne.n	800a7ca <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800a842:	2300      	movs	r3, #0
}
 800a844:	4618      	mov	r0, r3
 800a846:	3710      	adds	r7, #16
 800a848:	46bd      	mov	sp, r7
 800a84a:	bd80      	pop	{r7, pc}

0800a84c <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800a84c:	b580      	push	{r7, lr}
 800a84e:	b084      	sub	sp, #16
 800a850:	af00      	add	r7, sp, #0
 800a852:	60f8      	str	r0, [r7, #12]
 800a854:	60b9      	str	r1, [r7, #8]
 800a856:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800a858:	e034      	b.n	800a8c4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800a85a:	68f8      	ldr	r0, [r7, #12]
 800a85c:	f000 f89b 	bl	800a996 <I2C_IsAcknowledgeFailed>
 800a860:	4603      	mov	r3, r0
 800a862:	2b00      	cmp	r3, #0
 800a864:	d001      	beq.n	800a86a <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800a866:	2301      	movs	r3, #1
 800a868:	e034      	b.n	800a8d4 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a86a:	68bb      	ldr	r3, [r7, #8]
 800a86c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a870:	d028      	beq.n	800a8c4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a872:	f7fe fc99 	bl	80091a8 <HAL_GetTick>
 800a876:	4602      	mov	r2, r0
 800a878:	687b      	ldr	r3, [r7, #4]
 800a87a:	1ad3      	subs	r3, r2, r3
 800a87c:	68ba      	ldr	r2, [r7, #8]
 800a87e:	429a      	cmp	r2, r3
 800a880:	d302      	bcc.n	800a888 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800a882:	68bb      	ldr	r3, [r7, #8]
 800a884:	2b00      	cmp	r3, #0
 800a886:	d11d      	bne.n	800a8c4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 800a888:	68fb      	ldr	r3, [r7, #12]
 800a88a:	681b      	ldr	r3, [r3, #0]
 800a88c:	695b      	ldr	r3, [r3, #20]
 800a88e:	f003 0304 	and.w	r3, r3, #4
 800a892:	2b04      	cmp	r3, #4
 800a894:	d016      	beq.n	800a8c4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800a896:	68fb      	ldr	r3, [r7, #12]
 800a898:	2200      	movs	r2, #0
 800a89a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800a89c:	68fb      	ldr	r3, [r7, #12]
 800a89e:	2220      	movs	r2, #32
 800a8a0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800a8a4:	68fb      	ldr	r3, [r7, #12]
 800a8a6:	2200      	movs	r2, #0
 800a8a8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800a8ac:	68fb      	ldr	r3, [r7, #12]
 800a8ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a8b0:	f043 0220 	orr.w	r2, r3, #32
 800a8b4:	68fb      	ldr	r3, [r7, #12]
 800a8b6:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800a8b8:	68fb      	ldr	r3, [r7, #12]
 800a8ba:	2200      	movs	r2, #0
 800a8bc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800a8c0:	2301      	movs	r3, #1
 800a8c2:	e007      	b.n	800a8d4 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800a8c4:	68fb      	ldr	r3, [r7, #12]
 800a8c6:	681b      	ldr	r3, [r3, #0]
 800a8c8:	695b      	ldr	r3, [r3, #20]
 800a8ca:	f003 0304 	and.w	r3, r3, #4
 800a8ce:	2b04      	cmp	r3, #4
 800a8d0:	d1c3      	bne.n	800a85a <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800a8d2:	2300      	movs	r3, #0
}
 800a8d4:	4618      	mov	r0, r3
 800a8d6:	3710      	adds	r7, #16
 800a8d8:	46bd      	mov	sp, r7
 800a8da:	bd80      	pop	{r7, pc}

0800a8dc <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800a8dc:	b580      	push	{r7, lr}
 800a8de:	b084      	sub	sp, #16
 800a8e0:	af00      	add	r7, sp, #0
 800a8e2:	60f8      	str	r0, [r7, #12]
 800a8e4:	60b9      	str	r1, [r7, #8]
 800a8e6:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800a8e8:	e049      	b.n	800a97e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800a8ea:	68fb      	ldr	r3, [r7, #12]
 800a8ec:	681b      	ldr	r3, [r3, #0]
 800a8ee:	695b      	ldr	r3, [r3, #20]
 800a8f0:	f003 0310 	and.w	r3, r3, #16
 800a8f4:	2b10      	cmp	r3, #16
 800a8f6:	d119      	bne.n	800a92c <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800a8f8:	68fb      	ldr	r3, [r7, #12]
 800a8fa:	681b      	ldr	r3, [r3, #0]
 800a8fc:	f06f 0210 	mvn.w	r2, #16
 800a900:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800a902:	68fb      	ldr	r3, [r7, #12]
 800a904:	2200      	movs	r2, #0
 800a906:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800a908:	68fb      	ldr	r3, [r7, #12]
 800a90a:	2220      	movs	r2, #32
 800a90c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800a910:	68fb      	ldr	r3, [r7, #12]
 800a912:	2200      	movs	r2, #0
 800a914:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 800a918:	68fb      	ldr	r3, [r7, #12]
 800a91a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800a91c:	68fb      	ldr	r3, [r7, #12]
 800a91e:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800a920:	68fb      	ldr	r3, [r7, #12]
 800a922:	2200      	movs	r2, #0
 800a924:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 800a928:	2301      	movs	r3, #1
 800a92a:	e030      	b.n	800a98e <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a92c:	f7fe fc3c 	bl	80091a8 <HAL_GetTick>
 800a930:	4602      	mov	r2, r0
 800a932:	687b      	ldr	r3, [r7, #4]
 800a934:	1ad3      	subs	r3, r2, r3
 800a936:	68ba      	ldr	r2, [r7, #8]
 800a938:	429a      	cmp	r2, r3
 800a93a:	d302      	bcc.n	800a942 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 800a93c:	68bb      	ldr	r3, [r7, #8]
 800a93e:	2b00      	cmp	r3, #0
 800a940:	d11d      	bne.n	800a97e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 800a942:	68fb      	ldr	r3, [r7, #12]
 800a944:	681b      	ldr	r3, [r3, #0]
 800a946:	695b      	ldr	r3, [r3, #20]
 800a948:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a94c:	2b40      	cmp	r3, #64	@ 0x40
 800a94e:	d016      	beq.n	800a97e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800a950:	68fb      	ldr	r3, [r7, #12]
 800a952:	2200      	movs	r2, #0
 800a954:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800a956:	68fb      	ldr	r3, [r7, #12]
 800a958:	2220      	movs	r2, #32
 800a95a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800a95e:	68fb      	ldr	r3, [r7, #12]
 800a960:	2200      	movs	r2, #0
 800a962:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800a966:	68fb      	ldr	r3, [r7, #12]
 800a968:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a96a:	f043 0220 	orr.w	r2, r3, #32
 800a96e:	68fb      	ldr	r3, [r7, #12]
 800a970:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800a972:	68fb      	ldr	r3, [r7, #12]
 800a974:	2200      	movs	r2, #0
 800a976:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 800a97a:	2301      	movs	r3, #1
 800a97c:	e007      	b.n	800a98e <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800a97e:	68fb      	ldr	r3, [r7, #12]
 800a980:	681b      	ldr	r3, [r3, #0]
 800a982:	695b      	ldr	r3, [r3, #20]
 800a984:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a988:	2b40      	cmp	r3, #64	@ 0x40
 800a98a:	d1ae      	bne.n	800a8ea <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800a98c:	2300      	movs	r3, #0
}
 800a98e:	4618      	mov	r0, r3
 800a990:	3710      	adds	r7, #16
 800a992:	46bd      	mov	sp, r7
 800a994:	bd80      	pop	{r7, pc}

0800a996 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800a996:	b480      	push	{r7}
 800a998:	b083      	sub	sp, #12
 800a99a:	af00      	add	r7, sp, #0
 800a99c:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800a99e:	687b      	ldr	r3, [r7, #4]
 800a9a0:	681b      	ldr	r3, [r3, #0]
 800a9a2:	695b      	ldr	r3, [r3, #20]
 800a9a4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800a9a8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800a9ac:	d11b      	bne.n	800a9e6 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800a9ae:	687b      	ldr	r3, [r7, #4]
 800a9b0:	681b      	ldr	r3, [r3, #0]
 800a9b2:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800a9b6:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800a9b8:	687b      	ldr	r3, [r7, #4]
 800a9ba:	2200      	movs	r2, #0
 800a9bc:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800a9be:	687b      	ldr	r3, [r7, #4]
 800a9c0:	2220      	movs	r2, #32
 800a9c2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800a9c6:	687b      	ldr	r3, [r7, #4]
 800a9c8:	2200      	movs	r2, #0
 800a9ca:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800a9ce:	687b      	ldr	r3, [r7, #4]
 800a9d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a9d2:	f043 0204 	orr.w	r2, r3, #4
 800a9d6:	687b      	ldr	r3, [r7, #4]
 800a9d8:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800a9da:	687b      	ldr	r3, [r7, #4]
 800a9dc:	2200      	movs	r2, #0
 800a9de:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 800a9e2:	2301      	movs	r3, #1
 800a9e4:	e000      	b.n	800a9e8 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800a9e6:	2300      	movs	r3, #0
}
 800a9e8:	4618      	mov	r0, r3
 800a9ea:	370c      	adds	r7, #12
 800a9ec:	46bd      	mov	sp, r7
 800a9ee:	bc80      	pop	{r7}
 800a9f0:	4770      	bx	lr
	...

0800a9f4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800a9f4:	b580      	push	{r7, lr}
 800a9f6:	b088      	sub	sp, #32
 800a9f8:	af00      	add	r7, sp, #0
 800a9fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check the parameters */
  if(RCC_OscInitStruct == NULL)
 800a9fc:	687b      	ldr	r3, [r7, #4]
 800a9fe:	2b00      	cmp	r3, #0
 800aa00:	d101      	bne.n	800aa06 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800aa02:	2301      	movs	r3, #1
 800aa04:	e31d      	b.n	800b042 <HAL_RCC_OscConfig+0x64e>
  }

  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800aa06:	4b94      	ldr	r3, [pc, #592]	@ (800ac58 <HAL_RCC_OscConfig+0x264>)
 800aa08:	689b      	ldr	r3, [r3, #8]
 800aa0a:	f003 030c 	and.w	r3, r3, #12
 800aa0e:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800aa10:	4b91      	ldr	r3, [pc, #580]	@ (800ac58 <HAL_RCC_OscConfig+0x264>)
 800aa12:	689b      	ldr	r3, [r3, #8]
 800aa14:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800aa18:	617b      	str	r3, [r7, #20]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800aa1a:	687b      	ldr	r3, [r7, #4]
 800aa1c:	681b      	ldr	r3, [r3, #0]
 800aa1e:	f003 0301 	and.w	r3, r3, #1
 800aa22:	2b00      	cmp	r3, #0
 800aa24:	d07b      	beq.n	800ab1e <HAL_RCC_OscConfig+0x12a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 800aa26:	69bb      	ldr	r3, [r7, #24]
 800aa28:	2b08      	cmp	r3, #8
 800aa2a:	d006      	beq.n	800aa3a <HAL_RCC_OscConfig+0x46>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 800aa2c:	69bb      	ldr	r3, [r7, #24]
 800aa2e:	2b0c      	cmp	r3, #12
 800aa30:	d10f      	bne.n	800aa52 <HAL_RCC_OscConfig+0x5e>
 800aa32:	697b      	ldr	r3, [r7, #20]
 800aa34:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800aa38:	d10b      	bne.n	800aa52 <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800aa3a:	4b87      	ldr	r3, [pc, #540]	@ (800ac58 <HAL_RCC_OscConfig+0x264>)
 800aa3c:	681b      	ldr	r3, [r3, #0]
 800aa3e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800aa42:	2b00      	cmp	r3, #0
 800aa44:	d06a      	beq.n	800ab1c <HAL_RCC_OscConfig+0x128>
 800aa46:	687b      	ldr	r3, [r7, #4]
 800aa48:	685b      	ldr	r3, [r3, #4]
 800aa4a:	2b00      	cmp	r3, #0
 800aa4c:	d166      	bne.n	800ab1c <HAL_RCC_OscConfig+0x128>
      {
        return HAL_ERROR;
 800aa4e:	2301      	movs	r3, #1
 800aa50:	e2f7      	b.n	800b042 <HAL_RCC_OscConfig+0x64e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800aa52:	687b      	ldr	r3, [r7, #4]
 800aa54:	685b      	ldr	r3, [r3, #4]
 800aa56:	2b01      	cmp	r3, #1
 800aa58:	d106      	bne.n	800aa68 <HAL_RCC_OscConfig+0x74>
 800aa5a:	4b7f      	ldr	r3, [pc, #508]	@ (800ac58 <HAL_RCC_OscConfig+0x264>)
 800aa5c:	681b      	ldr	r3, [r3, #0]
 800aa5e:	4a7e      	ldr	r2, [pc, #504]	@ (800ac58 <HAL_RCC_OscConfig+0x264>)
 800aa60:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800aa64:	6013      	str	r3, [r2, #0]
 800aa66:	e02d      	b.n	800aac4 <HAL_RCC_OscConfig+0xd0>
 800aa68:	687b      	ldr	r3, [r7, #4]
 800aa6a:	685b      	ldr	r3, [r3, #4]
 800aa6c:	2b00      	cmp	r3, #0
 800aa6e:	d10c      	bne.n	800aa8a <HAL_RCC_OscConfig+0x96>
 800aa70:	4b79      	ldr	r3, [pc, #484]	@ (800ac58 <HAL_RCC_OscConfig+0x264>)
 800aa72:	681b      	ldr	r3, [r3, #0]
 800aa74:	4a78      	ldr	r2, [pc, #480]	@ (800ac58 <HAL_RCC_OscConfig+0x264>)
 800aa76:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800aa7a:	6013      	str	r3, [r2, #0]
 800aa7c:	4b76      	ldr	r3, [pc, #472]	@ (800ac58 <HAL_RCC_OscConfig+0x264>)
 800aa7e:	681b      	ldr	r3, [r3, #0]
 800aa80:	4a75      	ldr	r2, [pc, #468]	@ (800ac58 <HAL_RCC_OscConfig+0x264>)
 800aa82:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800aa86:	6013      	str	r3, [r2, #0]
 800aa88:	e01c      	b.n	800aac4 <HAL_RCC_OscConfig+0xd0>
 800aa8a:	687b      	ldr	r3, [r7, #4]
 800aa8c:	685b      	ldr	r3, [r3, #4]
 800aa8e:	2b05      	cmp	r3, #5
 800aa90:	d10c      	bne.n	800aaac <HAL_RCC_OscConfig+0xb8>
 800aa92:	4b71      	ldr	r3, [pc, #452]	@ (800ac58 <HAL_RCC_OscConfig+0x264>)
 800aa94:	681b      	ldr	r3, [r3, #0]
 800aa96:	4a70      	ldr	r2, [pc, #448]	@ (800ac58 <HAL_RCC_OscConfig+0x264>)
 800aa98:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800aa9c:	6013      	str	r3, [r2, #0]
 800aa9e:	4b6e      	ldr	r3, [pc, #440]	@ (800ac58 <HAL_RCC_OscConfig+0x264>)
 800aaa0:	681b      	ldr	r3, [r3, #0]
 800aaa2:	4a6d      	ldr	r2, [pc, #436]	@ (800ac58 <HAL_RCC_OscConfig+0x264>)
 800aaa4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800aaa8:	6013      	str	r3, [r2, #0]
 800aaaa:	e00b      	b.n	800aac4 <HAL_RCC_OscConfig+0xd0>
 800aaac:	4b6a      	ldr	r3, [pc, #424]	@ (800ac58 <HAL_RCC_OscConfig+0x264>)
 800aaae:	681b      	ldr	r3, [r3, #0]
 800aab0:	4a69      	ldr	r2, [pc, #420]	@ (800ac58 <HAL_RCC_OscConfig+0x264>)
 800aab2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800aab6:	6013      	str	r3, [r2, #0]
 800aab8:	4b67      	ldr	r3, [pc, #412]	@ (800ac58 <HAL_RCC_OscConfig+0x264>)
 800aaba:	681b      	ldr	r3, [r3, #0]
 800aabc:	4a66      	ldr	r2, [pc, #408]	@ (800ac58 <HAL_RCC_OscConfig+0x264>)
 800aabe:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800aac2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800aac4:	687b      	ldr	r3, [r7, #4]
 800aac6:	685b      	ldr	r3, [r3, #4]
 800aac8:	2b00      	cmp	r3, #0
 800aaca:	d013      	beq.n	800aaf4 <HAL_RCC_OscConfig+0x100>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800aacc:	f7fe fb6c 	bl	80091a8 <HAL_GetTick>
 800aad0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800aad2:	e008      	b.n	800aae6 <HAL_RCC_OscConfig+0xf2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800aad4:	f7fe fb68 	bl	80091a8 <HAL_GetTick>
 800aad8:	4602      	mov	r2, r0
 800aada:	693b      	ldr	r3, [r7, #16]
 800aadc:	1ad3      	subs	r3, r2, r3
 800aade:	2b64      	cmp	r3, #100	@ 0x64
 800aae0:	d901      	bls.n	800aae6 <HAL_RCC_OscConfig+0xf2>
          {
            return HAL_TIMEOUT;
 800aae2:	2303      	movs	r3, #3
 800aae4:	e2ad      	b.n	800b042 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800aae6:	4b5c      	ldr	r3, [pc, #368]	@ (800ac58 <HAL_RCC_OscConfig+0x264>)
 800aae8:	681b      	ldr	r3, [r3, #0]
 800aaea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800aaee:	2b00      	cmp	r3, #0
 800aaf0:	d0f0      	beq.n	800aad4 <HAL_RCC_OscConfig+0xe0>
 800aaf2:	e014      	b.n	800ab1e <HAL_RCC_OscConfig+0x12a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800aaf4:	f7fe fb58 	bl	80091a8 <HAL_GetTick>
 800aaf8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800aafa:	e008      	b.n	800ab0e <HAL_RCC_OscConfig+0x11a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800aafc:	f7fe fb54 	bl	80091a8 <HAL_GetTick>
 800ab00:	4602      	mov	r2, r0
 800ab02:	693b      	ldr	r3, [r7, #16]
 800ab04:	1ad3      	subs	r3, r2, r3
 800ab06:	2b64      	cmp	r3, #100	@ 0x64
 800ab08:	d901      	bls.n	800ab0e <HAL_RCC_OscConfig+0x11a>
          {
            return HAL_TIMEOUT;
 800ab0a:	2303      	movs	r3, #3
 800ab0c:	e299      	b.n	800b042 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800ab0e:	4b52      	ldr	r3, [pc, #328]	@ (800ac58 <HAL_RCC_OscConfig+0x264>)
 800ab10:	681b      	ldr	r3, [r3, #0]
 800ab12:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800ab16:	2b00      	cmp	r3, #0
 800ab18:	d1f0      	bne.n	800aafc <HAL_RCC_OscConfig+0x108>
 800ab1a:	e000      	b.n	800ab1e <HAL_RCC_OscConfig+0x12a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800ab1c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800ab1e:	687b      	ldr	r3, [r7, #4]
 800ab20:	681b      	ldr	r3, [r3, #0]
 800ab22:	f003 0302 	and.w	r3, r3, #2
 800ab26:	2b00      	cmp	r3, #0
 800ab28:	d05a      	beq.n	800abe0 <HAL_RCC_OscConfig+0x1ec>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 800ab2a:	69bb      	ldr	r3, [r7, #24]
 800ab2c:	2b04      	cmp	r3, #4
 800ab2e:	d005      	beq.n	800ab3c <HAL_RCC_OscConfig+0x148>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 800ab30:	69bb      	ldr	r3, [r7, #24]
 800ab32:	2b0c      	cmp	r3, #12
 800ab34:	d119      	bne.n	800ab6a <HAL_RCC_OscConfig+0x176>
 800ab36:	697b      	ldr	r3, [r7, #20]
 800ab38:	2b00      	cmp	r3, #0
 800ab3a:	d116      	bne.n	800ab6a <HAL_RCC_OscConfig+0x176>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800ab3c:	4b46      	ldr	r3, [pc, #280]	@ (800ac58 <HAL_RCC_OscConfig+0x264>)
 800ab3e:	681b      	ldr	r3, [r3, #0]
 800ab40:	f003 0302 	and.w	r3, r3, #2
 800ab44:	2b00      	cmp	r3, #0
 800ab46:	d005      	beq.n	800ab54 <HAL_RCC_OscConfig+0x160>
 800ab48:	687b      	ldr	r3, [r7, #4]
 800ab4a:	68db      	ldr	r3, [r3, #12]
 800ab4c:	2b01      	cmp	r3, #1
 800ab4e:	d001      	beq.n	800ab54 <HAL_RCC_OscConfig+0x160>
      {
        return HAL_ERROR;
 800ab50:	2301      	movs	r3, #1
 800ab52:	e276      	b.n	800b042 <HAL_RCC_OscConfig+0x64e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800ab54:	4b40      	ldr	r3, [pc, #256]	@ (800ac58 <HAL_RCC_OscConfig+0x264>)
 800ab56:	685b      	ldr	r3, [r3, #4]
 800ab58:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 800ab5c:	687b      	ldr	r3, [r7, #4]
 800ab5e:	691b      	ldr	r3, [r3, #16]
 800ab60:	021b      	lsls	r3, r3, #8
 800ab62:	493d      	ldr	r1, [pc, #244]	@ (800ac58 <HAL_RCC_OscConfig+0x264>)
 800ab64:	4313      	orrs	r3, r2
 800ab66:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800ab68:	e03a      	b.n	800abe0 <HAL_RCC_OscConfig+0x1ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800ab6a:	687b      	ldr	r3, [r7, #4]
 800ab6c:	68db      	ldr	r3, [r3, #12]
 800ab6e:	2b00      	cmp	r3, #0
 800ab70:	d020      	beq.n	800abb4 <HAL_RCC_OscConfig+0x1c0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800ab72:	4b3a      	ldr	r3, [pc, #232]	@ (800ac5c <HAL_RCC_OscConfig+0x268>)
 800ab74:	2201      	movs	r2, #1
 800ab76:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800ab78:	f7fe fb16 	bl	80091a8 <HAL_GetTick>
 800ab7c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800ab7e:	e008      	b.n	800ab92 <HAL_RCC_OscConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800ab80:	f7fe fb12 	bl	80091a8 <HAL_GetTick>
 800ab84:	4602      	mov	r2, r0
 800ab86:	693b      	ldr	r3, [r7, #16]
 800ab88:	1ad3      	subs	r3, r2, r3
 800ab8a:	2b02      	cmp	r3, #2
 800ab8c:	d901      	bls.n	800ab92 <HAL_RCC_OscConfig+0x19e>
          {
            return HAL_TIMEOUT;
 800ab8e:	2303      	movs	r3, #3
 800ab90:	e257      	b.n	800b042 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800ab92:	4b31      	ldr	r3, [pc, #196]	@ (800ac58 <HAL_RCC_OscConfig+0x264>)
 800ab94:	681b      	ldr	r3, [r3, #0]
 800ab96:	f003 0302 	and.w	r3, r3, #2
 800ab9a:	2b00      	cmp	r3, #0
 800ab9c:	d0f0      	beq.n	800ab80 <HAL_RCC_OscConfig+0x18c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800ab9e:	4b2e      	ldr	r3, [pc, #184]	@ (800ac58 <HAL_RCC_OscConfig+0x264>)
 800aba0:	685b      	ldr	r3, [r3, #4]
 800aba2:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 800aba6:	687b      	ldr	r3, [r7, #4]
 800aba8:	691b      	ldr	r3, [r3, #16]
 800abaa:	021b      	lsls	r3, r3, #8
 800abac:	492a      	ldr	r1, [pc, #168]	@ (800ac58 <HAL_RCC_OscConfig+0x264>)
 800abae:	4313      	orrs	r3, r2
 800abb0:	604b      	str	r3, [r1, #4]
 800abb2:	e015      	b.n	800abe0 <HAL_RCC_OscConfig+0x1ec>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800abb4:	4b29      	ldr	r3, [pc, #164]	@ (800ac5c <HAL_RCC_OscConfig+0x268>)
 800abb6:	2200      	movs	r2, #0
 800abb8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800abba:	f7fe faf5 	bl	80091a8 <HAL_GetTick>
 800abbe:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800abc0:	e008      	b.n	800abd4 <HAL_RCC_OscConfig+0x1e0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800abc2:	f7fe faf1 	bl	80091a8 <HAL_GetTick>
 800abc6:	4602      	mov	r2, r0
 800abc8:	693b      	ldr	r3, [r7, #16]
 800abca:	1ad3      	subs	r3, r2, r3
 800abcc:	2b02      	cmp	r3, #2
 800abce:	d901      	bls.n	800abd4 <HAL_RCC_OscConfig+0x1e0>
          {
            return HAL_TIMEOUT;
 800abd0:	2303      	movs	r3, #3
 800abd2:	e236      	b.n	800b042 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800abd4:	4b20      	ldr	r3, [pc, #128]	@ (800ac58 <HAL_RCC_OscConfig+0x264>)
 800abd6:	681b      	ldr	r3, [r3, #0]
 800abd8:	f003 0302 	and.w	r3, r3, #2
 800abdc:	2b00      	cmp	r3, #0
 800abde:	d1f0      	bne.n	800abc2 <HAL_RCC_OscConfig+0x1ce>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800abe0:	687b      	ldr	r3, [r7, #4]
 800abe2:	681b      	ldr	r3, [r3, #0]
 800abe4:	f003 0310 	and.w	r3, r3, #16
 800abe8:	2b00      	cmp	r3, #0
 800abea:	f000 80b8 	beq.w	800ad5e <HAL_RCC_OscConfig+0x36a>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800abee:	69bb      	ldr	r3, [r7, #24]
 800abf0:	2b00      	cmp	r3, #0
 800abf2:	d170      	bne.n	800acd6 <HAL_RCC_OscConfig+0x2e2>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800abf4:	4b18      	ldr	r3, [pc, #96]	@ (800ac58 <HAL_RCC_OscConfig+0x264>)
 800abf6:	681b      	ldr	r3, [r3, #0]
 800abf8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800abfc:	2b00      	cmp	r3, #0
 800abfe:	d005      	beq.n	800ac0c <HAL_RCC_OscConfig+0x218>
 800ac00:	687b      	ldr	r3, [r7, #4]
 800ac02:	699b      	ldr	r3, [r3, #24]
 800ac04:	2b00      	cmp	r3, #0
 800ac06:	d101      	bne.n	800ac0c <HAL_RCC_OscConfig+0x218>
      {
        return HAL_ERROR;
 800ac08:	2301      	movs	r3, #1
 800ac0a:	e21a      	b.n	800b042 <HAL_RCC_OscConfig+0x64e>
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800ac0c:	687b      	ldr	r3, [r7, #4]
 800ac0e:	6a1a      	ldr	r2, [r3, #32]
 800ac10:	4b11      	ldr	r3, [pc, #68]	@ (800ac58 <HAL_RCC_OscConfig+0x264>)
 800ac12:	685b      	ldr	r3, [r3, #4]
 800ac14:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
 800ac18:	429a      	cmp	r2, r3
 800ac1a:	d921      	bls.n	800ac60 <HAL_RCC_OscConfig+0x26c>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800ac1c:	687b      	ldr	r3, [r7, #4]
 800ac1e:	6a1b      	ldr	r3, [r3, #32]
 800ac20:	4618      	mov	r0, r3
 800ac22:	f000 fc7d 	bl	800b520 <RCC_SetFlashLatencyFromMSIRange>
 800ac26:	4603      	mov	r3, r0
 800ac28:	2b00      	cmp	r3, #0
 800ac2a:	d001      	beq.n	800ac30 <HAL_RCC_OscConfig+0x23c>
          {
            return HAL_ERROR;
 800ac2c:	2301      	movs	r3, #1
 800ac2e:	e208      	b.n	800b042 <HAL_RCC_OscConfig+0x64e>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800ac30:	4b09      	ldr	r3, [pc, #36]	@ (800ac58 <HAL_RCC_OscConfig+0x264>)
 800ac32:	685b      	ldr	r3, [r3, #4]
 800ac34:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800ac38:	687b      	ldr	r3, [r7, #4]
 800ac3a:	6a1b      	ldr	r3, [r3, #32]
 800ac3c:	4906      	ldr	r1, [pc, #24]	@ (800ac58 <HAL_RCC_OscConfig+0x264>)
 800ac3e:	4313      	orrs	r3, r2
 800ac40:	604b      	str	r3, [r1, #4]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800ac42:	4b05      	ldr	r3, [pc, #20]	@ (800ac58 <HAL_RCC_OscConfig+0x264>)
 800ac44:	685b      	ldr	r3, [r3, #4]
 800ac46:	f023 427f 	bic.w	r2, r3, #4278190080	@ 0xff000000
 800ac4a:	687b      	ldr	r3, [r7, #4]
 800ac4c:	69db      	ldr	r3, [r3, #28]
 800ac4e:	061b      	lsls	r3, r3, #24
 800ac50:	4901      	ldr	r1, [pc, #4]	@ (800ac58 <HAL_RCC_OscConfig+0x264>)
 800ac52:	4313      	orrs	r3, r2
 800ac54:	604b      	str	r3, [r1, #4]
 800ac56:	e020      	b.n	800ac9a <HAL_RCC_OscConfig+0x2a6>
 800ac58:	40023800 	.word	0x40023800
 800ac5c:	42470000 	.word	0x42470000
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800ac60:	4b99      	ldr	r3, [pc, #612]	@ (800aec8 <HAL_RCC_OscConfig+0x4d4>)
 800ac62:	685b      	ldr	r3, [r3, #4]
 800ac64:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800ac68:	687b      	ldr	r3, [r7, #4]
 800ac6a:	6a1b      	ldr	r3, [r3, #32]
 800ac6c:	4996      	ldr	r1, [pc, #600]	@ (800aec8 <HAL_RCC_OscConfig+0x4d4>)
 800ac6e:	4313      	orrs	r3, r2
 800ac70:	604b      	str	r3, [r1, #4]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800ac72:	4b95      	ldr	r3, [pc, #596]	@ (800aec8 <HAL_RCC_OscConfig+0x4d4>)
 800ac74:	685b      	ldr	r3, [r3, #4]
 800ac76:	f023 427f 	bic.w	r2, r3, #4278190080	@ 0xff000000
 800ac7a:	687b      	ldr	r3, [r7, #4]
 800ac7c:	69db      	ldr	r3, [r3, #28]
 800ac7e:	061b      	lsls	r3, r3, #24
 800ac80:	4991      	ldr	r1, [pc, #580]	@ (800aec8 <HAL_RCC_OscConfig+0x4d4>)
 800ac82:	4313      	orrs	r3, r2
 800ac84:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800ac86:	687b      	ldr	r3, [r7, #4]
 800ac88:	6a1b      	ldr	r3, [r3, #32]
 800ac8a:	4618      	mov	r0, r3
 800ac8c:	f000 fc48 	bl	800b520 <RCC_SetFlashLatencyFromMSIRange>
 800ac90:	4603      	mov	r3, r0
 800ac92:	2b00      	cmp	r3, #0
 800ac94:	d001      	beq.n	800ac9a <HAL_RCC_OscConfig+0x2a6>
          {
            return HAL_ERROR;
 800ac96:	2301      	movs	r3, #1
 800ac98:	e1d3      	b.n	800b042 <HAL_RCC_OscConfig+0x64e>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 800ac9a:	687b      	ldr	r3, [r7, #4]
 800ac9c:	6a1b      	ldr	r3, [r3, #32]
 800ac9e:	0b5b      	lsrs	r3, r3, #13
 800aca0:	3301      	adds	r3, #1
 800aca2:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 800aca6:	fa02 f303 	lsl.w	r3, r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 800acaa:	4a87      	ldr	r2, [pc, #540]	@ (800aec8 <HAL_RCC_OscConfig+0x4d4>)
 800acac:	6892      	ldr	r2, [r2, #8]
 800acae:	0912      	lsrs	r2, r2, #4
 800acb0:	f002 020f 	and.w	r2, r2, #15
 800acb4:	4985      	ldr	r1, [pc, #532]	@ (800aecc <HAL_RCC_OscConfig+0x4d8>)
 800acb6:	5c8a      	ldrb	r2, [r1, r2]
 800acb8:	40d3      	lsrs	r3, r2
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 800acba:	4a85      	ldr	r2, [pc, #532]	@ (800aed0 <HAL_RCC_OscConfig+0x4dc>)
 800acbc:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800acbe:	4b85      	ldr	r3, [pc, #532]	@ (800aed4 <HAL_RCC_OscConfig+0x4e0>)
 800acc0:	681b      	ldr	r3, [r3, #0]
 800acc2:	4618      	mov	r0, r3
 800acc4:	f7fe fa24 	bl	8009110 <HAL_InitTick>
 800acc8:	4603      	mov	r3, r0
 800acca:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800accc:	7bfb      	ldrb	r3, [r7, #15]
 800acce:	2b00      	cmp	r3, #0
 800acd0:	d045      	beq.n	800ad5e <HAL_RCC_OscConfig+0x36a>
        {
          return status;
 800acd2:	7bfb      	ldrb	r3, [r7, #15]
 800acd4:	e1b5      	b.n	800b042 <HAL_RCC_OscConfig+0x64e>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800acd6:	687b      	ldr	r3, [r7, #4]
 800acd8:	699b      	ldr	r3, [r3, #24]
 800acda:	2b00      	cmp	r3, #0
 800acdc:	d029      	beq.n	800ad32 <HAL_RCC_OscConfig+0x33e>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800acde:	4b7e      	ldr	r3, [pc, #504]	@ (800aed8 <HAL_RCC_OscConfig+0x4e4>)
 800ace0:	2201      	movs	r2, #1
 800ace2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800ace4:	f7fe fa60 	bl	80091a8 <HAL_GetTick>
 800ace8:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 800acea:	e008      	b.n	800acfe <HAL_RCC_OscConfig+0x30a>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800acec:	f7fe fa5c 	bl	80091a8 <HAL_GetTick>
 800acf0:	4602      	mov	r2, r0
 800acf2:	693b      	ldr	r3, [r7, #16]
 800acf4:	1ad3      	subs	r3, r2, r3
 800acf6:	2b02      	cmp	r3, #2
 800acf8:	d901      	bls.n	800acfe <HAL_RCC_OscConfig+0x30a>
          {
            return HAL_TIMEOUT;
 800acfa:	2303      	movs	r3, #3
 800acfc:	e1a1      	b.n	800b042 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 800acfe:	4b72      	ldr	r3, [pc, #456]	@ (800aec8 <HAL_RCC_OscConfig+0x4d4>)
 800ad00:	681b      	ldr	r3, [r3, #0]
 800ad02:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800ad06:	2b00      	cmp	r3, #0
 800ad08:	d0f0      	beq.n	800acec <HAL_RCC_OscConfig+0x2f8>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800ad0a:	4b6f      	ldr	r3, [pc, #444]	@ (800aec8 <HAL_RCC_OscConfig+0x4d4>)
 800ad0c:	685b      	ldr	r3, [r3, #4]
 800ad0e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800ad12:	687b      	ldr	r3, [r7, #4]
 800ad14:	6a1b      	ldr	r3, [r3, #32]
 800ad16:	496c      	ldr	r1, [pc, #432]	@ (800aec8 <HAL_RCC_OscConfig+0x4d4>)
 800ad18:	4313      	orrs	r3, r2
 800ad1a:	604b      	str	r3, [r1, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800ad1c:	4b6a      	ldr	r3, [pc, #424]	@ (800aec8 <HAL_RCC_OscConfig+0x4d4>)
 800ad1e:	685b      	ldr	r3, [r3, #4]
 800ad20:	f023 427f 	bic.w	r2, r3, #4278190080	@ 0xff000000
 800ad24:	687b      	ldr	r3, [r7, #4]
 800ad26:	69db      	ldr	r3, [r3, #28]
 800ad28:	061b      	lsls	r3, r3, #24
 800ad2a:	4967      	ldr	r1, [pc, #412]	@ (800aec8 <HAL_RCC_OscConfig+0x4d4>)
 800ad2c:	4313      	orrs	r3, r2
 800ad2e:	604b      	str	r3, [r1, #4]
 800ad30:	e015      	b.n	800ad5e <HAL_RCC_OscConfig+0x36a>

      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800ad32:	4b69      	ldr	r3, [pc, #420]	@ (800aed8 <HAL_RCC_OscConfig+0x4e4>)
 800ad34:	2200      	movs	r2, #0
 800ad36:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800ad38:	f7fe fa36 	bl	80091a8 <HAL_GetTick>
 800ad3c:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 800ad3e:	e008      	b.n	800ad52 <HAL_RCC_OscConfig+0x35e>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800ad40:	f7fe fa32 	bl	80091a8 <HAL_GetTick>
 800ad44:	4602      	mov	r2, r0
 800ad46:	693b      	ldr	r3, [r7, #16]
 800ad48:	1ad3      	subs	r3, r2, r3
 800ad4a:	2b02      	cmp	r3, #2
 800ad4c:	d901      	bls.n	800ad52 <HAL_RCC_OscConfig+0x35e>
          {
            return HAL_TIMEOUT;
 800ad4e:	2303      	movs	r3, #3
 800ad50:	e177      	b.n	800b042 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 800ad52:	4b5d      	ldr	r3, [pc, #372]	@ (800aec8 <HAL_RCC_OscConfig+0x4d4>)
 800ad54:	681b      	ldr	r3, [r3, #0]
 800ad56:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800ad5a:	2b00      	cmp	r3, #0
 800ad5c:	d1f0      	bne.n	800ad40 <HAL_RCC_OscConfig+0x34c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800ad5e:	687b      	ldr	r3, [r7, #4]
 800ad60:	681b      	ldr	r3, [r3, #0]
 800ad62:	f003 0308 	and.w	r3, r3, #8
 800ad66:	2b00      	cmp	r3, #0
 800ad68:	d030      	beq.n	800adcc <HAL_RCC_OscConfig+0x3d8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800ad6a:	687b      	ldr	r3, [r7, #4]
 800ad6c:	695b      	ldr	r3, [r3, #20]
 800ad6e:	2b00      	cmp	r3, #0
 800ad70:	d016      	beq.n	800ada0 <HAL_RCC_OscConfig+0x3ac>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800ad72:	4b5a      	ldr	r3, [pc, #360]	@ (800aedc <HAL_RCC_OscConfig+0x4e8>)
 800ad74:	2201      	movs	r2, #1
 800ad76:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800ad78:	f7fe fa16 	bl	80091a8 <HAL_GetTick>
 800ad7c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800ad7e:	e008      	b.n	800ad92 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800ad80:	f7fe fa12 	bl	80091a8 <HAL_GetTick>
 800ad84:	4602      	mov	r2, r0
 800ad86:	693b      	ldr	r3, [r7, #16]
 800ad88:	1ad3      	subs	r3, r2, r3
 800ad8a:	2b02      	cmp	r3, #2
 800ad8c:	d901      	bls.n	800ad92 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 800ad8e:	2303      	movs	r3, #3
 800ad90:	e157      	b.n	800b042 <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800ad92:	4b4d      	ldr	r3, [pc, #308]	@ (800aec8 <HAL_RCC_OscConfig+0x4d4>)
 800ad94:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ad96:	f003 0302 	and.w	r3, r3, #2
 800ad9a:	2b00      	cmp	r3, #0
 800ad9c:	d0f0      	beq.n	800ad80 <HAL_RCC_OscConfig+0x38c>
 800ad9e:	e015      	b.n	800adcc <HAL_RCC_OscConfig+0x3d8>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800ada0:	4b4e      	ldr	r3, [pc, #312]	@ (800aedc <HAL_RCC_OscConfig+0x4e8>)
 800ada2:	2200      	movs	r2, #0
 800ada4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800ada6:	f7fe f9ff 	bl	80091a8 <HAL_GetTick>
 800adaa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800adac:	e008      	b.n	800adc0 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800adae:	f7fe f9fb 	bl	80091a8 <HAL_GetTick>
 800adb2:	4602      	mov	r2, r0
 800adb4:	693b      	ldr	r3, [r7, #16]
 800adb6:	1ad3      	subs	r3, r2, r3
 800adb8:	2b02      	cmp	r3, #2
 800adba:	d901      	bls.n	800adc0 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 800adbc:	2303      	movs	r3, #3
 800adbe:	e140      	b.n	800b042 <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800adc0:	4b41      	ldr	r3, [pc, #260]	@ (800aec8 <HAL_RCC_OscConfig+0x4d4>)
 800adc2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800adc4:	f003 0302 	and.w	r3, r3, #2
 800adc8:	2b00      	cmp	r3, #0
 800adca:	d1f0      	bne.n	800adae <HAL_RCC_OscConfig+0x3ba>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800adcc:	687b      	ldr	r3, [r7, #4]
 800adce:	681b      	ldr	r3, [r3, #0]
 800add0:	f003 0304 	and.w	r3, r3, #4
 800add4:	2b00      	cmp	r3, #0
 800add6:	f000 80b5 	beq.w	800af44 <HAL_RCC_OscConfig+0x550>
  {
    FlagStatus       pwrclkchanged = RESET;
 800adda:	2300      	movs	r3, #0
 800addc:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800adde:	4b3a      	ldr	r3, [pc, #232]	@ (800aec8 <HAL_RCC_OscConfig+0x4d4>)
 800ade0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ade2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800ade6:	2b00      	cmp	r3, #0
 800ade8:	d10d      	bne.n	800ae06 <HAL_RCC_OscConfig+0x412>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800adea:	4b37      	ldr	r3, [pc, #220]	@ (800aec8 <HAL_RCC_OscConfig+0x4d4>)
 800adec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800adee:	4a36      	ldr	r2, [pc, #216]	@ (800aec8 <HAL_RCC_OscConfig+0x4d4>)
 800adf0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800adf4:	6253      	str	r3, [r2, #36]	@ 0x24
 800adf6:	4b34      	ldr	r3, [pc, #208]	@ (800aec8 <HAL_RCC_OscConfig+0x4d4>)
 800adf8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800adfa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800adfe:	60bb      	str	r3, [r7, #8]
 800ae00:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800ae02:	2301      	movs	r3, #1
 800ae04:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800ae06:	4b36      	ldr	r3, [pc, #216]	@ (800aee0 <HAL_RCC_OscConfig+0x4ec>)
 800ae08:	681b      	ldr	r3, [r3, #0]
 800ae0a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800ae0e:	2b00      	cmp	r3, #0
 800ae10:	d118      	bne.n	800ae44 <HAL_RCC_OscConfig+0x450>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800ae12:	4b33      	ldr	r3, [pc, #204]	@ (800aee0 <HAL_RCC_OscConfig+0x4ec>)
 800ae14:	681b      	ldr	r3, [r3, #0]
 800ae16:	4a32      	ldr	r2, [pc, #200]	@ (800aee0 <HAL_RCC_OscConfig+0x4ec>)
 800ae18:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800ae1c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800ae1e:	f7fe f9c3 	bl	80091a8 <HAL_GetTick>
 800ae22:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800ae24:	e008      	b.n	800ae38 <HAL_RCC_OscConfig+0x444>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800ae26:	f7fe f9bf 	bl	80091a8 <HAL_GetTick>
 800ae2a:	4602      	mov	r2, r0
 800ae2c:	693b      	ldr	r3, [r7, #16]
 800ae2e:	1ad3      	subs	r3, r2, r3
 800ae30:	2b64      	cmp	r3, #100	@ 0x64
 800ae32:	d901      	bls.n	800ae38 <HAL_RCC_OscConfig+0x444>
        {
          return HAL_TIMEOUT;
 800ae34:	2303      	movs	r3, #3
 800ae36:	e104      	b.n	800b042 <HAL_RCC_OscConfig+0x64e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800ae38:	4b29      	ldr	r3, [pc, #164]	@ (800aee0 <HAL_RCC_OscConfig+0x4ec>)
 800ae3a:	681b      	ldr	r3, [r3, #0]
 800ae3c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800ae40:	2b00      	cmp	r3, #0
 800ae42:	d0f0      	beq.n	800ae26 <HAL_RCC_OscConfig+0x432>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800ae44:	687b      	ldr	r3, [r7, #4]
 800ae46:	689b      	ldr	r3, [r3, #8]
 800ae48:	2b01      	cmp	r3, #1
 800ae4a:	d106      	bne.n	800ae5a <HAL_RCC_OscConfig+0x466>
 800ae4c:	4b1e      	ldr	r3, [pc, #120]	@ (800aec8 <HAL_RCC_OscConfig+0x4d4>)
 800ae4e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ae50:	4a1d      	ldr	r2, [pc, #116]	@ (800aec8 <HAL_RCC_OscConfig+0x4d4>)
 800ae52:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800ae56:	6353      	str	r3, [r2, #52]	@ 0x34
 800ae58:	e02d      	b.n	800aeb6 <HAL_RCC_OscConfig+0x4c2>
 800ae5a:	687b      	ldr	r3, [r7, #4]
 800ae5c:	689b      	ldr	r3, [r3, #8]
 800ae5e:	2b00      	cmp	r3, #0
 800ae60:	d10c      	bne.n	800ae7c <HAL_RCC_OscConfig+0x488>
 800ae62:	4b19      	ldr	r3, [pc, #100]	@ (800aec8 <HAL_RCC_OscConfig+0x4d4>)
 800ae64:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ae66:	4a18      	ldr	r2, [pc, #96]	@ (800aec8 <HAL_RCC_OscConfig+0x4d4>)
 800ae68:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800ae6c:	6353      	str	r3, [r2, #52]	@ 0x34
 800ae6e:	4b16      	ldr	r3, [pc, #88]	@ (800aec8 <HAL_RCC_OscConfig+0x4d4>)
 800ae70:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ae72:	4a15      	ldr	r2, [pc, #84]	@ (800aec8 <HAL_RCC_OscConfig+0x4d4>)
 800ae74:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800ae78:	6353      	str	r3, [r2, #52]	@ 0x34
 800ae7a:	e01c      	b.n	800aeb6 <HAL_RCC_OscConfig+0x4c2>
 800ae7c:	687b      	ldr	r3, [r7, #4]
 800ae7e:	689b      	ldr	r3, [r3, #8]
 800ae80:	2b05      	cmp	r3, #5
 800ae82:	d10c      	bne.n	800ae9e <HAL_RCC_OscConfig+0x4aa>
 800ae84:	4b10      	ldr	r3, [pc, #64]	@ (800aec8 <HAL_RCC_OscConfig+0x4d4>)
 800ae86:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ae88:	4a0f      	ldr	r2, [pc, #60]	@ (800aec8 <HAL_RCC_OscConfig+0x4d4>)
 800ae8a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800ae8e:	6353      	str	r3, [r2, #52]	@ 0x34
 800ae90:	4b0d      	ldr	r3, [pc, #52]	@ (800aec8 <HAL_RCC_OscConfig+0x4d4>)
 800ae92:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ae94:	4a0c      	ldr	r2, [pc, #48]	@ (800aec8 <HAL_RCC_OscConfig+0x4d4>)
 800ae96:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800ae9a:	6353      	str	r3, [r2, #52]	@ 0x34
 800ae9c:	e00b      	b.n	800aeb6 <HAL_RCC_OscConfig+0x4c2>
 800ae9e:	4b0a      	ldr	r3, [pc, #40]	@ (800aec8 <HAL_RCC_OscConfig+0x4d4>)
 800aea0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800aea2:	4a09      	ldr	r2, [pc, #36]	@ (800aec8 <HAL_RCC_OscConfig+0x4d4>)
 800aea4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800aea8:	6353      	str	r3, [r2, #52]	@ 0x34
 800aeaa:	4b07      	ldr	r3, [pc, #28]	@ (800aec8 <HAL_RCC_OscConfig+0x4d4>)
 800aeac:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800aeae:	4a06      	ldr	r2, [pc, #24]	@ (800aec8 <HAL_RCC_OscConfig+0x4d4>)
 800aeb0:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800aeb4:	6353      	str	r3, [r2, #52]	@ 0x34
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800aeb6:	687b      	ldr	r3, [r7, #4]
 800aeb8:	689b      	ldr	r3, [r3, #8]
 800aeba:	2b00      	cmp	r3, #0
 800aebc:	d024      	beq.n	800af08 <HAL_RCC_OscConfig+0x514>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800aebe:	f7fe f973 	bl	80091a8 <HAL_GetTick>
 800aec2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800aec4:	e019      	b.n	800aefa <HAL_RCC_OscConfig+0x506>
 800aec6:	bf00      	nop
 800aec8:	40023800 	.word	0x40023800
 800aecc:	0800e570 	.word	0x0800e570
 800aed0:	20000000 	.word	0x20000000
 800aed4:	200001bc 	.word	0x200001bc
 800aed8:	42470020 	.word	0x42470020
 800aedc:	42470680 	.word	0x42470680
 800aee0:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800aee4:	f7fe f960 	bl	80091a8 <HAL_GetTick>
 800aee8:	4602      	mov	r2, r0
 800aeea:	693b      	ldr	r3, [r7, #16]
 800aeec:	1ad3      	subs	r3, r2, r3
 800aeee:	f241 3288 	movw	r2, #5000	@ 0x1388
 800aef2:	4293      	cmp	r3, r2
 800aef4:	d901      	bls.n	800aefa <HAL_RCC_OscConfig+0x506>
        {
          return HAL_TIMEOUT;
 800aef6:	2303      	movs	r3, #3
 800aef8:	e0a3      	b.n	800b042 <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800aefa:	4b54      	ldr	r3, [pc, #336]	@ (800b04c <HAL_RCC_OscConfig+0x658>)
 800aefc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800aefe:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800af02:	2b00      	cmp	r3, #0
 800af04:	d0ee      	beq.n	800aee4 <HAL_RCC_OscConfig+0x4f0>
 800af06:	e014      	b.n	800af32 <HAL_RCC_OscConfig+0x53e>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800af08:	f7fe f94e 	bl	80091a8 <HAL_GetTick>
 800af0c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800af0e:	e00a      	b.n	800af26 <HAL_RCC_OscConfig+0x532>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800af10:	f7fe f94a 	bl	80091a8 <HAL_GetTick>
 800af14:	4602      	mov	r2, r0
 800af16:	693b      	ldr	r3, [r7, #16]
 800af18:	1ad3      	subs	r3, r2, r3
 800af1a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800af1e:	4293      	cmp	r3, r2
 800af20:	d901      	bls.n	800af26 <HAL_RCC_OscConfig+0x532>
        {
          return HAL_TIMEOUT;
 800af22:	2303      	movs	r3, #3
 800af24:	e08d      	b.n	800b042 <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800af26:	4b49      	ldr	r3, [pc, #292]	@ (800b04c <HAL_RCC_OscConfig+0x658>)
 800af28:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800af2a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800af2e:	2b00      	cmp	r3, #0
 800af30:	d1ee      	bne.n	800af10 <HAL_RCC_OscConfig+0x51c>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800af32:	7ffb      	ldrb	r3, [r7, #31]
 800af34:	2b01      	cmp	r3, #1
 800af36:	d105      	bne.n	800af44 <HAL_RCC_OscConfig+0x550>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800af38:	4b44      	ldr	r3, [pc, #272]	@ (800b04c <HAL_RCC_OscConfig+0x658>)
 800af3a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800af3c:	4a43      	ldr	r2, [pc, #268]	@ (800b04c <HAL_RCC_OscConfig+0x658>)
 800af3e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800af42:	6253      	str	r3, [r2, #36]	@ 0x24
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800af44:	687b      	ldr	r3, [r7, #4]
 800af46:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800af48:	2b00      	cmp	r3, #0
 800af4a:	d079      	beq.n	800b040 <HAL_RCC_OscConfig+0x64c>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800af4c:	69bb      	ldr	r3, [r7, #24]
 800af4e:	2b0c      	cmp	r3, #12
 800af50:	d056      	beq.n	800b000 <HAL_RCC_OscConfig+0x60c>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800af52:	687b      	ldr	r3, [r7, #4]
 800af54:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800af56:	2b02      	cmp	r3, #2
 800af58:	d13b      	bne.n	800afd2 <HAL_RCC_OscConfig+0x5de>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800af5a:	4b3d      	ldr	r3, [pc, #244]	@ (800b050 <HAL_RCC_OscConfig+0x65c>)
 800af5c:	2200      	movs	r2, #0
 800af5e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800af60:	f7fe f922 	bl	80091a8 <HAL_GetTick>
 800af64:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800af66:	e008      	b.n	800af7a <HAL_RCC_OscConfig+0x586>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800af68:	f7fe f91e 	bl	80091a8 <HAL_GetTick>
 800af6c:	4602      	mov	r2, r0
 800af6e:	693b      	ldr	r3, [r7, #16]
 800af70:	1ad3      	subs	r3, r2, r3
 800af72:	2b02      	cmp	r3, #2
 800af74:	d901      	bls.n	800af7a <HAL_RCC_OscConfig+0x586>
          {
            return HAL_TIMEOUT;
 800af76:	2303      	movs	r3, #3
 800af78:	e063      	b.n	800b042 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800af7a:	4b34      	ldr	r3, [pc, #208]	@ (800b04c <HAL_RCC_OscConfig+0x658>)
 800af7c:	681b      	ldr	r3, [r3, #0]
 800af7e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800af82:	2b00      	cmp	r3, #0
 800af84:	d1f0      	bne.n	800af68 <HAL_RCC_OscConfig+0x574>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800af86:	4b31      	ldr	r3, [pc, #196]	@ (800b04c <HAL_RCC_OscConfig+0x658>)
 800af88:	689b      	ldr	r3, [r3, #8]
 800af8a:	f423 027d 	bic.w	r2, r3, #16580608	@ 0xfd0000
 800af8e:	687b      	ldr	r3, [r7, #4]
 800af90:	6a99      	ldr	r1, [r3, #40]	@ 0x28
 800af92:	687b      	ldr	r3, [r7, #4]
 800af94:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800af96:	4319      	orrs	r1, r3
 800af98:	687b      	ldr	r3, [r7, #4]
 800af9a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800af9c:	430b      	orrs	r3, r1
 800af9e:	492b      	ldr	r1, [pc, #172]	@ (800b04c <HAL_RCC_OscConfig+0x658>)
 800afa0:	4313      	orrs	r3, r2
 800afa2:	608b      	str	r3, [r1, #8]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800afa4:	4b2a      	ldr	r3, [pc, #168]	@ (800b050 <HAL_RCC_OscConfig+0x65c>)
 800afa6:	2201      	movs	r2, #1
 800afa8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800afaa:	f7fe f8fd 	bl	80091a8 <HAL_GetTick>
 800afae:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800afb0:	e008      	b.n	800afc4 <HAL_RCC_OscConfig+0x5d0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800afb2:	f7fe f8f9 	bl	80091a8 <HAL_GetTick>
 800afb6:	4602      	mov	r2, r0
 800afb8:	693b      	ldr	r3, [r7, #16]
 800afba:	1ad3      	subs	r3, r2, r3
 800afbc:	2b02      	cmp	r3, #2
 800afbe:	d901      	bls.n	800afc4 <HAL_RCC_OscConfig+0x5d0>
          {
            return HAL_TIMEOUT;
 800afc0:	2303      	movs	r3, #3
 800afc2:	e03e      	b.n	800b042 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800afc4:	4b21      	ldr	r3, [pc, #132]	@ (800b04c <HAL_RCC_OscConfig+0x658>)
 800afc6:	681b      	ldr	r3, [r3, #0]
 800afc8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800afcc:	2b00      	cmp	r3, #0
 800afce:	d0f0      	beq.n	800afb2 <HAL_RCC_OscConfig+0x5be>
 800afd0:	e036      	b.n	800b040 <HAL_RCC_OscConfig+0x64c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800afd2:	4b1f      	ldr	r3, [pc, #124]	@ (800b050 <HAL_RCC_OscConfig+0x65c>)
 800afd4:	2200      	movs	r2, #0
 800afd6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800afd8:	f7fe f8e6 	bl	80091a8 <HAL_GetTick>
 800afdc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800afde:	e008      	b.n	800aff2 <HAL_RCC_OscConfig+0x5fe>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800afe0:	f7fe f8e2 	bl	80091a8 <HAL_GetTick>
 800afe4:	4602      	mov	r2, r0
 800afe6:	693b      	ldr	r3, [r7, #16]
 800afe8:	1ad3      	subs	r3, r2, r3
 800afea:	2b02      	cmp	r3, #2
 800afec:	d901      	bls.n	800aff2 <HAL_RCC_OscConfig+0x5fe>
          {
            return HAL_TIMEOUT;
 800afee:	2303      	movs	r3, #3
 800aff0:	e027      	b.n	800b042 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800aff2:	4b16      	ldr	r3, [pc, #88]	@ (800b04c <HAL_RCC_OscConfig+0x658>)
 800aff4:	681b      	ldr	r3, [r3, #0]
 800aff6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800affa:	2b00      	cmp	r3, #0
 800affc:	d1f0      	bne.n	800afe0 <HAL_RCC_OscConfig+0x5ec>
 800affe:	e01f      	b.n	800b040 <HAL_RCC_OscConfig+0x64c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800b000:	687b      	ldr	r3, [r7, #4]
 800b002:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b004:	2b01      	cmp	r3, #1
 800b006:	d101      	bne.n	800b00c <HAL_RCC_OscConfig+0x618>
      {
        return HAL_ERROR;
 800b008:	2301      	movs	r3, #1
 800b00a:	e01a      	b.n	800b042 <HAL_RCC_OscConfig+0x64e>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800b00c:	4b0f      	ldr	r3, [pc, #60]	@ (800b04c <HAL_RCC_OscConfig+0x658>)
 800b00e:	689b      	ldr	r3, [r3, #8]
 800b010:	617b      	str	r3, [r7, #20]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800b012:	697b      	ldr	r3, [r7, #20]
 800b014:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 800b018:	687b      	ldr	r3, [r7, #4]
 800b01a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b01c:	429a      	cmp	r2, r3
 800b01e:	d10d      	bne.n	800b03c <HAL_RCC_OscConfig+0x648>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 800b020:	697b      	ldr	r3, [r7, #20]
 800b022:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 800b026:	687b      	ldr	r3, [r7, #4]
 800b028:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800b02a:	429a      	cmp	r2, r3
 800b02c:	d106      	bne.n	800b03c <HAL_RCC_OscConfig+0x648>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 800b02e:	697b      	ldr	r3, [r7, #20]
 800b030:	f403 0240 	and.w	r2, r3, #12582912	@ 0xc00000
 800b034:	687b      	ldr	r3, [r7, #4]
 800b036:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 800b038:	429a      	cmp	r2, r3
 800b03a:	d001      	beq.n	800b040 <HAL_RCC_OscConfig+0x64c>
        {
          return HAL_ERROR;
 800b03c:	2301      	movs	r3, #1
 800b03e:	e000      	b.n	800b042 <HAL_RCC_OscConfig+0x64e>
        }
      }
    }
  }

  return HAL_OK;
 800b040:	2300      	movs	r3, #0
}
 800b042:	4618      	mov	r0, r3
 800b044:	3720      	adds	r7, #32
 800b046:	46bd      	mov	sp, r7
 800b048:	bd80      	pop	{r7, pc}
 800b04a:	bf00      	nop
 800b04c:	40023800 	.word	0x40023800
 800b050:	42470060 	.word	0x42470060

0800b054 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800b054:	b580      	push	{r7, lr}
 800b056:	b084      	sub	sp, #16
 800b058:	af00      	add	r7, sp, #0
 800b05a:	6078      	str	r0, [r7, #4]
 800b05c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check the parameters */
  if(RCC_ClkInitStruct == NULL)
 800b05e:	687b      	ldr	r3, [r7, #4]
 800b060:	2b00      	cmp	r3, #0
 800b062:	d101      	bne.n	800b068 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800b064:	2301      	movs	r3, #1
 800b066:	e11a      	b.n	800b29e <HAL_RCC_ClockConfig+0x24a>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800b068:	4b8f      	ldr	r3, [pc, #572]	@ (800b2a8 <HAL_RCC_ClockConfig+0x254>)
 800b06a:	681b      	ldr	r3, [r3, #0]
 800b06c:	f003 0301 	and.w	r3, r3, #1
 800b070:	683a      	ldr	r2, [r7, #0]
 800b072:	429a      	cmp	r2, r3
 800b074:	d919      	bls.n	800b0aa <HAL_RCC_ClockConfig+0x56>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800b076:	683b      	ldr	r3, [r7, #0]
 800b078:	2b01      	cmp	r3, #1
 800b07a:	d105      	bne.n	800b088 <HAL_RCC_ClockConfig+0x34>
 800b07c:	4b8a      	ldr	r3, [pc, #552]	@ (800b2a8 <HAL_RCC_ClockConfig+0x254>)
 800b07e:	681b      	ldr	r3, [r3, #0]
 800b080:	4a89      	ldr	r2, [pc, #548]	@ (800b2a8 <HAL_RCC_ClockConfig+0x254>)
 800b082:	f043 0304 	orr.w	r3, r3, #4
 800b086:	6013      	str	r3, [r2, #0]
 800b088:	4b87      	ldr	r3, [pc, #540]	@ (800b2a8 <HAL_RCC_ClockConfig+0x254>)
 800b08a:	681b      	ldr	r3, [r3, #0]
 800b08c:	f023 0201 	bic.w	r2, r3, #1
 800b090:	4985      	ldr	r1, [pc, #532]	@ (800b2a8 <HAL_RCC_ClockConfig+0x254>)
 800b092:	683b      	ldr	r3, [r7, #0]
 800b094:	4313      	orrs	r3, r2
 800b096:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800b098:	4b83      	ldr	r3, [pc, #524]	@ (800b2a8 <HAL_RCC_ClockConfig+0x254>)
 800b09a:	681b      	ldr	r3, [r3, #0]
 800b09c:	f003 0301 	and.w	r3, r3, #1
 800b0a0:	683a      	ldr	r2, [r7, #0]
 800b0a2:	429a      	cmp	r2, r3
 800b0a4:	d001      	beq.n	800b0aa <HAL_RCC_ClockConfig+0x56>
    {
      return HAL_ERROR;
 800b0a6:	2301      	movs	r3, #1
 800b0a8:	e0f9      	b.n	800b29e <HAL_RCC_ClockConfig+0x24a>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800b0aa:	687b      	ldr	r3, [r7, #4]
 800b0ac:	681b      	ldr	r3, [r3, #0]
 800b0ae:	f003 0302 	and.w	r3, r3, #2
 800b0b2:	2b00      	cmp	r3, #0
 800b0b4:	d008      	beq.n	800b0c8 <HAL_RCC_ClockConfig+0x74>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800b0b6:	4b7d      	ldr	r3, [pc, #500]	@ (800b2ac <HAL_RCC_ClockConfig+0x258>)
 800b0b8:	689b      	ldr	r3, [r3, #8]
 800b0ba:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800b0be:	687b      	ldr	r3, [r7, #4]
 800b0c0:	689b      	ldr	r3, [r3, #8]
 800b0c2:	497a      	ldr	r1, [pc, #488]	@ (800b2ac <HAL_RCC_ClockConfig+0x258>)
 800b0c4:	4313      	orrs	r3, r2
 800b0c6:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800b0c8:	687b      	ldr	r3, [r7, #4]
 800b0ca:	681b      	ldr	r3, [r3, #0]
 800b0cc:	f003 0301 	and.w	r3, r3, #1
 800b0d0:	2b00      	cmp	r3, #0
 800b0d2:	f000 808e 	beq.w	800b1f2 <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800b0d6:	687b      	ldr	r3, [r7, #4]
 800b0d8:	685b      	ldr	r3, [r3, #4]
 800b0da:	2b02      	cmp	r3, #2
 800b0dc:	d107      	bne.n	800b0ee <HAL_RCC_ClockConfig+0x9a>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800b0de:	4b73      	ldr	r3, [pc, #460]	@ (800b2ac <HAL_RCC_ClockConfig+0x258>)
 800b0e0:	681b      	ldr	r3, [r3, #0]
 800b0e2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800b0e6:	2b00      	cmp	r3, #0
 800b0e8:	d121      	bne.n	800b12e <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 800b0ea:	2301      	movs	r3, #1
 800b0ec:	e0d7      	b.n	800b29e <HAL_RCC_ClockConfig+0x24a>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800b0ee:	687b      	ldr	r3, [r7, #4]
 800b0f0:	685b      	ldr	r3, [r3, #4]
 800b0f2:	2b03      	cmp	r3, #3
 800b0f4:	d107      	bne.n	800b106 <HAL_RCC_ClockConfig+0xb2>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800b0f6:	4b6d      	ldr	r3, [pc, #436]	@ (800b2ac <HAL_RCC_ClockConfig+0x258>)
 800b0f8:	681b      	ldr	r3, [r3, #0]
 800b0fa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800b0fe:	2b00      	cmp	r3, #0
 800b100:	d115      	bne.n	800b12e <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 800b102:	2301      	movs	r3, #1
 800b104:	e0cb      	b.n	800b29e <HAL_RCC_ClockConfig+0x24a>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 800b106:	687b      	ldr	r3, [r7, #4]
 800b108:	685b      	ldr	r3, [r3, #4]
 800b10a:	2b01      	cmp	r3, #1
 800b10c:	d107      	bne.n	800b11e <HAL_RCC_ClockConfig+0xca>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800b10e:	4b67      	ldr	r3, [pc, #412]	@ (800b2ac <HAL_RCC_ClockConfig+0x258>)
 800b110:	681b      	ldr	r3, [r3, #0]
 800b112:	f003 0302 	and.w	r3, r3, #2
 800b116:	2b00      	cmp	r3, #0
 800b118:	d109      	bne.n	800b12e <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 800b11a:	2301      	movs	r3, #1
 800b11c:	e0bf      	b.n	800b29e <HAL_RCC_ClockConfig+0x24a>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 800b11e:	4b63      	ldr	r3, [pc, #396]	@ (800b2ac <HAL_RCC_ClockConfig+0x258>)
 800b120:	681b      	ldr	r3, [r3, #0]
 800b122:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800b126:	2b00      	cmp	r3, #0
 800b128:	d101      	bne.n	800b12e <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 800b12a:	2301      	movs	r3, #1
 800b12c:	e0b7      	b.n	800b29e <HAL_RCC_ClockConfig+0x24a>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800b12e:	4b5f      	ldr	r3, [pc, #380]	@ (800b2ac <HAL_RCC_ClockConfig+0x258>)
 800b130:	689b      	ldr	r3, [r3, #8]
 800b132:	f023 0203 	bic.w	r2, r3, #3
 800b136:	687b      	ldr	r3, [r7, #4]
 800b138:	685b      	ldr	r3, [r3, #4]
 800b13a:	495c      	ldr	r1, [pc, #368]	@ (800b2ac <HAL_RCC_ClockConfig+0x258>)
 800b13c:	4313      	orrs	r3, r2
 800b13e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800b140:	f7fe f832 	bl	80091a8 <HAL_GetTick>
 800b144:	60f8      	str	r0, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800b146:	687b      	ldr	r3, [r7, #4]
 800b148:	685b      	ldr	r3, [r3, #4]
 800b14a:	2b02      	cmp	r3, #2
 800b14c:	d112      	bne.n	800b174 <HAL_RCC_ClockConfig+0x120>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 800b14e:	e00a      	b.n	800b166 <HAL_RCC_ClockConfig+0x112>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800b150:	f7fe f82a 	bl	80091a8 <HAL_GetTick>
 800b154:	4602      	mov	r2, r0
 800b156:	68fb      	ldr	r3, [r7, #12]
 800b158:	1ad3      	subs	r3, r2, r3
 800b15a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800b15e:	4293      	cmp	r3, r2
 800b160:	d901      	bls.n	800b166 <HAL_RCC_ClockConfig+0x112>
        {
          return HAL_TIMEOUT;
 800b162:	2303      	movs	r3, #3
 800b164:	e09b      	b.n	800b29e <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 800b166:	4b51      	ldr	r3, [pc, #324]	@ (800b2ac <HAL_RCC_ClockConfig+0x258>)
 800b168:	689b      	ldr	r3, [r3, #8]
 800b16a:	f003 030c 	and.w	r3, r3, #12
 800b16e:	2b08      	cmp	r3, #8
 800b170:	d1ee      	bne.n	800b150 <HAL_RCC_ClockConfig+0xfc>
 800b172:	e03e      	b.n	800b1f2 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800b174:	687b      	ldr	r3, [r7, #4]
 800b176:	685b      	ldr	r3, [r3, #4]
 800b178:	2b03      	cmp	r3, #3
 800b17a:	d112      	bne.n	800b1a2 <HAL_RCC_ClockConfig+0x14e>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800b17c:	e00a      	b.n	800b194 <HAL_RCC_ClockConfig+0x140>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800b17e:	f7fe f813 	bl	80091a8 <HAL_GetTick>
 800b182:	4602      	mov	r2, r0
 800b184:	68fb      	ldr	r3, [r7, #12]
 800b186:	1ad3      	subs	r3, r2, r3
 800b188:	f241 3288 	movw	r2, #5000	@ 0x1388
 800b18c:	4293      	cmp	r3, r2
 800b18e:	d901      	bls.n	800b194 <HAL_RCC_ClockConfig+0x140>
        {
          return HAL_TIMEOUT;
 800b190:	2303      	movs	r3, #3
 800b192:	e084      	b.n	800b29e <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800b194:	4b45      	ldr	r3, [pc, #276]	@ (800b2ac <HAL_RCC_ClockConfig+0x258>)
 800b196:	689b      	ldr	r3, [r3, #8]
 800b198:	f003 030c 	and.w	r3, r3, #12
 800b19c:	2b0c      	cmp	r3, #12
 800b19e:	d1ee      	bne.n	800b17e <HAL_RCC_ClockConfig+0x12a>
 800b1a0:	e027      	b.n	800b1f2 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 800b1a2:	687b      	ldr	r3, [r7, #4]
 800b1a4:	685b      	ldr	r3, [r3, #4]
 800b1a6:	2b01      	cmp	r3, #1
 800b1a8:	d11d      	bne.n	800b1e6 <HAL_RCC_ClockConfig+0x192>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 800b1aa:	e00a      	b.n	800b1c2 <HAL_RCC_ClockConfig+0x16e>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800b1ac:	f7fd fffc 	bl	80091a8 <HAL_GetTick>
 800b1b0:	4602      	mov	r2, r0
 800b1b2:	68fb      	ldr	r3, [r7, #12]
 800b1b4:	1ad3      	subs	r3, r2, r3
 800b1b6:	f241 3288 	movw	r2, #5000	@ 0x1388
 800b1ba:	4293      	cmp	r3, r2
 800b1bc:	d901      	bls.n	800b1c2 <HAL_RCC_ClockConfig+0x16e>
        {
          return HAL_TIMEOUT;
 800b1be:	2303      	movs	r3, #3
 800b1c0:	e06d      	b.n	800b29e <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 800b1c2:	4b3a      	ldr	r3, [pc, #232]	@ (800b2ac <HAL_RCC_ClockConfig+0x258>)
 800b1c4:	689b      	ldr	r3, [r3, #8]
 800b1c6:	f003 030c 	and.w	r3, r3, #12
 800b1ca:	2b04      	cmp	r3, #4
 800b1cc:	d1ee      	bne.n	800b1ac <HAL_RCC_ClockConfig+0x158>
 800b1ce:	e010      	b.n	800b1f2 <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800b1d0:	f7fd ffea 	bl	80091a8 <HAL_GetTick>
 800b1d4:	4602      	mov	r2, r0
 800b1d6:	68fb      	ldr	r3, [r7, #12]
 800b1d8:	1ad3      	subs	r3, r2, r3
 800b1da:	f241 3288 	movw	r2, #5000	@ 0x1388
 800b1de:	4293      	cmp	r3, r2
 800b1e0:	d901      	bls.n	800b1e6 <HAL_RCC_ClockConfig+0x192>
        {
          return HAL_TIMEOUT;
 800b1e2:	2303      	movs	r3, #3
 800b1e4:	e05b      	b.n	800b29e <HAL_RCC_ClockConfig+0x24a>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 800b1e6:	4b31      	ldr	r3, [pc, #196]	@ (800b2ac <HAL_RCC_ClockConfig+0x258>)
 800b1e8:	689b      	ldr	r3, [r3, #8]
 800b1ea:	f003 030c 	and.w	r3, r3, #12
 800b1ee:	2b00      	cmp	r3, #0
 800b1f0:	d1ee      	bne.n	800b1d0 <HAL_RCC_ClockConfig+0x17c>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800b1f2:	4b2d      	ldr	r3, [pc, #180]	@ (800b2a8 <HAL_RCC_ClockConfig+0x254>)
 800b1f4:	681b      	ldr	r3, [r3, #0]
 800b1f6:	f003 0301 	and.w	r3, r3, #1
 800b1fa:	683a      	ldr	r2, [r7, #0]
 800b1fc:	429a      	cmp	r2, r3
 800b1fe:	d219      	bcs.n	800b234 <HAL_RCC_ClockConfig+0x1e0>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800b200:	683b      	ldr	r3, [r7, #0]
 800b202:	2b01      	cmp	r3, #1
 800b204:	d105      	bne.n	800b212 <HAL_RCC_ClockConfig+0x1be>
 800b206:	4b28      	ldr	r3, [pc, #160]	@ (800b2a8 <HAL_RCC_ClockConfig+0x254>)
 800b208:	681b      	ldr	r3, [r3, #0]
 800b20a:	4a27      	ldr	r2, [pc, #156]	@ (800b2a8 <HAL_RCC_ClockConfig+0x254>)
 800b20c:	f043 0304 	orr.w	r3, r3, #4
 800b210:	6013      	str	r3, [r2, #0]
 800b212:	4b25      	ldr	r3, [pc, #148]	@ (800b2a8 <HAL_RCC_ClockConfig+0x254>)
 800b214:	681b      	ldr	r3, [r3, #0]
 800b216:	f023 0201 	bic.w	r2, r3, #1
 800b21a:	4923      	ldr	r1, [pc, #140]	@ (800b2a8 <HAL_RCC_ClockConfig+0x254>)
 800b21c:	683b      	ldr	r3, [r7, #0]
 800b21e:	4313      	orrs	r3, r2
 800b220:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800b222:	4b21      	ldr	r3, [pc, #132]	@ (800b2a8 <HAL_RCC_ClockConfig+0x254>)
 800b224:	681b      	ldr	r3, [r3, #0]
 800b226:	f003 0301 	and.w	r3, r3, #1
 800b22a:	683a      	ldr	r2, [r7, #0]
 800b22c:	429a      	cmp	r2, r3
 800b22e:	d001      	beq.n	800b234 <HAL_RCC_ClockConfig+0x1e0>
    {
      return HAL_ERROR;
 800b230:	2301      	movs	r3, #1
 800b232:	e034      	b.n	800b29e <HAL_RCC_ClockConfig+0x24a>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800b234:	687b      	ldr	r3, [r7, #4]
 800b236:	681b      	ldr	r3, [r3, #0]
 800b238:	f003 0304 	and.w	r3, r3, #4
 800b23c:	2b00      	cmp	r3, #0
 800b23e:	d008      	beq.n	800b252 <HAL_RCC_ClockConfig+0x1fe>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800b240:	4b1a      	ldr	r3, [pc, #104]	@ (800b2ac <HAL_RCC_ClockConfig+0x258>)
 800b242:	689b      	ldr	r3, [r3, #8]
 800b244:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800b248:	687b      	ldr	r3, [r7, #4]
 800b24a:	68db      	ldr	r3, [r3, #12]
 800b24c:	4917      	ldr	r1, [pc, #92]	@ (800b2ac <HAL_RCC_ClockConfig+0x258>)
 800b24e:	4313      	orrs	r3, r2
 800b250:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800b252:	687b      	ldr	r3, [r7, #4]
 800b254:	681b      	ldr	r3, [r3, #0]
 800b256:	f003 0308 	and.w	r3, r3, #8
 800b25a:	2b00      	cmp	r3, #0
 800b25c:	d009      	beq.n	800b272 <HAL_RCC_ClockConfig+0x21e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800b25e:	4b13      	ldr	r3, [pc, #76]	@ (800b2ac <HAL_RCC_ClockConfig+0x258>)
 800b260:	689b      	ldr	r3, [r3, #8]
 800b262:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800b266:	687b      	ldr	r3, [r7, #4]
 800b268:	691b      	ldr	r3, [r3, #16]
 800b26a:	00db      	lsls	r3, r3, #3
 800b26c:	490f      	ldr	r1, [pc, #60]	@ (800b2ac <HAL_RCC_ClockConfig+0x258>)
 800b26e:	4313      	orrs	r3, r2
 800b270:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800b272:	f000 f823 	bl	800b2bc <HAL_RCC_GetSysClockFreq>
 800b276:	4602      	mov	r2, r0
 800b278:	4b0c      	ldr	r3, [pc, #48]	@ (800b2ac <HAL_RCC_ClockConfig+0x258>)
 800b27a:	689b      	ldr	r3, [r3, #8]
 800b27c:	091b      	lsrs	r3, r3, #4
 800b27e:	f003 030f 	and.w	r3, r3, #15
 800b282:	490b      	ldr	r1, [pc, #44]	@ (800b2b0 <HAL_RCC_ClockConfig+0x25c>)
 800b284:	5ccb      	ldrb	r3, [r1, r3]
 800b286:	fa22 f303 	lsr.w	r3, r2, r3
 800b28a:	4a0a      	ldr	r2, [pc, #40]	@ (800b2b4 <HAL_RCC_ClockConfig+0x260>)
 800b28c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800b28e:	4b0a      	ldr	r3, [pc, #40]	@ (800b2b8 <HAL_RCC_ClockConfig+0x264>)
 800b290:	681b      	ldr	r3, [r3, #0]
 800b292:	4618      	mov	r0, r3
 800b294:	f7fd ff3c 	bl	8009110 <HAL_InitTick>
 800b298:	4603      	mov	r3, r0
 800b29a:	72fb      	strb	r3, [r7, #11]

  return status;
 800b29c:	7afb      	ldrb	r3, [r7, #11]
}
 800b29e:	4618      	mov	r0, r3
 800b2a0:	3710      	adds	r7, #16
 800b2a2:	46bd      	mov	sp, r7
 800b2a4:	bd80      	pop	{r7, pc}
 800b2a6:	bf00      	nop
 800b2a8:	40023c00 	.word	0x40023c00
 800b2ac:	40023800 	.word	0x40023800
 800b2b0:	0800e570 	.word	0x0800e570
 800b2b4:	20000000 	.word	0x20000000
 800b2b8:	200001bc 	.word	0x200001bc

0800b2bc <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800b2bc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800b2c0:	b092      	sub	sp, #72	@ 0x48
 800b2c2:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange, sysclockfreq;

  tmpreg = RCC->CFGR;
 800b2c4:	4b79      	ldr	r3, [pc, #484]	@ (800b4ac <HAL_RCC_GetSysClockFreq+0x1f0>)
 800b2c6:	689b      	ldr	r3, [r3, #8]
 800b2c8:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800b2ca:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b2cc:	f003 030c 	and.w	r3, r3, #12
 800b2d0:	2b0c      	cmp	r3, #12
 800b2d2:	d00d      	beq.n	800b2f0 <HAL_RCC_GetSysClockFreq+0x34>
 800b2d4:	2b0c      	cmp	r3, #12
 800b2d6:	f200 80d5 	bhi.w	800b484 <HAL_RCC_GetSysClockFreq+0x1c8>
 800b2da:	2b04      	cmp	r3, #4
 800b2dc:	d002      	beq.n	800b2e4 <HAL_RCC_GetSysClockFreq+0x28>
 800b2de:	2b08      	cmp	r3, #8
 800b2e0:	d003      	beq.n	800b2ea <HAL_RCC_GetSysClockFreq+0x2e>
 800b2e2:	e0cf      	b.n	800b484 <HAL_RCC_GetSysClockFreq+0x1c8>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800b2e4:	4b72      	ldr	r3, [pc, #456]	@ (800b4b0 <HAL_RCC_GetSysClockFreq+0x1f4>)
 800b2e6:	643b      	str	r3, [r7, #64]	@ 0x40
      break;
 800b2e8:	e0da      	b.n	800b4a0 <HAL_RCC_GetSysClockFreq+0x1e4>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800b2ea:	4b72      	ldr	r3, [pc, #456]	@ (800b4b4 <HAL_RCC_GetSysClockFreq+0x1f8>)
 800b2ec:	643b      	str	r3, [r7, #64]	@ 0x40
      break;
 800b2ee:	e0d7      	b.n	800b4a0 <HAL_RCC_GetSysClockFreq+0x1e4>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 800b2f0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b2f2:	0c9b      	lsrs	r3, r3, #18
 800b2f4:	f003 020f 	and.w	r2, r3, #15
 800b2f8:	4b6f      	ldr	r3, [pc, #444]	@ (800b4b8 <HAL_RCC_GetSysClockFreq+0x1fc>)
 800b2fa:	5c9b      	ldrb	r3, [r3, r2]
 800b2fc:	63bb      	str	r3, [r7, #56]	@ 0x38
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 800b2fe:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b300:	0d9b      	lsrs	r3, r3, #22
 800b302:	f003 0303 	and.w	r3, r3, #3
 800b306:	3301      	adds	r3, #1
 800b308:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800b30a:	4b68      	ldr	r3, [pc, #416]	@ (800b4ac <HAL_RCC_GetSysClockFreq+0x1f0>)
 800b30c:	689b      	ldr	r3, [r3, #8]
 800b30e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800b312:	2b00      	cmp	r3, #0
 800b314:	d05d      	beq.n	800b3d2 <HAL_RCC_GetSysClockFreq+0x116>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 800b316:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b318:	2200      	movs	r2, #0
 800b31a:	4618      	mov	r0, r3
 800b31c:	4611      	mov	r1, r2
 800b31e:	4604      	mov	r4, r0
 800b320:	460d      	mov	r5, r1
 800b322:	4622      	mov	r2, r4
 800b324:	462b      	mov	r3, r5
 800b326:	f04f 0000 	mov.w	r0, #0
 800b32a:	f04f 0100 	mov.w	r1, #0
 800b32e:	0159      	lsls	r1, r3, #5
 800b330:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800b334:	0150      	lsls	r0, r2, #5
 800b336:	4602      	mov	r2, r0
 800b338:	460b      	mov	r3, r1
 800b33a:	4621      	mov	r1, r4
 800b33c:	1a51      	subs	r1, r2, r1
 800b33e:	6139      	str	r1, [r7, #16]
 800b340:	4629      	mov	r1, r5
 800b342:	eb63 0301 	sbc.w	r3, r3, r1
 800b346:	617b      	str	r3, [r7, #20]
 800b348:	f04f 0200 	mov.w	r2, #0
 800b34c:	f04f 0300 	mov.w	r3, #0
 800b350:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800b354:	4659      	mov	r1, fp
 800b356:	018b      	lsls	r3, r1, #6
 800b358:	4651      	mov	r1, sl
 800b35a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800b35e:	4651      	mov	r1, sl
 800b360:	018a      	lsls	r2, r1, #6
 800b362:	46d4      	mov	ip, sl
 800b364:	ebb2 080c 	subs.w	r8, r2, ip
 800b368:	4659      	mov	r1, fp
 800b36a:	eb63 0901 	sbc.w	r9, r3, r1
 800b36e:	f04f 0200 	mov.w	r2, #0
 800b372:	f04f 0300 	mov.w	r3, #0
 800b376:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800b37a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800b37e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800b382:	4690      	mov	r8, r2
 800b384:	4699      	mov	r9, r3
 800b386:	4623      	mov	r3, r4
 800b388:	eb18 0303 	adds.w	r3, r8, r3
 800b38c:	60bb      	str	r3, [r7, #8]
 800b38e:	462b      	mov	r3, r5
 800b390:	eb49 0303 	adc.w	r3, r9, r3
 800b394:	60fb      	str	r3, [r7, #12]
 800b396:	f04f 0200 	mov.w	r2, #0
 800b39a:	f04f 0300 	mov.w	r3, #0
 800b39e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800b3a2:	4629      	mov	r1, r5
 800b3a4:	024b      	lsls	r3, r1, #9
 800b3a6:	4620      	mov	r0, r4
 800b3a8:	4629      	mov	r1, r5
 800b3aa:	4604      	mov	r4, r0
 800b3ac:	ea43 53d4 	orr.w	r3, r3, r4, lsr #23
 800b3b0:	4601      	mov	r1, r0
 800b3b2:	024a      	lsls	r2, r1, #9
 800b3b4:	4610      	mov	r0, r2
 800b3b6:	4619      	mov	r1, r3
 800b3b8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b3ba:	2200      	movs	r2, #0
 800b3bc:	62bb      	str	r3, [r7, #40]	@ 0x28
 800b3be:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800b3c0:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800b3c4:	f7f5 fe72 	bl	80010ac <__aeabi_uldivmod>
 800b3c8:	4602      	mov	r2, r0
 800b3ca:	460b      	mov	r3, r1
 800b3cc:	4613      	mov	r3, r2
 800b3ce:	647b      	str	r3, [r7, #68]	@ 0x44
 800b3d0:	e055      	b.n	800b47e <HAL_RCC_GetSysClockFreq+0x1c2>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 800b3d2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b3d4:	2200      	movs	r2, #0
 800b3d6:	623b      	str	r3, [r7, #32]
 800b3d8:	627a      	str	r2, [r7, #36]	@ 0x24
 800b3da:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800b3de:	4642      	mov	r2, r8
 800b3e0:	464b      	mov	r3, r9
 800b3e2:	f04f 0000 	mov.w	r0, #0
 800b3e6:	f04f 0100 	mov.w	r1, #0
 800b3ea:	0159      	lsls	r1, r3, #5
 800b3ec:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800b3f0:	0150      	lsls	r0, r2, #5
 800b3f2:	4602      	mov	r2, r0
 800b3f4:	460b      	mov	r3, r1
 800b3f6:	46c4      	mov	ip, r8
 800b3f8:	ebb2 0a0c 	subs.w	sl, r2, ip
 800b3fc:	4640      	mov	r0, r8
 800b3fe:	4649      	mov	r1, r9
 800b400:	468c      	mov	ip, r1
 800b402:	eb63 0b0c 	sbc.w	fp, r3, ip
 800b406:	f04f 0200 	mov.w	r2, #0
 800b40a:	f04f 0300 	mov.w	r3, #0
 800b40e:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800b412:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800b416:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800b41a:	ebb2 040a 	subs.w	r4, r2, sl
 800b41e:	eb63 050b 	sbc.w	r5, r3, fp
 800b422:	f04f 0200 	mov.w	r2, #0
 800b426:	f04f 0300 	mov.w	r3, #0
 800b42a:	00eb      	lsls	r3, r5, #3
 800b42c:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800b430:	00e2      	lsls	r2, r4, #3
 800b432:	4614      	mov	r4, r2
 800b434:	461d      	mov	r5, r3
 800b436:	4603      	mov	r3, r0
 800b438:	18e3      	adds	r3, r4, r3
 800b43a:	603b      	str	r3, [r7, #0]
 800b43c:	460b      	mov	r3, r1
 800b43e:	eb45 0303 	adc.w	r3, r5, r3
 800b442:	607b      	str	r3, [r7, #4]
 800b444:	f04f 0200 	mov.w	r2, #0
 800b448:	f04f 0300 	mov.w	r3, #0
 800b44c:	e9d7 4500 	ldrd	r4, r5, [r7]
 800b450:	4629      	mov	r1, r5
 800b452:	028b      	lsls	r3, r1, #10
 800b454:	4620      	mov	r0, r4
 800b456:	4629      	mov	r1, r5
 800b458:	4604      	mov	r4, r0
 800b45a:	ea43 5394 	orr.w	r3, r3, r4, lsr #22
 800b45e:	4601      	mov	r1, r0
 800b460:	028a      	lsls	r2, r1, #10
 800b462:	4610      	mov	r0, r2
 800b464:	4619      	mov	r1, r3
 800b466:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b468:	2200      	movs	r2, #0
 800b46a:	61bb      	str	r3, [r7, #24]
 800b46c:	61fa      	str	r2, [r7, #28]
 800b46e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800b472:	f7f5 fe1b 	bl	80010ac <__aeabi_uldivmod>
 800b476:	4602      	mov	r2, r0
 800b478:	460b      	mov	r3, r1
 800b47a:	4613      	mov	r3, r2
 800b47c:	647b      	str	r3, [r7, #68]	@ 0x44
      }
      sysclockfreq = pllvco;
 800b47e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800b480:	643b      	str	r3, [r7, #64]	@ 0x40
      break;
 800b482:	e00d      	b.n	800b4a0 <HAL_RCC_GetSysClockFreq+0x1e4>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 800b484:	4b09      	ldr	r3, [pc, #36]	@ (800b4ac <HAL_RCC_GetSysClockFreq+0x1f0>)
 800b486:	685b      	ldr	r3, [r3, #4]
 800b488:	0b5b      	lsrs	r3, r3, #13
 800b48a:	f003 0307 	and.w	r3, r3, #7
 800b48e:	633b      	str	r3, [r7, #48]	@ 0x30
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 800b490:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b492:	3301      	adds	r3, #1
 800b494:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 800b498:	fa02 f303 	lsl.w	r3, r2, r3
 800b49c:	643b      	str	r3, [r7, #64]	@ 0x40
      break;
 800b49e:	bf00      	nop
    }
  }
  return sysclockfreq;
 800b4a0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
}
 800b4a2:	4618      	mov	r0, r3
 800b4a4:	3748      	adds	r7, #72	@ 0x48
 800b4a6:	46bd      	mov	sp, r7
 800b4a8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800b4ac:	40023800 	.word	0x40023800
 800b4b0:	00f42400 	.word	0x00f42400
 800b4b4:	007a1200 	.word	0x007a1200
 800b4b8:	0800e564 	.word	0x0800e564

0800b4bc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800b4bc:	b480      	push	{r7}
 800b4be:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800b4c0:	4b02      	ldr	r3, [pc, #8]	@ (800b4cc <HAL_RCC_GetHCLKFreq+0x10>)
 800b4c2:	681b      	ldr	r3, [r3, #0]
}
 800b4c4:	4618      	mov	r0, r3
 800b4c6:	46bd      	mov	sp, r7
 800b4c8:	bc80      	pop	{r7}
 800b4ca:	4770      	bx	lr
 800b4cc:	20000000 	.word	0x20000000

0800b4d0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800b4d0:	b580      	push	{r7, lr}
 800b4d2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800b4d4:	f7ff fff2 	bl	800b4bc <HAL_RCC_GetHCLKFreq>
 800b4d8:	4602      	mov	r2, r0
 800b4da:	4b05      	ldr	r3, [pc, #20]	@ (800b4f0 <HAL_RCC_GetPCLK1Freq+0x20>)
 800b4dc:	689b      	ldr	r3, [r3, #8]
 800b4de:	0a1b      	lsrs	r3, r3, #8
 800b4e0:	f003 0307 	and.w	r3, r3, #7
 800b4e4:	4903      	ldr	r1, [pc, #12]	@ (800b4f4 <HAL_RCC_GetPCLK1Freq+0x24>)
 800b4e6:	5ccb      	ldrb	r3, [r1, r3]
 800b4e8:	fa22 f303 	lsr.w	r3, r2, r3
}
 800b4ec:	4618      	mov	r0, r3
 800b4ee:	bd80      	pop	{r7, pc}
 800b4f0:	40023800 	.word	0x40023800
 800b4f4:	0800e580 	.word	0x0800e580

0800b4f8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800b4f8:	b580      	push	{r7, lr}
 800b4fa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800b4fc:	f7ff ffde 	bl	800b4bc <HAL_RCC_GetHCLKFreq>
 800b500:	4602      	mov	r2, r0
 800b502:	4b05      	ldr	r3, [pc, #20]	@ (800b518 <HAL_RCC_GetPCLK2Freq+0x20>)
 800b504:	689b      	ldr	r3, [r3, #8]
 800b506:	0adb      	lsrs	r3, r3, #11
 800b508:	f003 0307 	and.w	r3, r3, #7
 800b50c:	4903      	ldr	r1, [pc, #12]	@ (800b51c <HAL_RCC_GetPCLK2Freq+0x24>)
 800b50e:	5ccb      	ldrb	r3, [r1, r3]
 800b510:	fa22 f303 	lsr.w	r3, r2, r3
}
 800b514:	4618      	mov	r0, r3
 800b516:	bd80      	pop	{r7, pc}
 800b518:	40023800 	.word	0x40023800
 800b51c:	0800e580 	.word	0x0800e580

0800b520 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range
  * @param  MSIrange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_6
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSIrange)
{
 800b520:	b480      	push	{r7}
 800b522:	b087      	sub	sp, #28
 800b524:	af00      	add	r7, sp, #0
 800b526:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 800b528:	2300      	movs	r3, #0
 800b52a:	613b      	str	r3, [r7, #16]

  /* HCLK can reach 4 MHz only if AHB prescaler = 1 */
  if (READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 800b52c:	4b29      	ldr	r3, [pc, #164]	@ (800b5d4 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 800b52e:	689b      	ldr	r3, [r3, #8]
 800b530:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800b534:	2b00      	cmp	r3, #0
 800b536:	d12c      	bne.n	800b592 <RCC_SetFlashLatencyFromMSIRange+0x72>
  {
    if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 800b538:	4b26      	ldr	r3, [pc, #152]	@ (800b5d4 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 800b53a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b53c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800b540:	2b00      	cmp	r3, #0
 800b542:	d005      	beq.n	800b550 <RCC_SetFlashLatencyFromMSIRange+0x30>
    {
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 800b544:	4b24      	ldr	r3, [pc, #144]	@ (800b5d8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800b546:	681b      	ldr	r3, [r3, #0]
 800b548:	f403 53c0 	and.w	r3, r3, #6144	@ 0x1800
 800b54c:	617b      	str	r3, [r7, #20]
 800b54e:	e016      	b.n	800b57e <RCC_SetFlashLatencyFromMSIRange+0x5e>
    }
    else
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800b550:	4b20      	ldr	r3, [pc, #128]	@ (800b5d4 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 800b552:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b554:	4a1f      	ldr	r2, [pc, #124]	@ (800b5d4 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 800b556:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800b55a:	6253      	str	r3, [r2, #36]	@ 0x24
 800b55c:	4b1d      	ldr	r3, [pc, #116]	@ (800b5d4 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 800b55e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b560:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800b564:	60fb      	str	r3, [r7, #12]
 800b566:	68fb      	ldr	r3, [r7, #12]
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 800b568:	4b1b      	ldr	r3, [pc, #108]	@ (800b5d8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800b56a:	681b      	ldr	r3, [r3, #0]
 800b56c:	f403 53c0 	and.w	r3, r3, #6144	@ 0x1800
 800b570:	617b      	str	r3, [r7, #20]
      __HAL_RCC_PWR_CLK_DISABLE();
 800b572:	4b18      	ldr	r3, [pc, #96]	@ (800b5d4 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 800b574:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b576:	4a17      	ldr	r2, [pc, #92]	@ (800b5d4 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 800b578:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800b57c:	6253      	str	r3, [r2, #36]	@ 0x24
    }

    /* Check if need to set latency 1 only for Range 3 & HCLK = 4MHz */
    if((vos == PWR_REGULATOR_VOLTAGE_SCALE3) && (MSIrange == RCC_MSIRANGE_6))
 800b57e:	697b      	ldr	r3, [r7, #20]
 800b580:	f5b3 5fc0 	cmp.w	r3, #6144	@ 0x1800
 800b584:	d105      	bne.n	800b592 <RCC_SetFlashLatencyFromMSIRange+0x72>
 800b586:	687b      	ldr	r3, [r7, #4]
 800b588:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 800b58c:	d101      	bne.n	800b592 <RCC_SetFlashLatencyFromMSIRange+0x72>
    {
      latency = FLASH_LATENCY_1; /* 1WS */
 800b58e:	2301      	movs	r3, #1
 800b590:	613b      	str	r3, [r7, #16]
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800b592:	693b      	ldr	r3, [r7, #16]
 800b594:	2b01      	cmp	r3, #1
 800b596:	d105      	bne.n	800b5a4 <RCC_SetFlashLatencyFromMSIRange+0x84>
 800b598:	4b10      	ldr	r3, [pc, #64]	@ (800b5dc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800b59a:	681b      	ldr	r3, [r3, #0]
 800b59c:	4a0f      	ldr	r2, [pc, #60]	@ (800b5dc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800b59e:	f043 0304 	orr.w	r3, r3, #4
 800b5a2:	6013      	str	r3, [r2, #0]
 800b5a4:	4b0d      	ldr	r3, [pc, #52]	@ (800b5dc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800b5a6:	681b      	ldr	r3, [r3, #0]
 800b5a8:	f023 0201 	bic.w	r2, r3, #1
 800b5ac:	490b      	ldr	r1, [pc, #44]	@ (800b5dc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800b5ae:	693b      	ldr	r3, [r7, #16]
 800b5b0:	4313      	orrs	r3, r2
 800b5b2:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 800b5b4:	4b09      	ldr	r3, [pc, #36]	@ (800b5dc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800b5b6:	681b      	ldr	r3, [r3, #0]
 800b5b8:	f003 0301 	and.w	r3, r3, #1
 800b5bc:	693a      	ldr	r2, [r7, #16]
 800b5be:	429a      	cmp	r2, r3
 800b5c0:	d001      	beq.n	800b5c6 <RCC_SetFlashLatencyFromMSIRange+0xa6>
  {
    return HAL_ERROR;
 800b5c2:	2301      	movs	r3, #1
 800b5c4:	e000      	b.n	800b5c8 <RCC_SetFlashLatencyFromMSIRange+0xa8>
  }

  return HAL_OK;
 800b5c6:	2300      	movs	r3, #0
}
 800b5c8:	4618      	mov	r0, r3
 800b5ca:	371c      	adds	r7, #28
 800b5cc:	46bd      	mov	sp, r7
 800b5ce:	bc80      	pop	{r7}
 800b5d0:	4770      	bx	lr
 800b5d2:	bf00      	nop
 800b5d4:	40023800 	.word	0x40023800
 800b5d8:	40007000 	.word	0x40007000
 800b5dc:	40023c00 	.word	0x40023c00

0800b5e0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800b5e0:	b580      	push	{r7, lr}
 800b5e2:	b082      	sub	sp, #8
 800b5e4:	af00      	add	r7, sp, #0
 800b5e6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800b5e8:	687b      	ldr	r3, [r7, #4]
 800b5ea:	2b00      	cmp	r3, #0
 800b5ec:	d101      	bne.n	800b5f2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800b5ee:	2301      	movs	r3, #1
 800b5f0:	e042      	b.n	800b678 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800b5f2:	687b      	ldr	r3, [r7, #4]
 800b5f4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800b5f8:	b2db      	uxtb	r3, r3
 800b5fa:	2b00      	cmp	r3, #0
 800b5fc:	d106      	bne.n	800b60c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800b5fe:	687b      	ldr	r3, [r7, #4]
 800b600:	2200      	movs	r2, #0
 800b602:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800b606:	6878      	ldr	r0, [r7, #4]
 800b608:	f7f6 f890 	bl	800172c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800b60c:	687b      	ldr	r3, [r7, #4]
 800b60e:	2224      	movs	r2, #36	@ 0x24
 800b610:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800b614:	687b      	ldr	r3, [r7, #4]
 800b616:	681b      	ldr	r3, [r3, #0]
 800b618:	68da      	ldr	r2, [r3, #12]
 800b61a:	687b      	ldr	r3, [r7, #4]
 800b61c:	681b      	ldr	r3, [r3, #0]
 800b61e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800b622:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800b624:	6878      	ldr	r0, [r7, #4]
 800b626:	f000 f971 	bl	800b90c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800b62a:	687b      	ldr	r3, [r7, #4]
 800b62c:	681b      	ldr	r3, [r3, #0]
 800b62e:	691a      	ldr	r2, [r3, #16]
 800b630:	687b      	ldr	r3, [r7, #4]
 800b632:	681b      	ldr	r3, [r3, #0]
 800b634:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800b638:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800b63a:	687b      	ldr	r3, [r7, #4]
 800b63c:	681b      	ldr	r3, [r3, #0]
 800b63e:	695a      	ldr	r2, [r3, #20]
 800b640:	687b      	ldr	r3, [r7, #4]
 800b642:	681b      	ldr	r3, [r3, #0]
 800b644:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800b648:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800b64a:	687b      	ldr	r3, [r7, #4]
 800b64c:	681b      	ldr	r3, [r3, #0]
 800b64e:	68da      	ldr	r2, [r3, #12]
 800b650:	687b      	ldr	r3, [r7, #4]
 800b652:	681b      	ldr	r3, [r3, #0]
 800b654:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800b658:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b65a:	687b      	ldr	r3, [r7, #4]
 800b65c:	2200      	movs	r2, #0
 800b65e:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 800b660:	687b      	ldr	r3, [r7, #4]
 800b662:	2220      	movs	r2, #32
 800b664:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800b668:	687b      	ldr	r3, [r7, #4]
 800b66a:	2220      	movs	r2, #32
 800b66c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800b670:	687b      	ldr	r3, [r7, #4]
 800b672:	2200      	movs	r2, #0
 800b674:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800b676:	2300      	movs	r3, #0
}
 800b678:	4618      	mov	r0, r3
 800b67a:	3708      	adds	r7, #8
 800b67c:	46bd      	mov	sp, r7
 800b67e:	bd80      	pop	{r7, pc}

0800b680 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800b680:	b580      	push	{r7, lr}
 800b682:	b08a      	sub	sp, #40	@ 0x28
 800b684:	af02      	add	r7, sp, #8
 800b686:	60f8      	str	r0, [r7, #12]
 800b688:	60b9      	str	r1, [r7, #8]
 800b68a:	603b      	str	r3, [r7, #0]
 800b68c:	4613      	mov	r3, r2
 800b68e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800b690:	2300      	movs	r3, #0
 800b692:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800b694:	68fb      	ldr	r3, [r7, #12]
 800b696:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800b69a:	b2db      	uxtb	r3, r3
 800b69c:	2b20      	cmp	r3, #32
 800b69e:	d175      	bne.n	800b78c <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 800b6a0:	68bb      	ldr	r3, [r7, #8]
 800b6a2:	2b00      	cmp	r3, #0
 800b6a4:	d002      	beq.n	800b6ac <HAL_UART_Transmit+0x2c>
 800b6a6:	88fb      	ldrh	r3, [r7, #6]
 800b6a8:	2b00      	cmp	r3, #0
 800b6aa:	d101      	bne.n	800b6b0 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800b6ac:	2301      	movs	r3, #1
 800b6ae:	e06e      	b.n	800b78e <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b6b0:	68fb      	ldr	r3, [r7, #12]
 800b6b2:	2200      	movs	r2, #0
 800b6b4:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800b6b6:	68fb      	ldr	r3, [r7, #12]
 800b6b8:	2221      	movs	r2, #33	@ 0x21
 800b6ba:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800b6be:	f7fd fd73 	bl	80091a8 <HAL_GetTick>
 800b6c2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800b6c4:	68fb      	ldr	r3, [r7, #12]
 800b6c6:	88fa      	ldrh	r2, [r7, #6]
 800b6c8:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 800b6ca:	68fb      	ldr	r3, [r7, #12]
 800b6cc:	88fa      	ldrh	r2, [r7, #6]
 800b6ce:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800b6d0:	68fb      	ldr	r3, [r7, #12]
 800b6d2:	689b      	ldr	r3, [r3, #8]
 800b6d4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800b6d8:	d108      	bne.n	800b6ec <HAL_UART_Transmit+0x6c>
 800b6da:	68fb      	ldr	r3, [r7, #12]
 800b6dc:	691b      	ldr	r3, [r3, #16]
 800b6de:	2b00      	cmp	r3, #0
 800b6e0:	d104      	bne.n	800b6ec <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800b6e2:	2300      	movs	r3, #0
 800b6e4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800b6e6:	68bb      	ldr	r3, [r7, #8]
 800b6e8:	61bb      	str	r3, [r7, #24]
 800b6ea:	e003      	b.n	800b6f4 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800b6ec:	68bb      	ldr	r3, [r7, #8]
 800b6ee:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800b6f0:	2300      	movs	r3, #0
 800b6f2:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800b6f4:	e02e      	b.n	800b754 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800b6f6:	683b      	ldr	r3, [r7, #0]
 800b6f8:	9300      	str	r3, [sp, #0]
 800b6fa:	697b      	ldr	r3, [r7, #20]
 800b6fc:	2200      	movs	r2, #0
 800b6fe:	2180      	movs	r1, #128	@ 0x80
 800b700:	68f8      	ldr	r0, [r7, #12]
 800b702:	f000 f848 	bl	800b796 <UART_WaitOnFlagUntilTimeout>
 800b706:	4603      	mov	r3, r0
 800b708:	2b00      	cmp	r3, #0
 800b70a:	d005      	beq.n	800b718 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 800b70c:	68fb      	ldr	r3, [r7, #12]
 800b70e:	2220      	movs	r2, #32
 800b710:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 800b714:	2303      	movs	r3, #3
 800b716:	e03a      	b.n	800b78e <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 800b718:	69fb      	ldr	r3, [r7, #28]
 800b71a:	2b00      	cmp	r3, #0
 800b71c:	d10b      	bne.n	800b736 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800b71e:	69bb      	ldr	r3, [r7, #24]
 800b720:	881b      	ldrh	r3, [r3, #0]
 800b722:	461a      	mov	r2, r3
 800b724:	68fb      	ldr	r3, [r7, #12]
 800b726:	681b      	ldr	r3, [r3, #0]
 800b728:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800b72c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800b72e:	69bb      	ldr	r3, [r7, #24]
 800b730:	3302      	adds	r3, #2
 800b732:	61bb      	str	r3, [r7, #24]
 800b734:	e007      	b.n	800b746 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800b736:	69fb      	ldr	r3, [r7, #28]
 800b738:	781a      	ldrb	r2, [r3, #0]
 800b73a:	68fb      	ldr	r3, [r7, #12]
 800b73c:	681b      	ldr	r3, [r3, #0]
 800b73e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800b740:	69fb      	ldr	r3, [r7, #28]
 800b742:	3301      	adds	r3, #1
 800b744:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800b746:	68fb      	ldr	r3, [r7, #12]
 800b748:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800b74a:	b29b      	uxth	r3, r3
 800b74c:	3b01      	subs	r3, #1
 800b74e:	b29a      	uxth	r2, r3
 800b750:	68fb      	ldr	r3, [r7, #12]
 800b752:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 800b754:	68fb      	ldr	r3, [r7, #12]
 800b756:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800b758:	b29b      	uxth	r3, r3
 800b75a:	2b00      	cmp	r3, #0
 800b75c:	d1cb      	bne.n	800b6f6 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800b75e:	683b      	ldr	r3, [r7, #0]
 800b760:	9300      	str	r3, [sp, #0]
 800b762:	697b      	ldr	r3, [r7, #20]
 800b764:	2200      	movs	r2, #0
 800b766:	2140      	movs	r1, #64	@ 0x40
 800b768:	68f8      	ldr	r0, [r7, #12]
 800b76a:	f000 f814 	bl	800b796 <UART_WaitOnFlagUntilTimeout>
 800b76e:	4603      	mov	r3, r0
 800b770:	2b00      	cmp	r3, #0
 800b772:	d005      	beq.n	800b780 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 800b774:	68fb      	ldr	r3, [r7, #12]
 800b776:	2220      	movs	r2, #32
 800b778:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 800b77c:	2303      	movs	r3, #3
 800b77e:	e006      	b.n	800b78e <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800b780:	68fb      	ldr	r3, [r7, #12]
 800b782:	2220      	movs	r2, #32
 800b784:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 800b788:	2300      	movs	r3, #0
 800b78a:	e000      	b.n	800b78e <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 800b78c:	2302      	movs	r3, #2
  }
}
 800b78e:	4618      	mov	r0, r3
 800b790:	3720      	adds	r7, #32
 800b792:	46bd      	mov	sp, r7
 800b794:	bd80      	pop	{r7, pc}

0800b796 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800b796:	b580      	push	{r7, lr}
 800b798:	b086      	sub	sp, #24
 800b79a:	af00      	add	r7, sp, #0
 800b79c:	60f8      	str	r0, [r7, #12]
 800b79e:	60b9      	str	r1, [r7, #8]
 800b7a0:	603b      	str	r3, [r7, #0]
 800b7a2:	4613      	mov	r3, r2
 800b7a4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b7a6:	e03b      	b.n	800b820 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800b7a8:	6a3b      	ldr	r3, [r7, #32]
 800b7aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b7ae:	d037      	beq.n	800b820 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b7b0:	f7fd fcfa 	bl	80091a8 <HAL_GetTick>
 800b7b4:	4602      	mov	r2, r0
 800b7b6:	683b      	ldr	r3, [r7, #0]
 800b7b8:	1ad3      	subs	r3, r2, r3
 800b7ba:	6a3a      	ldr	r2, [r7, #32]
 800b7bc:	429a      	cmp	r2, r3
 800b7be:	d302      	bcc.n	800b7c6 <UART_WaitOnFlagUntilTimeout+0x30>
 800b7c0:	6a3b      	ldr	r3, [r7, #32]
 800b7c2:	2b00      	cmp	r3, #0
 800b7c4:	d101      	bne.n	800b7ca <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800b7c6:	2303      	movs	r3, #3
 800b7c8:	e03a      	b.n	800b840 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800b7ca:	68fb      	ldr	r3, [r7, #12]
 800b7cc:	681b      	ldr	r3, [r3, #0]
 800b7ce:	68db      	ldr	r3, [r3, #12]
 800b7d0:	f003 0304 	and.w	r3, r3, #4
 800b7d4:	2b00      	cmp	r3, #0
 800b7d6:	d023      	beq.n	800b820 <UART_WaitOnFlagUntilTimeout+0x8a>
 800b7d8:	68bb      	ldr	r3, [r7, #8]
 800b7da:	2b80      	cmp	r3, #128	@ 0x80
 800b7dc:	d020      	beq.n	800b820 <UART_WaitOnFlagUntilTimeout+0x8a>
 800b7de:	68bb      	ldr	r3, [r7, #8]
 800b7e0:	2b40      	cmp	r3, #64	@ 0x40
 800b7e2:	d01d      	beq.n	800b820 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800b7e4:	68fb      	ldr	r3, [r7, #12]
 800b7e6:	681b      	ldr	r3, [r3, #0]
 800b7e8:	681b      	ldr	r3, [r3, #0]
 800b7ea:	f003 0308 	and.w	r3, r3, #8
 800b7ee:	2b08      	cmp	r3, #8
 800b7f0:	d116      	bne.n	800b820 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 800b7f2:	2300      	movs	r3, #0
 800b7f4:	617b      	str	r3, [r7, #20]
 800b7f6:	68fb      	ldr	r3, [r7, #12]
 800b7f8:	681b      	ldr	r3, [r3, #0]
 800b7fa:	681b      	ldr	r3, [r3, #0]
 800b7fc:	617b      	str	r3, [r7, #20]
 800b7fe:	68fb      	ldr	r3, [r7, #12]
 800b800:	681b      	ldr	r3, [r3, #0]
 800b802:	685b      	ldr	r3, [r3, #4]
 800b804:	617b      	str	r3, [r7, #20]
 800b806:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800b808:	68f8      	ldr	r0, [r7, #12]
 800b80a:	f000 f81d 	bl	800b848 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800b80e:	68fb      	ldr	r3, [r7, #12]
 800b810:	2208      	movs	r2, #8
 800b812:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800b814:	68fb      	ldr	r3, [r7, #12]
 800b816:	2200      	movs	r2, #0
 800b818:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 800b81c:	2301      	movs	r3, #1
 800b81e:	e00f      	b.n	800b840 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b820:	68fb      	ldr	r3, [r7, #12]
 800b822:	681b      	ldr	r3, [r3, #0]
 800b824:	681a      	ldr	r2, [r3, #0]
 800b826:	68bb      	ldr	r3, [r7, #8]
 800b828:	4013      	ands	r3, r2
 800b82a:	68ba      	ldr	r2, [r7, #8]
 800b82c:	429a      	cmp	r2, r3
 800b82e:	bf0c      	ite	eq
 800b830:	2301      	moveq	r3, #1
 800b832:	2300      	movne	r3, #0
 800b834:	b2db      	uxtb	r3, r3
 800b836:	461a      	mov	r2, r3
 800b838:	79fb      	ldrb	r3, [r7, #7]
 800b83a:	429a      	cmp	r2, r3
 800b83c:	d0b4      	beq.n	800b7a8 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800b83e:	2300      	movs	r3, #0
}
 800b840:	4618      	mov	r0, r3
 800b842:	3718      	adds	r7, #24
 800b844:	46bd      	mov	sp, r7
 800b846:	bd80      	pop	{r7, pc}

0800b848 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800b848:	b480      	push	{r7}
 800b84a:	b095      	sub	sp, #84	@ 0x54
 800b84c:	af00      	add	r7, sp, #0
 800b84e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800b850:	687b      	ldr	r3, [r7, #4]
 800b852:	681b      	ldr	r3, [r3, #0]
 800b854:	330c      	adds	r3, #12
 800b856:	637b      	str	r3, [r7, #52]	@ 0x34
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b858:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b85a:	e853 3f00 	ldrex	r3, [r3]
 800b85e:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800b860:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b862:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800b866:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800b868:	687b      	ldr	r3, [r7, #4]
 800b86a:	681b      	ldr	r3, [r3, #0]
 800b86c:	330c      	adds	r3, #12
 800b86e:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800b870:	643a      	str	r2, [r7, #64]	@ 0x40
 800b872:	63fb      	str	r3, [r7, #60]	@ 0x3c
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b874:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800b876:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800b878:	e841 2300 	strex	r3, r2, [r1]
 800b87c:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800b87e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b880:	2b00      	cmp	r3, #0
 800b882:	d1e5      	bne.n	800b850 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b884:	687b      	ldr	r3, [r7, #4]
 800b886:	681b      	ldr	r3, [r3, #0]
 800b888:	3314      	adds	r3, #20
 800b88a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b88c:	6a3b      	ldr	r3, [r7, #32]
 800b88e:	e853 3f00 	ldrex	r3, [r3]
 800b892:	61fb      	str	r3, [r7, #28]
   return(result);
 800b894:	69fb      	ldr	r3, [r7, #28]
 800b896:	f023 0301 	bic.w	r3, r3, #1
 800b89a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800b89c:	687b      	ldr	r3, [r7, #4]
 800b89e:	681b      	ldr	r3, [r3, #0]
 800b8a0:	3314      	adds	r3, #20
 800b8a2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800b8a4:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800b8a6:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b8a8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800b8aa:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800b8ac:	e841 2300 	strex	r3, r2, [r1]
 800b8b0:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800b8b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b8b4:	2b00      	cmp	r3, #0
 800b8b6:	d1e5      	bne.n	800b884 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b8b8:	687b      	ldr	r3, [r7, #4]
 800b8ba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b8bc:	2b01      	cmp	r3, #1
 800b8be:	d119      	bne.n	800b8f4 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b8c0:	687b      	ldr	r3, [r7, #4]
 800b8c2:	681b      	ldr	r3, [r3, #0]
 800b8c4:	330c      	adds	r3, #12
 800b8c6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b8c8:	68fb      	ldr	r3, [r7, #12]
 800b8ca:	e853 3f00 	ldrex	r3, [r3]
 800b8ce:	60bb      	str	r3, [r7, #8]
   return(result);
 800b8d0:	68bb      	ldr	r3, [r7, #8]
 800b8d2:	f023 0310 	bic.w	r3, r3, #16
 800b8d6:	647b      	str	r3, [r7, #68]	@ 0x44
 800b8d8:	687b      	ldr	r3, [r7, #4]
 800b8da:	681b      	ldr	r3, [r3, #0]
 800b8dc:	330c      	adds	r3, #12
 800b8de:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800b8e0:	61ba      	str	r2, [r7, #24]
 800b8e2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b8e4:	6979      	ldr	r1, [r7, #20]
 800b8e6:	69ba      	ldr	r2, [r7, #24]
 800b8e8:	e841 2300 	strex	r3, r2, [r1]
 800b8ec:	613b      	str	r3, [r7, #16]
   return(result);
 800b8ee:	693b      	ldr	r3, [r7, #16]
 800b8f0:	2b00      	cmp	r3, #0
 800b8f2:	d1e5      	bne.n	800b8c0 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800b8f4:	687b      	ldr	r3, [r7, #4]
 800b8f6:	2220      	movs	r2, #32
 800b8f8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b8fc:	687b      	ldr	r3, [r7, #4]
 800b8fe:	2200      	movs	r2, #0
 800b900:	631a      	str	r2, [r3, #48]	@ 0x30
}
 800b902:	bf00      	nop
 800b904:	3754      	adds	r7, #84	@ 0x54
 800b906:	46bd      	mov	sp, r7
 800b908:	bc80      	pop	{r7}
 800b90a:	4770      	bx	lr

0800b90c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800b90c:	b580      	push	{r7, lr}
 800b90e:	b084      	sub	sp, #16
 800b910:	af00      	add	r7, sp, #0
 800b912:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800b914:	687b      	ldr	r3, [r7, #4]
 800b916:	681b      	ldr	r3, [r3, #0]
 800b918:	691b      	ldr	r3, [r3, #16]
 800b91a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800b91e:	687b      	ldr	r3, [r7, #4]
 800b920:	68da      	ldr	r2, [r3, #12]
 800b922:	687b      	ldr	r3, [r7, #4]
 800b924:	681b      	ldr	r3, [r3, #0]
 800b926:	430a      	orrs	r2, r1
 800b928:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800b92a:	687b      	ldr	r3, [r7, #4]
 800b92c:	689a      	ldr	r2, [r3, #8]
 800b92e:	687b      	ldr	r3, [r7, #4]
 800b930:	691b      	ldr	r3, [r3, #16]
 800b932:	431a      	orrs	r2, r3
 800b934:	687b      	ldr	r3, [r7, #4]
 800b936:	695b      	ldr	r3, [r3, #20]
 800b938:	431a      	orrs	r2, r3
 800b93a:	687b      	ldr	r3, [r7, #4]
 800b93c:	69db      	ldr	r3, [r3, #28]
 800b93e:	4313      	orrs	r3, r2
 800b940:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 800b942:	687b      	ldr	r3, [r7, #4]
 800b944:	681b      	ldr	r3, [r3, #0]
 800b946:	68db      	ldr	r3, [r3, #12]
 800b948:	f423 4316 	bic.w	r3, r3, #38400	@ 0x9600
 800b94c:	f023 030c 	bic.w	r3, r3, #12
 800b950:	687a      	ldr	r2, [r7, #4]
 800b952:	6812      	ldr	r2, [r2, #0]
 800b954:	68b9      	ldr	r1, [r7, #8]
 800b956:	430b      	orrs	r3, r1
 800b958:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800b95a:	687b      	ldr	r3, [r7, #4]
 800b95c:	681b      	ldr	r3, [r3, #0]
 800b95e:	695b      	ldr	r3, [r3, #20]
 800b960:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800b964:	687b      	ldr	r3, [r7, #4]
 800b966:	699a      	ldr	r2, [r3, #24]
 800b968:	687b      	ldr	r3, [r7, #4]
 800b96a:	681b      	ldr	r3, [r3, #0]
 800b96c:	430a      	orrs	r2, r1
 800b96e:	615a      	str	r2, [r3, #20]


  if((huart->Instance == USART1))
 800b970:	687b      	ldr	r3, [r7, #4]
 800b972:	681b      	ldr	r3, [r3, #0]
 800b974:	4a55      	ldr	r2, [pc, #340]	@ (800bacc <UART_SetConfig+0x1c0>)
 800b976:	4293      	cmp	r3, r2
 800b978:	d103      	bne.n	800b982 <UART_SetConfig+0x76>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 800b97a:	f7ff fdbd 	bl	800b4f8 <HAL_RCC_GetPCLK2Freq>
 800b97e:	60f8      	str	r0, [r7, #12]
 800b980:	e002      	b.n	800b988 <UART_SetConfig+0x7c>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 800b982:	f7ff fda5 	bl	800b4d0 <HAL_RCC_GetPCLK1Freq>
 800b986:	60f8      	str	r0, [r7, #12]
  }

  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800b988:	687b      	ldr	r3, [r7, #4]
 800b98a:	69db      	ldr	r3, [r3, #28]
 800b98c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800b990:	d14c      	bne.n	800ba2c <UART_SetConfig+0x120>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800b992:	68fa      	ldr	r2, [r7, #12]
 800b994:	4613      	mov	r3, r2
 800b996:	009b      	lsls	r3, r3, #2
 800b998:	4413      	add	r3, r2
 800b99a:	009a      	lsls	r2, r3, #2
 800b99c:	441a      	add	r2, r3
 800b99e:	687b      	ldr	r3, [r7, #4]
 800b9a0:	685b      	ldr	r3, [r3, #4]
 800b9a2:	005b      	lsls	r3, r3, #1
 800b9a4:	fbb2 f3f3 	udiv	r3, r2, r3
 800b9a8:	4a49      	ldr	r2, [pc, #292]	@ (800bad0 <UART_SetConfig+0x1c4>)
 800b9aa:	fba2 2303 	umull	r2, r3, r2, r3
 800b9ae:	095b      	lsrs	r3, r3, #5
 800b9b0:	0119      	lsls	r1, r3, #4
 800b9b2:	68fa      	ldr	r2, [r7, #12]
 800b9b4:	4613      	mov	r3, r2
 800b9b6:	009b      	lsls	r3, r3, #2
 800b9b8:	4413      	add	r3, r2
 800b9ba:	009a      	lsls	r2, r3, #2
 800b9bc:	441a      	add	r2, r3
 800b9be:	687b      	ldr	r3, [r7, #4]
 800b9c0:	685b      	ldr	r3, [r3, #4]
 800b9c2:	005b      	lsls	r3, r3, #1
 800b9c4:	fbb2 f2f3 	udiv	r2, r2, r3
 800b9c8:	4b41      	ldr	r3, [pc, #260]	@ (800bad0 <UART_SetConfig+0x1c4>)
 800b9ca:	fba3 0302 	umull	r0, r3, r3, r2
 800b9ce:	095b      	lsrs	r3, r3, #5
 800b9d0:	2064      	movs	r0, #100	@ 0x64
 800b9d2:	fb00 f303 	mul.w	r3, r0, r3
 800b9d6:	1ad3      	subs	r3, r2, r3
 800b9d8:	00db      	lsls	r3, r3, #3
 800b9da:	3332      	adds	r3, #50	@ 0x32
 800b9dc:	4a3c      	ldr	r2, [pc, #240]	@ (800bad0 <UART_SetConfig+0x1c4>)
 800b9de:	fba2 2303 	umull	r2, r3, r2, r3
 800b9e2:	095b      	lsrs	r3, r3, #5
 800b9e4:	005b      	lsls	r3, r3, #1
 800b9e6:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 800b9ea:	4419      	add	r1, r3
 800b9ec:	68fa      	ldr	r2, [r7, #12]
 800b9ee:	4613      	mov	r3, r2
 800b9f0:	009b      	lsls	r3, r3, #2
 800b9f2:	4413      	add	r3, r2
 800b9f4:	009a      	lsls	r2, r3, #2
 800b9f6:	441a      	add	r2, r3
 800b9f8:	687b      	ldr	r3, [r7, #4]
 800b9fa:	685b      	ldr	r3, [r3, #4]
 800b9fc:	005b      	lsls	r3, r3, #1
 800b9fe:	fbb2 f2f3 	udiv	r2, r2, r3
 800ba02:	4b33      	ldr	r3, [pc, #204]	@ (800bad0 <UART_SetConfig+0x1c4>)
 800ba04:	fba3 0302 	umull	r0, r3, r3, r2
 800ba08:	095b      	lsrs	r3, r3, #5
 800ba0a:	2064      	movs	r0, #100	@ 0x64
 800ba0c:	fb00 f303 	mul.w	r3, r0, r3
 800ba10:	1ad3      	subs	r3, r2, r3
 800ba12:	00db      	lsls	r3, r3, #3
 800ba14:	3332      	adds	r3, #50	@ 0x32
 800ba16:	4a2e      	ldr	r2, [pc, #184]	@ (800bad0 <UART_SetConfig+0x1c4>)
 800ba18:	fba2 2303 	umull	r2, r3, r2, r3
 800ba1c:	095b      	lsrs	r3, r3, #5
 800ba1e:	f003 0207 	and.w	r2, r3, #7
 800ba22:	687b      	ldr	r3, [r7, #4]
 800ba24:	681b      	ldr	r3, [r3, #0]
 800ba26:	440a      	add	r2, r1
 800ba28:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800ba2a:	e04a      	b.n	800bac2 <UART_SetConfig+0x1b6>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800ba2c:	68fa      	ldr	r2, [r7, #12]
 800ba2e:	4613      	mov	r3, r2
 800ba30:	009b      	lsls	r3, r3, #2
 800ba32:	4413      	add	r3, r2
 800ba34:	009a      	lsls	r2, r3, #2
 800ba36:	441a      	add	r2, r3
 800ba38:	687b      	ldr	r3, [r7, #4]
 800ba3a:	685b      	ldr	r3, [r3, #4]
 800ba3c:	009b      	lsls	r3, r3, #2
 800ba3e:	fbb2 f3f3 	udiv	r3, r2, r3
 800ba42:	4a23      	ldr	r2, [pc, #140]	@ (800bad0 <UART_SetConfig+0x1c4>)
 800ba44:	fba2 2303 	umull	r2, r3, r2, r3
 800ba48:	095b      	lsrs	r3, r3, #5
 800ba4a:	0119      	lsls	r1, r3, #4
 800ba4c:	68fa      	ldr	r2, [r7, #12]
 800ba4e:	4613      	mov	r3, r2
 800ba50:	009b      	lsls	r3, r3, #2
 800ba52:	4413      	add	r3, r2
 800ba54:	009a      	lsls	r2, r3, #2
 800ba56:	441a      	add	r2, r3
 800ba58:	687b      	ldr	r3, [r7, #4]
 800ba5a:	685b      	ldr	r3, [r3, #4]
 800ba5c:	009b      	lsls	r3, r3, #2
 800ba5e:	fbb2 f2f3 	udiv	r2, r2, r3
 800ba62:	4b1b      	ldr	r3, [pc, #108]	@ (800bad0 <UART_SetConfig+0x1c4>)
 800ba64:	fba3 0302 	umull	r0, r3, r3, r2
 800ba68:	095b      	lsrs	r3, r3, #5
 800ba6a:	2064      	movs	r0, #100	@ 0x64
 800ba6c:	fb00 f303 	mul.w	r3, r0, r3
 800ba70:	1ad3      	subs	r3, r2, r3
 800ba72:	011b      	lsls	r3, r3, #4
 800ba74:	3332      	adds	r3, #50	@ 0x32
 800ba76:	4a16      	ldr	r2, [pc, #88]	@ (800bad0 <UART_SetConfig+0x1c4>)
 800ba78:	fba2 2303 	umull	r2, r3, r2, r3
 800ba7c:	095b      	lsrs	r3, r3, #5
 800ba7e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800ba82:	4419      	add	r1, r3
 800ba84:	68fa      	ldr	r2, [r7, #12]
 800ba86:	4613      	mov	r3, r2
 800ba88:	009b      	lsls	r3, r3, #2
 800ba8a:	4413      	add	r3, r2
 800ba8c:	009a      	lsls	r2, r3, #2
 800ba8e:	441a      	add	r2, r3
 800ba90:	687b      	ldr	r3, [r7, #4]
 800ba92:	685b      	ldr	r3, [r3, #4]
 800ba94:	009b      	lsls	r3, r3, #2
 800ba96:	fbb2 f2f3 	udiv	r2, r2, r3
 800ba9a:	4b0d      	ldr	r3, [pc, #52]	@ (800bad0 <UART_SetConfig+0x1c4>)
 800ba9c:	fba3 0302 	umull	r0, r3, r3, r2
 800baa0:	095b      	lsrs	r3, r3, #5
 800baa2:	2064      	movs	r0, #100	@ 0x64
 800baa4:	fb00 f303 	mul.w	r3, r0, r3
 800baa8:	1ad3      	subs	r3, r2, r3
 800baaa:	011b      	lsls	r3, r3, #4
 800baac:	3332      	adds	r3, #50	@ 0x32
 800baae:	4a08      	ldr	r2, [pc, #32]	@ (800bad0 <UART_SetConfig+0x1c4>)
 800bab0:	fba2 2303 	umull	r2, r3, r2, r3
 800bab4:	095b      	lsrs	r3, r3, #5
 800bab6:	f003 020f 	and.w	r2, r3, #15
 800baba:	687b      	ldr	r3, [r7, #4]
 800babc:	681b      	ldr	r3, [r3, #0]
 800babe:	440a      	add	r2, r1
 800bac0:	609a      	str	r2, [r3, #8]
}
 800bac2:	bf00      	nop
 800bac4:	3710      	adds	r7, #16
 800bac6:	46bd      	mov	sp, r7
 800bac8:	bd80      	pop	{r7, pc}
 800baca:	bf00      	nop
 800bacc:	40013800 	.word	0x40013800
 800bad0:	51eb851f 	.word	0x51eb851f

0800bad4 <__cvt>:
 800bad4:	2b00      	cmp	r3, #0
 800bad6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bada:	461d      	mov	r5, r3
 800badc:	bfbb      	ittet	lt
 800bade:	f103 4300 	addlt.w	r3, r3, #2147483648	@ 0x80000000
 800bae2:	461d      	movlt	r5, r3
 800bae4:	2300      	movge	r3, #0
 800bae6:	232d      	movlt	r3, #45	@ 0x2d
 800bae8:	b088      	sub	sp, #32
 800baea:	4614      	mov	r4, r2
 800baec:	bfb8      	it	lt
 800baee:	4614      	movlt	r4, r2
 800baf0:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800baf2:	9e10      	ldr	r6, [sp, #64]	@ 0x40
 800baf4:	7013      	strb	r3, [r2, #0]
 800baf6:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800baf8:	f8dd a04c 	ldr.w	sl, [sp, #76]	@ 0x4c
 800bafc:	f023 0820 	bic.w	r8, r3, #32
 800bb00:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800bb04:	d005      	beq.n	800bb12 <__cvt+0x3e>
 800bb06:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800bb0a:	d100      	bne.n	800bb0e <__cvt+0x3a>
 800bb0c:	3601      	adds	r6, #1
 800bb0e:	2302      	movs	r3, #2
 800bb10:	e000      	b.n	800bb14 <__cvt+0x40>
 800bb12:	2303      	movs	r3, #3
 800bb14:	aa07      	add	r2, sp, #28
 800bb16:	9204      	str	r2, [sp, #16]
 800bb18:	aa06      	add	r2, sp, #24
 800bb1a:	e9cd a202 	strd	sl, r2, [sp, #8]
 800bb1e:	e9cd 3600 	strd	r3, r6, [sp]
 800bb22:	4622      	mov	r2, r4
 800bb24:	462b      	mov	r3, r5
 800bb26:	f000 ff53 	bl	800c9d0 <_dtoa_r>
 800bb2a:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800bb2e:	4607      	mov	r7, r0
 800bb30:	d119      	bne.n	800bb66 <__cvt+0x92>
 800bb32:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800bb34:	07db      	lsls	r3, r3, #31
 800bb36:	d50e      	bpl.n	800bb56 <__cvt+0x82>
 800bb38:	eb00 0906 	add.w	r9, r0, r6
 800bb3c:	2200      	movs	r2, #0
 800bb3e:	2300      	movs	r3, #0
 800bb40:	4620      	mov	r0, r4
 800bb42:	4629      	mov	r1, r5
 800bb44:	f7f4 ff48 	bl	80009d8 <__aeabi_dcmpeq>
 800bb48:	b108      	cbz	r0, 800bb4e <__cvt+0x7a>
 800bb4a:	f8cd 901c 	str.w	r9, [sp, #28]
 800bb4e:	2230      	movs	r2, #48	@ 0x30
 800bb50:	9b07      	ldr	r3, [sp, #28]
 800bb52:	454b      	cmp	r3, r9
 800bb54:	d31e      	bcc.n	800bb94 <__cvt+0xc0>
 800bb56:	4638      	mov	r0, r7
 800bb58:	9b07      	ldr	r3, [sp, #28]
 800bb5a:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 800bb5c:	1bdb      	subs	r3, r3, r7
 800bb5e:	6013      	str	r3, [r2, #0]
 800bb60:	b008      	add	sp, #32
 800bb62:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bb66:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800bb6a:	eb00 0906 	add.w	r9, r0, r6
 800bb6e:	d1e5      	bne.n	800bb3c <__cvt+0x68>
 800bb70:	7803      	ldrb	r3, [r0, #0]
 800bb72:	2b30      	cmp	r3, #48	@ 0x30
 800bb74:	d10a      	bne.n	800bb8c <__cvt+0xb8>
 800bb76:	2200      	movs	r2, #0
 800bb78:	2300      	movs	r3, #0
 800bb7a:	4620      	mov	r0, r4
 800bb7c:	4629      	mov	r1, r5
 800bb7e:	f7f4 ff2b 	bl	80009d8 <__aeabi_dcmpeq>
 800bb82:	b918      	cbnz	r0, 800bb8c <__cvt+0xb8>
 800bb84:	f1c6 0601 	rsb	r6, r6, #1
 800bb88:	f8ca 6000 	str.w	r6, [sl]
 800bb8c:	f8da 3000 	ldr.w	r3, [sl]
 800bb90:	4499      	add	r9, r3
 800bb92:	e7d3      	b.n	800bb3c <__cvt+0x68>
 800bb94:	1c59      	adds	r1, r3, #1
 800bb96:	9107      	str	r1, [sp, #28]
 800bb98:	701a      	strb	r2, [r3, #0]
 800bb9a:	e7d9      	b.n	800bb50 <__cvt+0x7c>

0800bb9c <__exponent>:
 800bb9c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800bb9e:	2900      	cmp	r1, #0
 800bba0:	bfb6      	itet	lt
 800bba2:	232d      	movlt	r3, #45	@ 0x2d
 800bba4:	232b      	movge	r3, #43	@ 0x2b
 800bba6:	4249      	neglt	r1, r1
 800bba8:	2909      	cmp	r1, #9
 800bbaa:	7002      	strb	r2, [r0, #0]
 800bbac:	7043      	strb	r3, [r0, #1]
 800bbae:	dd29      	ble.n	800bc04 <__exponent+0x68>
 800bbb0:	f10d 0307 	add.w	r3, sp, #7
 800bbb4:	461d      	mov	r5, r3
 800bbb6:	270a      	movs	r7, #10
 800bbb8:	fbb1 f6f7 	udiv	r6, r1, r7
 800bbbc:	461a      	mov	r2, r3
 800bbbe:	fb07 1416 	mls	r4, r7, r6, r1
 800bbc2:	3430      	adds	r4, #48	@ 0x30
 800bbc4:	f802 4c01 	strb.w	r4, [r2, #-1]
 800bbc8:	460c      	mov	r4, r1
 800bbca:	2c63      	cmp	r4, #99	@ 0x63
 800bbcc:	4631      	mov	r1, r6
 800bbce:	f103 33ff 	add.w	r3, r3, #4294967295
 800bbd2:	dcf1      	bgt.n	800bbb8 <__exponent+0x1c>
 800bbd4:	3130      	adds	r1, #48	@ 0x30
 800bbd6:	1e94      	subs	r4, r2, #2
 800bbd8:	f803 1c01 	strb.w	r1, [r3, #-1]
 800bbdc:	4623      	mov	r3, r4
 800bbde:	1c41      	adds	r1, r0, #1
 800bbe0:	42ab      	cmp	r3, r5
 800bbe2:	d30a      	bcc.n	800bbfa <__exponent+0x5e>
 800bbe4:	f10d 0309 	add.w	r3, sp, #9
 800bbe8:	1a9b      	subs	r3, r3, r2
 800bbea:	42ac      	cmp	r4, r5
 800bbec:	bf88      	it	hi
 800bbee:	2300      	movhi	r3, #0
 800bbf0:	3302      	adds	r3, #2
 800bbf2:	4403      	add	r3, r0
 800bbf4:	1a18      	subs	r0, r3, r0
 800bbf6:	b003      	add	sp, #12
 800bbf8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800bbfa:	f813 6b01 	ldrb.w	r6, [r3], #1
 800bbfe:	f801 6f01 	strb.w	r6, [r1, #1]!
 800bc02:	e7ed      	b.n	800bbe0 <__exponent+0x44>
 800bc04:	2330      	movs	r3, #48	@ 0x30
 800bc06:	3130      	adds	r1, #48	@ 0x30
 800bc08:	7083      	strb	r3, [r0, #2]
 800bc0a:	70c1      	strb	r1, [r0, #3]
 800bc0c:	1d03      	adds	r3, r0, #4
 800bc0e:	e7f1      	b.n	800bbf4 <__exponent+0x58>

0800bc10 <_printf_float>:
 800bc10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bc14:	b091      	sub	sp, #68	@ 0x44
 800bc16:	460c      	mov	r4, r1
 800bc18:	f8dd 8068 	ldr.w	r8, [sp, #104]	@ 0x68
 800bc1c:	4616      	mov	r6, r2
 800bc1e:	461f      	mov	r7, r3
 800bc20:	4605      	mov	r5, r0
 800bc22:	f000 fdc5 	bl	800c7b0 <_localeconv_r>
 800bc26:	6803      	ldr	r3, [r0, #0]
 800bc28:	4618      	mov	r0, r3
 800bc2a:	9308      	str	r3, [sp, #32]
 800bc2c:	f7f4 faa8 	bl	8000180 <strlen>
 800bc30:	2300      	movs	r3, #0
 800bc32:	930e      	str	r3, [sp, #56]	@ 0x38
 800bc34:	f8d8 3000 	ldr.w	r3, [r8]
 800bc38:	9009      	str	r0, [sp, #36]	@ 0x24
 800bc3a:	3307      	adds	r3, #7
 800bc3c:	f023 0307 	bic.w	r3, r3, #7
 800bc40:	f103 0208 	add.w	r2, r3, #8
 800bc44:	f894 a018 	ldrb.w	sl, [r4, #24]
 800bc48:	f8d4 b000 	ldr.w	fp, [r4]
 800bc4c:	f8c8 2000 	str.w	r2, [r8]
 800bc50:	e9d3 8900 	ldrd	r8, r9, [r3]
 800bc54:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 800bc58:	930b      	str	r3, [sp, #44]	@ 0x2c
 800bc5a:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 800bc5e:	f04f 32ff 	mov.w	r2, #4294967295
 800bc62:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800bc66:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800bc6a:	4b9c      	ldr	r3, [pc, #624]	@ (800bedc <_printf_float+0x2cc>)
 800bc6c:	f7f4 fee6 	bl	8000a3c <__aeabi_dcmpun>
 800bc70:	bb70      	cbnz	r0, 800bcd0 <_printf_float+0xc0>
 800bc72:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800bc76:	f04f 32ff 	mov.w	r2, #4294967295
 800bc7a:	4b98      	ldr	r3, [pc, #608]	@ (800bedc <_printf_float+0x2cc>)
 800bc7c:	f7f4 fec0 	bl	8000a00 <__aeabi_dcmple>
 800bc80:	bb30      	cbnz	r0, 800bcd0 <_printf_float+0xc0>
 800bc82:	2200      	movs	r2, #0
 800bc84:	2300      	movs	r3, #0
 800bc86:	4640      	mov	r0, r8
 800bc88:	4649      	mov	r1, r9
 800bc8a:	f7f4 feaf 	bl	80009ec <__aeabi_dcmplt>
 800bc8e:	b110      	cbz	r0, 800bc96 <_printf_float+0x86>
 800bc90:	232d      	movs	r3, #45	@ 0x2d
 800bc92:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800bc96:	4a92      	ldr	r2, [pc, #584]	@ (800bee0 <_printf_float+0x2d0>)
 800bc98:	4b92      	ldr	r3, [pc, #584]	@ (800bee4 <_printf_float+0x2d4>)
 800bc9a:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800bc9e:	bf94      	ite	ls
 800bca0:	4690      	movls	r8, r2
 800bca2:	4698      	movhi	r8, r3
 800bca4:	2303      	movs	r3, #3
 800bca6:	f04f 0900 	mov.w	r9, #0
 800bcaa:	6123      	str	r3, [r4, #16]
 800bcac:	f02b 0304 	bic.w	r3, fp, #4
 800bcb0:	6023      	str	r3, [r4, #0]
 800bcb2:	4633      	mov	r3, r6
 800bcb4:	4621      	mov	r1, r4
 800bcb6:	4628      	mov	r0, r5
 800bcb8:	9700      	str	r7, [sp, #0]
 800bcba:	aa0f      	add	r2, sp, #60	@ 0x3c
 800bcbc:	f000 f9d4 	bl	800c068 <_printf_common>
 800bcc0:	3001      	adds	r0, #1
 800bcc2:	f040 8090 	bne.w	800bde6 <_printf_float+0x1d6>
 800bcc6:	f04f 30ff 	mov.w	r0, #4294967295
 800bcca:	b011      	add	sp, #68	@ 0x44
 800bccc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bcd0:	4642      	mov	r2, r8
 800bcd2:	464b      	mov	r3, r9
 800bcd4:	4640      	mov	r0, r8
 800bcd6:	4649      	mov	r1, r9
 800bcd8:	f7f4 feb0 	bl	8000a3c <__aeabi_dcmpun>
 800bcdc:	b148      	cbz	r0, 800bcf2 <_printf_float+0xe2>
 800bcde:	464b      	mov	r3, r9
 800bce0:	2b00      	cmp	r3, #0
 800bce2:	bfb8      	it	lt
 800bce4:	232d      	movlt	r3, #45	@ 0x2d
 800bce6:	4a80      	ldr	r2, [pc, #512]	@ (800bee8 <_printf_float+0x2d8>)
 800bce8:	bfb8      	it	lt
 800bcea:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800bcee:	4b7f      	ldr	r3, [pc, #508]	@ (800beec <_printf_float+0x2dc>)
 800bcf0:	e7d3      	b.n	800bc9a <_printf_float+0x8a>
 800bcf2:	6863      	ldr	r3, [r4, #4]
 800bcf4:	f00a 01df 	and.w	r1, sl, #223	@ 0xdf
 800bcf8:	1c5a      	adds	r2, r3, #1
 800bcfa:	d13f      	bne.n	800bd7c <_printf_float+0x16c>
 800bcfc:	2306      	movs	r3, #6
 800bcfe:	6063      	str	r3, [r4, #4]
 800bd00:	2200      	movs	r2, #0
 800bd02:	f44b 6380 	orr.w	r3, fp, #1024	@ 0x400
 800bd06:	6023      	str	r3, [r4, #0]
 800bd08:	9206      	str	r2, [sp, #24]
 800bd0a:	aa0e      	add	r2, sp, #56	@ 0x38
 800bd0c:	e9cd a204 	strd	sl, r2, [sp, #16]
 800bd10:	aa0d      	add	r2, sp, #52	@ 0x34
 800bd12:	9203      	str	r2, [sp, #12]
 800bd14:	f10d 0233 	add.w	r2, sp, #51	@ 0x33
 800bd18:	e9cd 3201 	strd	r3, r2, [sp, #4]
 800bd1c:	6863      	ldr	r3, [r4, #4]
 800bd1e:	4642      	mov	r2, r8
 800bd20:	9300      	str	r3, [sp, #0]
 800bd22:	4628      	mov	r0, r5
 800bd24:	464b      	mov	r3, r9
 800bd26:	910a      	str	r1, [sp, #40]	@ 0x28
 800bd28:	f7ff fed4 	bl	800bad4 <__cvt>
 800bd2c:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800bd2e:	4680      	mov	r8, r0
 800bd30:	2947      	cmp	r1, #71	@ 0x47
 800bd32:	990d      	ldr	r1, [sp, #52]	@ 0x34
 800bd34:	d128      	bne.n	800bd88 <_printf_float+0x178>
 800bd36:	1cc8      	adds	r0, r1, #3
 800bd38:	db02      	blt.n	800bd40 <_printf_float+0x130>
 800bd3a:	6863      	ldr	r3, [r4, #4]
 800bd3c:	4299      	cmp	r1, r3
 800bd3e:	dd40      	ble.n	800bdc2 <_printf_float+0x1b2>
 800bd40:	f1aa 0a02 	sub.w	sl, sl, #2
 800bd44:	fa5f fa8a 	uxtb.w	sl, sl
 800bd48:	4652      	mov	r2, sl
 800bd4a:	3901      	subs	r1, #1
 800bd4c:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800bd50:	910d      	str	r1, [sp, #52]	@ 0x34
 800bd52:	f7ff ff23 	bl	800bb9c <__exponent>
 800bd56:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800bd58:	4681      	mov	r9, r0
 800bd5a:	1813      	adds	r3, r2, r0
 800bd5c:	2a01      	cmp	r2, #1
 800bd5e:	6123      	str	r3, [r4, #16]
 800bd60:	dc02      	bgt.n	800bd68 <_printf_float+0x158>
 800bd62:	6822      	ldr	r2, [r4, #0]
 800bd64:	07d2      	lsls	r2, r2, #31
 800bd66:	d501      	bpl.n	800bd6c <_printf_float+0x15c>
 800bd68:	3301      	adds	r3, #1
 800bd6a:	6123      	str	r3, [r4, #16]
 800bd6c:	f89d 3033 	ldrb.w	r3, [sp, #51]	@ 0x33
 800bd70:	2b00      	cmp	r3, #0
 800bd72:	d09e      	beq.n	800bcb2 <_printf_float+0xa2>
 800bd74:	232d      	movs	r3, #45	@ 0x2d
 800bd76:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800bd7a:	e79a      	b.n	800bcb2 <_printf_float+0xa2>
 800bd7c:	2947      	cmp	r1, #71	@ 0x47
 800bd7e:	d1bf      	bne.n	800bd00 <_printf_float+0xf0>
 800bd80:	2b00      	cmp	r3, #0
 800bd82:	d1bd      	bne.n	800bd00 <_printf_float+0xf0>
 800bd84:	2301      	movs	r3, #1
 800bd86:	e7ba      	b.n	800bcfe <_printf_float+0xee>
 800bd88:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800bd8c:	d9dc      	bls.n	800bd48 <_printf_float+0x138>
 800bd8e:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800bd92:	d118      	bne.n	800bdc6 <_printf_float+0x1b6>
 800bd94:	2900      	cmp	r1, #0
 800bd96:	6863      	ldr	r3, [r4, #4]
 800bd98:	dd0b      	ble.n	800bdb2 <_printf_float+0x1a2>
 800bd9a:	6121      	str	r1, [r4, #16]
 800bd9c:	b913      	cbnz	r3, 800bda4 <_printf_float+0x194>
 800bd9e:	6822      	ldr	r2, [r4, #0]
 800bda0:	07d0      	lsls	r0, r2, #31
 800bda2:	d502      	bpl.n	800bdaa <_printf_float+0x19a>
 800bda4:	3301      	adds	r3, #1
 800bda6:	440b      	add	r3, r1
 800bda8:	6123      	str	r3, [r4, #16]
 800bdaa:	f04f 0900 	mov.w	r9, #0
 800bdae:	65a1      	str	r1, [r4, #88]	@ 0x58
 800bdb0:	e7dc      	b.n	800bd6c <_printf_float+0x15c>
 800bdb2:	b913      	cbnz	r3, 800bdba <_printf_float+0x1aa>
 800bdb4:	6822      	ldr	r2, [r4, #0]
 800bdb6:	07d2      	lsls	r2, r2, #31
 800bdb8:	d501      	bpl.n	800bdbe <_printf_float+0x1ae>
 800bdba:	3302      	adds	r3, #2
 800bdbc:	e7f4      	b.n	800bda8 <_printf_float+0x198>
 800bdbe:	2301      	movs	r3, #1
 800bdc0:	e7f2      	b.n	800bda8 <_printf_float+0x198>
 800bdc2:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800bdc6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800bdc8:	4299      	cmp	r1, r3
 800bdca:	db05      	blt.n	800bdd8 <_printf_float+0x1c8>
 800bdcc:	6823      	ldr	r3, [r4, #0]
 800bdce:	6121      	str	r1, [r4, #16]
 800bdd0:	07d8      	lsls	r0, r3, #31
 800bdd2:	d5ea      	bpl.n	800bdaa <_printf_float+0x19a>
 800bdd4:	1c4b      	adds	r3, r1, #1
 800bdd6:	e7e7      	b.n	800bda8 <_printf_float+0x198>
 800bdd8:	2900      	cmp	r1, #0
 800bdda:	bfcc      	ite	gt
 800bddc:	2201      	movgt	r2, #1
 800bdde:	f1c1 0202 	rsble	r2, r1, #2
 800bde2:	4413      	add	r3, r2
 800bde4:	e7e0      	b.n	800bda8 <_printf_float+0x198>
 800bde6:	6823      	ldr	r3, [r4, #0]
 800bde8:	055a      	lsls	r2, r3, #21
 800bdea:	d407      	bmi.n	800bdfc <_printf_float+0x1ec>
 800bdec:	6923      	ldr	r3, [r4, #16]
 800bdee:	4642      	mov	r2, r8
 800bdf0:	4631      	mov	r1, r6
 800bdf2:	4628      	mov	r0, r5
 800bdf4:	47b8      	blx	r7
 800bdf6:	3001      	adds	r0, #1
 800bdf8:	d12b      	bne.n	800be52 <_printf_float+0x242>
 800bdfa:	e764      	b.n	800bcc6 <_printf_float+0xb6>
 800bdfc:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800be00:	f240 80dc 	bls.w	800bfbc <_printf_float+0x3ac>
 800be04:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800be08:	2200      	movs	r2, #0
 800be0a:	2300      	movs	r3, #0
 800be0c:	f7f4 fde4 	bl	80009d8 <__aeabi_dcmpeq>
 800be10:	2800      	cmp	r0, #0
 800be12:	d033      	beq.n	800be7c <_printf_float+0x26c>
 800be14:	2301      	movs	r3, #1
 800be16:	4631      	mov	r1, r6
 800be18:	4628      	mov	r0, r5
 800be1a:	4a35      	ldr	r2, [pc, #212]	@ (800bef0 <_printf_float+0x2e0>)
 800be1c:	47b8      	blx	r7
 800be1e:	3001      	adds	r0, #1
 800be20:	f43f af51 	beq.w	800bcc6 <_printf_float+0xb6>
 800be24:	e9dd 380d 	ldrd	r3, r8, [sp, #52]	@ 0x34
 800be28:	4543      	cmp	r3, r8
 800be2a:	db02      	blt.n	800be32 <_printf_float+0x222>
 800be2c:	6823      	ldr	r3, [r4, #0]
 800be2e:	07d8      	lsls	r0, r3, #31
 800be30:	d50f      	bpl.n	800be52 <_printf_float+0x242>
 800be32:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800be36:	4631      	mov	r1, r6
 800be38:	4628      	mov	r0, r5
 800be3a:	47b8      	blx	r7
 800be3c:	3001      	adds	r0, #1
 800be3e:	f43f af42 	beq.w	800bcc6 <_printf_float+0xb6>
 800be42:	f04f 0900 	mov.w	r9, #0
 800be46:	f108 38ff 	add.w	r8, r8, #4294967295
 800be4a:	f104 0a1a 	add.w	sl, r4, #26
 800be4e:	45c8      	cmp	r8, r9
 800be50:	dc09      	bgt.n	800be66 <_printf_float+0x256>
 800be52:	6823      	ldr	r3, [r4, #0]
 800be54:	079b      	lsls	r3, r3, #30
 800be56:	f100 8102 	bmi.w	800c05e <_printf_float+0x44e>
 800be5a:	68e0      	ldr	r0, [r4, #12]
 800be5c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800be5e:	4298      	cmp	r0, r3
 800be60:	bfb8      	it	lt
 800be62:	4618      	movlt	r0, r3
 800be64:	e731      	b.n	800bcca <_printf_float+0xba>
 800be66:	2301      	movs	r3, #1
 800be68:	4652      	mov	r2, sl
 800be6a:	4631      	mov	r1, r6
 800be6c:	4628      	mov	r0, r5
 800be6e:	47b8      	blx	r7
 800be70:	3001      	adds	r0, #1
 800be72:	f43f af28 	beq.w	800bcc6 <_printf_float+0xb6>
 800be76:	f109 0901 	add.w	r9, r9, #1
 800be7a:	e7e8      	b.n	800be4e <_printf_float+0x23e>
 800be7c:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800be7e:	2b00      	cmp	r3, #0
 800be80:	dc38      	bgt.n	800bef4 <_printf_float+0x2e4>
 800be82:	2301      	movs	r3, #1
 800be84:	4631      	mov	r1, r6
 800be86:	4628      	mov	r0, r5
 800be88:	4a19      	ldr	r2, [pc, #100]	@ (800bef0 <_printf_float+0x2e0>)
 800be8a:	47b8      	blx	r7
 800be8c:	3001      	adds	r0, #1
 800be8e:	f43f af1a 	beq.w	800bcc6 <_printf_float+0xb6>
 800be92:	e9dd 390d 	ldrd	r3, r9, [sp, #52]	@ 0x34
 800be96:	ea59 0303 	orrs.w	r3, r9, r3
 800be9a:	d102      	bne.n	800bea2 <_printf_float+0x292>
 800be9c:	6823      	ldr	r3, [r4, #0]
 800be9e:	07d9      	lsls	r1, r3, #31
 800bea0:	d5d7      	bpl.n	800be52 <_printf_float+0x242>
 800bea2:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800bea6:	4631      	mov	r1, r6
 800bea8:	4628      	mov	r0, r5
 800beaa:	47b8      	blx	r7
 800beac:	3001      	adds	r0, #1
 800beae:	f43f af0a 	beq.w	800bcc6 <_printf_float+0xb6>
 800beb2:	f04f 0a00 	mov.w	sl, #0
 800beb6:	f104 0b1a 	add.w	fp, r4, #26
 800beba:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800bebc:	425b      	negs	r3, r3
 800bebe:	4553      	cmp	r3, sl
 800bec0:	dc01      	bgt.n	800bec6 <_printf_float+0x2b6>
 800bec2:	464b      	mov	r3, r9
 800bec4:	e793      	b.n	800bdee <_printf_float+0x1de>
 800bec6:	2301      	movs	r3, #1
 800bec8:	465a      	mov	r2, fp
 800beca:	4631      	mov	r1, r6
 800becc:	4628      	mov	r0, r5
 800bece:	47b8      	blx	r7
 800bed0:	3001      	adds	r0, #1
 800bed2:	f43f aef8 	beq.w	800bcc6 <_printf_float+0xb6>
 800bed6:	f10a 0a01 	add.w	sl, sl, #1
 800beda:	e7ee      	b.n	800beba <_printf_float+0x2aa>
 800bedc:	7fefffff 	.word	0x7fefffff
 800bee0:	0800e588 	.word	0x0800e588
 800bee4:	0800e58c 	.word	0x0800e58c
 800bee8:	0800e590 	.word	0x0800e590
 800beec:	0800e594 	.word	0x0800e594
 800bef0:	0800e598 	.word	0x0800e598
 800bef4:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800bef6:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 800befa:	4553      	cmp	r3, sl
 800befc:	bfa8      	it	ge
 800befe:	4653      	movge	r3, sl
 800bf00:	2b00      	cmp	r3, #0
 800bf02:	4699      	mov	r9, r3
 800bf04:	dc36      	bgt.n	800bf74 <_printf_float+0x364>
 800bf06:	f04f 0b00 	mov.w	fp, #0
 800bf0a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800bf0e:	f104 021a 	add.w	r2, r4, #26
 800bf12:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800bf14:	930a      	str	r3, [sp, #40]	@ 0x28
 800bf16:	eba3 0309 	sub.w	r3, r3, r9
 800bf1a:	455b      	cmp	r3, fp
 800bf1c:	dc31      	bgt.n	800bf82 <_printf_float+0x372>
 800bf1e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800bf20:	459a      	cmp	sl, r3
 800bf22:	dc3a      	bgt.n	800bf9a <_printf_float+0x38a>
 800bf24:	6823      	ldr	r3, [r4, #0]
 800bf26:	07da      	lsls	r2, r3, #31
 800bf28:	d437      	bmi.n	800bf9a <_printf_float+0x38a>
 800bf2a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800bf2c:	ebaa 0903 	sub.w	r9, sl, r3
 800bf30:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800bf32:	ebaa 0303 	sub.w	r3, sl, r3
 800bf36:	4599      	cmp	r9, r3
 800bf38:	bfa8      	it	ge
 800bf3a:	4699      	movge	r9, r3
 800bf3c:	f1b9 0f00 	cmp.w	r9, #0
 800bf40:	dc33      	bgt.n	800bfaa <_printf_float+0x39a>
 800bf42:	f04f 0800 	mov.w	r8, #0
 800bf46:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800bf4a:	f104 0b1a 	add.w	fp, r4, #26
 800bf4e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800bf50:	ebaa 0303 	sub.w	r3, sl, r3
 800bf54:	eba3 0309 	sub.w	r3, r3, r9
 800bf58:	4543      	cmp	r3, r8
 800bf5a:	f77f af7a 	ble.w	800be52 <_printf_float+0x242>
 800bf5e:	2301      	movs	r3, #1
 800bf60:	465a      	mov	r2, fp
 800bf62:	4631      	mov	r1, r6
 800bf64:	4628      	mov	r0, r5
 800bf66:	47b8      	blx	r7
 800bf68:	3001      	adds	r0, #1
 800bf6a:	f43f aeac 	beq.w	800bcc6 <_printf_float+0xb6>
 800bf6e:	f108 0801 	add.w	r8, r8, #1
 800bf72:	e7ec      	b.n	800bf4e <_printf_float+0x33e>
 800bf74:	4642      	mov	r2, r8
 800bf76:	4631      	mov	r1, r6
 800bf78:	4628      	mov	r0, r5
 800bf7a:	47b8      	blx	r7
 800bf7c:	3001      	adds	r0, #1
 800bf7e:	d1c2      	bne.n	800bf06 <_printf_float+0x2f6>
 800bf80:	e6a1      	b.n	800bcc6 <_printf_float+0xb6>
 800bf82:	2301      	movs	r3, #1
 800bf84:	4631      	mov	r1, r6
 800bf86:	4628      	mov	r0, r5
 800bf88:	920a      	str	r2, [sp, #40]	@ 0x28
 800bf8a:	47b8      	blx	r7
 800bf8c:	3001      	adds	r0, #1
 800bf8e:	f43f ae9a 	beq.w	800bcc6 <_printf_float+0xb6>
 800bf92:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800bf94:	f10b 0b01 	add.w	fp, fp, #1
 800bf98:	e7bb      	b.n	800bf12 <_printf_float+0x302>
 800bf9a:	4631      	mov	r1, r6
 800bf9c:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800bfa0:	4628      	mov	r0, r5
 800bfa2:	47b8      	blx	r7
 800bfa4:	3001      	adds	r0, #1
 800bfa6:	d1c0      	bne.n	800bf2a <_printf_float+0x31a>
 800bfa8:	e68d      	b.n	800bcc6 <_printf_float+0xb6>
 800bfaa:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800bfac:	464b      	mov	r3, r9
 800bfae:	4631      	mov	r1, r6
 800bfb0:	4628      	mov	r0, r5
 800bfb2:	4442      	add	r2, r8
 800bfb4:	47b8      	blx	r7
 800bfb6:	3001      	adds	r0, #1
 800bfb8:	d1c3      	bne.n	800bf42 <_printf_float+0x332>
 800bfba:	e684      	b.n	800bcc6 <_printf_float+0xb6>
 800bfbc:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 800bfc0:	f1ba 0f01 	cmp.w	sl, #1
 800bfc4:	dc01      	bgt.n	800bfca <_printf_float+0x3ba>
 800bfc6:	07db      	lsls	r3, r3, #31
 800bfc8:	d536      	bpl.n	800c038 <_printf_float+0x428>
 800bfca:	2301      	movs	r3, #1
 800bfcc:	4642      	mov	r2, r8
 800bfce:	4631      	mov	r1, r6
 800bfd0:	4628      	mov	r0, r5
 800bfd2:	47b8      	blx	r7
 800bfd4:	3001      	adds	r0, #1
 800bfd6:	f43f ae76 	beq.w	800bcc6 <_printf_float+0xb6>
 800bfda:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800bfde:	4631      	mov	r1, r6
 800bfe0:	4628      	mov	r0, r5
 800bfe2:	47b8      	blx	r7
 800bfe4:	3001      	adds	r0, #1
 800bfe6:	f43f ae6e 	beq.w	800bcc6 <_printf_float+0xb6>
 800bfea:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800bfee:	2200      	movs	r2, #0
 800bff0:	2300      	movs	r3, #0
 800bff2:	f10a 3aff 	add.w	sl, sl, #4294967295
 800bff6:	f7f4 fcef 	bl	80009d8 <__aeabi_dcmpeq>
 800bffa:	b9c0      	cbnz	r0, 800c02e <_printf_float+0x41e>
 800bffc:	4653      	mov	r3, sl
 800bffe:	f108 0201 	add.w	r2, r8, #1
 800c002:	4631      	mov	r1, r6
 800c004:	4628      	mov	r0, r5
 800c006:	47b8      	blx	r7
 800c008:	3001      	adds	r0, #1
 800c00a:	d10c      	bne.n	800c026 <_printf_float+0x416>
 800c00c:	e65b      	b.n	800bcc6 <_printf_float+0xb6>
 800c00e:	2301      	movs	r3, #1
 800c010:	465a      	mov	r2, fp
 800c012:	4631      	mov	r1, r6
 800c014:	4628      	mov	r0, r5
 800c016:	47b8      	blx	r7
 800c018:	3001      	adds	r0, #1
 800c01a:	f43f ae54 	beq.w	800bcc6 <_printf_float+0xb6>
 800c01e:	f108 0801 	add.w	r8, r8, #1
 800c022:	45d0      	cmp	r8, sl
 800c024:	dbf3      	blt.n	800c00e <_printf_float+0x3fe>
 800c026:	464b      	mov	r3, r9
 800c028:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800c02c:	e6e0      	b.n	800bdf0 <_printf_float+0x1e0>
 800c02e:	f04f 0800 	mov.w	r8, #0
 800c032:	f104 0b1a 	add.w	fp, r4, #26
 800c036:	e7f4      	b.n	800c022 <_printf_float+0x412>
 800c038:	2301      	movs	r3, #1
 800c03a:	4642      	mov	r2, r8
 800c03c:	e7e1      	b.n	800c002 <_printf_float+0x3f2>
 800c03e:	2301      	movs	r3, #1
 800c040:	464a      	mov	r2, r9
 800c042:	4631      	mov	r1, r6
 800c044:	4628      	mov	r0, r5
 800c046:	47b8      	blx	r7
 800c048:	3001      	adds	r0, #1
 800c04a:	f43f ae3c 	beq.w	800bcc6 <_printf_float+0xb6>
 800c04e:	f108 0801 	add.w	r8, r8, #1
 800c052:	68e3      	ldr	r3, [r4, #12]
 800c054:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800c056:	1a5b      	subs	r3, r3, r1
 800c058:	4543      	cmp	r3, r8
 800c05a:	dcf0      	bgt.n	800c03e <_printf_float+0x42e>
 800c05c:	e6fd      	b.n	800be5a <_printf_float+0x24a>
 800c05e:	f04f 0800 	mov.w	r8, #0
 800c062:	f104 0919 	add.w	r9, r4, #25
 800c066:	e7f4      	b.n	800c052 <_printf_float+0x442>

0800c068 <_printf_common>:
 800c068:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c06c:	4616      	mov	r6, r2
 800c06e:	4698      	mov	r8, r3
 800c070:	688a      	ldr	r2, [r1, #8]
 800c072:	690b      	ldr	r3, [r1, #16]
 800c074:	4607      	mov	r7, r0
 800c076:	4293      	cmp	r3, r2
 800c078:	bfb8      	it	lt
 800c07a:	4613      	movlt	r3, r2
 800c07c:	6033      	str	r3, [r6, #0]
 800c07e:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800c082:	460c      	mov	r4, r1
 800c084:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800c088:	b10a      	cbz	r2, 800c08e <_printf_common+0x26>
 800c08a:	3301      	adds	r3, #1
 800c08c:	6033      	str	r3, [r6, #0]
 800c08e:	6823      	ldr	r3, [r4, #0]
 800c090:	0699      	lsls	r1, r3, #26
 800c092:	bf42      	ittt	mi
 800c094:	6833      	ldrmi	r3, [r6, #0]
 800c096:	3302      	addmi	r3, #2
 800c098:	6033      	strmi	r3, [r6, #0]
 800c09a:	6825      	ldr	r5, [r4, #0]
 800c09c:	f015 0506 	ands.w	r5, r5, #6
 800c0a0:	d106      	bne.n	800c0b0 <_printf_common+0x48>
 800c0a2:	f104 0a19 	add.w	sl, r4, #25
 800c0a6:	68e3      	ldr	r3, [r4, #12]
 800c0a8:	6832      	ldr	r2, [r6, #0]
 800c0aa:	1a9b      	subs	r3, r3, r2
 800c0ac:	42ab      	cmp	r3, r5
 800c0ae:	dc2b      	bgt.n	800c108 <_printf_common+0xa0>
 800c0b0:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800c0b4:	6822      	ldr	r2, [r4, #0]
 800c0b6:	3b00      	subs	r3, #0
 800c0b8:	bf18      	it	ne
 800c0ba:	2301      	movne	r3, #1
 800c0bc:	0692      	lsls	r2, r2, #26
 800c0be:	d430      	bmi.n	800c122 <_printf_common+0xba>
 800c0c0:	4641      	mov	r1, r8
 800c0c2:	4638      	mov	r0, r7
 800c0c4:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800c0c8:	47c8      	blx	r9
 800c0ca:	3001      	adds	r0, #1
 800c0cc:	d023      	beq.n	800c116 <_printf_common+0xae>
 800c0ce:	6823      	ldr	r3, [r4, #0]
 800c0d0:	6922      	ldr	r2, [r4, #16]
 800c0d2:	f003 0306 	and.w	r3, r3, #6
 800c0d6:	2b04      	cmp	r3, #4
 800c0d8:	bf14      	ite	ne
 800c0da:	2500      	movne	r5, #0
 800c0dc:	6833      	ldreq	r3, [r6, #0]
 800c0de:	f04f 0600 	mov.w	r6, #0
 800c0e2:	bf08      	it	eq
 800c0e4:	68e5      	ldreq	r5, [r4, #12]
 800c0e6:	f104 041a 	add.w	r4, r4, #26
 800c0ea:	bf08      	it	eq
 800c0ec:	1aed      	subeq	r5, r5, r3
 800c0ee:	f854 3c12 	ldr.w	r3, [r4, #-18]
 800c0f2:	bf08      	it	eq
 800c0f4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800c0f8:	4293      	cmp	r3, r2
 800c0fa:	bfc4      	itt	gt
 800c0fc:	1a9b      	subgt	r3, r3, r2
 800c0fe:	18ed      	addgt	r5, r5, r3
 800c100:	42b5      	cmp	r5, r6
 800c102:	d11a      	bne.n	800c13a <_printf_common+0xd2>
 800c104:	2000      	movs	r0, #0
 800c106:	e008      	b.n	800c11a <_printf_common+0xb2>
 800c108:	2301      	movs	r3, #1
 800c10a:	4652      	mov	r2, sl
 800c10c:	4641      	mov	r1, r8
 800c10e:	4638      	mov	r0, r7
 800c110:	47c8      	blx	r9
 800c112:	3001      	adds	r0, #1
 800c114:	d103      	bne.n	800c11e <_printf_common+0xb6>
 800c116:	f04f 30ff 	mov.w	r0, #4294967295
 800c11a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c11e:	3501      	adds	r5, #1
 800c120:	e7c1      	b.n	800c0a6 <_printf_common+0x3e>
 800c122:	2030      	movs	r0, #48	@ 0x30
 800c124:	18e1      	adds	r1, r4, r3
 800c126:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800c12a:	1c5a      	adds	r2, r3, #1
 800c12c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800c130:	4422      	add	r2, r4
 800c132:	3302      	adds	r3, #2
 800c134:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800c138:	e7c2      	b.n	800c0c0 <_printf_common+0x58>
 800c13a:	2301      	movs	r3, #1
 800c13c:	4622      	mov	r2, r4
 800c13e:	4641      	mov	r1, r8
 800c140:	4638      	mov	r0, r7
 800c142:	47c8      	blx	r9
 800c144:	3001      	adds	r0, #1
 800c146:	d0e6      	beq.n	800c116 <_printf_common+0xae>
 800c148:	3601      	adds	r6, #1
 800c14a:	e7d9      	b.n	800c100 <_printf_common+0x98>

0800c14c <_printf_i>:
 800c14c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800c150:	7e0f      	ldrb	r7, [r1, #24]
 800c152:	4691      	mov	r9, r2
 800c154:	2f78      	cmp	r7, #120	@ 0x78
 800c156:	4680      	mov	r8, r0
 800c158:	460c      	mov	r4, r1
 800c15a:	469a      	mov	sl, r3
 800c15c:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800c15e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800c162:	d807      	bhi.n	800c174 <_printf_i+0x28>
 800c164:	2f62      	cmp	r7, #98	@ 0x62
 800c166:	d80a      	bhi.n	800c17e <_printf_i+0x32>
 800c168:	2f00      	cmp	r7, #0
 800c16a:	f000 80d3 	beq.w	800c314 <_printf_i+0x1c8>
 800c16e:	2f58      	cmp	r7, #88	@ 0x58
 800c170:	f000 80ba 	beq.w	800c2e8 <_printf_i+0x19c>
 800c174:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800c178:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800c17c:	e03a      	b.n	800c1f4 <_printf_i+0xa8>
 800c17e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800c182:	2b15      	cmp	r3, #21
 800c184:	d8f6      	bhi.n	800c174 <_printf_i+0x28>
 800c186:	a101      	add	r1, pc, #4	@ (adr r1, 800c18c <_printf_i+0x40>)
 800c188:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800c18c:	0800c1e5 	.word	0x0800c1e5
 800c190:	0800c1f9 	.word	0x0800c1f9
 800c194:	0800c175 	.word	0x0800c175
 800c198:	0800c175 	.word	0x0800c175
 800c19c:	0800c175 	.word	0x0800c175
 800c1a0:	0800c175 	.word	0x0800c175
 800c1a4:	0800c1f9 	.word	0x0800c1f9
 800c1a8:	0800c175 	.word	0x0800c175
 800c1ac:	0800c175 	.word	0x0800c175
 800c1b0:	0800c175 	.word	0x0800c175
 800c1b4:	0800c175 	.word	0x0800c175
 800c1b8:	0800c2fb 	.word	0x0800c2fb
 800c1bc:	0800c223 	.word	0x0800c223
 800c1c0:	0800c2b5 	.word	0x0800c2b5
 800c1c4:	0800c175 	.word	0x0800c175
 800c1c8:	0800c175 	.word	0x0800c175
 800c1cc:	0800c31d 	.word	0x0800c31d
 800c1d0:	0800c175 	.word	0x0800c175
 800c1d4:	0800c223 	.word	0x0800c223
 800c1d8:	0800c175 	.word	0x0800c175
 800c1dc:	0800c175 	.word	0x0800c175
 800c1e0:	0800c2bd 	.word	0x0800c2bd
 800c1e4:	6833      	ldr	r3, [r6, #0]
 800c1e6:	1d1a      	adds	r2, r3, #4
 800c1e8:	681b      	ldr	r3, [r3, #0]
 800c1ea:	6032      	str	r2, [r6, #0]
 800c1ec:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800c1f0:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800c1f4:	2301      	movs	r3, #1
 800c1f6:	e09e      	b.n	800c336 <_printf_i+0x1ea>
 800c1f8:	6833      	ldr	r3, [r6, #0]
 800c1fa:	6820      	ldr	r0, [r4, #0]
 800c1fc:	1d19      	adds	r1, r3, #4
 800c1fe:	6031      	str	r1, [r6, #0]
 800c200:	0606      	lsls	r6, r0, #24
 800c202:	d501      	bpl.n	800c208 <_printf_i+0xbc>
 800c204:	681d      	ldr	r5, [r3, #0]
 800c206:	e003      	b.n	800c210 <_printf_i+0xc4>
 800c208:	0645      	lsls	r5, r0, #25
 800c20a:	d5fb      	bpl.n	800c204 <_printf_i+0xb8>
 800c20c:	f9b3 5000 	ldrsh.w	r5, [r3]
 800c210:	2d00      	cmp	r5, #0
 800c212:	da03      	bge.n	800c21c <_printf_i+0xd0>
 800c214:	232d      	movs	r3, #45	@ 0x2d
 800c216:	426d      	negs	r5, r5
 800c218:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800c21c:	230a      	movs	r3, #10
 800c21e:	4859      	ldr	r0, [pc, #356]	@ (800c384 <_printf_i+0x238>)
 800c220:	e011      	b.n	800c246 <_printf_i+0xfa>
 800c222:	6821      	ldr	r1, [r4, #0]
 800c224:	6833      	ldr	r3, [r6, #0]
 800c226:	0608      	lsls	r0, r1, #24
 800c228:	f853 5b04 	ldr.w	r5, [r3], #4
 800c22c:	d402      	bmi.n	800c234 <_printf_i+0xe8>
 800c22e:	0649      	lsls	r1, r1, #25
 800c230:	bf48      	it	mi
 800c232:	b2ad      	uxthmi	r5, r5
 800c234:	2f6f      	cmp	r7, #111	@ 0x6f
 800c236:	6033      	str	r3, [r6, #0]
 800c238:	bf14      	ite	ne
 800c23a:	230a      	movne	r3, #10
 800c23c:	2308      	moveq	r3, #8
 800c23e:	4851      	ldr	r0, [pc, #324]	@ (800c384 <_printf_i+0x238>)
 800c240:	2100      	movs	r1, #0
 800c242:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800c246:	6866      	ldr	r6, [r4, #4]
 800c248:	2e00      	cmp	r6, #0
 800c24a:	bfa8      	it	ge
 800c24c:	6821      	ldrge	r1, [r4, #0]
 800c24e:	60a6      	str	r6, [r4, #8]
 800c250:	bfa4      	itt	ge
 800c252:	f021 0104 	bicge.w	r1, r1, #4
 800c256:	6021      	strge	r1, [r4, #0]
 800c258:	b90d      	cbnz	r5, 800c25e <_printf_i+0x112>
 800c25a:	2e00      	cmp	r6, #0
 800c25c:	d04b      	beq.n	800c2f6 <_printf_i+0x1aa>
 800c25e:	4616      	mov	r6, r2
 800c260:	fbb5 f1f3 	udiv	r1, r5, r3
 800c264:	fb03 5711 	mls	r7, r3, r1, r5
 800c268:	5dc7      	ldrb	r7, [r0, r7]
 800c26a:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800c26e:	462f      	mov	r7, r5
 800c270:	42bb      	cmp	r3, r7
 800c272:	460d      	mov	r5, r1
 800c274:	d9f4      	bls.n	800c260 <_printf_i+0x114>
 800c276:	2b08      	cmp	r3, #8
 800c278:	d10b      	bne.n	800c292 <_printf_i+0x146>
 800c27a:	6823      	ldr	r3, [r4, #0]
 800c27c:	07df      	lsls	r7, r3, #31
 800c27e:	d508      	bpl.n	800c292 <_printf_i+0x146>
 800c280:	6923      	ldr	r3, [r4, #16]
 800c282:	6861      	ldr	r1, [r4, #4]
 800c284:	4299      	cmp	r1, r3
 800c286:	bfde      	ittt	le
 800c288:	2330      	movle	r3, #48	@ 0x30
 800c28a:	f806 3c01 	strble.w	r3, [r6, #-1]
 800c28e:	f106 36ff 	addle.w	r6, r6, #4294967295
 800c292:	1b92      	subs	r2, r2, r6
 800c294:	6122      	str	r2, [r4, #16]
 800c296:	464b      	mov	r3, r9
 800c298:	4621      	mov	r1, r4
 800c29a:	4640      	mov	r0, r8
 800c29c:	f8cd a000 	str.w	sl, [sp]
 800c2a0:	aa03      	add	r2, sp, #12
 800c2a2:	f7ff fee1 	bl	800c068 <_printf_common>
 800c2a6:	3001      	adds	r0, #1
 800c2a8:	d14a      	bne.n	800c340 <_printf_i+0x1f4>
 800c2aa:	f04f 30ff 	mov.w	r0, #4294967295
 800c2ae:	b004      	add	sp, #16
 800c2b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c2b4:	6823      	ldr	r3, [r4, #0]
 800c2b6:	f043 0320 	orr.w	r3, r3, #32
 800c2ba:	6023      	str	r3, [r4, #0]
 800c2bc:	2778      	movs	r7, #120	@ 0x78
 800c2be:	4832      	ldr	r0, [pc, #200]	@ (800c388 <_printf_i+0x23c>)
 800c2c0:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800c2c4:	6823      	ldr	r3, [r4, #0]
 800c2c6:	6831      	ldr	r1, [r6, #0]
 800c2c8:	061f      	lsls	r7, r3, #24
 800c2ca:	f851 5b04 	ldr.w	r5, [r1], #4
 800c2ce:	d402      	bmi.n	800c2d6 <_printf_i+0x18a>
 800c2d0:	065f      	lsls	r7, r3, #25
 800c2d2:	bf48      	it	mi
 800c2d4:	b2ad      	uxthmi	r5, r5
 800c2d6:	6031      	str	r1, [r6, #0]
 800c2d8:	07d9      	lsls	r1, r3, #31
 800c2da:	bf44      	itt	mi
 800c2dc:	f043 0320 	orrmi.w	r3, r3, #32
 800c2e0:	6023      	strmi	r3, [r4, #0]
 800c2e2:	b11d      	cbz	r5, 800c2ec <_printf_i+0x1a0>
 800c2e4:	2310      	movs	r3, #16
 800c2e6:	e7ab      	b.n	800c240 <_printf_i+0xf4>
 800c2e8:	4826      	ldr	r0, [pc, #152]	@ (800c384 <_printf_i+0x238>)
 800c2ea:	e7e9      	b.n	800c2c0 <_printf_i+0x174>
 800c2ec:	6823      	ldr	r3, [r4, #0]
 800c2ee:	f023 0320 	bic.w	r3, r3, #32
 800c2f2:	6023      	str	r3, [r4, #0]
 800c2f4:	e7f6      	b.n	800c2e4 <_printf_i+0x198>
 800c2f6:	4616      	mov	r6, r2
 800c2f8:	e7bd      	b.n	800c276 <_printf_i+0x12a>
 800c2fa:	6833      	ldr	r3, [r6, #0]
 800c2fc:	6825      	ldr	r5, [r4, #0]
 800c2fe:	1d18      	adds	r0, r3, #4
 800c300:	6961      	ldr	r1, [r4, #20]
 800c302:	6030      	str	r0, [r6, #0]
 800c304:	062e      	lsls	r6, r5, #24
 800c306:	681b      	ldr	r3, [r3, #0]
 800c308:	d501      	bpl.n	800c30e <_printf_i+0x1c2>
 800c30a:	6019      	str	r1, [r3, #0]
 800c30c:	e002      	b.n	800c314 <_printf_i+0x1c8>
 800c30e:	0668      	lsls	r0, r5, #25
 800c310:	d5fb      	bpl.n	800c30a <_printf_i+0x1be>
 800c312:	8019      	strh	r1, [r3, #0]
 800c314:	2300      	movs	r3, #0
 800c316:	4616      	mov	r6, r2
 800c318:	6123      	str	r3, [r4, #16]
 800c31a:	e7bc      	b.n	800c296 <_printf_i+0x14a>
 800c31c:	6833      	ldr	r3, [r6, #0]
 800c31e:	2100      	movs	r1, #0
 800c320:	1d1a      	adds	r2, r3, #4
 800c322:	6032      	str	r2, [r6, #0]
 800c324:	681e      	ldr	r6, [r3, #0]
 800c326:	6862      	ldr	r2, [r4, #4]
 800c328:	4630      	mov	r0, r6
 800c32a:	f000 fab8 	bl	800c89e <memchr>
 800c32e:	b108      	cbz	r0, 800c334 <_printf_i+0x1e8>
 800c330:	1b80      	subs	r0, r0, r6
 800c332:	6060      	str	r0, [r4, #4]
 800c334:	6863      	ldr	r3, [r4, #4]
 800c336:	6123      	str	r3, [r4, #16]
 800c338:	2300      	movs	r3, #0
 800c33a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800c33e:	e7aa      	b.n	800c296 <_printf_i+0x14a>
 800c340:	4632      	mov	r2, r6
 800c342:	4649      	mov	r1, r9
 800c344:	4640      	mov	r0, r8
 800c346:	6923      	ldr	r3, [r4, #16]
 800c348:	47d0      	blx	sl
 800c34a:	3001      	adds	r0, #1
 800c34c:	d0ad      	beq.n	800c2aa <_printf_i+0x15e>
 800c34e:	6823      	ldr	r3, [r4, #0]
 800c350:	079b      	lsls	r3, r3, #30
 800c352:	d413      	bmi.n	800c37c <_printf_i+0x230>
 800c354:	68e0      	ldr	r0, [r4, #12]
 800c356:	9b03      	ldr	r3, [sp, #12]
 800c358:	4298      	cmp	r0, r3
 800c35a:	bfb8      	it	lt
 800c35c:	4618      	movlt	r0, r3
 800c35e:	e7a6      	b.n	800c2ae <_printf_i+0x162>
 800c360:	2301      	movs	r3, #1
 800c362:	4632      	mov	r2, r6
 800c364:	4649      	mov	r1, r9
 800c366:	4640      	mov	r0, r8
 800c368:	47d0      	blx	sl
 800c36a:	3001      	adds	r0, #1
 800c36c:	d09d      	beq.n	800c2aa <_printf_i+0x15e>
 800c36e:	3501      	adds	r5, #1
 800c370:	68e3      	ldr	r3, [r4, #12]
 800c372:	9903      	ldr	r1, [sp, #12]
 800c374:	1a5b      	subs	r3, r3, r1
 800c376:	42ab      	cmp	r3, r5
 800c378:	dcf2      	bgt.n	800c360 <_printf_i+0x214>
 800c37a:	e7eb      	b.n	800c354 <_printf_i+0x208>
 800c37c:	2500      	movs	r5, #0
 800c37e:	f104 0619 	add.w	r6, r4, #25
 800c382:	e7f5      	b.n	800c370 <_printf_i+0x224>
 800c384:	0800e59a 	.word	0x0800e59a
 800c388:	0800e5ab 	.word	0x0800e5ab

0800c38c <std>:
 800c38c:	2300      	movs	r3, #0
 800c38e:	b510      	push	{r4, lr}
 800c390:	4604      	mov	r4, r0
 800c392:	e9c0 3300 	strd	r3, r3, [r0]
 800c396:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800c39a:	6083      	str	r3, [r0, #8]
 800c39c:	8181      	strh	r1, [r0, #12]
 800c39e:	6643      	str	r3, [r0, #100]	@ 0x64
 800c3a0:	81c2      	strh	r2, [r0, #14]
 800c3a2:	6183      	str	r3, [r0, #24]
 800c3a4:	4619      	mov	r1, r3
 800c3a6:	2208      	movs	r2, #8
 800c3a8:	305c      	adds	r0, #92	@ 0x5c
 800c3aa:	f000 f9f9 	bl	800c7a0 <memset>
 800c3ae:	4b0d      	ldr	r3, [pc, #52]	@ (800c3e4 <std+0x58>)
 800c3b0:	6224      	str	r4, [r4, #32]
 800c3b2:	6263      	str	r3, [r4, #36]	@ 0x24
 800c3b4:	4b0c      	ldr	r3, [pc, #48]	@ (800c3e8 <std+0x5c>)
 800c3b6:	62a3      	str	r3, [r4, #40]	@ 0x28
 800c3b8:	4b0c      	ldr	r3, [pc, #48]	@ (800c3ec <std+0x60>)
 800c3ba:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800c3bc:	4b0c      	ldr	r3, [pc, #48]	@ (800c3f0 <std+0x64>)
 800c3be:	6323      	str	r3, [r4, #48]	@ 0x30
 800c3c0:	4b0c      	ldr	r3, [pc, #48]	@ (800c3f4 <std+0x68>)
 800c3c2:	429c      	cmp	r4, r3
 800c3c4:	d006      	beq.n	800c3d4 <std+0x48>
 800c3c6:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800c3ca:	4294      	cmp	r4, r2
 800c3cc:	d002      	beq.n	800c3d4 <std+0x48>
 800c3ce:	33d0      	adds	r3, #208	@ 0xd0
 800c3d0:	429c      	cmp	r4, r3
 800c3d2:	d105      	bne.n	800c3e0 <std+0x54>
 800c3d4:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800c3d8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c3dc:	f000 ba5c 	b.w	800c898 <__retarget_lock_init_recursive>
 800c3e0:	bd10      	pop	{r4, pc}
 800c3e2:	bf00      	nop
 800c3e4:	0800c5f1 	.word	0x0800c5f1
 800c3e8:	0800c613 	.word	0x0800c613
 800c3ec:	0800c64b 	.word	0x0800c64b
 800c3f0:	0800c66f 	.word	0x0800c66f
 800c3f4:	20000634 	.word	0x20000634

0800c3f8 <stdio_exit_handler>:
 800c3f8:	4a02      	ldr	r2, [pc, #8]	@ (800c404 <stdio_exit_handler+0xc>)
 800c3fa:	4903      	ldr	r1, [pc, #12]	@ (800c408 <stdio_exit_handler+0x10>)
 800c3fc:	4803      	ldr	r0, [pc, #12]	@ (800c40c <stdio_exit_handler+0x14>)
 800c3fe:	f000 b869 	b.w	800c4d4 <_fwalk_sglue>
 800c402:	bf00      	nop
 800c404:	200001c4 	.word	0x200001c4
 800c408:	0800e1dd 	.word	0x0800e1dd
 800c40c:	200001d4 	.word	0x200001d4

0800c410 <cleanup_stdio>:
 800c410:	6841      	ldr	r1, [r0, #4]
 800c412:	4b0c      	ldr	r3, [pc, #48]	@ (800c444 <cleanup_stdio+0x34>)
 800c414:	b510      	push	{r4, lr}
 800c416:	4299      	cmp	r1, r3
 800c418:	4604      	mov	r4, r0
 800c41a:	d001      	beq.n	800c420 <cleanup_stdio+0x10>
 800c41c:	f001 fede 	bl	800e1dc <_fflush_r>
 800c420:	68a1      	ldr	r1, [r4, #8]
 800c422:	4b09      	ldr	r3, [pc, #36]	@ (800c448 <cleanup_stdio+0x38>)
 800c424:	4299      	cmp	r1, r3
 800c426:	d002      	beq.n	800c42e <cleanup_stdio+0x1e>
 800c428:	4620      	mov	r0, r4
 800c42a:	f001 fed7 	bl	800e1dc <_fflush_r>
 800c42e:	68e1      	ldr	r1, [r4, #12]
 800c430:	4b06      	ldr	r3, [pc, #24]	@ (800c44c <cleanup_stdio+0x3c>)
 800c432:	4299      	cmp	r1, r3
 800c434:	d004      	beq.n	800c440 <cleanup_stdio+0x30>
 800c436:	4620      	mov	r0, r4
 800c438:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c43c:	f001 bece 	b.w	800e1dc <_fflush_r>
 800c440:	bd10      	pop	{r4, pc}
 800c442:	bf00      	nop
 800c444:	20000634 	.word	0x20000634
 800c448:	2000069c 	.word	0x2000069c
 800c44c:	20000704 	.word	0x20000704

0800c450 <global_stdio_init.part.0>:
 800c450:	b510      	push	{r4, lr}
 800c452:	4b0b      	ldr	r3, [pc, #44]	@ (800c480 <global_stdio_init.part.0+0x30>)
 800c454:	4c0b      	ldr	r4, [pc, #44]	@ (800c484 <global_stdio_init.part.0+0x34>)
 800c456:	4a0c      	ldr	r2, [pc, #48]	@ (800c488 <global_stdio_init.part.0+0x38>)
 800c458:	4620      	mov	r0, r4
 800c45a:	601a      	str	r2, [r3, #0]
 800c45c:	2104      	movs	r1, #4
 800c45e:	2200      	movs	r2, #0
 800c460:	f7ff ff94 	bl	800c38c <std>
 800c464:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800c468:	2201      	movs	r2, #1
 800c46a:	2109      	movs	r1, #9
 800c46c:	f7ff ff8e 	bl	800c38c <std>
 800c470:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800c474:	2202      	movs	r2, #2
 800c476:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c47a:	2112      	movs	r1, #18
 800c47c:	f7ff bf86 	b.w	800c38c <std>
 800c480:	2000076c 	.word	0x2000076c
 800c484:	20000634 	.word	0x20000634
 800c488:	0800c3f9 	.word	0x0800c3f9

0800c48c <__sfp_lock_acquire>:
 800c48c:	4801      	ldr	r0, [pc, #4]	@ (800c494 <__sfp_lock_acquire+0x8>)
 800c48e:	f000 ba04 	b.w	800c89a <__retarget_lock_acquire_recursive>
 800c492:	bf00      	nop
 800c494:	20000775 	.word	0x20000775

0800c498 <__sfp_lock_release>:
 800c498:	4801      	ldr	r0, [pc, #4]	@ (800c4a0 <__sfp_lock_release+0x8>)
 800c49a:	f000 b9ff 	b.w	800c89c <__retarget_lock_release_recursive>
 800c49e:	bf00      	nop
 800c4a0:	20000775 	.word	0x20000775

0800c4a4 <__sinit>:
 800c4a4:	b510      	push	{r4, lr}
 800c4a6:	4604      	mov	r4, r0
 800c4a8:	f7ff fff0 	bl	800c48c <__sfp_lock_acquire>
 800c4ac:	6a23      	ldr	r3, [r4, #32]
 800c4ae:	b11b      	cbz	r3, 800c4b8 <__sinit+0x14>
 800c4b0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c4b4:	f7ff bff0 	b.w	800c498 <__sfp_lock_release>
 800c4b8:	4b04      	ldr	r3, [pc, #16]	@ (800c4cc <__sinit+0x28>)
 800c4ba:	6223      	str	r3, [r4, #32]
 800c4bc:	4b04      	ldr	r3, [pc, #16]	@ (800c4d0 <__sinit+0x2c>)
 800c4be:	681b      	ldr	r3, [r3, #0]
 800c4c0:	2b00      	cmp	r3, #0
 800c4c2:	d1f5      	bne.n	800c4b0 <__sinit+0xc>
 800c4c4:	f7ff ffc4 	bl	800c450 <global_stdio_init.part.0>
 800c4c8:	e7f2      	b.n	800c4b0 <__sinit+0xc>
 800c4ca:	bf00      	nop
 800c4cc:	0800c411 	.word	0x0800c411
 800c4d0:	2000076c 	.word	0x2000076c

0800c4d4 <_fwalk_sglue>:
 800c4d4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c4d8:	4607      	mov	r7, r0
 800c4da:	4688      	mov	r8, r1
 800c4dc:	4614      	mov	r4, r2
 800c4de:	2600      	movs	r6, #0
 800c4e0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800c4e4:	f1b9 0901 	subs.w	r9, r9, #1
 800c4e8:	d505      	bpl.n	800c4f6 <_fwalk_sglue+0x22>
 800c4ea:	6824      	ldr	r4, [r4, #0]
 800c4ec:	2c00      	cmp	r4, #0
 800c4ee:	d1f7      	bne.n	800c4e0 <_fwalk_sglue+0xc>
 800c4f0:	4630      	mov	r0, r6
 800c4f2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c4f6:	89ab      	ldrh	r3, [r5, #12]
 800c4f8:	2b01      	cmp	r3, #1
 800c4fa:	d907      	bls.n	800c50c <_fwalk_sglue+0x38>
 800c4fc:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800c500:	3301      	adds	r3, #1
 800c502:	d003      	beq.n	800c50c <_fwalk_sglue+0x38>
 800c504:	4629      	mov	r1, r5
 800c506:	4638      	mov	r0, r7
 800c508:	47c0      	blx	r8
 800c50a:	4306      	orrs	r6, r0
 800c50c:	3568      	adds	r5, #104	@ 0x68
 800c50e:	e7e9      	b.n	800c4e4 <_fwalk_sglue+0x10>

0800c510 <iprintf>:
 800c510:	b40f      	push	{r0, r1, r2, r3}
 800c512:	b507      	push	{r0, r1, r2, lr}
 800c514:	4906      	ldr	r1, [pc, #24]	@ (800c530 <iprintf+0x20>)
 800c516:	ab04      	add	r3, sp, #16
 800c518:	6808      	ldr	r0, [r1, #0]
 800c51a:	f853 2b04 	ldr.w	r2, [r3], #4
 800c51e:	6881      	ldr	r1, [r0, #8]
 800c520:	9301      	str	r3, [sp, #4]
 800c522:	f001 fcc3 	bl	800deac <_vfiprintf_r>
 800c526:	b003      	add	sp, #12
 800c528:	f85d eb04 	ldr.w	lr, [sp], #4
 800c52c:	b004      	add	sp, #16
 800c52e:	4770      	bx	lr
 800c530:	200001d0 	.word	0x200001d0

0800c534 <_puts_r>:
 800c534:	6a03      	ldr	r3, [r0, #32]
 800c536:	b570      	push	{r4, r5, r6, lr}
 800c538:	4605      	mov	r5, r0
 800c53a:	460e      	mov	r6, r1
 800c53c:	6884      	ldr	r4, [r0, #8]
 800c53e:	b90b      	cbnz	r3, 800c544 <_puts_r+0x10>
 800c540:	f7ff ffb0 	bl	800c4a4 <__sinit>
 800c544:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800c546:	07db      	lsls	r3, r3, #31
 800c548:	d405      	bmi.n	800c556 <_puts_r+0x22>
 800c54a:	89a3      	ldrh	r3, [r4, #12]
 800c54c:	0598      	lsls	r0, r3, #22
 800c54e:	d402      	bmi.n	800c556 <_puts_r+0x22>
 800c550:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800c552:	f000 f9a2 	bl	800c89a <__retarget_lock_acquire_recursive>
 800c556:	89a3      	ldrh	r3, [r4, #12]
 800c558:	0719      	lsls	r1, r3, #28
 800c55a:	d502      	bpl.n	800c562 <_puts_r+0x2e>
 800c55c:	6923      	ldr	r3, [r4, #16]
 800c55e:	2b00      	cmp	r3, #0
 800c560:	d135      	bne.n	800c5ce <_puts_r+0x9a>
 800c562:	4621      	mov	r1, r4
 800c564:	4628      	mov	r0, r5
 800c566:	f000 f8c5 	bl	800c6f4 <__swsetup_r>
 800c56a:	b380      	cbz	r0, 800c5ce <_puts_r+0x9a>
 800c56c:	f04f 35ff 	mov.w	r5, #4294967295
 800c570:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800c572:	07da      	lsls	r2, r3, #31
 800c574:	d405      	bmi.n	800c582 <_puts_r+0x4e>
 800c576:	89a3      	ldrh	r3, [r4, #12]
 800c578:	059b      	lsls	r3, r3, #22
 800c57a:	d402      	bmi.n	800c582 <_puts_r+0x4e>
 800c57c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800c57e:	f000 f98d 	bl	800c89c <__retarget_lock_release_recursive>
 800c582:	4628      	mov	r0, r5
 800c584:	bd70      	pop	{r4, r5, r6, pc}
 800c586:	2b00      	cmp	r3, #0
 800c588:	da04      	bge.n	800c594 <_puts_r+0x60>
 800c58a:	69a2      	ldr	r2, [r4, #24]
 800c58c:	429a      	cmp	r2, r3
 800c58e:	dc17      	bgt.n	800c5c0 <_puts_r+0x8c>
 800c590:	290a      	cmp	r1, #10
 800c592:	d015      	beq.n	800c5c0 <_puts_r+0x8c>
 800c594:	6823      	ldr	r3, [r4, #0]
 800c596:	1c5a      	adds	r2, r3, #1
 800c598:	6022      	str	r2, [r4, #0]
 800c59a:	7019      	strb	r1, [r3, #0]
 800c59c:	68a3      	ldr	r3, [r4, #8]
 800c59e:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800c5a2:	3b01      	subs	r3, #1
 800c5a4:	60a3      	str	r3, [r4, #8]
 800c5a6:	2900      	cmp	r1, #0
 800c5a8:	d1ed      	bne.n	800c586 <_puts_r+0x52>
 800c5aa:	2b00      	cmp	r3, #0
 800c5ac:	da11      	bge.n	800c5d2 <_puts_r+0x9e>
 800c5ae:	4622      	mov	r2, r4
 800c5b0:	210a      	movs	r1, #10
 800c5b2:	4628      	mov	r0, r5
 800c5b4:	f000 f85f 	bl	800c676 <__swbuf_r>
 800c5b8:	3001      	adds	r0, #1
 800c5ba:	d0d7      	beq.n	800c56c <_puts_r+0x38>
 800c5bc:	250a      	movs	r5, #10
 800c5be:	e7d7      	b.n	800c570 <_puts_r+0x3c>
 800c5c0:	4622      	mov	r2, r4
 800c5c2:	4628      	mov	r0, r5
 800c5c4:	f000 f857 	bl	800c676 <__swbuf_r>
 800c5c8:	3001      	adds	r0, #1
 800c5ca:	d1e7      	bne.n	800c59c <_puts_r+0x68>
 800c5cc:	e7ce      	b.n	800c56c <_puts_r+0x38>
 800c5ce:	3e01      	subs	r6, #1
 800c5d0:	e7e4      	b.n	800c59c <_puts_r+0x68>
 800c5d2:	6823      	ldr	r3, [r4, #0]
 800c5d4:	1c5a      	adds	r2, r3, #1
 800c5d6:	6022      	str	r2, [r4, #0]
 800c5d8:	220a      	movs	r2, #10
 800c5da:	701a      	strb	r2, [r3, #0]
 800c5dc:	e7ee      	b.n	800c5bc <_puts_r+0x88>
	...

0800c5e0 <puts>:
 800c5e0:	4b02      	ldr	r3, [pc, #8]	@ (800c5ec <puts+0xc>)
 800c5e2:	4601      	mov	r1, r0
 800c5e4:	6818      	ldr	r0, [r3, #0]
 800c5e6:	f7ff bfa5 	b.w	800c534 <_puts_r>
 800c5ea:	bf00      	nop
 800c5ec:	200001d0 	.word	0x200001d0

0800c5f0 <__sread>:
 800c5f0:	b510      	push	{r4, lr}
 800c5f2:	460c      	mov	r4, r1
 800c5f4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c5f8:	f000 f900 	bl	800c7fc <_read_r>
 800c5fc:	2800      	cmp	r0, #0
 800c5fe:	bfab      	itete	ge
 800c600:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800c602:	89a3      	ldrhlt	r3, [r4, #12]
 800c604:	181b      	addge	r3, r3, r0
 800c606:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800c60a:	bfac      	ite	ge
 800c60c:	6563      	strge	r3, [r4, #84]	@ 0x54
 800c60e:	81a3      	strhlt	r3, [r4, #12]
 800c610:	bd10      	pop	{r4, pc}

0800c612 <__swrite>:
 800c612:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c616:	461f      	mov	r7, r3
 800c618:	898b      	ldrh	r3, [r1, #12]
 800c61a:	4605      	mov	r5, r0
 800c61c:	05db      	lsls	r3, r3, #23
 800c61e:	460c      	mov	r4, r1
 800c620:	4616      	mov	r6, r2
 800c622:	d505      	bpl.n	800c630 <__swrite+0x1e>
 800c624:	2302      	movs	r3, #2
 800c626:	2200      	movs	r2, #0
 800c628:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c62c:	f000 f8d4 	bl	800c7d8 <_lseek_r>
 800c630:	89a3      	ldrh	r3, [r4, #12]
 800c632:	4632      	mov	r2, r6
 800c634:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800c638:	81a3      	strh	r3, [r4, #12]
 800c63a:	4628      	mov	r0, r5
 800c63c:	463b      	mov	r3, r7
 800c63e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c642:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c646:	f000 b8eb 	b.w	800c820 <_write_r>

0800c64a <__sseek>:
 800c64a:	b510      	push	{r4, lr}
 800c64c:	460c      	mov	r4, r1
 800c64e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c652:	f000 f8c1 	bl	800c7d8 <_lseek_r>
 800c656:	1c43      	adds	r3, r0, #1
 800c658:	89a3      	ldrh	r3, [r4, #12]
 800c65a:	bf15      	itete	ne
 800c65c:	6560      	strne	r0, [r4, #84]	@ 0x54
 800c65e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800c662:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800c666:	81a3      	strheq	r3, [r4, #12]
 800c668:	bf18      	it	ne
 800c66a:	81a3      	strhne	r3, [r4, #12]
 800c66c:	bd10      	pop	{r4, pc}

0800c66e <__sclose>:
 800c66e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c672:	f000 b8a1 	b.w	800c7b8 <_close_r>

0800c676 <__swbuf_r>:
 800c676:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c678:	460e      	mov	r6, r1
 800c67a:	4614      	mov	r4, r2
 800c67c:	4605      	mov	r5, r0
 800c67e:	b118      	cbz	r0, 800c688 <__swbuf_r+0x12>
 800c680:	6a03      	ldr	r3, [r0, #32]
 800c682:	b90b      	cbnz	r3, 800c688 <__swbuf_r+0x12>
 800c684:	f7ff ff0e 	bl	800c4a4 <__sinit>
 800c688:	69a3      	ldr	r3, [r4, #24]
 800c68a:	60a3      	str	r3, [r4, #8]
 800c68c:	89a3      	ldrh	r3, [r4, #12]
 800c68e:	071a      	lsls	r2, r3, #28
 800c690:	d501      	bpl.n	800c696 <__swbuf_r+0x20>
 800c692:	6923      	ldr	r3, [r4, #16]
 800c694:	b943      	cbnz	r3, 800c6a8 <__swbuf_r+0x32>
 800c696:	4621      	mov	r1, r4
 800c698:	4628      	mov	r0, r5
 800c69a:	f000 f82b 	bl	800c6f4 <__swsetup_r>
 800c69e:	b118      	cbz	r0, 800c6a8 <__swbuf_r+0x32>
 800c6a0:	f04f 37ff 	mov.w	r7, #4294967295
 800c6a4:	4638      	mov	r0, r7
 800c6a6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c6a8:	6823      	ldr	r3, [r4, #0]
 800c6aa:	6922      	ldr	r2, [r4, #16]
 800c6ac:	b2f6      	uxtb	r6, r6
 800c6ae:	1a98      	subs	r0, r3, r2
 800c6b0:	6963      	ldr	r3, [r4, #20]
 800c6b2:	4637      	mov	r7, r6
 800c6b4:	4283      	cmp	r3, r0
 800c6b6:	dc05      	bgt.n	800c6c4 <__swbuf_r+0x4e>
 800c6b8:	4621      	mov	r1, r4
 800c6ba:	4628      	mov	r0, r5
 800c6bc:	f001 fd8e 	bl	800e1dc <_fflush_r>
 800c6c0:	2800      	cmp	r0, #0
 800c6c2:	d1ed      	bne.n	800c6a0 <__swbuf_r+0x2a>
 800c6c4:	68a3      	ldr	r3, [r4, #8]
 800c6c6:	3b01      	subs	r3, #1
 800c6c8:	60a3      	str	r3, [r4, #8]
 800c6ca:	6823      	ldr	r3, [r4, #0]
 800c6cc:	1c5a      	adds	r2, r3, #1
 800c6ce:	6022      	str	r2, [r4, #0]
 800c6d0:	701e      	strb	r6, [r3, #0]
 800c6d2:	6962      	ldr	r2, [r4, #20]
 800c6d4:	1c43      	adds	r3, r0, #1
 800c6d6:	429a      	cmp	r2, r3
 800c6d8:	d004      	beq.n	800c6e4 <__swbuf_r+0x6e>
 800c6da:	89a3      	ldrh	r3, [r4, #12]
 800c6dc:	07db      	lsls	r3, r3, #31
 800c6de:	d5e1      	bpl.n	800c6a4 <__swbuf_r+0x2e>
 800c6e0:	2e0a      	cmp	r6, #10
 800c6e2:	d1df      	bne.n	800c6a4 <__swbuf_r+0x2e>
 800c6e4:	4621      	mov	r1, r4
 800c6e6:	4628      	mov	r0, r5
 800c6e8:	f001 fd78 	bl	800e1dc <_fflush_r>
 800c6ec:	2800      	cmp	r0, #0
 800c6ee:	d0d9      	beq.n	800c6a4 <__swbuf_r+0x2e>
 800c6f0:	e7d6      	b.n	800c6a0 <__swbuf_r+0x2a>
	...

0800c6f4 <__swsetup_r>:
 800c6f4:	b538      	push	{r3, r4, r5, lr}
 800c6f6:	4b29      	ldr	r3, [pc, #164]	@ (800c79c <__swsetup_r+0xa8>)
 800c6f8:	4605      	mov	r5, r0
 800c6fa:	6818      	ldr	r0, [r3, #0]
 800c6fc:	460c      	mov	r4, r1
 800c6fe:	b118      	cbz	r0, 800c708 <__swsetup_r+0x14>
 800c700:	6a03      	ldr	r3, [r0, #32]
 800c702:	b90b      	cbnz	r3, 800c708 <__swsetup_r+0x14>
 800c704:	f7ff fece 	bl	800c4a4 <__sinit>
 800c708:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c70c:	0719      	lsls	r1, r3, #28
 800c70e:	d422      	bmi.n	800c756 <__swsetup_r+0x62>
 800c710:	06da      	lsls	r2, r3, #27
 800c712:	d407      	bmi.n	800c724 <__swsetup_r+0x30>
 800c714:	2209      	movs	r2, #9
 800c716:	602a      	str	r2, [r5, #0]
 800c718:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c71c:	f04f 30ff 	mov.w	r0, #4294967295
 800c720:	81a3      	strh	r3, [r4, #12]
 800c722:	e033      	b.n	800c78c <__swsetup_r+0x98>
 800c724:	0758      	lsls	r0, r3, #29
 800c726:	d512      	bpl.n	800c74e <__swsetup_r+0x5a>
 800c728:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800c72a:	b141      	cbz	r1, 800c73e <__swsetup_r+0x4a>
 800c72c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800c730:	4299      	cmp	r1, r3
 800c732:	d002      	beq.n	800c73a <__swsetup_r+0x46>
 800c734:	4628      	mov	r0, r5
 800c736:	f000 ff13 	bl	800d560 <_free_r>
 800c73a:	2300      	movs	r3, #0
 800c73c:	6363      	str	r3, [r4, #52]	@ 0x34
 800c73e:	89a3      	ldrh	r3, [r4, #12]
 800c740:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800c744:	81a3      	strh	r3, [r4, #12]
 800c746:	2300      	movs	r3, #0
 800c748:	6063      	str	r3, [r4, #4]
 800c74a:	6923      	ldr	r3, [r4, #16]
 800c74c:	6023      	str	r3, [r4, #0]
 800c74e:	89a3      	ldrh	r3, [r4, #12]
 800c750:	f043 0308 	orr.w	r3, r3, #8
 800c754:	81a3      	strh	r3, [r4, #12]
 800c756:	6923      	ldr	r3, [r4, #16]
 800c758:	b94b      	cbnz	r3, 800c76e <__swsetup_r+0x7a>
 800c75a:	89a3      	ldrh	r3, [r4, #12]
 800c75c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800c760:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800c764:	d003      	beq.n	800c76e <__swsetup_r+0x7a>
 800c766:	4621      	mov	r1, r4
 800c768:	4628      	mov	r0, r5
 800c76a:	f001 fd84 	bl	800e276 <__smakebuf_r>
 800c76e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c772:	f013 0201 	ands.w	r2, r3, #1
 800c776:	d00a      	beq.n	800c78e <__swsetup_r+0x9a>
 800c778:	2200      	movs	r2, #0
 800c77a:	60a2      	str	r2, [r4, #8]
 800c77c:	6962      	ldr	r2, [r4, #20]
 800c77e:	4252      	negs	r2, r2
 800c780:	61a2      	str	r2, [r4, #24]
 800c782:	6922      	ldr	r2, [r4, #16]
 800c784:	b942      	cbnz	r2, 800c798 <__swsetup_r+0xa4>
 800c786:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800c78a:	d1c5      	bne.n	800c718 <__swsetup_r+0x24>
 800c78c:	bd38      	pop	{r3, r4, r5, pc}
 800c78e:	0799      	lsls	r1, r3, #30
 800c790:	bf58      	it	pl
 800c792:	6962      	ldrpl	r2, [r4, #20]
 800c794:	60a2      	str	r2, [r4, #8]
 800c796:	e7f4      	b.n	800c782 <__swsetup_r+0x8e>
 800c798:	2000      	movs	r0, #0
 800c79a:	e7f7      	b.n	800c78c <__swsetup_r+0x98>
 800c79c:	200001d0 	.word	0x200001d0

0800c7a0 <memset>:
 800c7a0:	4603      	mov	r3, r0
 800c7a2:	4402      	add	r2, r0
 800c7a4:	4293      	cmp	r3, r2
 800c7a6:	d100      	bne.n	800c7aa <memset+0xa>
 800c7a8:	4770      	bx	lr
 800c7aa:	f803 1b01 	strb.w	r1, [r3], #1
 800c7ae:	e7f9      	b.n	800c7a4 <memset+0x4>

0800c7b0 <_localeconv_r>:
 800c7b0:	4800      	ldr	r0, [pc, #0]	@ (800c7b4 <_localeconv_r+0x4>)
 800c7b2:	4770      	bx	lr
 800c7b4:	20000310 	.word	0x20000310

0800c7b8 <_close_r>:
 800c7b8:	b538      	push	{r3, r4, r5, lr}
 800c7ba:	2300      	movs	r3, #0
 800c7bc:	4d05      	ldr	r5, [pc, #20]	@ (800c7d4 <_close_r+0x1c>)
 800c7be:	4604      	mov	r4, r0
 800c7c0:	4608      	mov	r0, r1
 800c7c2:	602b      	str	r3, [r5, #0]
 800c7c4:	f7f5 f9d9 	bl	8001b7a <_close>
 800c7c8:	1c43      	adds	r3, r0, #1
 800c7ca:	d102      	bne.n	800c7d2 <_close_r+0x1a>
 800c7cc:	682b      	ldr	r3, [r5, #0]
 800c7ce:	b103      	cbz	r3, 800c7d2 <_close_r+0x1a>
 800c7d0:	6023      	str	r3, [r4, #0]
 800c7d2:	bd38      	pop	{r3, r4, r5, pc}
 800c7d4:	20000770 	.word	0x20000770

0800c7d8 <_lseek_r>:
 800c7d8:	b538      	push	{r3, r4, r5, lr}
 800c7da:	4604      	mov	r4, r0
 800c7dc:	4608      	mov	r0, r1
 800c7de:	4611      	mov	r1, r2
 800c7e0:	2200      	movs	r2, #0
 800c7e2:	4d05      	ldr	r5, [pc, #20]	@ (800c7f8 <_lseek_r+0x20>)
 800c7e4:	602a      	str	r2, [r5, #0]
 800c7e6:	461a      	mov	r2, r3
 800c7e8:	f7f5 f9eb 	bl	8001bc2 <_lseek>
 800c7ec:	1c43      	adds	r3, r0, #1
 800c7ee:	d102      	bne.n	800c7f6 <_lseek_r+0x1e>
 800c7f0:	682b      	ldr	r3, [r5, #0]
 800c7f2:	b103      	cbz	r3, 800c7f6 <_lseek_r+0x1e>
 800c7f4:	6023      	str	r3, [r4, #0]
 800c7f6:	bd38      	pop	{r3, r4, r5, pc}
 800c7f8:	20000770 	.word	0x20000770

0800c7fc <_read_r>:
 800c7fc:	b538      	push	{r3, r4, r5, lr}
 800c7fe:	4604      	mov	r4, r0
 800c800:	4608      	mov	r0, r1
 800c802:	4611      	mov	r1, r2
 800c804:	2200      	movs	r2, #0
 800c806:	4d05      	ldr	r5, [pc, #20]	@ (800c81c <_read_r+0x20>)
 800c808:	602a      	str	r2, [r5, #0]
 800c80a:	461a      	mov	r2, r3
 800c80c:	f7f5 f97c 	bl	8001b08 <_read>
 800c810:	1c43      	adds	r3, r0, #1
 800c812:	d102      	bne.n	800c81a <_read_r+0x1e>
 800c814:	682b      	ldr	r3, [r5, #0]
 800c816:	b103      	cbz	r3, 800c81a <_read_r+0x1e>
 800c818:	6023      	str	r3, [r4, #0]
 800c81a:	bd38      	pop	{r3, r4, r5, pc}
 800c81c:	20000770 	.word	0x20000770

0800c820 <_write_r>:
 800c820:	b538      	push	{r3, r4, r5, lr}
 800c822:	4604      	mov	r4, r0
 800c824:	4608      	mov	r0, r1
 800c826:	4611      	mov	r1, r2
 800c828:	2200      	movs	r2, #0
 800c82a:	4d05      	ldr	r5, [pc, #20]	@ (800c840 <_write_r+0x20>)
 800c82c:	602a      	str	r2, [r5, #0]
 800c82e:	461a      	mov	r2, r3
 800c830:	f7f5 f987 	bl	8001b42 <_write>
 800c834:	1c43      	adds	r3, r0, #1
 800c836:	d102      	bne.n	800c83e <_write_r+0x1e>
 800c838:	682b      	ldr	r3, [r5, #0]
 800c83a:	b103      	cbz	r3, 800c83e <_write_r+0x1e>
 800c83c:	6023      	str	r3, [r4, #0]
 800c83e:	bd38      	pop	{r3, r4, r5, pc}
 800c840:	20000770 	.word	0x20000770

0800c844 <__errno>:
 800c844:	4b01      	ldr	r3, [pc, #4]	@ (800c84c <__errno+0x8>)
 800c846:	6818      	ldr	r0, [r3, #0]
 800c848:	4770      	bx	lr
 800c84a:	bf00      	nop
 800c84c:	200001d0 	.word	0x200001d0

0800c850 <__libc_init_array>:
 800c850:	b570      	push	{r4, r5, r6, lr}
 800c852:	2600      	movs	r6, #0
 800c854:	4d0c      	ldr	r5, [pc, #48]	@ (800c888 <__libc_init_array+0x38>)
 800c856:	4c0d      	ldr	r4, [pc, #52]	@ (800c88c <__libc_init_array+0x3c>)
 800c858:	1b64      	subs	r4, r4, r5
 800c85a:	10a4      	asrs	r4, r4, #2
 800c85c:	42a6      	cmp	r6, r4
 800c85e:	d109      	bne.n	800c874 <__libc_init_array+0x24>
 800c860:	f001 fe36 	bl	800e4d0 <_init>
 800c864:	2600      	movs	r6, #0
 800c866:	4d0a      	ldr	r5, [pc, #40]	@ (800c890 <__libc_init_array+0x40>)
 800c868:	4c0a      	ldr	r4, [pc, #40]	@ (800c894 <__libc_init_array+0x44>)
 800c86a:	1b64      	subs	r4, r4, r5
 800c86c:	10a4      	asrs	r4, r4, #2
 800c86e:	42a6      	cmp	r6, r4
 800c870:	d105      	bne.n	800c87e <__libc_init_array+0x2e>
 800c872:	bd70      	pop	{r4, r5, r6, pc}
 800c874:	f855 3b04 	ldr.w	r3, [r5], #4
 800c878:	4798      	blx	r3
 800c87a:	3601      	adds	r6, #1
 800c87c:	e7ee      	b.n	800c85c <__libc_init_array+0xc>
 800c87e:	f855 3b04 	ldr.w	r3, [r5], #4
 800c882:	4798      	blx	r3
 800c884:	3601      	adds	r6, #1
 800c886:	e7f2      	b.n	800c86e <__libc_init_array+0x1e>
 800c888:	0800e900 	.word	0x0800e900
 800c88c:	0800e900 	.word	0x0800e900
 800c890:	0800e900 	.word	0x0800e900
 800c894:	0800e904 	.word	0x0800e904

0800c898 <__retarget_lock_init_recursive>:
 800c898:	4770      	bx	lr

0800c89a <__retarget_lock_acquire_recursive>:
 800c89a:	4770      	bx	lr

0800c89c <__retarget_lock_release_recursive>:
 800c89c:	4770      	bx	lr

0800c89e <memchr>:
 800c89e:	4603      	mov	r3, r0
 800c8a0:	b510      	push	{r4, lr}
 800c8a2:	b2c9      	uxtb	r1, r1
 800c8a4:	4402      	add	r2, r0
 800c8a6:	4293      	cmp	r3, r2
 800c8a8:	4618      	mov	r0, r3
 800c8aa:	d101      	bne.n	800c8b0 <memchr+0x12>
 800c8ac:	2000      	movs	r0, #0
 800c8ae:	e003      	b.n	800c8b8 <memchr+0x1a>
 800c8b0:	7804      	ldrb	r4, [r0, #0]
 800c8b2:	3301      	adds	r3, #1
 800c8b4:	428c      	cmp	r4, r1
 800c8b6:	d1f6      	bne.n	800c8a6 <memchr+0x8>
 800c8b8:	bd10      	pop	{r4, pc}

0800c8ba <quorem>:
 800c8ba:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c8be:	6903      	ldr	r3, [r0, #16]
 800c8c0:	690c      	ldr	r4, [r1, #16]
 800c8c2:	4607      	mov	r7, r0
 800c8c4:	42a3      	cmp	r3, r4
 800c8c6:	db7e      	blt.n	800c9c6 <quorem+0x10c>
 800c8c8:	3c01      	subs	r4, #1
 800c8ca:	00a3      	lsls	r3, r4, #2
 800c8cc:	f100 0514 	add.w	r5, r0, #20
 800c8d0:	f101 0814 	add.w	r8, r1, #20
 800c8d4:	9300      	str	r3, [sp, #0]
 800c8d6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800c8da:	9301      	str	r3, [sp, #4]
 800c8dc:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800c8e0:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800c8e4:	3301      	adds	r3, #1
 800c8e6:	429a      	cmp	r2, r3
 800c8e8:	fbb2 f6f3 	udiv	r6, r2, r3
 800c8ec:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800c8f0:	d32e      	bcc.n	800c950 <quorem+0x96>
 800c8f2:	f04f 0a00 	mov.w	sl, #0
 800c8f6:	46c4      	mov	ip, r8
 800c8f8:	46ae      	mov	lr, r5
 800c8fa:	46d3      	mov	fp, sl
 800c8fc:	f85c 3b04 	ldr.w	r3, [ip], #4
 800c900:	b298      	uxth	r0, r3
 800c902:	fb06 a000 	mla	r0, r6, r0, sl
 800c906:	0c1b      	lsrs	r3, r3, #16
 800c908:	0c02      	lsrs	r2, r0, #16
 800c90a:	fb06 2303 	mla	r3, r6, r3, r2
 800c90e:	f8de 2000 	ldr.w	r2, [lr]
 800c912:	b280      	uxth	r0, r0
 800c914:	b292      	uxth	r2, r2
 800c916:	1a12      	subs	r2, r2, r0
 800c918:	445a      	add	r2, fp
 800c91a:	f8de 0000 	ldr.w	r0, [lr]
 800c91e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800c922:	b29b      	uxth	r3, r3
 800c924:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800c928:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800c92c:	b292      	uxth	r2, r2
 800c92e:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800c932:	45e1      	cmp	r9, ip
 800c934:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800c938:	f84e 2b04 	str.w	r2, [lr], #4
 800c93c:	d2de      	bcs.n	800c8fc <quorem+0x42>
 800c93e:	9b00      	ldr	r3, [sp, #0]
 800c940:	58eb      	ldr	r3, [r5, r3]
 800c942:	b92b      	cbnz	r3, 800c950 <quorem+0x96>
 800c944:	9b01      	ldr	r3, [sp, #4]
 800c946:	3b04      	subs	r3, #4
 800c948:	429d      	cmp	r5, r3
 800c94a:	461a      	mov	r2, r3
 800c94c:	d32f      	bcc.n	800c9ae <quorem+0xf4>
 800c94e:	613c      	str	r4, [r7, #16]
 800c950:	4638      	mov	r0, r7
 800c952:	f001 f97b 	bl	800dc4c <__mcmp>
 800c956:	2800      	cmp	r0, #0
 800c958:	db25      	blt.n	800c9a6 <quorem+0xec>
 800c95a:	4629      	mov	r1, r5
 800c95c:	2000      	movs	r0, #0
 800c95e:	f858 2b04 	ldr.w	r2, [r8], #4
 800c962:	f8d1 c000 	ldr.w	ip, [r1]
 800c966:	fa1f fe82 	uxth.w	lr, r2
 800c96a:	fa1f f38c 	uxth.w	r3, ip
 800c96e:	eba3 030e 	sub.w	r3, r3, lr
 800c972:	4403      	add	r3, r0
 800c974:	0c12      	lsrs	r2, r2, #16
 800c976:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800c97a:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800c97e:	b29b      	uxth	r3, r3
 800c980:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800c984:	45c1      	cmp	r9, r8
 800c986:	ea4f 4022 	mov.w	r0, r2, asr #16
 800c98a:	f841 3b04 	str.w	r3, [r1], #4
 800c98e:	d2e6      	bcs.n	800c95e <quorem+0xa4>
 800c990:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800c994:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800c998:	b922      	cbnz	r2, 800c9a4 <quorem+0xea>
 800c99a:	3b04      	subs	r3, #4
 800c99c:	429d      	cmp	r5, r3
 800c99e:	461a      	mov	r2, r3
 800c9a0:	d30b      	bcc.n	800c9ba <quorem+0x100>
 800c9a2:	613c      	str	r4, [r7, #16]
 800c9a4:	3601      	adds	r6, #1
 800c9a6:	4630      	mov	r0, r6
 800c9a8:	b003      	add	sp, #12
 800c9aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c9ae:	6812      	ldr	r2, [r2, #0]
 800c9b0:	3b04      	subs	r3, #4
 800c9b2:	2a00      	cmp	r2, #0
 800c9b4:	d1cb      	bne.n	800c94e <quorem+0x94>
 800c9b6:	3c01      	subs	r4, #1
 800c9b8:	e7c6      	b.n	800c948 <quorem+0x8e>
 800c9ba:	6812      	ldr	r2, [r2, #0]
 800c9bc:	3b04      	subs	r3, #4
 800c9be:	2a00      	cmp	r2, #0
 800c9c0:	d1ef      	bne.n	800c9a2 <quorem+0xe8>
 800c9c2:	3c01      	subs	r4, #1
 800c9c4:	e7ea      	b.n	800c99c <quorem+0xe2>
 800c9c6:	2000      	movs	r0, #0
 800c9c8:	e7ee      	b.n	800c9a8 <quorem+0xee>
 800c9ca:	0000      	movs	r0, r0
 800c9cc:	0000      	movs	r0, r0
	...

0800c9d0 <_dtoa_r>:
 800c9d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c9d4:	4614      	mov	r4, r2
 800c9d6:	461d      	mov	r5, r3
 800c9d8:	69c7      	ldr	r7, [r0, #28]
 800c9da:	b097      	sub	sp, #92	@ 0x5c
 800c9dc:	4683      	mov	fp, r0
 800c9de:	e9cd 4502 	strd	r4, r5, [sp, #8]
 800c9e2:	9e23      	ldr	r6, [sp, #140]	@ 0x8c
 800c9e4:	b97f      	cbnz	r7, 800ca06 <_dtoa_r+0x36>
 800c9e6:	2010      	movs	r0, #16
 800c9e8:	f000 fe02 	bl	800d5f0 <malloc>
 800c9ec:	4602      	mov	r2, r0
 800c9ee:	f8cb 001c 	str.w	r0, [fp, #28]
 800c9f2:	b920      	cbnz	r0, 800c9fe <_dtoa_r+0x2e>
 800c9f4:	21ef      	movs	r1, #239	@ 0xef
 800c9f6:	4ba8      	ldr	r3, [pc, #672]	@ (800cc98 <_dtoa_r+0x2c8>)
 800c9f8:	48a8      	ldr	r0, [pc, #672]	@ (800cc9c <_dtoa_r+0x2cc>)
 800c9fa:	f001 fcb9 	bl	800e370 <__assert_func>
 800c9fe:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800ca02:	6007      	str	r7, [r0, #0]
 800ca04:	60c7      	str	r7, [r0, #12]
 800ca06:	f8db 301c 	ldr.w	r3, [fp, #28]
 800ca0a:	6819      	ldr	r1, [r3, #0]
 800ca0c:	b159      	cbz	r1, 800ca26 <_dtoa_r+0x56>
 800ca0e:	685a      	ldr	r2, [r3, #4]
 800ca10:	2301      	movs	r3, #1
 800ca12:	4093      	lsls	r3, r2
 800ca14:	604a      	str	r2, [r1, #4]
 800ca16:	608b      	str	r3, [r1, #8]
 800ca18:	4658      	mov	r0, fp
 800ca1a:	f000 fedf 	bl	800d7dc <_Bfree>
 800ca1e:	2200      	movs	r2, #0
 800ca20:	f8db 301c 	ldr.w	r3, [fp, #28]
 800ca24:	601a      	str	r2, [r3, #0]
 800ca26:	1e2b      	subs	r3, r5, #0
 800ca28:	bfaf      	iteee	ge
 800ca2a:	2300      	movge	r3, #0
 800ca2c:	2201      	movlt	r2, #1
 800ca2e:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800ca32:	9303      	strlt	r3, [sp, #12]
 800ca34:	bfa8      	it	ge
 800ca36:	6033      	strge	r3, [r6, #0]
 800ca38:	f8dd 800c 	ldr.w	r8, [sp, #12]
 800ca3c:	4b98      	ldr	r3, [pc, #608]	@ (800cca0 <_dtoa_r+0x2d0>)
 800ca3e:	bfb8      	it	lt
 800ca40:	6032      	strlt	r2, [r6, #0]
 800ca42:	ea33 0308 	bics.w	r3, r3, r8
 800ca46:	d112      	bne.n	800ca6e <_dtoa_r+0x9e>
 800ca48:	f242 730f 	movw	r3, #9999	@ 0x270f
 800ca4c:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 800ca4e:	6013      	str	r3, [r2, #0]
 800ca50:	f3c8 0313 	ubfx	r3, r8, #0, #20
 800ca54:	4323      	orrs	r3, r4
 800ca56:	f000 8550 	beq.w	800d4fa <_dtoa_r+0xb2a>
 800ca5a:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 800ca5c:	f8df a244 	ldr.w	sl, [pc, #580]	@ 800cca4 <_dtoa_r+0x2d4>
 800ca60:	2b00      	cmp	r3, #0
 800ca62:	f000 8552 	beq.w	800d50a <_dtoa_r+0xb3a>
 800ca66:	f10a 0303 	add.w	r3, sl, #3
 800ca6a:	f000 bd4c 	b.w	800d506 <_dtoa_r+0xb36>
 800ca6e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800ca72:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 800ca76:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800ca7a:	2200      	movs	r2, #0
 800ca7c:	2300      	movs	r3, #0
 800ca7e:	f7f3 ffab 	bl	80009d8 <__aeabi_dcmpeq>
 800ca82:	4607      	mov	r7, r0
 800ca84:	b158      	cbz	r0, 800ca9e <_dtoa_r+0xce>
 800ca86:	2301      	movs	r3, #1
 800ca88:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 800ca8a:	6013      	str	r3, [r2, #0]
 800ca8c:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 800ca8e:	b113      	cbz	r3, 800ca96 <_dtoa_r+0xc6>
 800ca90:	4b85      	ldr	r3, [pc, #532]	@ (800cca8 <_dtoa_r+0x2d8>)
 800ca92:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 800ca94:	6013      	str	r3, [r2, #0]
 800ca96:	f8df a214 	ldr.w	sl, [pc, #532]	@ 800ccac <_dtoa_r+0x2dc>
 800ca9a:	f000 bd36 	b.w	800d50a <_dtoa_r+0xb3a>
 800ca9e:	ab14      	add	r3, sp, #80	@ 0x50
 800caa0:	9301      	str	r3, [sp, #4]
 800caa2:	ab15      	add	r3, sp, #84	@ 0x54
 800caa4:	9300      	str	r3, [sp, #0]
 800caa6:	4658      	mov	r0, fp
 800caa8:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800caac:	f001 f97e 	bl	800ddac <__d2b>
 800cab0:	f3c8 560a 	ubfx	r6, r8, #20, #11
 800cab4:	4681      	mov	r9, r0
 800cab6:	2e00      	cmp	r6, #0
 800cab8:	d077      	beq.n	800cbaa <_dtoa_r+0x1da>
 800caba:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800cabe:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800cac0:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800cac4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800cac8:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800cacc:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800cad0:	9712      	str	r7, [sp, #72]	@ 0x48
 800cad2:	4619      	mov	r1, r3
 800cad4:	2200      	movs	r2, #0
 800cad6:	4b76      	ldr	r3, [pc, #472]	@ (800ccb0 <_dtoa_r+0x2e0>)
 800cad8:	f7f3 fb5e 	bl	8000198 <__aeabi_dsub>
 800cadc:	a368      	add	r3, pc, #416	@ (adr r3, 800cc80 <_dtoa_r+0x2b0>)
 800cade:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cae2:	f7f3 fd11 	bl	8000508 <__aeabi_dmul>
 800cae6:	a368      	add	r3, pc, #416	@ (adr r3, 800cc88 <_dtoa_r+0x2b8>)
 800cae8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800caec:	f7f3 fb56 	bl	800019c <__adddf3>
 800caf0:	4604      	mov	r4, r0
 800caf2:	4630      	mov	r0, r6
 800caf4:	460d      	mov	r5, r1
 800caf6:	f7f3 fc9d 	bl	8000434 <__aeabi_i2d>
 800cafa:	a365      	add	r3, pc, #404	@ (adr r3, 800cc90 <_dtoa_r+0x2c0>)
 800cafc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cb00:	f7f3 fd02 	bl	8000508 <__aeabi_dmul>
 800cb04:	4602      	mov	r2, r0
 800cb06:	460b      	mov	r3, r1
 800cb08:	4620      	mov	r0, r4
 800cb0a:	4629      	mov	r1, r5
 800cb0c:	f7f3 fb46 	bl	800019c <__adddf3>
 800cb10:	4604      	mov	r4, r0
 800cb12:	460d      	mov	r5, r1
 800cb14:	f7f3 ffa8 	bl	8000a68 <__aeabi_d2iz>
 800cb18:	2200      	movs	r2, #0
 800cb1a:	4607      	mov	r7, r0
 800cb1c:	2300      	movs	r3, #0
 800cb1e:	4620      	mov	r0, r4
 800cb20:	4629      	mov	r1, r5
 800cb22:	f7f3 ff63 	bl	80009ec <__aeabi_dcmplt>
 800cb26:	b140      	cbz	r0, 800cb3a <_dtoa_r+0x16a>
 800cb28:	4638      	mov	r0, r7
 800cb2a:	f7f3 fc83 	bl	8000434 <__aeabi_i2d>
 800cb2e:	4622      	mov	r2, r4
 800cb30:	462b      	mov	r3, r5
 800cb32:	f7f3 ff51 	bl	80009d8 <__aeabi_dcmpeq>
 800cb36:	b900      	cbnz	r0, 800cb3a <_dtoa_r+0x16a>
 800cb38:	3f01      	subs	r7, #1
 800cb3a:	2f16      	cmp	r7, #22
 800cb3c:	d853      	bhi.n	800cbe6 <_dtoa_r+0x216>
 800cb3e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800cb42:	4b5c      	ldr	r3, [pc, #368]	@ (800ccb4 <_dtoa_r+0x2e4>)
 800cb44:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800cb48:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cb4c:	f7f3 ff4e 	bl	80009ec <__aeabi_dcmplt>
 800cb50:	2800      	cmp	r0, #0
 800cb52:	d04a      	beq.n	800cbea <_dtoa_r+0x21a>
 800cb54:	2300      	movs	r3, #0
 800cb56:	3f01      	subs	r7, #1
 800cb58:	930f      	str	r3, [sp, #60]	@ 0x3c
 800cb5a:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800cb5c:	1b9b      	subs	r3, r3, r6
 800cb5e:	1e5a      	subs	r2, r3, #1
 800cb60:	bf46      	itte	mi
 800cb62:	f1c3 0801 	rsbmi	r8, r3, #1
 800cb66:	2300      	movmi	r3, #0
 800cb68:	f04f 0800 	movpl.w	r8, #0
 800cb6c:	9209      	str	r2, [sp, #36]	@ 0x24
 800cb6e:	bf48      	it	mi
 800cb70:	9309      	strmi	r3, [sp, #36]	@ 0x24
 800cb72:	2f00      	cmp	r7, #0
 800cb74:	db3b      	blt.n	800cbee <_dtoa_r+0x21e>
 800cb76:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800cb78:	970e      	str	r7, [sp, #56]	@ 0x38
 800cb7a:	443b      	add	r3, r7
 800cb7c:	9309      	str	r3, [sp, #36]	@ 0x24
 800cb7e:	2300      	movs	r3, #0
 800cb80:	930a      	str	r3, [sp, #40]	@ 0x28
 800cb82:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800cb84:	2b09      	cmp	r3, #9
 800cb86:	d866      	bhi.n	800cc56 <_dtoa_r+0x286>
 800cb88:	2b05      	cmp	r3, #5
 800cb8a:	bfc4      	itt	gt
 800cb8c:	3b04      	subgt	r3, #4
 800cb8e:	9320      	strgt	r3, [sp, #128]	@ 0x80
 800cb90:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800cb92:	bfc8      	it	gt
 800cb94:	2400      	movgt	r4, #0
 800cb96:	f1a3 0302 	sub.w	r3, r3, #2
 800cb9a:	bfd8      	it	le
 800cb9c:	2401      	movle	r4, #1
 800cb9e:	2b03      	cmp	r3, #3
 800cba0:	d864      	bhi.n	800cc6c <_dtoa_r+0x29c>
 800cba2:	e8df f003 	tbb	[pc, r3]
 800cba6:	382b      	.short	0x382b
 800cba8:	5636      	.short	0x5636
 800cbaa:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 800cbae:	441e      	add	r6, r3
 800cbb0:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800cbb4:	2b20      	cmp	r3, #32
 800cbb6:	bfc1      	itttt	gt
 800cbb8:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800cbbc:	fa08 f803 	lslgt.w	r8, r8, r3
 800cbc0:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800cbc4:	fa24 f303 	lsrgt.w	r3, r4, r3
 800cbc8:	bfd6      	itet	le
 800cbca:	f1c3 0320 	rsble	r3, r3, #32
 800cbce:	ea48 0003 	orrgt.w	r0, r8, r3
 800cbd2:	fa04 f003 	lslle.w	r0, r4, r3
 800cbd6:	f7f3 fc1d 	bl	8000414 <__aeabi_ui2d>
 800cbda:	2201      	movs	r2, #1
 800cbdc:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800cbe0:	3e01      	subs	r6, #1
 800cbe2:	9212      	str	r2, [sp, #72]	@ 0x48
 800cbe4:	e775      	b.n	800cad2 <_dtoa_r+0x102>
 800cbe6:	2301      	movs	r3, #1
 800cbe8:	e7b6      	b.n	800cb58 <_dtoa_r+0x188>
 800cbea:	900f      	str	r0, [sp, #60]	@ 0x3c
 800cbec:	e7b5      	b.n	800cb5a <_dtoa_r+0x18a>
 800cbee:	427b      	negs	r3, r7
 800cbf0:	930a      	str	r3, [sp, #40]	@ 0x28
 800cbf2:	2300      	movs	r3, #0
 800cbf4:	eba8 0807 	sub.w	r8, r8, r7
 800cbf8:	930e      	str	r3, [sp, #56]	@ 0x38
 800cbfa:	e7c2      	b.n	800cb82 <_dtoa_r+0x1b2>
 800cbfc:	2300      	movs	r3, #0
 800cbfe:	930b      	str	r3, [sp, #44]	@ 0x2c
 800cc00:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800cc02:	2b00      	cmp	r3, #0
 800cc04:	dc35      	bgt.n	800cc72 <_dtoa_r+0x2a2>
 800cc06:	2301      	movs	r3, #1
 800cc08:	461a      	mov	r2, r3
 800cc0a:	e9cd 3307 	strd	r3, r3, [sp, #28]
 800cc0e:	9221      	str	r2, [sp, #132]	@ 0x84
 800cc10:	e00b      	b.n	800cc2a <_dtoa_r+0x25a>
 800cc12:	2301      	movs	r3, #1
 800cc14:	e7f3      	b.n	800cbfe <_dtoa_r+0x22e>
 800cc16:	2300      	movs	r3, #0
 800cc18:	930b      	str	r3, [sp, #44]	@ 0x2c
 800cc1a:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800cc1c:	18fb      	adds	r3, r7, r3
 800cc1e:	9308      	str	r3, [sp, #32]
 800cc20:	3301      	adds	r3, #1
 800cc22:	2b01      	cmp	r3, #1
 800cc24:	9307      	str	r3, [sp, #28]
 800cc26:	bfb8      	it	lt
 800cc28:	2301      	movlt	r3, #1
 800cc2a:	2100      	movs	r1, #0
 800cc2c:	2204      	movs	r2, #4
 800cc2e:	f8db 001c 	ldr.w	r0, [fp, #28]
 800cc32:	f102 0514 	add.w	r5, r2, #20
 800cc36:	429d      	cmp	r5, r3
 800cc38:	d91f      	bls.n	800cc7a <_dtoa_r+0x2aa>
 800cc3a:	6041      	str	r1, [r0, #4]
 800cc3c:	4658      	mov	r0, fp
 800cc3e:	f000 fd8d 	bl	800d75c <_Balloc>
 800cc42:	4682      	mov	sl, r0
 800cc44:	2800      	cmp	r0, #0
 800cc46:	d139      	bne.n	800ccbc <_dtoa_r+0x2ec>
 800cc48:	4602      	mov	r2, r0
 800cc4a:	f240 11af 	movw	r1, #431	@ 0x1af
 800cc4e:	4b1a      	ldr	r3, [pc, #104]	@ (800ccb8 <_dtoa_r+0x2e8>)
 800cc50:	e6d2      	b.n	800c9f8 <_dtoa_r+0x28>
 800cc52:	2301      	movs	r3, #1
 800cc54:	e7e0      	b.n	800cc18 <_dtoa_r+0x248>
 800cc56:	2401      	movs	r4, #1
 800cc58:	2300      	movs	r3, #0
 800cc5a:	940b      	str	r4, [sp, #44]	@ 0x2c
 800cc5c:	9320      	str	r3, [sp, #128]	@ 0x80
 800cc5e:	f04f 33ff 	mov.w	r3, #4294967295
 800cc62:	2200      	movs	r2, #0
 800cc64:	e9cd 3307 	strd	r3, r3, [sp, #28]
 800cc68:	2312      	movs	r3, #18
 800cc6a:	e7d0      	b.n	800cc0e <_dtoa_r+0x23e>
 800cc6c:	2301      	movs	r3, #1
 800cc6e:	930b      	str	r3, [sp, #44]	@ 0x2c
 800cc70:	e7f5      	b.n	800cc5e <_dtoa_r+0x28e>
 800cc72:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800cc74:	e9cd 3307 	strd	r3, r3, [sp, #28]
 800cc78:	e7d7      	b.n	800cc2a <_dtoa_r+0x25a>
 800cc7a:	3101      	adds	r1, #1
 800cc7c:	0052      	lsls	r2, r2, #1
 800cc7e:	e7d8      	b.n	800cc32 <_dtoa_r+0x262>
 800cc80:	636f4361 	.word	0x636f4361
 800cc84:	3fd287a7 	.word	0x3fd287a7
 800cc88:	8b60c8b3 	.word	0x8b60c8b3
 800cc8c:	3fc68a28 	.word	0x3fc68a28
 800cc90:	509f79fb 	.word	0x509f79fb
 800cc94:	3fd34413 	.word	0x3fd34413
 800cc98:	0800e5c9 	.word	0x0800e5c9
 800cc9c:	0800e5e0 	.word	0x0800e5e0
 800cca0:	7ff00000 	.word	0x7ff00000
 800cca4:	0800e5c5 	.word	0x0800e5c5
 800cca8:	0800e599 	.word	0x0800e599
 800ccac:	0800e598 	.word	0x0800e598
 800ccb0:	3ff80000 	.word	0x3ff80000
 800ccb4:	0800e6d8 	.word	0x0800e6d8
 800ccb8:	0800e638 	.word	0x0800e638
 800ccbc:	f8db 301c 	ldr.w	r3, [fp, #28]
 800ccc0:	6018      	str	r0, [r3, #0]
 800ccc2:	9b07      	ldr	r3, [sp, #28]
 800ccc4:	2b0e      	cmp	r3, #14
 800ccc6:	f200 80a4 	bhi.w	800ce12 <_dtoa_r+0x442>
 800ccca:	2c00      	cmp	r4, #0
 800cccc:	f000 80a1 	beq.w	800ce12 <_dtoa_r+0x442>
 800ccd0:	2f00      	cmp	r7, #0
 800ccd2:	dd33      	ble.n	800cd3c <_dtoa_r+0x36c>
 800ccd4:	4b86      	ldr	r3, [pc, #536]	@ (800cef0 <_dtoa_r+0x520>)
 800ccd6:	f007 020f 	and.w	r2, r7, #15
 800ccda:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800ccde:	05f8      	lsls	r0, r7, #23
 800cce0:	e9d3 3400 	ldrd	r3, r4, [r3]
 800cce4:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800cce8:	ea4f 1427 	mov.w	r4, r7, asr #4
 800ccec:	d516      	bpl.n	800cd1c <_dtoa_r+0x34c>
 800ccee:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800ccf2:	4b80      	ldr	r3, [pc, #512]	@ (800cef4 <_dtoa_r+0x524>)
 800ccf4:	2603      	movs	r6, #3
 800ccf6:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800ccfa:	f7f3 fd2f 	bl	800075c <__aeabi_ddiv>
 800ccfe:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800cd02:	f004 040f 	and.w	r4, r4, #15
 800cd06:	4d7b      	ldr	r5, [pc, #492]	@ (800cef4 <_dtoa_r+0x524>)
 800cd08:	b954      	cbnz	r4, 800cd20 <_dtoa_r+0x350>
 800cd0a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800cd0e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800cd12:	f7f3 fd23 	bl	800075c <__aeabi_ddiv>
 800cd16:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800cd1a:	e028      	b.n	800cd6e <_dtoa_r+0x39e>
 800cd1c:	2602      	movs	r6, #2
 800cd1e:	e7f2      	b.n	800cd06 <_dtoa_r+0x336>
 800cd20:	07e1      	lsls	r1, r4, #31
 800cd22:	d508      	bpl.n	800cd36 <_dtoa_r+0x366>
 800cd24:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800cd28:	e9d5 2300 	ldrd	r2, r3, [r5]
 800cd2c:	f7f3 fbec 	bl	8000508 <__aeabi_dmul>
 800cd30:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800cd34:	3601      	adds	r6, #1
 800cd36:	1064      	asrs	r4, r4, #1
 800cd38:	3508      	adds	r5, #8
 800cd3a:	e7e5      	b.n	800cd08 <_dtoa_r+0x338>
 800cd3c:	f000 80d2 	beq.w	800cee4 <_dtoa_r+0x514>
 800cd40:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800cd44:	427c      	negs	r4, r7
 800cd46:	4b6a      	ldr	r3, [pc, #424]	@ (800cef0 <_dtoa_r+0x520>)
 800cd48:	f004 020f 	and.w	r2, r4, #15
 800cd4c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800cd50:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cd54:	f7f3 fbd8 	bl	8000508 <__aeabi_dmul>
 800cd58:	2602      	movs	r6, #2
 800cd5a:	2300      	movs	r3, #0
 800cd5c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800cd60:	4d64      	ldr	r5, [pc, #400]	@ (800cef4 <_dtoa_r+0x524>)
 800cd62:	1124      	asrs	r4, r4, #4
 800cd64:	2c00      	cmp	r4, #0
 800cd66:	f040 80b2 	bne.w	800cece <_dtoa_r+0x4fe>
 800cd6a:	2b00      	cmp	r3, #0
 800cd6c:	d1d3      	bne.n	800cd16 <_dtoa_r+0x346>
 800cd6e:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800cd72:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800cd74:	2b00      	cmp	r3, #0
 800cd76:	f000 80b7 	beq.w	800cee8 <_dtoa_r+0x518>
 800cd7a:	2200      	movs	r2, #0
 800cd7c:	4620      	mov	r0, r4
 800cd7e:	4629      	mov	r1, r5
 800cd80:	4b5d      	ldr	r3, [pc, #372]	@ (800cef8 <_dtoa_r+0x528>)
 800cd82:	f7f3 fe33 	bl	80009ec <__aeabi_dcmplt>
 800cd86:	2800      	cmp	r0, #0
 800cd88:	f000 80ae 	beq.w	800cee8 <_dtoa_r+0x518>
 800cd8c:	9b07      	ldr	r3, [sp, #28]
 800cd8e:	2b00      	cmp	r3, #0
 800cd90:	f000 80aa 	beq.w	800cee8 <_dtoa_r+0x518>
 800cd94:	9b08      	ldr	r3, [sp, #32]
 800cd96:	2b00      	cmp	r3, #0
 800cd98:	dd37      	ble.n	800ce0a <_dtoa_r+0x43a>
 800cd9a:	1e7b      	subs	r3, r7, #1
 800cd9c:	4620      	mov	r0, r4
 800cd9e:	9304      	str	r3, [sp, #16]
 800cda0:	2200      	movs	r2, #0
 800cda2:	4629      	mov	r1, r5
 800cda4:	4b55      	ldr	r3, [pc, #340]	@ (800cefc <_dtoa_r+0x52c>)
 800cda6:	f7f3 fbaf 	bl	8000508 <__aeabi_dmul>
 800cdaa:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800cdae:	9c08      	ldr	r4, [sp, #32]
 800cdb0:	3601      	adds	r6, #1
 800cdb2:	4630      	mov	r0, r6
 800cdb4:	f7f3 fb3e 	bl	8000434 <__aeabi_i2d>
 800cdb8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800cdbc:	f7f3 fba4 	bl	8000508 <__aeabi_dmul>
 800cdc0:	2200      	movs	r2, #0
 800cdc2:	4b4f      	ldr	r3, [pc, #316]	@ (800cf00 <_dtoa_r+0x530>)
 800cdc4:	f7f3 f9ea 	bl	800019c <__adddf3>
 800cdc8:	4605      	mov	r5, r0
 800cdca:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800cdce:	2c00      	cmp	r4, #0
 800cdd0:	f040 809a 	bne.w	800cf08 <_dtoa_r+0x538>
 800cdd4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800cdd8:	2200      	movs	r2, #0
 800cdda:	4b4a      	ldr	r3, [pc, #296]	@ (800cf04 <_dtoa_r+0x534>)
 800cddc:	f7f3 f9dc 	bl	8000198 <__aeabi_dsub>
 800cde0:	4602      	mov	r2, r0
 800cde2:	460b      	mov	r3, r1
 800cde4:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800cde8:	462a      	mov	r2, r5
 800cdea:	4633      	mov	r3, r6
 800cdec:	f7f3 fe1c 	bl	8000a28 <__aeabi_dcmpgt>
 800cdf0:	2800      	cmp	r0, #0
 800cdf2:	f040 828e 	bne.w	800d312 <_dtoa_r+0x942>
 800cdf6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800cdfa:	462a      	mov	r2, r5
 800cdfc:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800ce00:	f7f3 fdf4 	bl	80009ec <__aeabi_dcmplt>
 800ce04:	2800      	cmp	r0, #0
 800ce06:	f040 8127 	bne.w	800d058 <_dtoa_r+0x688>
 800ce0a:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 800ce0e:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800ce12:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800ce14:	2b00      	cmp	r3, #0
 800ce16:	f2c0 8163 	blt.w	800d0e0 <_dtoa_r+0x710>
 800ce1a:	2f0e      	cmp	r7, #14
 800ce1c:	f300 8160 	bgt.w	800d0e0 <_dtoa_r+0x710>
 800ce20:	4b33      	ldr	r3, [pc, #204]	@ (800cef0 <_dtoa_r+0x520>)
 800ce22:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800ce26:	e9d3 3400 	ldrd	r3, r4, [r3]
 800ce2a:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800ce2e:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800ce30:	2b00      	cmp	r3, #0
 800ce32:	da03      	bge.n	800ce3c <_dtoa_r+0x46c>
 800ce34:	9b07      	ldr	r3, [sp, #28]
 800ce36:	2b00      	cmp	r3, #0
 800ce38:	f340 8100 	ble.w	800d03c <_dtoa_r+0x66c>
 800ce3c:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800ce40:	4656      	mov	r6, sl
 800ce42:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800ce46:	4620      	mov	r0, r4
 800ce48:	4629      	mov	r1, r5
 800ce4a:	f7f3 fc87 	bl	800075c <__aeabi_ddiv>
 800ce4e:	f7f3 fe0b 	bl	8000a68 <__aeabi_d2iz>
 800ce52:	4680      	mov	r8, r0
 800ce54:	f7f3 faee 	bl	8000434 <__aeabi_i2d>
 800ce58:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800ce5c:	f7f3 fb54 	bl	8000508 <__aeabi_dmul>
 800ce60:	4602      	mov	r2, r0
 800ce62:	460b      	mov	r3, r1
 800ce64:	4620      	mov	r0, r4
 800ce66:	4629      	mov	r1, r5
 800ce68:	f7f3 f996 	bl	8000198 <__aeabi_dsub>
 800ce6c:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800ce70:	9d07      	ldr	r5, [sp, #28]
 800ce72:	f806 4b01 	strb.w	r4, [r6], #1
 800ce76:	eba6 040a 	sub.w	r4, r6, sl
 800ce7a:	42a5      	cmp	r5, r4
 800ce7c:	4602      	mov	r2, r0
 800ce7e:	460b      	mov	r3, r1
 800ce80:	f040 8116 	bne.w	800d0b0 <_dtoa_r+0x6e0>
 800ce84:	f7f3 f98a 	bl	800019c <__adddf3>
 800ce88:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800ce8c:	4604      	mov	r4, r0
 800ce8e:	460d      	mov	r5, r1
 800ce90:	f7f3 fdca 	bl	8000a28 <__aeabi_dcmpgt>
 800ce94:	2800      	cmp	r0, #0
 800ce96:	f040 80f8 	bne.w	800d08a <_dtoa_r+0x6ba>
 800ce9a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800ce9e:	4620      	mov	r0, r4
 800cea0:	4629      	mov	r1, r5
 800cea2:	f7f3 fd99 	bl	80009d8 <__aeabi_dcmpeq>
 800cea6:	b118      	cbz	r0, 800ceb0 <_dtoa_r+0x4e0>
 800cea8:	f018 0f01 	tst.w	r8, #1
 800ceac:	f040 80ed 	bne.w	800d08a <_dtoa_r+0x6ba>
 800ceb0:	4649      	mov	r1, r9
 800ceb2:	4658      	mov	r0, fp
 800ceb4:	f000 fc92 	bl	800d7dc <_Bfree>
 800ceb8:	2300      	movs	r3, #0
 800ceba:	7033      	strb	r3, [r6, #0]
 800cebc:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 800cebe:	3701      	adds	r7, #1
 800cec0:	601f      	str	r7, [r3, #0]
 800cec2:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 800cec4:	2b00      	cmp	r3, #0
 800cec6:	f000 8320 	beq.w	800d50a <_dtoa_r+0xb3a>
 800ceca:	601e      	str	r6, [r3, #0]
 800cecc:	e31d      	b.n	800d50a <_dtoa_r+0xb3a>
 800cece:	07e2      	lsls	r2, r4, #31
 800ced0:	d505      	bpl.n	800cede <_dtoa_r+0x50e>
 800ced2:	e9d5 2300 	ldrd	r2, r3, [r5]
 800ced6:	f7f3 fb17 	bl	8000508 <__aeabi_dmul>
 800ceda:	2301      	movs	r3, #1
 800cedc:	3601      	adds	r6, #1
 800cede:	1064      	asrs	r4, r4, #1
 800cee0:	3508      	adds	r5, #8
 800cee2:	e73f      	b.n	800cd64 <_dtoa_r+0x394>
 800cee4:	2602      	movs	r6, #2
 800cee6:	e742      	b.n	800cd6e <_dtoa_r+0x39e>
 800cee8:	9c07      	ldr	r4, [sp, #28]
 800ceea:	9704      	str	r7, [sp, #16]
 800ceec:	e761      	b.n	800cdb2 <_dtoa_r+0x3e2>
 800ceee:	bf00      	nop
 800cef0:	0800e6d8 	.word	0x0800e6d8
 800cef4:	0800e6b0 	.word	0x0800e6b0
 800cef8:	3ff00000 	.word	0x3ff00000
 800cefc:	40240000 	.word	0x40240000
 800cf00:	401c0000 	.word	0x401c0000
 800cf04:	40140000 	.word	0x40140000
 800cf08:	4b70      	ldr	r3, [pc, #448]	@ (800d0cc <_dtoa_r+0x6fc>)
 800cf0a:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800cf0c:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800cf10:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800cf14:	4454      	add	r4, sl
 800cf16:	2900      	cmp	r1, #0
 800cf18:	d045      	beq.n	800cfa6 <_dtoa_r+0x5d6>
 800cf1a:	2000      	movs	r0, #0
 800cf1c:	496c      	ldr	r1, [pc, #432]	@ (800d0d0 <_dtoa_r+0x700>)
 800cf1e:	f7f3 fc1d 	bl	800075c <__aeabi_ddiv>
 800cf22:	4633      	mov	r3, r6
 800cf24:	462a      	mov	r2, r5
 800cf26:	f7f3 f937 	bl	8000198 <__aeabi_dsub>
 800cf2a:	4656      	mov	r6, sl
 800cf2c:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800cf30:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800cf34:	f7f3 fd98 	bl	8000a68 <__aeabi_d2iz>
 800cf38:	4605      	mov	r5, r0
 800cf3a:	f7f3 fa7b 	bl	8000434 <__aeabi_i2d>
 800cf3e:	4602      	mov	r2, r0
 800cf40:	460b      	mov	r3, r1
 800cf42:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800cf46:	f7f3 f927 	bl	8000198 <__aeabi_dsub>
 800cf4a:	4602      	mov	r2, r0
 800cf4c:	460b      	mov	r3, r1
 800cf4e:	3530      	adds	r5, #48	@ 0x30
 800cf50:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800cf54:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800cf58:	f806 5b01 	strb.w	r5, [r6], #1
 800cf5c:	f7f3 fd46 	bl	80009ec <__aeabi_dcmplt>
 800cf60:	2800      	cmp	r0, #0
 800cf62:	d163      	bne.n	800d02c <_dtoa_r+0x65c>
 800cf64:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800cf68:	2000      	movs	r0, #0
 800cf6a:	495a      	ldr	r1, [pc, #360]	@ (800d0d4 <_dtoa_r+0x704>)
 800cf6c:	f7f3 f914 	bl	8000198 <__aeabi_dsub>
 800cf70:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800cf74:	f7f3 fd3a 	bl	80009ec <__aeabi_dcmplt>
 800cf78:	2800      	cmp	r0, #0
 800cf7a:	f040 8087 	bne.w	800d08c <_dtoa_r+0x6bc>
 800cf7e:	42a6      	cmp	r6, r4
 800cf80:	f43f af43 	beq.w	800ce0a <_dtoa_r+0x43a>
 800cf84:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800cf88:	2200      	movs	r2, #0
 800cf8a:	4b53      	ldr	r3, [pc, #332]	@ (800d0d8 <_dtoa_r+0x708>)
 800cf8c:	f7f3 fabc 	bl	8000508 <__aeabi_dmul>
 800cf90:	2200      	movs	r2, #0
 800cf92:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800cf96:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800cf9a:	4b4f      	ldr	r3, [pc, #316]	@ (800d0d8 <_dtoa_r+0x708>)
 800cf9c:	f7f3 fab4 	bl	8000508 <__aeabi_dmul>
 800cfa0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800cfa4:	e7c4      	b.n	800cf30 <_dtoa_r+0x560>
 800cfa6:	4631      	mov	r1, r6
 800cfa8:	4628      	mov	r0, r5
 800cfaa:	f7f3 faad 	bl	8000508 <__aeabi_dmul>
 800cfae:	4656      	mov	r6, sl
 800cfb0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800cfb4:	9413      	str	r4, [sp, #76]	@ 0x4c
 800cfb6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800cfba:	f7f3 fd55 	bl	8000a68 <__aeabi_d2iz>
 800cfbe:	4605      	mov	r5, r0
 800cfc0:	f7f3 fa38 	bl	8000434 <__aeabi_i2d>
 800cfc4:	4602      	mov	r2, r0
 800cfc6:	460b      	mov	r3, r1
 800cfc8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800cfcc:	f7f3 f8e4 	bl	8000198 <__aeabi_dsub>
 800cfd0:	4602      	mov	r2, r0
 800cfd2:	460b      	mov	r3, r1
 800cfd4:	3530      	adds	r5, #48	@ 0x30
 800cfd6:	f806 5b01 	strb.w	r5, [r6], #1
 800cfda:	42a6      	cmp	r6, r4
 800cfdc:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800cfe0:	f04f 0200 	mov.w	r2, #0
 800cfe4:	d124      	bne.n	800d030 <_dtoa_r+0x660>
 800cfe6:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800cfea:	4b39      	ldr	r3, [pc, #228]	@ (800d0d0 <_dtoa_r+0x700>)
 800cfec:	f7f3 f8d6 	bl	800019c <__adddf3>
 800cff0:	4602      	mov	r2, r0
 800cff2:	460b      	mov	r3, r1
 800cff4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800cff8:	f7f3 fd16 	bl	8000a28 <__aeabi_dcmpgt>
 800cffc:	2800      	cmp	r0, #0
 800cffe:	d145      	bne.n	800d08c <_dtoa_r+0x6bc>
 800d000:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800d004:	2000      	movs	r0, #0
 800d006:	4932      	ldr	r1, [pc, #200]	@ (800d0d0 <_dtoa_r+0x700>)
 800d008:	f7f3 f8c6 	bl	8000198 <__aeabi_dsub>
 800d00c:	4602      	mov	r2, r0
 800d00e:	460b      	mov	r3, r1
 800d010:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d014:	f7f3 fcea 	bl	80009ec <__aeabi_dcmplt>
 800d018:	2800      	cmp	r0, #0
 800d01a:	f43f aef6 	beq.w	800ce0a <_dtoa_r+0x43a>
 800d01e:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 800d020:	1e73      	subs	r3, r6, #1
 800d022:	9313      	str	r3, [sp, #76]	@ 0x4c
 800d024:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800d028:	2b30      	cmp	r3, #48	@ 0x30
 800d02a:	d0f8      	beq.n	800d01e <_dtoa_r+0x64e>
 800d02c:	9f04      	ldr	r7, [sp, #16]
 800d02e:	e73f      	b.n	800ceb0 <_dtoa_r+0x4e0>
 800d030:	4b29      	ldr	r3, [pc, #164]	@ (800d0d8 <_dtoa_r+0x708>)
 800d032:	f7f3 fa69 	bl	8000508 <__aeabi_dmul>
 800d036:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800d03a:	e7bc      	b.n	800cfb6 <_dtoa_r+0x5e6>
 800d03c:	d10c      	bne.n	800d058 <_dtoa_r+0x688>
 800d03e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800d042:	2200      	movs	r2, #0
 800d044:	4b25      	ldr	r3, [pc, #148]	@ (800d0dc <_dtoa_r+0x70c>)
 800d046:	f7f3 fa5f 	bl	8000508 <__aeabi_dmul>
 800d04a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800d04e:	f7f3 fce1 	bl	8000a14 <__aeabi_dcmpge>
 800d052:	2800      	cmp	r0, #0
 800d054:	f000 815b 	beq.w	800d30e <_dtoa_r+0x93e>
 800d058:	2400      	movs	r4, #0
 800d05a:	4625      	mov	r5, r4
 800d05c:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800d05e:	4656      	mov	r6, sl
 800d060:	43db      	mvns	r3, r3
 800d062:	9304      	str	r3, [sp, #16]
 800d064:	2700      	movs	r7, #0
 800d066:	4621      	mov	r1, r4
 800d068:	4658      	mov	r0, fp
 800d06a:	f000 fbb7 	bl	800d7dc <_Bfree>
 800d06e:	2d00      	cmp	r5, #0
 800d070:	d0dc      	beq.n	800d02c <_dtoa_r+0x65c>
 800d072:	b12f      	cbz	r7, 800d080 <_dtoa_r+0x6b0>
 800d074:	42af      	cmp	r7, r5
 800d076:	d003      	beq.n	800d080 <_dtoa_r+0x6b0>
 800d078:	4639      	mov	r1, r7
 800d07a:	4658      	mov	r0, fp
 800d07c:	f000 fbae 	bl	800d7dc <_Bfree>
 800d080:	4629      	mov	r1, r5
 800d082:	4658      	mov	r0, fp
 800d084:	f000 fbaa 	bl	800d7dc <_Bfree>
 800d088:	e7d0      	b.n	800d02c <_dtoa_r+0x65c>
 800d08a:	9704      	str	r7, [sp, #16]
 800d08c:	4633      	mov	r3, r6
 800d08e:	461e      	mov	r6, r3
 800d090:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800d094:	2a39      	cmp	r2, #57	@ 0x39
 800d096:	d107      	bne.n	800d0a8 <_dtoa_r+0x6d8>
 800d098:	459a      	cmp	sl, r3
 800d09a:	d1f8      	bne.n	800d08e <_dtoa_r+0x6be>
 800d09c:	9a04      	ldr	r2, [sp, #16]
 800d09e:	3201      	adds	r2, #1
 800d0a0:	9204      	str	r2, [sp, #16]
 800d0a2:	2230      	movs	r2, #48	@ 0x30
 800d0a4:	f88a 2000 	strb.w	r2, [sl]
 800d0a8:	781a      	ldrb	r2, [r3, #0]
 800d0aa:	3201      	adds	r2, #1
 800d0ac:	701a      	strb	r2, [r3, #0]
 800d0ae:	e7bd      	b.n	800d02c <_dtoa_r+0x65c>
 800d0b0:	2200      	movs	r2, #0
 800d0b2:	4b09      	ldr	r3, [pc, #36]	@ (800d0d8 <_dtoa_r+0x708>)
 800d0b4:	f7f3 fa28 	bl	8000508 <__aeabi_dmul>
 800d0b8:	2200      	movs	r2, #0
 800d0ba:	2300      	movs	r3, #0
 800d0bc:	4604      	mov	r4, r0
 800d0be:	460d      	mov	r5, r1
 800d0c0:	f7f3 fc8a 	bl	80009d8 <__aeabi_dcmpeq>
 800d0c4:	2800      	cmp	r0, #0
 800d0c6:	f43f aebc 	beq.w	800ce42 <_dtoa_r+0x472>
 800d0ca:	e6f1      	b.n	800ceb0 <_dtoa_r+0x4e0>
 800d0cc:	0800e6d8 	.word	0x0800e6d8
 800d0d0:	3fe00000 	.word	0x3fe00000
 800d0d4:	3ff00000 	.word	0x3ff00000
 800d0d8:	40240000 	.word	0x40240000
 800d0dc:	40140000 	.word	0x40140000
 800d0e0:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800d0e2:	2a00      	cmp	r2, #0
 800d0e4:	f000 80db 	beq.w	800d29e <_dtoa_r+0x8ce>
 800d0e8:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800d0ea:	2a01      	cmp	r2, #1
 800d0ec:	f300 80bf 	bgt.w	800d26e <_dtoa_r+0x89e>
 800d0f0:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800d0f2:	2a00      	cmp	r2, #0
 800d0f4:	f000 80b7 	beq.w	800d266 <_dtoa_r+0x896>
 800d0f8:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800d0fc:	4646      	mov	r6, r8
 800d0fe:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800d100:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800d102:	2101      	movs	r1, #1
 800d104:	441a      	add	r2, r3
 800d106:	4658      	mov	r0, fp
 800d108:	4498      	add	r8, r3
 800d10a:	9209      	str	r2, [sp, #36]	@ 0x24
 800d10c:	f000 fc1a 	bl	800d944 <__i2b>
 800d110:	4605      	mov	r5, r0
 800d112:	b15e      	cbz	r6, 800d12c <_dtoa_r+0x75c>
 800d114:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d116:	2b00      	cmp	r3, #0
 800d118:	dd08      	ble.n	800d12c <_dtoa_r+0x75c>
 800d11a:	42b3      	cmp	r3, r6
 800d11c:	bfa8      	it	ge
 800d11e:	4633      	movge	r3, r6
 800d120:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800d122:	eba8 0803 	sub.w	r8, r8, r3
 800d126:	1af6      	subs	r6, r6, r3
 800d128:	1ad3      	subs	r3, r2, r3
 800d12a:	9309      	str	r3, [sp, #36]	@ 0x24
 800d12c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800d12e:	b1f3      	cbz	r3, 800d16e <_dtoa_r+0x79e>
 800d130:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800d132:	2b00      	cmp	r3, #0
 800d134:	f000 80b7 	beq.w	800d2a6 <_dtoa_r+0x8d6>
 800d138:	b18c      	cbz	r4, 800d15e <_dtoa_r+0x78e>
 800d13a:	4629      	mov	r1, r5
 800d13c:	4622      	mov	r2, r4
 800d13e:	4658      	mov	r0, fp
 800d140:	f000 fcbe 	bl	800dac0 <__pow5mult>
 800d144:	464a      	mov	r2, r9
 800d146:	4601      	mov	r1, r0
 800d148:	4605      	mov	r5, r0
 800d14a:	4658      	mov	r0, fp
 800d14c:	f000 fc10 	bl	800d970 <__multiply>
 800d150:	4649      	mov	r1, r9
 800d152:	9004      	str	r0, [sp, #16]
 800d154:	4658      	mov	r0, fp
 800d156:	f000 fb41 	bl	800d7dc <_Bfree>
 800d15a:	9b04      	ldr	r3, [sp, #16]
 800d15c:	4699      	mov	r9, r3
 800d15e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800d160:	1b1a      	subs	r2, r3, r4
 800d162:	d004      	beq.n	800d16e <_dtoa_r+0x79e>
 800d164:	4649      	mov	r1, r9
 800d166:	4658      	mov	r0, fp
 800d168:	f000 fcaa 	bl	800dac0 <__pow5mult>
 800d16c:	4681      	mov	r9, r0
 800d16e:	2101      	movs	r1, #1
 800d170:	4658      	mov	r0, fp
 800d172:	f000 fbe7 	bl	800d944 <__i2b>
 800d176:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800d178:	4604      	mov	r4, r0
 800d17a:	2b00      	cmp	r3, #0
 800d17c:	f000 81c9 	beq.w	800d512 <_dtoa_r+0xb42>
 800d180:	461a      	mov	r2, r3
 800d182:	4601      	mov	r1, r0
 800d184:	4658      	mov	r0, fp
 800d186:	f000 fc9b 	bl	800dac0 <__pow5mult>
 800d18a:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800d18c:	4604      	mov	r4, r0
 800d18e:	2b01      	cmp	r3, #1
 800d190:	f300 808f 	bgt.w	800d2b2 <_dtoa_r+0x8e2>
 800d194:	9b02      	ldr	r3, [sp, #8]
 800d196:	2b00      	cmp	r3, #0
 800d198:	f040 8087 	bne.w	800d2aa <_dtoa_r+0x8da>
 800d19c:	9b03      	ldr	r3, [sp, #12]
 800d19e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800d1a2:	2b00      	cmp	r3, #0
 800d1a4:	f040 8083 	bne.w	800d2ae <_dtoa_r+0x8de>
 800d1a8:	9b03      	ldr	r3, [sp, #12]
 800d1aa:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800d1ae:	0d1b      	lsrs	r3, r3, #20
 800d1b0:	051b      	lsls	r3, r3, #20
 800d1b2:	b12b      	cbz	r3, 800d1c0 <_dtoa_r+0x7f0>
 800d1b4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d1b6:	f108 0801 	add.w	r8, r8, #1
 800d1ba:	3301      	adds	r3, #1
 800d1bc:	9309      	str	r3, [sp, #36]	@ 0x24
 800d1be:	2301      	movs	r3, #1
 800d1c0:	930a      	str	r3, [sp, #40]	@ 0x28
 800d1c2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800d1c4:	2b00      	cmp	r3, #0
 800d1c6:	f000 81aa 	beq.w	800d51e <_dtoa_r+0xb4e>
 800d1ca:	6923      	ldr	r3, [r4, #16]
 800d1cc:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800d1d0:	6918      	ldr	r0, [r3, #16]
 800d1d2:	f000 fb6b 	bl	800d8ac <__hi0bits>
 800d1d6:	f1c0 0020 	rsb	r0, r0, #32
 800d1da:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d1dc:	4418      	add	r0, r3
 800d1de:	f010 001f 	ands.w	r0, r0, #31
 800d1e2:	d071      	beq.n	800d2c8 <_dtoa_r+0x8f8>
 800d1e4:	f1c0 0320 	rsb	r3, r0, #32
 800d1e8:	2b04      	cmp	r3, #4
 800d1ea:	dd65      	ble.n	800d2b8 <_dtoa_r+0x8e8>
 800d1ec:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d1ee:	f1c0 001c 	rsb	r0, r0, #28
 800d1f2:	4403      	add	r3, r0
 800d1f4:	4480      	add	r8, r0
 800d1f6:	4406      	add	r6, r0
 800d1f8:	9309      	str	r3, [sp, #36]	@ 0x24
 800d1fa:	f1b8 0f00 	cmp.w	r8, #0
 800d1fe:	dd05      	ble.n	800d20c <_dtoa_r+0x83c>
 800d200:	4649      	mov	r1, r9
 800d202:	4642      	mov	r2, r8
 800d204:	4658      	mov	r0, fp
 800d206:	f000 fcb5 	bl	800db74 <__lshift>
 800d20a:	4681      	mov	r9, r0
 800d20c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d20e:	2b00      	cmp	r3, #0
 800d210:	dd05      	ble.n	800d21e <_dtoa_r+0x84e>
 800d212:	4621      	mov	r1, r4
 800d214:	461a      	mov	r2, r3
 800d216:	4658      	mov	r0, fp
 800d218:	f000 fcac 	bl	800db74 <__lshift>
 800d21c:	4604      	mov	r4, r0
 800d21e:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800d220:	2b00      	cmp	r3, #0
 800d222:	d053      	beq.n	800d2cc <_dtoa_r+0x8fc>
 800d224:	4621      	mov	r1, r4
 800d226:	4648      	mov	r0, r9
 800d228:	f000 fd10 	bl	800dc4c <__mcmp>
 800d22c:	2800      	cmp	r0, #0
 800d22e:	da4d      	bge.n	800d2cc <_dtoa_r+0x8fc>
 800d230:	1e7b      	subs	r3, r7, #1
 800d232:	4649      	mov	r1, r9
 800d234:	9304      	str	r3, [sp, #16]
 800d236:	220a      	movs	r2, #10
 800d238:	2300      	movs	r3, #0
 800d23a:	4658      	mov	r0, fp
 800d23c:	f000 faf0 	bl	800d820 <__multadd>
 800d240:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800d242:	4681      	mov	r9, r0
 800d244:	2b00      	cmp	r3, #0
 800d246:	f000 816c 	beq.w	800d522 <_dtoa_r+0xb52>
 800d24a:	2300      	movs	r3, #0
 800d24c:	4629      	mov	r1, r5
 800d24e:	220a      	movs	r2, #10
 800d250:	4658      	mov	r0, fp
 800d252:	f000 fae5 	bl	800d820 <__multadd>
 800d256:	9b08      	ldr	r3, [sp, #32]
 800d258:	4605      	mov	r5, r0
 800d25a:	2b00      	cmp	r3, #0
 800d25c:	dc61      	bgt.n	800d322 <_dtoa_r+0x952>
 800d25e:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800d260:	2b02      	cmp	r3, #2
 800d262:	dc3b      	bgt.n	800d2dc <_dtoa_r+0x90c>
 800d264:	e05d      	b.n	800d322 <_dtoa_r+0x952>
 800d266:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800d268:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800d26c:	e746      	b.n	800d0fc <_dtoa_r+0x72c>
 800d26e:	9b07      	ldr	r3, [sp, #28]
 800d270:	1e5c      	subs	r4, r3, #1
 800d272:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800d274:	42a3      	cmp	r3, r4
 800d276:	bfbf      	itttt	lt
 800d278:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 800d27a:	9a0e      	ldrlt	r2, [sp, #56]	@ 0x38
 800d27c:	1ae3      	sublt	r3, r4, r3
 800d27e:	18d2      	addlt	r2, r2, r3
 800d280:	bfa8      	it	ge
 800d282:	1b1c      	subge	r4, r3, r4
 800d284:	9b07      	ldr	r3, [sp, #28]
 800d286:	bfbe      	ittt	lt
 800d288:	940a      	strlt	r4, [sp, #40]	@ 0x28
 800d28a:	920e      	strlt	r2, [sp, #56]	@ 0x38
 800d28c:	2400      	movlt	r4, #0
 800d28e:	2b00      	cmp	r3, #0
 800d290:	bfb5      	itete	lt
 800d292:	eba8 0603 	sublt.w	r6, r8, r3
 800d296:	4646      	movge	r6, r8
 800d298:	2300      	movlt	r3, #0
 800d29a:	9b07      	ldrge	r3, [sp, #28]
 800d29c:	e730      	b.n	800d100 <_dtoa_r+0x730>
 800d29e:	4646      	mov	r6, r8
 800d2a0:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800d2a2:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 800d2a4:	e735      	b.n	800d112 <_dtoa_r+0x742>
 800d2a6:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800d2a8:	e75c      	b.n	800d164 <_dtoa_r+0x794>
 800d2aa:	2300      	movs	r3, #0
 800d2ac:	e788      	b.n	800d1c0 <_dtoa_r+0x7f0>
 800d2ae:	9b02      	ldr	r3, [sp, #8]
 800d2b0:	e786      	b.n	800d1c0 <_dtoa_r+0x7f0>
 800d2b2:	2300      	movs	r3, #0
 800d2b4:	930a      	str	r3, [sp, #40]	@ 0x28
 800d2b6:	e788      	b.n	800d1ca <_dtoa_r+0x7fa>
 800d2b8:	d09f      	beq.n	800d1fa <_dtoa_r+0x82a>
 800d2ba:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800d2bc:	331c      	adds	r3, #28
 800d2be:	441a      	add	r2, r3
 800d2c0:	4498      	add	r8, r3
 800d2c2:	441e      	add	r6, r3
 800d2c4:	9209      	str	r2, [sp, #36]	@ 0x24
 800d2c6:	e798      	b.n	800d1fa <_dtoa_r+0x82a>
 800d2c8:	4603      	mov	r3, r0
 800d2ca:	e7f6      	b.n	800d2ba <_dtoa_r+0x8ea>
 800d2cc:	9b07      	ldr	r3, [sp, #28]
 800d2ce:	9704      	str	r7, [sp, #16]
 800d2d0:	2b00      	cmp	r3, #0
 800d2d2:	dc20      	bgt.n	800d316 <_dtoa_r+0x946>
 800d2d4:	9308      	str	r3, [sp, #32]
 800d2d6:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800d2d8:	2b02      	cmp	r3, #2
 800d2da:	dd1e      	ble.n	800d31a <_dtoa_r+0x94a>
 800d2dc:	9b08      	ldr	r3, [sp, #32]
 800d2de:	2b00      	cmp	r3, #0
 800d2e0:	f47f aebc 	bne.w	800d05c <_dtoa_r+0x68c>
 800d2e4:	4621      	mov	r1, r4
 800d2e6:	2205      	movs	r2, #5
 800d2e8:	4658      	mov	r0, fp
 800d2ea:	f000 fa99 	bl	800d820 <__multadd>
 800d2ee:	4601      	mov	r1, r0
 800d2f0:	4604      	mov	r4, r0
 800d2f2:	4648      	mov	r0, r9
 800d2f4:	f000 fcaa 	bl	800dc4c <__mcmp>
 800d2f8:	2800      	cmp	r0, #0
 800d2fa:	f77f aeaf 	ble.w	800d05c <_dtoa_r+0x68c>
 800d2fe:	2331      	movs	r3, #49	@ 0x31
 800d300:	4656      	mov	r6, sl
 800d302:	f806 3b01 	strb.w	r3, [r6], #1
 800d306:	9b04      	ldr	r3, [sp, #16]
 800d308:	3301      	adds	r3, #1
 800d30a:	9304      	str	r3, [sp, #16]
 800d30c:	e6aa      	b.n	800d064 <_dtoa_r+0x694>
 800d30e:	9c07      	ldr	r4, [sp, #28]
 800d310:	9704      	str	r7, [sp, #16]
 800d312:	4625      	mov	r5, r4
 800d314:	e7f3      	b.n	800d2fe <_dtoa_r+0x92e>
 800d316:	9b07      	ldr	r3, [sp, #28]
 800d318:	9308      	str	r3, [sp, #32]
 800d31a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800d31c:	2b00      	cmp	r3, #0
 800d31e:	f000 8104 	beq.w	800d52a <_dtoa_r+0xb5a>
 800d322:	2e00      	cmp	r6, #0
 800d324:	dd05      	ble.n	800d332 <_dtoa_r+0x962>
 800d326:	4629      	mov	r1, r5
 800d328:	4632      	mov	r2, r6
 800d32a:	4658      	mov	r0, fp
 800d32c:	f000 fc22 	bl	800db74 <__lshift>
 800d330:	4605      	mov	r5, r0
 800d332:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800d334:	2b00      	cmp	r3, #0
 800d336:	d05a      	beq.n	800d3ee <_dtoa_r+0xa1e>
 800d338:	4658      	mov	r0, fp
 800d33a:	6869      	ldr	r1, [r5, #4]
 800d33c:	f000 fa0e 	bl	800d75c <_Balloc>
 800d340:	4606      	mov	r6, r0
 800d342:	b928      	cbnz	r0, 800d350 <_dtoa_r+0x980>
 800d344:	4602      	mov	r2, r0
 800d346:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800d34a:	4b83      	ldr	r3, [pc, #524]	@ (800d558 <_dtoa_r+0xb88>)
 800d34c:	f7ff bb54 	b.w	800c9f8 <_dtoa_r+0x28>
 800d350:	692a      	ldr	r2, [r5, #16]
 800d352:	f105 010c 	add.w	r1, r5, #12
 800d356:	3202      	adds	r2, #2
 800d358:	0092      	lsls	r2, r2, #2
 800d35a:	300c      	adds	r0, #12
 800d35c:	f000 fffa 	bl	800e354 <memcpy>
 800d360:	2201      	movs	r2, #1
 800d362:	4631      	mov	r1, r6
 800d364:	4658      	mov	r0, fp
 800d366:	f000 fc05 	bl	800db74 <__lshift>
 800d36a:	462f      	mov	r7, r5
 800d36c:	4605      	mov	r5, r0
 800d36e:	f10a 0301 	add.w	r3, sl, #1
 800d372:	9307      	str	r3, [sp, #28]
 800d374:	9b08      	ldr	r3, [sp, #32]
 800d376:	4453      	add	r3, sl
 800d378:	930b      	str	r3, [sp, #44]	@ 0x2c
 800d37a:	9b02      	ldr	r3, [sp, #8]
 800d37c:	f003 0301 	and.w	r3, r3, #1
 800d380:	930a      	str	r3, [sp, #40]	@ 0x28
 800d382:	9b07      	ldr	r3, [sp, #28]
 800d384:	4621      	mov	r1, r4
 800d386:	3b01      	subs	r3, #1
 800d388:	4648      	mov	r0, r9
 800d38a:	9302      	str	r3, [sp, #8]
 800d38c:	f7ff fa95 	bl	800c8ba <quorem>
 800d390:	4639      	mov	r1, r7
 800d392:	9008      	str	r0, [sp, #32]
 800d394:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800d398:	4648      	mov	r0, r9
 800d39a:	f000 fc57 	bl	800dc4c <__mcmp>
 800d39e:	462a      	mov	r2, r5
 800d3a0:	9009      	str	r0, [sp, #36]	@ 0x24
 800d3a2:	4621      	mov	r1, r4
 800d3a4:	4658      	mov	r0, fp
 800d3a6:	f000 fc6d 	bl	800dc84 <__mdiff>
 800d3aa:	68c2      	ldr	r2, [r0, #12]
 800d3ac:	4606      	mov	r6, r0
 800d3ae:	bb02      	cbnz	r2, 800d3f2 <_dtoa_r+0xa22>
 800d3b0:	4601      	mov	r1, r0
 800d3b2:	4648      	mov	r0, r9
 800d3b4:	f000 fc4a 	bl	800dc4c <__mcmp>
 800d3b8:	4602      	mov	r2, r0
 800d3ba:	4631      	mov	r1, r6
 800d3bc:	4658      	mov	r0, fp
 800d3be:	920c      	str	r2, [sp, #48]	@ 0x30
 800d3c0:	f000 fa0c 	bl	800d7dc <_Bfree>
 800d3c4:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800d3c6:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800d3c8:	9e07      	ldr	r6, [sp, #28]
 800d3ca:	ea43 0102 	orr.w	r1, r3, r2
 800d3ce:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800d3d0:	4319      	orrs	r1, r3
 800d3d2:	d110      	bne.n	800d3f6 <_dtoa_r+0xa26>
 800d3d4:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800d3d8:	d029      	beq.n	800d42e <_dtoa_r+0xa5e>
 800d3da:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d3dc:	2b00      	cmp	r3, #0
 800d3de:	dd02      	ble.n	800d3e6 <_dtoa_r+0xa16>
 800d3e0:	9b08      	ldr	r3, [sp, #32]
 800d3e2:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 800d3e6:	9b02      	ldr	r3, [sp, #8]
 800d3e8:	f883 8000 	strb.w	r8, [r3]
 800d3ec:	e63b      	b.n	800d066 <_dtoa_r+0x696>
 800d3ee:	4628      	mov	r0, r5
 800d3f0:	e7bb      	b.n	800d36a <_dtoa_r+0x99a>
 800d3f2:	2201      	movs	r2, #1
 800d3f4:	e7e1      	b.n	800d3ba <_dtoa_r+0x9ea>
 800d3f6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d3f8:	2b00      	cmp	r3, #0
 800d3fa:	db04      	blt.n	800d406 <_dtoa_r+0xa36>
 800d3fc:	9920      	ldr	r1, [sp, #128]	@ 0x80
 800d3fe:	430b      	orrs	r3, r1
 800d400:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800d402:	430b      	orrs	r3, r1
 800d404:	d120      	bne.n	800d448 <_dtoa_r+0xa78>
 800d406:	2a00      	cmp	r2, #0
 800d408:	dded      	ble.n	800d3e6 <_dtoa_r+0xa16>
 800d40a:	4649      	mov	r1, r9
 800d40c:	2201      	movs	r2, #1
 800d40e:	4658      	mov	r0, fp
 800d410:	f000 fbb0 	bl	800db74 <__lshift>
 800d414:	4621      	mov	r1, r4
 800d416:	4681      	mov	r9, r0
 800d418:	f000 fc18 	bl	800dc4c <__mcmp>
 800d41c:	2800      	cmp	r0, #0
 800d41e:	dc03      	bgt.n	800d428 <_dtoa_r+0xa58>
 800d420:	d1e1      	bne.n	800d3e6 <_dtoa_r+0xa16>
 800d422:	f018 0f01 	tst.w	r8, #1
 800d426:	d0de      	beq.n	800d3e6 <_dtoa_r+0xa16>
 800d428:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800d42c:	d1d8      	bne.n	800d3e0 <_dtoa_r+0xa10>
 800d42e:	2339      	movs	r3, #57	@ 0x39
 800d430:	9a02      	ldr	r2, [sp, #8]
 800d432:	7013      	strb	r3, [r2, #0]
 800d434:	4633      	mov	r3, r6
 800d436:	461e      	mov	r6, r3
 800d438:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800d43c:	3b01      	subs	r3, #1
 800d43e:	2a39      	cmp	r2, #57	@ 0x39
 800d440:	d052      	beq.n	800d4e8 <_dtoa_r+0xb18>
 800d442:	3201      	adds	r2, #1
 800d444:	701a      	strb	r2, [r3, #0]
 800d446:	e60e      	b.n	800d066 <_dtoa_r+0x696>
 800d448:	2a00      	cmp	r2, #0
 800d44a:	dd07      	ble.n	800d45c <_dtoa_r+0xa8c>
 800d44c:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800d450:	d0ed      	beq.n	800d42e <_dtoa_r+0xa5e>
 800d452:	9a02      	ldr	r2, [sp, #8]
 800d454:	f108 0301 	add.w	r3, r8, #1
 800d458:	7013      	strb	r3, [r2, #0]
 800d45a:	e604      	b.n	800d066 <_dtoa_r+0x696>
 800d45c:	9b07      	ldr	r3, [sp, #28]
 800d45e:	9a07      	ldr	r2, [sp, #28]
 800d460:	f803 8c01 	strb.w	r8, [r3, #-1]
 800d464:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800d466:	4293      	cmp	r3, r2
 800d468:	d028      	beq.n	800d4bc <_dtoa_r+0xaec>
 800d46a:	4649      	mov	r1, r9
 800d46c:	2300      	movs	r3, #0
 800d46e:	220a      	movs	r2, #10
 800d470:	4658      	mov	r0, fp
 800d472:	f000 f9d5 	bl	800d820 <__multadd>
 800d476:	42af      	cmp	r7, r5
 800d478:	4681      	mov	r9, r0
 800d47a:	f04f 0300 	mov.w	r3, #0
 800d47e:	f04f 020a 	mov.w	r2, #10
 800d482:	4639      	mov	r1, r7
 800d484:	4658      	mov	r0, fp
 800d486:	d107      	bne.n	800d498 <_dtoa_r+0xac8>
 800d488:	f000 f9ca 	bl	800d820 <__multadd>
 800d48c:	4607      	mov	r7, r0
 800d48e:	4605      	mov	r5, r0
 800d490:	9b07      	ldr	r3, [sp, #28]
 800d492:	3301      	adds	r3, #1
 800d494:	9307      	str	r3, [sp, #28]
 800d496:	e774      	b.n	800d382 <_dtoa_r+0x9b2>
 800d498:	f000 f9c2 	bl	800d820 <__multadd>
 800d49c:	4629      	mov	r1, r5
 800d49e:	4607      	mov	r7, r0
 800d4a0:	2300      	movs	r3, #0
 800d4a2:	220a      	movs	r2, #10
 800d4a4:	4658      	mov	r0, fp
 800d4a6:	f000 f9bb 	bl	800d820 <__multadd>
 800d4aa:	4605      	mov	r5, r0
 800d4ac:	e7f0      	b.n	800d490 <_dtoa_r+0xac0>
 800d4ae:	9b08      	ldr	r3, [sp, #32]
 800d4b0:	2700      	movs	r7, #0
 800d4b2:	2b00      	cmp	r3, #0
 800d4b4:	bfcc      	ite	gt
 800d4b6:	461e      	movgt	r6, r3
 800d4b8:	2601      	movle	r6, #1
 800d4ba:	4456      	add	r6, sl
 800d4bc:	4649      	mov	r1, r9
 800d4be:	2201      	movs	r2, #1
 800d4c0:	4658      	mov	r0, fp
 800d4c2:	f000 fb57 	bl	800db74 <__lshift>
 800d4c6:	4621      	mov	r1, r4
 800d4c8:	4681      	mov	r9, r0
 800d4ca:	f000 fbbf 	bl	800dc4c <__mcmp>
 800d4ce:	2800      	cmp	r0, #0
 800d4d0:	dcb0      	bgt.n	800d434 <_dtoa_r+0xa64>
 800d4d2:	d102      	bne.n	800d4da <_dtoa_r+0xb0a>
 800d4d4:	f018 0f01 	tst.w	r8, #1
 800d4d8:	d1ac      	bne.n	800d434 <_dtoa_r+0xa64>
 800d4da:	4633      	mov	r3, r6
 800d4dc:	461e      	mov	r6, r3
 800d4de:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800d4e2:	2a30      	cmp	r2, #48	@ 0x30
 800d4e4:	d0fa      	beq.n	800d4dc <_dtoa_r+0xb0c>
 800d4e6:	e5be      	b.n	800d066 <_dtoa_r+0x696>
 800d4e8:	459a      	cmp	sl, r3
 800d4ea:	d1a4      	bne.n	800d436 <_dtoa_r+0xa66>
 800d4ec:	9b04      	ldr	r3, [sp, #16]
 800d4ee:	3301      	adds	r3, #1
 800d4f0:	9304      	str	r3, [sp, #16]
 800d4f2:	2331      	movs	r3, #49	@ 0x31
 800d4f4:	f88a 3000 	strb.w	r3, [sl]
 800d4f8:	e5b5      	b.n	800d066 <_dtoa_r+0x696>
 800d4fa:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 800d4fc:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 800d55c <_dtoa_r+0xb8c>
 800d500:	b11b      	cbz	r3, 800d50a <_dtoa_r+0xb3a>
 800d502:	f10a 0308 	add.w	r3, sl, #8
 800d506:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 800d508:	6013      	str	r3, [r2, #0]
 800d50a:	4650      	mov	r0, sl
 800d50c:	b017      	add	sp, #92	@ 0x5c
 800d50e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d512:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800d514:	2b01      	cmp	r3, #1
 800d516:	f77f ae3d 	ble.w	800d194 <_dtoa_r+0x7c4>
 800d51a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800d51c:	930a      	str	r3, [sp, #40]	@ 0x28
 800d51e:	2001      	movs	r0, #1
 800d520:	e65b      	b.n	800d1da <_dtoa_r+0x80a>
 800d522:	9b08      	ldr	r3, [sp, #32]
 800d524:	2b00      	cmp	r3, #0
 800d526:	f77f aed6 	ble.w	800d2d6 <_dtoa_r+0x906>
 800d52a:	4656      	mov	r6, sl
 800d52c:	4621      	mov	r1, r4
 800d52e:	4648      	mov	r0, r9
 800d530:	f7ff f9c3 	bl	800c8ba <quorem>
 800d534:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800d538:	9b08      	ldr	r3, [sp, #32]
 800d53a:	f806 8b01 	strb.w	r8, [r6], #1
 800d53e:	eba6 020a 	sub.w	r2, r6, sl
 800d542:	4293      	cmp	r3, r2
 800d544:	ddb3      	ble.n	800d4ae <_dtoa_r+0xade>
 800d546:	4649      	mov	r1, r9
 800d548:	2300      	movs	r3, #0
 800d54a:	220a      	movs	r2, #10
 800d54c:	4658      	mov	r0, fp
 800d54e:	f000 f967 	bl	800d820 <__multadd>
 800d552:	4681      	mov	r9, r0
 800d554:	e7ea      	b.n	800d52c <_dtoa_r+0xb5c>
 800d556:	bf00      	nop
 800d558:	0800e638 	.word	0x0800e638
 800d55c:	0800e5bc 	.word	0x0800e5bc

0800d560 <_free_r>:
 800d560:	b538      	push	{r3, r4, r5, lr}
 800d562:	4605      	mov	r5, r0
 800d564:	2900      	cmp	r1, #0
 800d566:	d040      	beq.n	800d5ea <_free_r+0x8a>
 800d568:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d56c:	1f0c      	subs	r4, r1, #4
 800d56e:	2b00      	cmp	r3, #0
 800d570:	bfb8      	it	lt
 800d572:	18e4      	addlt	r4, r4, r3
 800d574:	f000 f8e6 	bl	800d744 <__malloc_lock>
 800d578:	4a1c      	ldr	r2, [pc, #112]	@ (800d5ec <_free_r+0x8c>)
 800d57a:	6813      	ldr	r3, [r2, #0]
 800d57c:	b933      	cbnz	r3, 800d58c <_free_r+0x2c>
 800d57e:	6063      	str	r3, [r4, #4]
 800d580:	6014      	str	r4, [r2, #0]
 800d582:	4628      	mov	r0, r5
 800d584:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d588:	f000 b8e2 	b.w	800d750 <__malloc_unlock>
 800d58c:	42a3      	cmp	r3, r4
 800d58e:	d908      	bls.n	800d5a2 <_free_r+0x42>
 800d590:	6820      	ldr	r0, [r4, #0]
 800d592:	1821      	adds	r1, r4, r0
 800d594:	428b      	cmp	r3, r1
 800d596:	bf01      	itttt	eq
 800d598:	6819      	ldreq	r1, [r3, #0]
 800d59a:	685b      	ldreq	r3, [r3, #4]
 800d59c:	1809      	addeq	r1, r1, r0
 800d59e:	6021      	streq	r1, [r4, #0]
 800d5a0:	e7ed      	b.n	800d57e <_free_r+0x1e>
 800d5a2:	461a      	mov	r2, r3
 800d5a4:	685b      	ldr	r3, [r3, #4]
 800d5a6:	b10b      	cbz	r3, 800d5ac <_free_r+0x4c>
 800d5a8:	42a3      	cmp	r3, r4
 800d5aa:	d9fa      	bls.n	800d5a2 <_free_r+0x42>
 800d5ac:	6811      	ldr	r1, [r2, #0]
 800d5ae:	1850      	adds	r0, r2, r1
 800d5b0:	42a0      	cmp	r0, r4
 800d5b2:	d10b      	bne.n	800d5cc <_free_r+0x6c>
 800d5b4:	6820      	ldr	r0, [r4, #0]
 800d5b6:	4401      	add	r1, r0
 800d5b8:	1850      	adds	r0, r2, r1
 800d5ba:	4283      	cmp	r3, r0
 800d5bc:	6011      	str	r1, [r2, #0]
 800d5be:	d1e0      	bne.n	800d582 <_free_r+0x22>
 800d5c0:	6818      	ldr	r0, [r3, #0]
 800d5c2:	685b      	ldr	r3, [r3, #4]
 800d5c4:	4408      	add	r0, r1
 800d5c6:	6010      	str	r0, [r2, #0]
 800d5c8:	6053      	str	r3, [r2, #4]
 800d5ca:	e7da      	b.n	800d582 <_free_r+0x22>
 800d5cc:	d902      	bls.n	800d5d4 <_free_r+0x74>
 800d5ce:	230c      	movs	r3, #12
 800d5d0:	602b      	str	r3, [r5, #0]
 800d5d2:	e7d6      	b.n	800d582 <_free_r+0x22>
 800d5d4:	6820      	ldr	r0, [r4, #0]
 800d5d6:	1821      	adds	r1, r4, r0
 800d5d8:	428b      	cmp	r3, r1
 800d5da:	bf01      	itttt	eq
 800d5dc:	6819      	ldreq	r1, [r3, #0]
 800d5de:	685b      	ldreq	r3, [r3, #4]
 800d5e0:	1809      	addeq	r1, r1, r0
 800d5e2:	6021      	streq	r1, [r4, #0]
 800d5e4:	6063      	str	r3, [r4, #4]
 800d5e6:	6054      	str	r4, [r2, #4]
 800d5e8:	e7cb      	b.n	800d582 <_free_r+0x22>
 800d5ea:	bd38      	pop	{r3, r4, r5, pc}
 800d5ec:	2000077c 	.word	0x2000077c

0800d5f0 <malloc>:
 800d5f0:	4b02      	ldr	r3, [pc, #8]	@ (800d5fc <malloc+0xc>)
 800d5f2:	4601      	mov	r1, r0
 800d5f4:	6818      	ldr	r0, [r3, #0]
 800d5f6:	f000 b825 	b.w	800d644 <_malloc_r>
 800d5fa:	bf00      	nop
 800d5fc:	200001d0 	.word	0x200001d0

0800d600 <sbrk_aligned>:
 800d600:	b570      	push	{r4, r5, r6, lr}
 800d602:	4e0f      	ldr	r6, [pc, #60]	@ (800d640 <sbrk_aligned+0x40>)
 800d604:	460c      	mov	r4, r1
 800d606:	6831      	ldr	r1, [r6, #0]
 800d608:	4605      	mov	r5, r0
 800d60a:	b911      	cbnz	r1, 800d612 <sbrk_aligned+0x12>
 800d60c:	f000 fe92 	bl	800e334 <_sbrk_r>
 800d610:	6030      	str	r0, [r6, #0]
 800d612:	4621      	mov	r1, r4
 800d614:	4628      	mov	r0, r5
 800d616:	f000 fe8d 	bl	800e334 <_sbrk_r>
 800d61a:	1c43      	adds	r3, r0, #1
 800d61c:	d103      	bne.n	800d626 <sbrk_aligned+0x26>
 800d61e:	f04f 34ff 	mov.w	r4, #4294967295
 800d622:	4620      	mov	r0, r4
 800d624:	bd70      	pop	{r4, r5, r6, pc}
 800d626:	1cc4      	adds	r4, r0, #3
 800d628:	f024 0403 	bic.w	r4, r4, #3
 800d62c:	42a0      	cmp	r0, r4
 800d62e:	d0f8      	beq.n	800d622 <sbrk_aligned+0x22>
 800d630:	1a21      	subs	r1, r4, r0
 800d632:	4628      	mov	r0, r5
 800d634:	f000 fe7e 	bl	800e334 <_sbrk_r>
 800d638:	3001      	adds	r0, #1
 800d63a:	d1f2      	bne.n	800d622 <sbrk_aligned+0x22>
 800d63c:	e7ef      	b.n	800d61e <sbrk_aligned+0x1e>
 800d63e:	bf00      	nop
 800d640:	20000778 	.word	0x20000778

0800d644 <_malloc_r>:
 800d644:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d648:	1ccd      	adds	r5, r1, #3
 800d64a:	f025 0503 	bic.w	r5, r5, #3
 800d64e:	3508      	adds	r5, #8
 800d650:	2d0c      	cmp	r5, #12
 800d652:	bf38      	it	cc
 800d654:	250c      	movcc	r5, #12
 800d656:	2d00      	cmp	r5, #0
 800d658:	4606      	mov	r6, r0
 800d65a:	db01      	blt.n	800d660 <_malloc_r+0x1c>
 800d65c:	42a9      	cmp	r1, r5
 800d65e:	d904      	bls.n	800d66a <_malloc_r+0x26>
 800d660:	230c      	movs	r3, #12
 800d662:	6033      	str	r3, [r6, #0]
 800d664:	2000      	movs	r0, #0
 800d666:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d66a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800d740 <_malloc_r+0xfc>
 800d66e:	f000 f869 	bl	800d744 <__malloc_lock>
 800d672:	f8d8 3000 	ldr.w	r3, [r8]
 800d676:	461c      	mov	r4, r3
 800d678:	bb44      	cbnz	r4, 800d6cc <_malloc_r+0x88>
 800d67a:	4629      	mov	r1, r5
 800d67c:	4630      	mov	r0, r6
 800d67e:	f7ff ffbf 	bl	800d600 <sbrk_aligned>
 800d682:	1c43      	adds	r3, r0, #1
 800d684:	4604      	mov	r4, r0
 800d686:	d158      	bne.n	800d73a <_malloc_r+0xf6>
 800d688:	f8d8 4000 	ldr.w	r4, [r8]
 800d68c:	4627      	mov	r7, r4
 800d68e:	2f00      	cmp	r7, #0
 800d690:	d143      	bne.n	800d71a <_malloc_r+0xd6>
 800d692:	2c00      	cmp	r4, #0
 800d694:	d04b      	beq.n	800d72e <_malloc_r+0xea>
 800d696:	6823      	ldr	r3, [r4, #0]
 800d698:	4639      	mov	r1, r7
 800d69a:	4630      	mov	r0, r6
 800d69c:	eb04 0903 	add.w	r9, r4, r3
 800d6a0:	f000 fe48 	bl	800e334 <_sbrk_r>
 800d6a4:	4581      	cmp	r9, r0
 800d6a6:	d142      	bne.n	800d72e <_malloc_r+0xea>
 800d6a8:	6821      	ldr	r1, [r4, #0]
 800d6aa:	4630      	mov	r0, r6
 800d6ac:	1a6d      	subs	r5, r5, r1
 800d6ae:	4629      	mov	r1, r5
 800d6b0:	f7ff ffa6 	bl	800d600 <sbrk_aligned>
 800d6b4:	3001      	adds	r0, #1
 800d6b6:	d03a      	beq.n	800d72e <_malloc_r+0xea>
 800d6b8:	6823      	ldr	r3, [r4, #0]
 800d6ba:	442b      	add	r3, r5
 800d6bc:	6023      	str	r3, [r4, #0]
 800d6be:	f8d8 3000 	ldr.w	r3, [r8]
 800d6c2:	685a      	ldr	r2, [r3, #4]
 800d6c4:	bb62      	cbnz	r2, 800d720 <_malloc_r+0xdc>
 800d6c6:	f8c8 7000 	str.w	r7, [r8]
 800d6ca:	e00f      	b.n	800d6ec <_malloc_r+0xa8>
 800d6cc:	6822      	ldr	r2, [r4, #0]
 800d6ce:	1b52      	subs	r2, r2, r5
 800d6d0:	d420      	bmi.n	800d714 <_malloc_r+0xd0>
 800d6d2:	2a0b      	cmp	r2, #11
 800d6d4:	d917      	bls.n	800d706 <_malloc_r+0xc2>
 800d6d6:	1961      	adds	r1, r4, r5
 800d6d8:	42a3      	cmp	r3, r4
 800d6da:	6025      	str	r5, [r4, #0]
 800d6dc:	bf18      	it	ne
 800d6de:	6059      	strne	r1, [r3, #4]
 800d6e0:	6863      	ldr	r3, [r4, #4]
 800d6e2:	bf08      	it	eq
 800d6e4:	f8c8 1000 	streq.w	r1, [r8]
 800d6e8:	5162      	str	r2, [r4, r5]
 800d6ea:	604b      	str	r3, [r1, #4]
 800d6ec:	4630      	mov	r0, r6
 800d6ee:	f000 f82f 	bl	800d750 <__malloc_unlock>
 800d6f2:	f104 000b 	add.w	r0, r4, #11
 800d6f6:	1d23      	adds	r3, r4, #4
 800d6f8:	f020 0007 	bic.w	r0, r0, #7
 800d6fc:	1ac2      	subs	r2, r0, r3
 800d6fe:	bf1c      	itt	ne
 800d700:	1a1b      	subne	r3, r3, r0
 800d702:	50a3      	strne	r3, [r4, r2]
 800d704:	e7af      	b.n	800d666 <_malloc_r+0x22>
 800d706:	6862      	ldr	r2, [r4, #4]
 800d708:	42a3      	cmp	r3, r4
 800d70a:	bf0c      	ite	eq
 800d70c:	f8c8 2000 	streq.w	r2, [r8]
 800d710:	605a      	strne	r2, [r3, #4]
 800d712:	e7eb      	b.n	800d6ec <_malloc_r+0xa8>
 800d714:	4623      	mov	r3, r4
 800d716:	6864      	ldr	r4, [r4, #4]
 800d718:	e7ae      	b.n	800d678 <_malloc_r+0x34>
 800d71a:	463c      	mov	r4, r7
 800d71c:	687f      	ldr	r7, [r7, #4]
 800d71e:	e7b6      	b.n	800d68e <_malloc_r+0x4a>
 800d720:	461a      	mov	r2, r3
 800d722:	685b      	ldr	r3, [r3, #4]
 800d724:	42a3      	cmp	r3, r4
 800d726:	d1fb      	bne.n	800d720 <_malloc_r+0xdc>
 800d728:	2300      	movs	r3, #0
 800d72a:	6053      	str	r3, [r2, #4]
 800d72c:	e7de      	b.n	800d6ec <_malloc_r+0xa8>
 800d72e:	230c      	movs	r3, #12
 800d730:	4630      	mov	r0, r6
 800d732:	6033      	str	r3, [r6, #0]
 800d734:	f000 f80c 	bl	800d750 <__malloc_unlock>
 800d738:	e794      	b.n	800d664 <_malloc_r+0x20>
 800d73a:	6005      	str	r5, [r0, #0]
 800d73c:	e7d6      	b.n	800d6ec <_malloc_r+0xa8>
 800d73e:	bf00      	nop
 800d740:	2000077c 	.word	0x2000077c

0800d744 <__malloc_lock>:
 800d744:	4801      	ldr	r0, [pc, #4]	@ (800d74c <__malloc_lock+0x8>)
 800d746:	f7ff b8a8 	b.w	800c89a <__retarget_lock_acquire_recursive>
 800d74a:	bf00      	nop
 800d74c:	20000774 	.word	0x20000774

0800d750 <__malloc_unlock>:
 800d750:	4801      	ldr	r0, [pc, #4]	@ (800d758 <__malloc_unlock+0x8>)
 800d752:	f7ff b8a3 	b.w	800c89c <__retarget_lock_release_recursive>
 800d756:	bf00      	nop
 800d758:	20000774 	.word	0x20000774

0800d75c <_Balloc>:
 800d75c:	b570      	push	{r4, r5, r6, lr}
 800d75e:	69c6      	ldr	r6, [r0, #28]
 800d760:	4604      	mov	r4, r0
 800d762:	460d      	mov	r5, r1
 800d764:	b976      	cbnz	r6, 800d784 <_Balloc+0x28>
 800d766:	2010      	movs	r0, #16
 800d768:	f7ff ff42 	bl	800d5f0 <malloc>
 800d76c:	4602      	mov	r2, r0
 800d76e:	61e0      	str	r0, [r4, #28]
 800d770:	b920      	cbnz	r0, 800d77c <_Balloc+0x20>
 800d772:	216b      	movs	r1, #107	@ 0x6b
 800d774:	4b17      	ldr	r3, [pc, #92]	@ (800d7d4 <_Balloc+0x78>)
 800d776:	4818      	ldr	r0, [pc, #96]	@ (800d7d8 <_Balloc+0x7c>)
 800d778:	f000 fdfa 	bl	800e370 <__assert_func>
 800d77c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800d780:	6006      	str	r6, [r0, #0]
 800d782:	60c6      	str	r6, [r0, #12]
 800d784:	69e6      	ldr	r6, [r4, #28]
 800d786:	68f3      	ldr	r3, [r6, #12]
 800d788:	b183      	cbz	r3, 800d7ac <_Balloc+0x50>
 800d78a:	69e3      	ldr	r3, [r4, #28]
 800d78c:	68db      	ldr	r3, [r3, #12]
 800d78e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800d792:	b9b8      	cbnz	r0, 800d7c4 <_Balloc+0x68>
 800d794:	2101      	movs	r1, #1
 800d796:	fa01 f605 	lsl.w	r6, r1, r5
 800d79a:	1d72      	adds	r2, r6, #5
 800d79c:	4620      	mov	r0, r4
 800d79e:	0092      	lsls	r2, r2, #2
 800d7a0:	f000 fe04 	bl	800e3ac <_calloc_r>
 800d7a4:	b160      	cbz	r0, 800d7c0 <_Balloc+0x64>
 800d7a6:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800d7aa:	e00e      	b.n	800d7ca <_Balloc+0x6e>
 800d7ac:	2221      	movs	r2, #33	@ 0x21
 800d7ae:	2104      	movs	r1, #4
 800d7b0:	4620      	mov	r0, r4
 800d7b2:	f000 fdfb 	bl	800e3ac <_calloc_r>
 800d7b6:	69e3      	ldr	r3, [r4, #28]
 800d7b8:	60f0      	str	r0, [r6, #12]
 800d7ba:	68db      	ldr	r3, [r3, #12]
 800d7bc:	2b00      	cmp	r3, #0
 800d7be:	d1e4      	bne.n	800d78a <_Balloc+0x2e>
 800d7c0:	2000      	movs	r0, #0
 800d7c2:	bd70      	pop	{r4, r5, r6, pc}
 800d7c4:	6802      	ldr	r2, [r0, #0]
 800d7c6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800d7ca:	2300      	movs	r3, #0
 800d7cc:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800d7d0:	e7f7      	b.n	800d7c2 <_Balloc+0x66>
 800d7d2:	bf00      	nop
 800d7d4:	0800e5c9 	.word	0x0800e5c9
 800d7d8:	0800e649 	.word	0x0800e649

0800d7dc <_Bfree>:
 800d7dc:	b570      	push	{r4, r5, r6, lr}
 800d7de:	69c6      	ldr	r6, [r0, #28]
 800d7e0:	4605      	mov	r5, r0
 800d7e2:	460c      	mov	r4, r1
 800d7e4:	b976      	cbnz	r6, 800d804 <_Bfree+0x28>
 800d7e6:	2010      	movs	r0, #16
 800d7e8:	f7ff ff02 	bl	800d5f0 <malloc>
 800d7ec:	4602      	mov	r2, r0
 800d7ee:	61e8      	str	r0, [r5, #28]
 800d7f0:	b920      	cbnz	r0, 800d7fc <_Bfree+0x20>
 800d7f2:	218f      	movs	r1, #143	@ 0x8f
 800d7f4:	4b08      	ldr	r3, [pc, #32]	@ (800d818 <_Bfree+0x3c>)
 800d7f6:	4809      	ldr	r0, [pc, #36]	@ (800d81c <_Bfree+0x40>)
 800d7f8:	f000 fdba 	bl	800e370 <__assert_func>
 800d7fc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800d800:	6006      	str	r6, [r0, #0]
 800d802:	60c6      	str	r6, [r0, #12]
 800d804:	b13c      	cbz	r4, 800d816 <_Bfree+0x3a>
 800d806:	69eb      	ldr	r3, [r5, #28]
 800d808:	6862      	ldr	r2, [r4, #4]
 800d80a:	68db      	ldr	r3, [r3, #12]
 800d80c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800d810:	6021      	str	r1, [r4, #0]
 800d812:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800d816:	bd70      	pop	{r4, r5, r6, pc}
 800d818:	0800e5c9 	.word	0x0800e5c9
 800d81c:	0800e649 	.word	0x0800e649

0800d820 <__multadd>:
 800d820:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d824:	4607      	mov	r7, r0
 800d826:	460c      	mov	r4, r1
 800d828:	461e      	mov	r6, r3
 800d82a:	2000      	movs	r0, #0
 800d82c:	690d      	ldr	r5, [r1, #16]
 800d82e:	f101 0c14 	add.w	ip, r1, #20
 800d832:	f8dc 3000 	ldr.w	r3, [ip]
 800d836:	3001      	adds	r0, #1
 800d838:	b299      	uxth	r1, r3
 800d83a:	fb02 6101 	mla	r1, r2, r1, r6
 800d83e:	0c1e      	lsrs	r6, r3, #16
 800d840:	0c0b      	lsrs	r3, r1, #16
 800d842:	fb02 3306 	mla	r3, r2, r6, r3
 800d846:	b289      	uxth	r1, r1
 800d848:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800d84c:	4285      	cmp	r5, r0
 800d84e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800d852:	f84c 1b04 	str.w	r1, [ip], #4
 800d856:	dcec      	bgt.n	800d832 <__multadd+0x12>
 800d858:	b30e      	cbz	r6, 800d89e <__multadd+0x7e>
 800d85a:	68a3      	ldr	r3, [r4, #8]
 800d85c:	42ab      	cmp	r3, r5
 800d85e:	dc19      	bgt.n	800d894 <__multadd+0x74>
 800d860:	6861      	ldr	r1, [r4, #4]
 800d862:	4638      	mov	r0, r7
 800d864:	3101      	adds	r1, #1
 800d866:	f7ff ff79 	bl	800d75c <_Balloc>
 800d86a:	4680      	mov	r8, r0
 800d86c:	b928      	cbnz	r0, 800d87a <__multadd+0x5a>
 800d86e:	4602      	mov	r2, r0
 800d870:	21ba      	movs	r1, #186	@ 0xba
 800d872:	4b0c      	ldr	r3, [pc, #48]	@ (800d8a4 <__multadd+0x84>)
 800d874:	480c      	ldr	r0, [pc, #48]	@ (800d8a8 <__multadd+0x88>)
 800d876:	f000 fd7b 	bl	800e370 <__assert_func>
 800d87a:	6922      	ldr	r2, [r4, #16]
 800d87c:	f104 010c 	add.w	r1, r4, #12
 800d880:	3202      	adds	r2, #2
 800d882:	0092      	lsls	r2, r2, #2
 800d884:	300c      	adds	r0, #12
 800d886:	f000 fd65 	bl	800e354 <memcpy>
 800d88a:	4621      	mov	r1, r4
 800d88c:	4638      	mov	r0, r7
 800d88e:	f7ff ffa5 	bl	800d7dc <_Bfree>
 800d892:	4644      	mov	r4, r8
 800d894:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800d898:	3501      	adds	r5, #1
 800d89a:	615e      	str	r6, [r3, #20]
 800d89c:	6125      	str	r5, [r4, #16]
 800d89e:	4620      	mov	r0, r4
 800d8a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d8a4:	0800e638 	.word	0x0800e638
 800d8a8:	0800e649 	.word	0x0800e649

0800d8ac <__hi0bits>:
 800d8ac:	4603      	mov	r3, r0
 800d8ae:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800d8b2:	bf3a      	itte	cc
 800d8b4:	0403      	lslcc	r3, r0, #16
 800d8b6:	2010      	movcc	r0, #16
 800d8b8:	2000      	movcs	r0, #0
 800d8ba:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800d8be:	bf3c      	itt	cc
 800d8c0:	021b      	lslcc	r3, r3, #8
 800d8c2:	3008      	addcc	r0, #8
 800d8c4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800d8c8:	bf3c      	itt	cc
 800d8ca:	011b      	lslcc	r3, r3, #4
 800d8cc:	3004      	addcc	r0, #4
 800d8ce:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800d8d2:	bf3c      	itt	cc
 800d8d4:	009b      	lslcc	r3, r3, #2
 800d8d6:	3002      	addcc	r0, #2
 800d8d8:	2b00      	cmp	r3, #0
 800d8da:	db05      	blt.n	800d8e8 <__hi0bits+0x3c>
 800d8dc:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800d8e0:	f100 0001 	add.w	r0, r0, #1
 800d8e4:	bf08      	it	eq
 800d8e6:	2020      	moveq	r0, #32
 800d8e8:	4770      	bx	lr

0800d8ea <__lo0bits>:
 800d8ea:	6803      	ldr	r3, [r0, #0]
 800d8ec:	4602      	mov	r2, r0
 800d8ee:	f013 0007 	ands.w	r0, r3, #7
 800d8f2:	d00b      	beq.n	800d90c <__lo0bits+0x22>
 800d8f4:	07d9      	lsls	r1, r3, #31
 800d8f6:	d421      	bmi.n	800d93c <__lo0bits+0x52>
 800d8f8:	0798      	lsls	r0, r3, #30
 800d8fa:	bf49      	itett	mi
 800d8fc:	085b      	lsrmi	r3, r3, #1
 800d8fe:	089b      	lsrpl	r3, r3, #2
 800d900:	2001      	movmi	r0, #1
 800d902:	6013      	strmi	r3, [r2, #0]
 800d904:	bf5c      	itt	pl
 800d906:	2002      	movpl	r0, #2
 800d908:	6013      	strpl	r3, [r2, #0]
 800d90a:	4770      	bx	lr
 800d90c:	b299      	uxth	r1, r3
 800d90e:	b909      	cbnz	r1, 800d914 <__lo0bits+0x2a>
 800d910:	2010      	movs	r0, #16
 800d912:	0c1b      	lsrs	r3, r3, #16
 800d914:	b2d9      	uxtb	r1, r3
 800d916:	b909      	cbnz	r1, 800d91c <__lo0bits+0x32>
 800d918:	3008      	adds	r0, #8
 800d91a:	0a1b      	lsrs	r3, r3, #8
 800d91c:	0719      	lsls	r1, r3, #28
 800d91e:	bf04      	itt	eq
 800d920:	091b      	lsreq	r3, r3, #4
 800d922:	3004      	addeq	r0, #4
 800d924:	0799      	lsls	r1, r3, #30
 800d926:	bf04      	itt	eq
 800d928:	089b      	lsreq	r3, r3, #2
 800d92a:	3002      	addeq	r0, #2
 800d92c:	07d9      	lsls	r1, r3, #31
 800d92e:	d403      	bmi.n	800d938 <__lo0bits+0x4e>
 800d930:	085b      	lsrs	r3, r3, #1
 800d932:	f100 0001 	add.w	r0, r0, #1
 800d936:	d003      	beq.n	800d940 <__lo0bits+0x56>
 800d938:	6013      	str	r3, [r2, #0]
 800d93a:	4770      	bx	lr
 800d93c:	2000      	movs	r0, #0
 800d93e:	4770      	bx	lr
 800d940:	2020      	movs	r0, #32
 800d942:	4770      	bx	lr

0800d944 <__i2b>:
 800d944:	b510      	push	{r4, lr}
 800d946:	460c      	mov	r4, r1
 800d948:	2101      	movs	r1, #1
 800d94a:	f7ff ff07 	bl	800d75c <_Balloc>
 800d94e:	4602      	mov	r2, r0
 800d950:	b928      	cbnz	r0, 800d95e <__i2b+0x1a>
 800d952:	f240 1145 	movw	r1, #325	@ 0x145
 800d956:	4b04      	ldr	r3, [pc, #16]	@ (800d968 <__i2b+0x24>)
 800d958:	4804      	ldr	r0, [pc, #16]	@ (800d96c <__i2b+0x28>)
 800d95a:	f000 fd09 	bl	800e370 <__assert_func>
 800d95e:	2301      	movs	r3, #1
 800d960:	6144      	str	r4, [r0, #20]
 800d962:	6103      	str	r3, [r0, #16]
 800d964:	bd10      	pop	{r4, pc}
 800d966:	bf00      	nop
 800d968:	0800e638 	.word	0x0800e638
 800d96c:	0800e649 	.word	0x0800e649

0800d970 <__multiply>:
 800d970:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d974:	4614      	mov	r4, r2
 800d976:	690a      	ldr	r2, [r1, #16]
 800d978:	6923      	ldr	r3, [r4, #16]
 800d97a:	460f      	mov	r7, r1
 800d97c:	429a      	cmp	r2, r3
 800d97e:	bfa2      	ittt	ge
 800d980:	4623      	movge	r3, r4
 800d982:	460c      	movge	r4, r1
 800d984:	461f      	movge	r7, r3
 800d986:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800d98a:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800d98e:	68a3      	ldr	r3, [r4, #8]
 800d990:	6861      	ldr	r1, [r4, #4]
 800d992:	eb0a 0609 	add.w	r6, sl, r9
 800d996:	42b3      	cmp	r3, r6
 800d998:	b085      	sub	sp, #20
 800d99a:	bfb8      	it	lt
 800d99c:	3101      	addlt	r1, #1
 800d99e:	f7ff fedd 	bl	800d75c <_Balloc>
 800d9a2:	b930      	cbnz	r0, 800d9b2 <__multiply+0x42>
 800d9a4:	4602      	mov	r2, r0
 800d9a6:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800d9aa:	4b43      	ldr	r3, [pc, #268]	@ (800dab8 <__multiply+0x148>)
 800d9ac:	4843      	ldr	r0, [pc, #268]	@ (800dabc <__multiply+0x14c>)
 800d9ae:	f000 fcdf 	bl	800e370 <__assert_func>
 800d9b2:	f100 0514 	add.w	r5, r0, #20
 800d9b6:	462b      	mov	r3, r5
 800d9b8:	2200      	movs	r2, #0
 800d9ba:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800d9be:	4543      	cmp	r3, r8
 800d9c0:	d321      	bcc.n	800da06 <__multiply+0x96>
 800d9c2:	f107 0114 	add.w	r1, r7, #20
 800d9c6:	f104 0214 	add.w	r2, r4, #20
 800d9ca:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800d9ce:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800d9d2:	9302      	str	r3, [sp, #8]
 800d9d4:	1b13      	subs	r3, r2, r4
 800d9d6:	3b15      	subs	r3, #21
 800d9d8:	f023 0303 	bic.w	r3, r3, #3
 800d9dc:	3304      	adds	r3, #4
 800d9de:	f104 0715 	add.w	r7, r4, #21
 800d9e2:	42ba      	cmp	r2, r7
 800d9e4:	bf38      	it	cc
 800d9e6:	2304      	movcc	r3, #4
 800d9e8:	9301      	str	r3, [sp, #4]
 800d9ea:	9b02      	ldr	r3, [sp, #8]
 800d9ec:	9103      	str	r1, [sp, #12]
 800d9ee:	428b      	cmp	r3, r1
 800d9f0:	d80c      	bhi.n	800da0c <__multiply+0x9c>
 800d9f2:	2e00      	cmp	r6, #0
 800d9f4:	dd03      	ble.n	800d9fe <__multiply+0x8e>
 800d9f6:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800d9fa:	2b00      	cmp	r3, #0
 800d9fc:	d05a      	beq.n	800dab4 <__multiply+0x144>
 800d9fe:	6106      	str	r6, [r0, #16]
 800da00:	b005      	add	sp, #20
 800da02:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800da06:	f843 2b04 	str.w	r2, [r3], #4
 800da0a:	e7d8      	b.n	800d9be <__multiply+0x4e>
 800da0c:	f8b1 a000 	ldrh.w	sl, [r1]
 800da10:	f1ba 0f00 	cmp.w	sl, #0
 800da14:	d023      	beq.n	800da5e <__multiply+0xee>
 800da16:	46a9      	mov	r9, r5
 800da18:	f04f 0c00 	mov.w	ip, #0
 800da1c:	f104 0e14 	add.w	lr, r4, #20
 800da20:	f85e 7b04 	ldr.w	r7, [lr], #4
 800da24:	f8d9 3000 	ldr.w	r3, [r9]
 800da28:	fa1f fb87 	uxth.w	fp, r7
 800da2c:	b29b      	uxth	r3, r3
 800da2e:	fb0a 330b 	mla	r3, sl, fp, r3
 800da32:	4463      	add	r3, ip
 800da34:	f8d9 c000 	ldr.w	ip, [r9]
 800da38:	0c3f      	lsrs	r7, r7, #16
 800da3a:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 800da3e:	fb0a c707 	mla	r7, sl, r7, ip
 800da42:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800da46:	b29b      	uxth	r3, r3
 800da48:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800da4c:	4572      	cmp	r2, lr
 800da4e:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800da52:	f849 3b04 	str.w	r3, [r9], #4
 800da56:	d8e3      	bhi.n	800da20 <__multiply+0xb0>
 800da58:	9b01      	ldr	r3, [sp, #4]
 800da5a:	f845 c003 	str.w	ip, [r5, r3]
 800da5e:	9b03      	ldr	r3, [sp, #12]
 800da60:	3104      	adds	r1, #4
 800da62:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800da66:	f1b9 0f00 	cmp.w	r9, #0
 800da6a:	d021      	beq.n	800dab0 <__multiply+0x140>
 800da6c:	46ae      	mov	lr, r5
 800da6e:	f04f 0a00 	mov.w	sl, #0
 800da72:	682b      	ldr	r3, [r5, #0]
 800da74:	f104 0c14 	add.w	ip, r4, #20
 800da78:	f8bc b000 	ldrh.w	fp, [ip]
 800da7c:	f8be 7002 	ldrh.w	r7, [lr, #2]
 800da80:	b29b      	uxth	r3, r3
 800da82:	fb09 770b 	mla	r7, r9, fp, r7
 800da86:	4457      	add	r7, sl
 800da88:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800da8c:	f84e 3b04 	str.w	r3, [lr], #4
 800da90:	f85c 3b04 	ldr.w	r3, [ip], #4
 800da94:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800da98:	f8be 3000 	ldrh.w	r3, [lr]
 800da9c:	4562      	cmp	r2, ip
 800da9e:	fb09 330a 	mla	r3, r9, sl, r3
 800daa2:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800daa6:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800daaa:	d8e5      	bhi.n	800da78 <__multiply+0x108>
 800daac:	9f01      	ldr	r7, [sp, #4]
 800daae:	51eb      	str	r3, [r5, r7]
 800dab0:	3504      	adds	r5, #4
 800dab2:	e79a      	b.n	800d9ea <__multiply+0x7a>
 800dab4:	3e01      	subs	r6, #1
 800dab6:	e79c      	b.n	800d9f2 <__multiply+0x82>
 800dab8:	0800e638 	.word	0x0800e638
 800dabc:	0800e649 	.word	0x0800e649

0800dac0 <__pow5mult>:
 800dac0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800dac4:	4615      	mov	r5, r2
 800dac6:	f012 0203 	ands.w	r2, r2, #3
 800daca:	4607      	mov	r7, r0
 800dacc:	460e      	mov	r6, r1
 800dace:	d007      	beq.n	800dae0 <__pow5mult+0x20>
 800dad0:	4c25      	ldr	r4, [pc, #148]	@ (800db68 <__pow5mult+0xa8>)
 800dad2:	3a01      	subs	r2, #1
 800dad4:	2300      	movs	r3, #0
 800dad6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800dada:	f7ff fea1 	bl	800d820 <__multadd>
 800dade:	4606      	mov	r6, r0
 800dae0:	10ad      	asrs	r5, r5, #2
 800dae2:	d03d      	beq.n	800db60 <__pow5mult+0xa0>
 800dae4:	69fc      	ldr	r4, [r7, #28]
 800dae6:	b97c      	cbnz	r4, 800db08 <__pow5mult+0x48>
 800dae8:	2010      	movs	r0, #16
 800daea:	f7ff fd81 	bl	800d5f0 <malloc>
 800daee:	4602      	mov	r2, r0
 800daf0:	61f8      	str	r0, [r7, #28]
 800daf2:	b928      	cbnz	r0, 800db00 <__pow5mult+0x40>
 800daf4:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800daf8:	4b1c      	ldr	r3, [pc, #112]	@ (800db6c <__pow5mult+0xac>)
 800dafa:	481d      	ldr	r0, [pc, #116]	@ (800db70 <__pow5mult+0xb0>)
 800dafc:	f000 fc38 	bl	800e370 <__assert_func>
 800db00:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800db04:	6004      	str	r4, [r0, #0]
 800db06:	60c4      	str	r4, [r0, #12]
 800db08:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800db0c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800db10:	b94c      	cbnz	r4, 800db26 <__pow5mult+0x66>
 800db12:	f240 2171 	movw	r1, #625	@ 0x271
 800db16:	4638      	mov	r0, r7
 800db18:	f7ff ff14 	bl	800d944 <__i2b>
 800db1c:	2300      	movs	r3, #0
 800db1e:	4604      	mov	r4, r0
 800db20:	f8c8 0008 	str.w	r0, [r8, #8]
 800db24:	6003      	str	r3, [r0, #0]
 800db26:	f04f 0900 	mov.w	r9, #0
 800db2a:	07eb      	lsls	r3, r5, #31
 800db2c:	d50a      	bpl.n	800db44 <__pow5mult+0x84>
 800db2e:	4631      	mov	r1, r6
 800db30:	4622      	mov	r2, r4
 800db32:	4638      	mov	r0, r7
 800db34:	f7ff ff1c 	bl	800d970 <__multiply>
 800db38:	4680      	mov	r8, r0
 800db3a:	4631      	mov	r1, r6
 800db3c:	4638      	mov	r0, r7
 800db3e:	f7ff fe4d 	bl	800d7dc <_Bfree>
 800db42:	4646      	mov	r6, r8
 800db44:	106d      	asrs	r5, r5, #1
 800db46:	d00b      	beq.n	800db60 <__pow5mult+0xa0>
 800db48:	6820      	ldr	r0, [r4, #0]
 800db4a:	b938      	cbnz	r0, 800db5c <__pow5mult+0x9c>
 800db4c:	4622      	mov	r2, r4
 800db4e:	4621      	mov	r1, r4
 800db50:	4638      	mov	r0, r7
 800db52:	f7ff ff0d 	bl	800d970 <__multiply>
 800db56:	6020      	str	r0, [r4, #0]
 800db58:	f8c0 9000 	str.w	r9, [r0]
 800db5c:	4604      	mov	r4, r0
 800db5e:	e7e4      	b.n	800db2a <__pow5mult+0x6a>
 800db60:	4630      	mov	r0, r6
 800db62:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800db66:	bf00      	nop
 800db68:	0800e6a4 	.word	0x0800e6a4
 800db6c:	0800e5c9 	.word	0x0800e5c9
 800db70:	0800e649 	.word	0x0800e649

0800db74 <__lshift>:
 800db74:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800db78:	460c      	mov	r4, r1
 800db7a:	4607      	mov	r7, r0
 800db7c:	4691      	mov	r9, r2
 800db7e:	6923      	ldr	r3, [r4, #16]
 800db80:	6849      	ldr	r1, [r1, #4]
 800db82:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800db86:	68a3      	ldr	r3, [r4, #8]
 800db88:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800db8c:	f108 0601 	add.w	r6, r8, #1
 800db90:	42b3      	cmp	r3, r6
 800db92:	db0b      	blt.n	800dbac <__lshift+0x38>
 800db94:	4638      	mov	r0, r7
 800db96:	f7ff fde1 	bl	800d75c <_Balloc>
 800db9a:	4605      	mov	r5, r0
 800db9c:	b948      	cbnz	r0, 800dbb2 <__lshift+0x3e>
 800db9e:	4602      	mov	r2, r0
 800dba0:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800dba4:	4b27      	ldr	r3, [pc, #156]	@ (800dc44 <__lshift+0xd0>)
 800dba6:	4828      	ldr	r0, [pc, #160]	@ (800dc48 <__lshift+0xd4>)
 800dba8:	f000 fbe2 	bl	800e370 <__assert_func>
 800dbac:	3101      	adds	r1, #1
 800dbae:	005b      	lsls	r3, r3, #1
 800dbb0:	e7ee      	b.n	800db90 <__lshift+0x1c>
 800dbb2:	2300      	movs	r3, #0
 800dbb4:	f100 0114 	add.w	r1, r0, #20
 800dbb8:	f100 0210 	add.w	r2, r0, #16
 800dbbc:	4618      	mov	r0, r3
 800dbbe:	4553      	cmp	r3, sl
 800dbc0:	db33      	blt.n	800dc2a <__lshift+0xb6>
 800dbc2:	6920      	ldr	r0, [r4, #16]
 800dbc4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800dbc8:	f104 0314 	add.w	r3, r4, #20
 800dbcc:	f019 091f 	ands.w	r9, r9, #31
 800dbd0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800dbd4:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800dbd8:	d02b      	beq.n	800dc32 <__lshift+0xbe>
 800dbda:	468a      	mov	sl, r1
 800dbdc:	2200      	movs	r2, #0
 800dbde:	f1c9 0e20 	rsb	lr, r9, #32
 800dbe2:	6818      	ldr	r0, [r3, #0]
 800dbe4:	fa00 f009 	lsl.w	r0, r0, r9
 800dbe8:	4310      	orrs	r0, r2
 800dbea:	f84a 0b04 	str.w	r0, [sl], #4
 800dbee:	f853 2b04 	ldr.w	r2, [r3], #4
 800dbf2:	459c      	cmp	ip, r3
 800dbf4:	fa22 f20e 	lsr.w	r2, r2, lr
 800dbf8:	d8f3      	bhi.n	800dbe2 <__lshift+0x6e>
 800dbfa:	ebac 0304 	sub.w	r3, ip, r4
 800dbfe:	3b15      	subs	r3, #21
 800dc00:	f023 0303 	bic.w	r3, r3, #3
 800dc04:	3304      	adds	r3, #4
 800dc06:	f104 0015 	add.w	r0, r4, #21
 800dc0a:	4584      	cmp	ip, r0
 800dc0c:	bf38      	it	cc
 800dc0e:	2304      	movcc	r3, #4
 800dc10:	50ca      	str	r2, [r1, r3]
 800dc12:	b10a      	cbz	r2, 800dc18 <__lshift+0xa4>
 800dc14:	f108 0602 	add.w	r6, r8, #2
 800dc18:	3e01      	subs	r6, #1
 800dc1a:	4638      	mov	r0, r7
 800dc1c:	4621      	mov	r1, r4
 800dc1e:	612e      	str	r6, [r5, #16]
 800dc20:	f7ff fddc 	bl	800d7dc <_Bfree>
 800dc24:	4628      	mov	r0, r5
 800dc26:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800dc2a:	f842 0f04 	str.w	r0, [r2, #4]!
 800dc2e:	3301      	adds	r3, #1
 800dc30:	e7c5      	b.n	800dbbe <__lshift+0x4a>
 800dc32:	3904      	subs	r1, #4
 800dc34:	f853 2b04 	ldr.w	r2, [r3], #4
 800dc38:	459c      	cmp	ip, r3
 800dc3a:	f841 2f04 	str.w	r2, [r1, #4]!
 800dc3e:	d8f9      	bhi.n	800dc34 <__lshift+0xc0>
 800dc40:	e7ea      	b.n	800dc18 <__lshift+0xa4>
 800dc42:	bf00      	nop
 800dc44:	0800e638 	.word	0x0800e638
 800dc48:	0800e649 	.word	0x0800e649

0800dc4c <__mcmp>:
 800dc4c:	4603      	mov	r3, r0
 800dc4e:	690a      	ldr	r2, [r1, #16]
 800dc50:	6900      	ldr	r0, [r0, #16]
 800dc52:	b530      	push	{r4, r5, lr}
 800dc54:	1a80      	subs	r0, r0, r2
 800dc56:	d10e      	bne.n	800dc76 <__mcmp+0x2a>
 800dc58:	3314      	adds	r3, #20
 800dc5a:	3114      	adds	r1, #20
 800dc5c:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800dc60:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800dc64:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800dc68:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800dc6c:	4295      	cmp	r5, r2
 800dc6e:	d003      	beq.n	800dc78 <__mcmp+0x2c>
 800dc70:	d205      	bcs.n	800dc7e <__mcmp+0x32>
 800dc72:	f04f 30ff 	mov.w	r0, #4294967295
 800dc76:	bd30      	pop	{r4, r5, pc}
 800dc78:	42a3      	cmp	r3, r4
 800dc7a:	d3f3      	bcc.n	800dc64 <__mcmp+0x18>
 800dc7c:	e7fb      	b.n	800dc76 <__mcmp+0x2a>
 800dc7e:	2001      	movs	r0, #1
 800dc80:	e7f9      	b.n	800dc76 <__mcmp+0x2a>
	...

0800dc84 <__mdiff>:
 800dc84:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dc88:	4689      	mov	r9, r1
 800dc8a:	4606      	mov	r6, r0
 800dc8c:	4611      	mov	r1, r2
 800dc8e:	4648      	mov	r0, r9
 800dc90:	4614      	mov	r4, r2
 800dc92:	f7ff ffdb 	bl	800dc4c <__mcmp>
 800dc96:	1e05      	subs	r5, r0, #0
 800dc98:	d112      	bne.n	800dcc0 <__mdiff+0x3c>
 800dc9a:	4629      	mov	r1, r5
 800dc9c:	4630      	mov	r0, r6
 800dc9e:	f7ff fd5d 	bl	800d75c <_Balloc>
 800dca2:	4602      	mov	r2, r0
 800dca4:	b928      	cbnz	r0, 800dcb2 <__mdiff+0x2e>
 800dca6:	f240 2137 	movw	r1, #567	@ 0x237
 800dcaa:	4b3e      	ldr	r3, [pc, #248]	@ (800dda4 <__mdiff+0x120>)
 800dcac:	483e      	ldr	r0, [pc, #248]	@ (800dda8 <__mdiff+0x124>)
 800dcae:	f000 fb5f 	bl	800e370 <__assert_func>
 800dcb2:	2301      	movs	r3, #1
 800dcb4:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800dcb8:	4610      	mov	r0, r2
 800dcba:	b003      	add	sp, #12
 800dcbc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dcc0:	bfbc      	itt	lt
 800dcc2:	464b      	movlt	r3, r9
 800dcc4:	46a1      	movlt	r9, r4
 800dcc6:	4630      	mov	r0, r6
 800dcc8:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800dccc:	bfba      	itte	lt
 800dcce:	461c      	movlt	r4, r3
 800dcd0:	2501      	movlt	r5, #1
 800dcd2:	2500      	movge	r5, #0
 800dcd4:	f7ff fd42 	bl	800d75c <_Balloc>
 800dcd8:	4602      	mov	r2, r0
 800dcda:	b918      	cbnz	r0, 800dce4 <__mdiff+0x60>
 800dcdc:	f240 2145 	movw	r1, #581	@ 0x245
 800dce0:	4b30      	ldr	r3, [pc, #192]	@ (800dda4 <__mdiff+0x120>)
 800dce2:	e7e3      	b.n	800dcac <__mdiff+0x28>
 800dce4:	f100 0b14 	add.w	fp, r0, #20
 800dce8:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800dcec:	f109 0310 	add.w	r3, r9, #16
 800dcf0:	60c5      	str	r5, [r0, #12]
 800dcf2:	f04f 0c00 	mov.w	ip, #0
 800dcf6:	f109 0514 	add.w	r5, r9, #20
 800dcfa:	46d9      	mov	r9, fp
 800dcfc:	6926      	ldr	r6, [r4, #16]
 800dcfe:	f104 0e14 	add.w	lr, r4, #20
 800dd02:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800dd06:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800dd0a:	9301      	str	r3, [sp, #4]
 800dd0c:	9b01      	ldr	r3, [sp, #4]
 800dd0e:	f85e 0b04 	ldr.w	r0, [lr], #4
 800dd12:	f853 af04 	ldr.w	sl, [r3, #4]!
 800dd16:	b281      	uxth	r1, r0
 800dd18:	9301      	str	r3, [sp, #4]
 800dd1a:	fa1f f38a 	uxth.w	r3, sl
 800dd1e:	1a5b      	subs	r3, r3, r1
 800dd20:	0c00      	lsrs	r0, r0, #16
 800dd22:	4463      	add	r3, ip
 800dd24:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800dd28:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800dd2c:	b29b      	uxth	r3, r3
 800dd2e:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800dd32:	4576      	cmp	r6, lr
 800dd34:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800dd38:	f849 3b04 	str.w	r3, [r9], #4
 800dd3c:	d8e6      	bhi.n	800dd0c <__mdiff+0x88>
 800dd3e:	1b33      	subs	r3, r6, r4
 800dd40:	3b15      	subs	r3, #21
 800dd42:	f023 0303 	bic.w	r3, r3, #3
 800dd46:	3415      	adds	r4, #21
 800dd48:	3304      	adds	r3, #4
 800dd4a:	42a6      	cmp	r6, r4
 800dd4c:	bf38      	it	cc
 800dd4e:	2304      	movcc	r3, #4
 800dd50:	441d      	add	r5, r3
 800dd52:	445b      	add	r3, fp
 800dd54:	461e      	mov	r6, r3
 800dd56:	462c      	mov	r4, r5
 800dd58:	4544      	cmp	r4, r8
 800dd5a:	d30e      	bcc.n	800dd7a <__mdiff+0xf6>
 800dd5c:	f108 0103 	add.w	r1, r8, #3
 800dd60:	1b49      	subs	r1, r1, r5
 800dd62:	f021 0103 	bic.w	r1, r1, #3
 800dd66:	3d03      	subs	r5, #3
 800dd68:	45a8      	cmp	r8, r5
 800dd6a:	bf38      	it	cc
 800dd6c:	2100      	movcc	r1, #0
 800dd6e:	440b      	add	r3, r1
 800dd70:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800dd74:	b199      	cbz	r1, 800dd9e <__mdiff+0x11a>
 800dd76:	6117      	str	r7, [r2, #16]
 800dd78:	e79e      	b.n	800dcb8 <__mdiff+0x34>
 800dd7a:	46e6      	mov	lr, ip
 800dd7c:	f854 1b04 	ldr.w	r1, [r4], #4
 800dd80:	fa1f fc81 	uxth.w	ip, r1
 800dd84:	44f4      	add	ip, lr
 800dd86:	0c08      	lsrs	r0, r1, #16
 800dd88:	4471      	add	r1, lr
 800dd8a:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800dd8e:	b289      	uxth	r1, r1
 800dd90:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800dd94:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800dd98:	f846 1b04 	str.w	r1, [r6], #4
 800dd9c:	e7dc      	b.n	800dd58 <__mdiff+0xd4>
 800dd9e:	3f01      	subs	r7, #1
 800dda0:	e7e6      	b.n	800dd70 <__mdiff+0xec>
 800dda2:	bf00      	nop
 800dda4:	0800e638 	.word	0x0800e638
 800dda8:	0800e649 	.word	0x0800e649

0800ddac <__d2b>:
 800ddac:	e92d 4373 	stmdb	sp!, {r0, r1, r4, r5, r6, r8, r9, lr}
 800ddb0:	2101      	movs	r1, #1
 800ddb2:	4690      	mov	r8, r2
 800ddb4:	4699      	mov	r9, r3
 800ddb6:	9e08      	ldr	r6, [sp, #32]
 800ddb8:	f7ff fcd0 	bl	800d75c <_Balloc>
 800ddbc:	4604      	mov	r4, r0
 800ddbe:	b930      	cbnz	r0, 800ddce <__d2b+0x22>
 800ddc0:	4602      	mov	r2, r0
 800ddc2:	f240 310f 	movw	r1, #783	@ 0x30f
 800ddc6:	4b23      	ldr	r3, [pc, #140]	@ (800de54 <__d2b+0xa8>)
 800ddc8:	4823      	ldr	r0, [pc, #140]	@ (800de58 <__d2b+0xac>)
 800ddca:	f000 fad1 	bl	800e370 <__assert_func>
 800ddce:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800ddd2:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800ddd6:	b10d      	cbz	r5, 800dddc <__d2b+0x30>
 800ddd8:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800dddc:	9301      	str	r3, [sp, #4]
 800ddde:	f1b8 0300 	subs.w	r3, r8, #0
 800dde2:	d024      	beq.n	800de2e <__d2b+0x82>
 800dde4:	4668      	mov	r0, sp
 800dde6:	9300      	str	r3, [sp, #0]
 800dde8:	f7ff fd7f 	bl	800d8ea <__lo0bits>
 800ddec:	e9dd 1200 	ldrd	r1, r2, [sp]
 800ddf0:	b1d8      	cbz	r0, 800de2a <__d2b+0x7e>
 800ddf2:	f1c0 0320 	rsb	r3, r0, #32
 800ddf6:	fa02 f303 	lsl.w	r3, r2, r3
 800ddfa:	430b      	orrs	r3, r1
 800ddfc:	40c2      	lsrs	r2, r0
 800ddfe:	6163      	str	r3, [r4, #20]
 800de00:	9201      	str	r2, [sp, #4]
 800de02:	9b01      	ldr	r3, [sp, #4]
 800de04:	2b00      	cmp	r3, #0
 800de06:	bf0c      	ite	eq
 800de08:	2201      	moveq	r2, #1
 800de0a:	2202      	movne	r2, #2
 800de0c:	61a3      	str	r3, [r4, #24]
 800de0e:	6122      	str	r2, [r4, #16]
 800de10:	b1ad      	cbz	r5, 800de3e <__d2b+0x92>
 800de12:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800de16:	4405      	add	r5, r0
 800de18:	6035      	str	r5, [r6, #0]
 800de1a:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800de1e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800de20:	6018      	str	r0, [r3, #0]
 800de22:	4620      	mov	r0, r4
 800de24:	b002      	add	sp, #8
 800de26:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
 800de2a:	6161      	str	r1, [r4, #20]
 800de2c:	e7e9      	b.n	800de02 <__d2b+0x56>
 800de2e:	a801      	add	r0, sp, #4
 800de30:	f7ff fd5b 	bl	800d8ea <__lo0bits>
 800de34:	9b01      	ldr	r3, [sp, #4]
 800de36:	2201      	movs	r2, #1
 800de38:	6163      	str	r3, [r4, #20]
 800de3a:	3020      	adds	r0, #32
 800de3c:	e7e7      	b.n	800de0e <__d2b+0x62>
 800de3e:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800de42:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800de46:	6030      	str	r0, [r6, #0]
 800de48:	6918      	ldr	r0, [r3, #16]
 800de4a:	f7ff fd2f 	bl	800d8ac <__hi0bits>
 800de4e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800de52:	e7e4      	b.n	800de1e <__d2b+0x72>
 800de54:	0800e638 	.word	0x0800e638
 800de58:	0800e649 	.word	0x0800e649

0800de5c <__sfputc_r>:
 800de5c:	6893      	ldr	r3, [r2, #8]
 800de5e:	b410      	push	{r4}
 800de60:	3b01      	subs	r3, #1
 800de62:	2b00      	cmp	r3, #0
 800de64:	6093      	str	r3, [r2, #8]
 800de66:	da07      	bge.n	800de78 <__sfputc_r+0x1c>
 800de68:	6994      	ldr	r4, [r2, #24]
 800de6a:	42a3      	cmp	r3, r4
 800de6c:	db01      	blt.n	800de72 <__sfputc_r+0x16>
 800de6e:	290a      	cmp	r1, #10
 800de70:	d102      	bne.n	800de78 <__sfputc_r+0x1c>
 800de72:	bc10      	pop	{r4}
 800de74:	f7fe bbff 	b.w	800c676 <__swbuf_r>
 800de78:	6813      	ldr	r3, [r2, #0]
 800de7a:	1c58      	adds	r0, r3, #1
 800de7c:	6010      	str	r0, [r2, #0]
 800de7e:	7019      	strb	r1, [r3, #0]
 800de80:	4608      	mov	r0, r1
 800de82:	bc10      	pop	{r4}
 800de84:	4770      	bx	lr

0800de86 <__sfputs_r>:
 800de86:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800de88:	4606      	mov	r6, r0
 800de8a:	460f      	mov	r7, r1
 800de8c:	4614      	mov	r4, r2
 800de8e:	18d5      	adds	r5, r2, r3
 800de90:	42ac      	cmp	r4, r5
 800de92:	d101      	bne.n	800de98 <__sfputs_r+0x12>
 800de94:	2000      	movs	r0, #0
 800de96:	e007      	b.n	800dea8 <__sfputs_r+0x22>
 800de98:	463a      	mov	r2, r7
 800de9a:	4630      	mov	r0, r6
 800de9c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800dea0:	f7ff ffdc 	bl	800de5c <__sfputc_r>
 800dea4:	1c43      	adds	r3, r0, #1
 800dea6:	d1f3      	bne.n	800de90 <__sfputs_r+0xa>
 800dea8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800deac <_vfiprintf_r>:
 800deac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800deb0:	460d      	mov	r5, r1
 800deb2:	4614      	mov	r4, r2
 800deb4:	4698      	mov	r8, r3
 800deb6:	4606      	mov	r6, r0
 800deb8:	b09d      	sub	sp, #116	@ 0x74
 800deba:	b118      	cbz	r0, 800dec4 <_vfiprintf_r+0x18>
 800debc:	6a03      	ldr	r3, [r0, #32]
 800debe:	b90b      	cbnz	r3, 800dec4 <_vfiprintf_r+0x18>
 800dec0:	f7fe faf0 	bl	800c4a4 <__sinit>
 800dec4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800dec6:	07d9      	lsls	r1, r3, #31
 800dec8:	d405      	bmi.n	800ded6 <_vfiprintf_r+0x2a>
 800deca:	89ab      	ldrh	r3, [r5, #12]
 800decc:	059a      	lsls	r2, r3, #22
 800dece:	d402      	bmi.n	800ded6 <_vfiprintf_r+0x2a>
 800ded0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800ded2:	f7fe fce2 	bl	800c89a <__retarget_lock_acquire_recursive>
 800ded6:	89ab      	ldrh	r3, [r5, #12]
 800ded8:	071b      	lsls	r3, r3, #28
 800deda:	d501      	bpl.n	800dee0 <_vfiprintf_r+0x34>
 800dedc:	692b      	ldr	r3, [r5, #16]
 800dede:	b99b      	cbnz	r3, 800df08 <_vfiprintf_r+0x5c>
 800dee0:	4629      	mov	r1, r5
 800dee2:	4630      	mov	r0, r6
 800dee4:	f7fe fc06 	bl	800c6f4 <__swsetup_r>
 800dee8:	b170      	cbz	r0, 800df08 <_vfiprintf_r+0x5c>
 800deea:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800deec:	07dc      	lsls	r4, r3, #31
 800deee:	d504      	bpl.n	800defa <_vfiprintf_r+0x4e>
 800def0:	f04f 30ff 	mov.w	r0, #4294967295
 800def4:	b01d      	add	sp, #116	@ 0x74
 800def6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800defa:	89ab      	ldrh	r3, [r5, #12]
 800defc:	0598      	lsls	r0, r3, #22
 800defe:	d4f7      	bmi.n	800def0 <_vfiprintf_r+0x44>
 800df00:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800df02:	f7fe fccb 	bl	800c89c <__retarget_lock_release_recursive>
 800df06:	e7f3      	b.n	800def0 <_vfiprintf_r+0x44>
 800df08:	2300      	movs	r3, #0
 800df0a:	9309      	str	r3, [sp, #36]	@ 0x24
 800df0c:	2320      	movs	r3, #32
 800df0e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800df12:	2330      	movs	r3, #48	@ 0x30
 800df14:	f04f 0901 	mov.w	r9, #1
 800df18:	f8cd 800c 	str.w	r8, [sp, #12]
 800df1c:	f8df 81a8 	ldr.w	r8, [pc, #424]	@ 800e0c8 <_vfiprintf_r+0x21c>
 800df20:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800df24:	4623      	mov	r3, r4
 800df26:	469a      	mov	sl, r3
 800df28:	f813 2b01 	ldrb.w	r2, [r3], #1
 800df2c:	b10a      	cbz	r2, 800df32 <_vfiprintf_r+0x86>
 800df2e:	2a25      	cmp	r2, #37	@ 0x25
 800df30:	d1f9      	bne.n	800df26 <_vfiprintf_r+0x7a>
 800df32:	ebba 0b04 	subs.w	fp, sl, r4
 800df36:	d00b      	beq.n	800df50 <_vfiprintf_r+0xa4>
 800df38:	465b      	mov	r3, fp
 800df3a:	4622      	mov	r2, r4
 800df3c:	4629      	mov	r1, r5
 800df3e:	4630      	mov	r0, r6
 800df40:	f7ff ffa1 	bl	800de86 <__sfputs_r>
 800df44:	3001      	adds	r0, #1
 800df46:	f000 80a7 	beq.w	800e098 <_vfiprintf_r+0x1ec>
 800df4a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800df4c:	445a      	add	r2, fp
 800df4e:	9209      	str	r2, [sp, #36]	@ 0x24
 800df50:	f89a 3000 	ldrb.w	r3, [sl]
 800df54:	2b00      	cmp	r3, #0
 800df56:	f000 809f 	beq.w	800e098 <_vfiprintf_r+0x1ec>
 800df5a:	2300      	movs	r3, #0
 800df5c:	f04f 32ff 	mov.w	r2, #4294967295
 800df60:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800df64:	f10a 0a01 	add.w	sl, sl, #1
 800df68:	9304      	str	r3, [sp, #16]
 800df6a:	9307      	str	r3, [sp, #28]
 800df6c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800df70:	931a      	str	r3, [sp, #104]	@ 0x68
 800df72:	4654      	mov	r4, sl
 800df74:	2205      	movs	r2, #5
 800df76:	f814 1b01 	ldrb.w	r1, [r4], #1
 800df7a:	4853      	ldr	r0, [pc, #332]	@ (800e0c8 <_vfiprintf_r+0x21c>)
 800df7c:	f7fe fc8f 	bl	800c89e <memchr>
 800df80:	9a04      	ldr	r2, [sp, #16]
 800df82:	b9d8      	cbnz	r0, 800dfbc <_vfiprintf_r+0x110>
 800df84:	06d1      	lsls	r1, r2, #27
 800df86:	bf44      	itt	mi
 800df88:	2320      	movmi	r3, #32
 800df8a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800df8e:	0713      	lsls	r3, r2, #28
 800df90:	bf44      	itt	mi
 800df92:	232b      	movmi	r3, #43	@ 0x2b
 800df94:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800df98:	f89a 3000 	ldrb.w	r3, [sl]
 800df9c:	2b2a      	cmp	r3, #42	@ 0x2a
 800df9e:	d015      	beq.n	800dfcc <_vfiprintf_r+0x120>
 800dfa0:	4654      	mov	r4, sl
 800dfa2:	2000      	movs	r0, #0
 800dfa4:	f04f 0c0a 	mov.w	ip, #10
 800dfa8:	9a07      	ldr	r2, [sp, #28]
 800dfaa:	4621      	mov	r1, r4
 800dfac:	f811 3b01 	ldrb.w	r3, [r1], #1
 800dfb0:	3b30      	subs	r3, #48	@ 0x30
 800dfb2:	2b09      	cmp	r3, #9
 800dfb4:	d94b      	bls.n	800e04e <_vfiprintf_r+0x1a2>
 800dfb6:	b1b0      	cbz	r0, 800dfe6 <_vfiprintf_r+0x13a>
 800dfb8:	9207      	str	r2, [sp, #28]
 800dfba:	e014      	b.n	800dfe6 <_vfiprintf_r+0x13a>
 800dfbc:	eba0 0308 	sub.w	r3, r0, r8
 800dfc0:	fa09 f303 	lsl.w	r3, r9, r3
 800dfc4:	4313      	orrs	r3, r2
 800dfc6:	46a2      	mov	sl, r4
 800dfc8:	9304      	str	r3, [sp, #16]
 800dfca:	e7d2      	b.n	800df72 <_vfiprintf_r+0xc6>
 800dfcc:	9b03      	ldr	r3, [sp, #12]
 800dfce:	1d19      	adds	r1, r3, #4
 800dfd0:	681b      	ldr	r3, [r3, #0]
 800dfd2:	9103      	str	r1, [sp, #12]
 800dfd4:	2b00      	cmp	r3, #0
 800dfd6:	bfbb      	ittet	lt
 800dfd8:	425b      	neglt	r3, r3
 800dfda:	f042 0202 	orrlt.w	r2, r2, #2
 800dfde:	9307      	strge	r3, [sp, #28]
 800dfe0:	9307      	strlt	r3, [sp, #28]
 800dfe2:	bfb8      	it	lt
 800dfe4:	9204      	strlt	r2, [sp, #16]
 800dfe6:	7823      	ldrb	r3, [r4, #0]
 800dfe8:	2b2e      	cmp	r3, #46	@ 0x2e
 800dfea:	d10a      	bne.n	800e002 <_vfiprintf_r+0x156>
 800dfec:	7863      	ldrb	r3, [r4, #1]
 800dfee:	2b2a      	cmp	r3, #42	@ 0x2a
 800dff0:	d132      	bne.n	800e058 <_vfiprintf_r+0x1ac>
 800dff2:	9b03      	ldr	r3, [sp, #12]
 800dff4:	3402      	adds	r4, #2
 800dff6:	1d1a      	adds	r2, r3, #4
 800dff8:	681b      	ldr	r3, [r3, #0]
 800dffa:	9203      	str	r2, [sp, #12]
 800dffc:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800e000:	9305      	str	r3, [sp, #20]
 800e002:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 800e0cc <_vfiprintf_r+0x220>
 800e006:	2203      	movs	r2, #3
 800e008:	4650      	mov	r0, sl
 800e00a:	7821      	ldrb	r1, [r4, #0]
 800e00c:	f7fe fc47 	bl	800c89e <memchr>
 800e010:	b138      	cbz	r0, 800e022 <_vfiprintf_r+0x176>
 800e012:	2240      	movs	r2, #64	@ 0x40
 800e014:	9b04      	ldr	r3, [sp, #16]
 800e016:	eba0 000a 	sub.w	r0, r0, sl
 800e01a:	4082      	lsls	r2, r0
 800e01c:	4313      	orrs	r3, r2
 800e01e:	3401      	adds	r4, #1
 800e020:	9304      	str	r3, [sp, #16]
 800e022:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e026:	2206      	movs	r2, #6
 800e028:	4829      	ldr	r0, [pc, #164]	@ (800e0d0 <_vfiprintf_r+0x224>)
 800e02a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800e02e:	f7fe fc36 	bl	800c89e <memchr>
 800e032:	2800      	cmp	r0, #0
 800e034:	d03f      	beq.n	800e0b6 <_vfiprintf_r+0x20a>
 800e036:	4b27      	ldr	r3, [pc, #156]	@ (800e0d4 <_vfiprintf_r+0x228>)
 800e038:	bb1b      	cbnz	r3, 800e082 <_vfiprintf_r+0x1d6>
 800e03a:	9b03      	ldr	r3, [sp, #12]
 800e03c:	3307      	adds	r3, #7
 800e03e:	f023 0307 	bic.w	r3, r3, #7
 800e042:	3308      	adds	r3, #8
 800e044:	9303      	str	r3, [sp, #12]
 800e046:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e048:	443b      	add	r3, r7
 800e04a:	9309      	str	r3, [sp, #36]	@ 0x24
 800e04c:	e76a      	b.n	800df24 <_vfiprintf_r+0x78>
 800e04e:	460c      	mov	r4, r1
 800e050:	2001      	movs	r0, #1
 800e052:	fb0c 3202 	mla	r2, ip, r2, r3
 800e056:	e7a8      	b.n	800dfaa <_vfiprintf_r+0xfe>
 800e058:	2300      	movs	r3, #0
 800e05a:	f04f 0c0a 	mov.w	ip, #10
 800e05e:	4619      	mov	r1, r3
 800e060:	3401      	adds	r4, #1
 800e062:	9305      	str	r3, [sp, #20]
 800e064:	4620      	mov	r0, r4
 800e066:	f810 2b01 	ldrb.w	r2, [r0], #1
 800e06a:	3a30      	subs	r2, #48	@ 0x30
 800e06c:	2a09      	cmp	r2, #9
 800e06e:	d903      	bls.n	800e078 <_vfiprintf_r+0x1cc>
 800e070:	2b00      	cmp	r3, #0
 800e072:	d0c6      	beq.n	800e002 <_vfiprintf_r+0x156>
 800e074:	9105      	str	r1, [sp, #20]
 800e076:	e7c4      	b.n	800e002 <_vfiprintf_r+0x156>
 800e078:	4604      	mov	r4, r0
 800e07a:	2301      	movs	r3, #1
 800e07c:	fb0c 2101 	mla	r1, ip, r1, r2
 800e080:	e7f0      	b.n	800e064 <_vfiprintf_r+0x1b8>
 800e082:	ab03      	add	r3, sp, #12
 800e084:	9300      	str	r3, [sp, #0]
 800e086:	462a      	mov	r2, r5
 800e088:	4630      	mov	r0, r6
 800e08a:	4b13      	ldr	r3, [pc, #76]	@ (800e0d8 <_vfiprintf_r+0x22c>)
 800e08c:	a904      	add	r1, sp, #16
 800e08e:	f7fd fdbf 	bl	800bc10 <_printf_float>
 800e092:	4607      	mov	r7, r0
 800e094:	1c78      	adds	r0, r7, #1
 800e096:	d1d6      	bne.n	800e046 <_vfiprintf_r+0x19a>
 800e098:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800e09a:	07d9      	lsls	r1, r3, #31
 800e09c:	d405      	bmi.n	800e0aa <_vfiprintf_r+0x1fe>
 800e09e:	89ab      	ldrh	r3, [r5, #12]
 800e0a0:	059a      	lsls	r2, r3, #22
 800e0a2:	d402      	bmi.n	800e0aa <_vfiprintf_r+0x1fe>
 800e0a4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800e0a6:	f7fe fbf9 	bl	800c89c <__retarget_lock_release_recursive>
 800e0aa:	89ab      	ldrh	r3, [r5, #12]
 800e0ac:	065b      	lsls	r3, r3, #25
 800e0ae:	f53f af1f 	bmi.w	800def0 <_vfiprintf_r+0x44>
 800e0b2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800e0b4:	e71e      	b.n	800def4 <_vfiprintf_r+0x48>
 800e0b6:	ab03      	add	r3, sp, #12
 800e0b8:	9300      	str	r3, [sp, #0]
 800e0ba:	462a      	mov	r2, r5
 800e0bc:	4630      	mov	r0, r6
 800e0be:	4b06      	ldr	r3, [pc, #24]	@ (800e0d8 <_vfiprintf_r+0x22c>)
 800e0c0:	a904      	add	r1, sp, #16
 800e0c2:	f7fe f843 	bl	800c14c <_printf_i>
 800e0c6:	e7e4      	b.n	800e092 <_vfiprintf_r+0x1e6>
 800e0c8:	0800e7a0 	.word	0x0800e7a0
 800e0cc:	0800e7a6 	.word	0x0800e7a6
 800e0d0:	0800e7aa 	.word	0x0800e7aa
 800e0d4:	0800bc11 	.word	0x0800bc11
 800e0d8:	0800de87 	.word	0x0800de87

0800e0dc <__sflush_r>:
 800e0dc:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800e0e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e0e2:	0716      	lsls	r6, r2, #28
 800e0e4:	4605      	mov	r5, r0
 800e0e6:	460c      	mov	r4, r1
 800e0e8:	d454      	bmi.n	800e194 <__sflush_r+0xb8>
 800e0ea:	684b      	ldr	r3, [r1, #4]
 800e0ec:	2b00      	cmp	r3, #0
 800e0ee:	dc02      	bgt.n	800e0f6 <__sflush_r+0x1a>
 800e0f0:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800e0f2:	2b00      	cmp	r3, #0
 800e0f4:	dd48      	ble.n	800e188 <__sflush_r+0xac>
 800e0f6:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800e0f8:	2e00      	cmp	r6, #0
 800e0fa:	d045      	beq.n	800e188 <__sflush_r+0xac>
 800e0fc:	2300      	movs	r3, #0
 800e0fe:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800e102:	682f      	ldr	r7, [r5, #0]
 800e104:	6a21      	ldr	r1, [r4, #32]
 800e106:	602b      	str	r3, [r5, #0]
 800e108:	d030      	beq.n	800e16c <__sflush_r+0x90>
 800e10a:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800e10c:	89a3      	ldrh	r3, [r4, #12]
 800e10e:	0759      	lsls	r1, r3, #29
 800e110:	d505      	bpl.n	800e11e <__sflush_r+0x42>
 800e112:	6863      	ldr	r3, [r4, #4]
 800e114:	1ad2      	subs	r2, r2, r3
 800e116:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800e118:	b10b      	cbz	r3, 800e11e <__sflush_r+0x42>
 800e11a:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800e11c:	1ad2      	subs	r2, r2, r3
 800e11e:	2300      	movs	r3, #0
 800e120:	4628      	mov	r0, r5
 800e122:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800e124:	6a21      	ldr	r1, [r4, #32]
 800e126:	47b0      	blx	r6
 800e128:	1c43      	adds	r3, r0, #1
 800e12a:	89a3      	ldrh	r3, [r4, #12]
 800e12c:	d106      	bne.n	800e13c <__sflush_r+0x60>
 800e12e:	6829      	ldr	r1, [r5, #0]
 800e130:	291d      	cmp	r1, #29
 800e132:	d82b      	bhi.n	800e18c <__sflush_r+0xb0>
 800e134:	4a28      	ldr	r2, [pc, #160]	@ (800e1d8 <__sflush_r+0xfc>)
 800e136:	410a      	asrs	r2, r1
 800e138:	07d6      	lsls	r6, r2, #31
 800e13a:	d427      	bmi.n	800e18c <__sflush_r+0xb0>
 800e13c:	2200      	movs	r2, #0
 800e13e:	6062      	str	r2, [r4, #4]
 800e140:	6922      	ldr	r2, [r4, #16]
 800e142:	04d9      	lsls	r1, r3, #19
 800e144:	6022      	str	r2, [r4, #0]
 800e146:	d504      	bpl.n	800e152 <__sflush_r+0x76>
 800e148:	1c42      	adds	r2, r0, #1
 800e14a:	d101      	bne.n	800e150 <__sflush_r+0x74>
 800e14c:	682b      	ldr	r3, [r5, #0]
 800e14e:	b903      	cbnz	r3, 800e152 <__sflush_r+0x76>
 800e150:	6560      	str	r0, [r4, #84]	@ 0x54
 800e152:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800e154:	602f      	str	r7, [r5, #0]
 800e156:	b1b9      	cbz	r1, 800e188 <__sflush_r+0xac>
 800e158:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800e15c:	4299      	cmp	r1, r3
 800e15e:	d002      	beq.n	800e166 <__sflush_r+0x8a>
 800e160:	4628      	mov	r0, r5
 800e162:	f7ff f9fd 	bl	800d560 <_free_r>
 800e166:	2300      	movs	r3, #0
 800e168:	6363      	str	r3, [r4, #52]	@ 0x34
 800e16a:	e00d      	b.n	800e188 <__sflush_r+0xac>
 800e16c:	2301      	movs	r3, #1
 800e16e:	4628      	mov	r0, r5
 800e170:	47b0      	blx	r6
 800e172:	4602      	mov	r2, r0
 800e174:	1c50      	adds	r0, r2, #1
 800e176:	d1c9      	bne.n	800e10c <__sflush_r+0x30>
 800e178:	682b      	ldr	r3, [r5, #0]
 800e17a:	2b00      	cmp	r3, #0
 800e17c:	d0c6      	beq.n	800e10c <__sflush_r+0x30>
 800e17e:	2b1d      	cmp	r3, #29
 800e180:	d001      	beq.n	800e186 <__sflush_r+0xaa>
 800e182:	2b16      	cmp	r3, #22
 800e184:	d11d      	bne.n	800e1c2 <__sflush_r+0xe6>
 800e186:	602f      	str	r7, [r5, #0]
 800e188:	2000      	movs	r0, #0
 800e18a:	e021      	b.n	800e1d0 <__sflush_r+0xf4>
 800e18c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800e190:	b21b      	sxth	r3, r3
 800e192:	e01a      	b.n	800e1ca <__sflush_r+0xee>
 800e194:	690f      	ldr	r7, [r1, #16]
 800e196:	2f00      	cmp	r7, #0
 800e198:	d0f6      	beq.n	800e188 <__sflush_r+0xac>
 800e19a:	0793      	lsls	r3, r2, #30
 800e19c:	bf18      	it	ne
 800e19e:	2300      	movne	r3, #0
 800e1a0:	680e      	ldr	r6, [r1, #0]
 800e1a2:	bf08      	it	eq
 800e1a4:	694b      	ldreq	r3, [r1, #20]
 800e1a6:	1bf6      	subs	r6, r6, r7
 800e1a8:	600f      	str	r7, [r1, #0]
 800e1aa:	608b      	str	r3, [r1, #8]
 800e1ac:	2e00      	cmp	r6, #0
 800e1ae:	ddeb      	ble.n	800e188 <__sflush_r+0xac>
 800e1b0:	4633      	mov	r3, r6
 800e1b2:	463a      	mov	r2, r7
 800e1b4:	4628      	mov	r0, r5
 800e1b6:	6a21      	ldr	r1, [r4, #32]
 800e1b8:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 800e1bc:	47e0      	blx	ip
 800e1be:	2800      	cmp	r0, #0
 800e1c0:	dc07      	bgt.n	800e1d2 <__sflush_r+0xf6>
 800e1c2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e1c6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800e1ca:	f04f 30ff 	mov.w	r0, #4294967295
 800e1ce:	81a3      	strh	r3, [r4, #12]
 800e1d0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e1d2:	4407      	add	r7, r0
 800e1d4:	1a36      	subs	r6, r6, r0
 800e1d6:	e7e9      	b.n	800e1ac <__sflush_r+0xd0>
 800e1d8:	dfbffffe 	.word	0xdfbffffe

0800e1dc <_fflush_r>:
 800e1dc:	b538      	push	{r3, r4, r5, lr}
 800e1de:	690b      	ldr	r3, [r1, #16]
 800e1e0:	4605      	mov	r5, r0
 800e1e2:	460c      	mov	r4, r1
 800e1e4:	b913      	cbnz	r3, 800e1ec <_fflush_r+0x10>
 800e1e6:	2500      	movs	r5, #0
 800e1e8:	4628      	mov	r0, r5
 800e1ea:	bd38      	pop	{r3, r4, r5, pc}
 800e1ec:	b118      	cbz	r0, 800e1f6 <_fflush_r+0x1a>
 800e1ee:	6a03      	ldr	r3, [r0, #32]
 800e1f0:	b90b      	cbnz	r3, 800e1f6 <_fflush_r+0x1a>
 800e1f2:	f7fe f957 	bl	800c4a4 <__sinit>
 800e1f6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e1fa:	2b00      	cmp	r3, #0
 800e1fc:	d0f3      	beq.n	800e1e6 <_fflush_r+0xa>
 800e1fe:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800e200:	07d0      	lsls	r0, r2, #31
 800e202:	d404      	bmi.n	800e20e <_fflush_r+0x32>
 800e204:	0599      	lsls	r1, r3, #22
 800e206:	d402      	bmi.n	800e20e <_fflush_r+0x32>
 800e208:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800e20a:	f7fe fb46 	bl	800c89a <__retarget_lock_acquire_recursive>
 800e20e:	4628      	mov	r0, r5
 800e210:	4621      	mov	r1, r4
 800e212:	f7ff ff63 	bl	800e0dc <__sflush_r>
 800e216:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800e218:	4605      	mov	r5, r0
 800e21a:	07da      	lsls	r2, r3, #31
 800e21c:	d4e4      	bmi.n	800e1e8 <_fflush_r+0xc>
 800e21e:	89a3      	ldrh	r3, [r4, #12]
 800e220:	059b      	lsls	r3, r3, #22
 800e222:	d4e1      	bmi.n	800e1e8 <_fflush_r+0xc>
 800e224:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800e226:	f7fe fb39 	bl	800c89c <__retarget_lock_release_recursive>
 800e22a:	e7dd      	b.n	800e1e8 <_fflush_r+0xc>

0800e22c <__swhatbuf_r>:
 800e22c:	b570      	push	{r4, r5, r6, lr}
 800e22e:	460c      	mov	r4, r1
 800e230:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e234:	4615      	mov	r5, r2
 800e236:	2900      	cmp	r1, #0
 800e238:	461e      	mov	r6, r3
 800e23a:	b096      	sub	sp, #88	@ 0x58
 800e23c:	da0c      	bge.n	800e258 <__swhatbuf_r+0x2c>
 800e23e:	89a3      	ldrh	r3, [r4, #12]
 800e240:	2100      	movs	r1, #0
 800e242:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800e246:	bf14      	ite	ne
 800e248:	2340      	movne	r3, #64	@ 0x40
 800e24a:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800e24e:	2000      	movs	r0, #0
 800e250:	6031      	str	r1, [r6, #0]
 800e252:	602b      	str	r3, [r5, #0]
 800e254:	b016      	add	sp, #88	@ 0x58
 800e256:	bd70      	pop	{r4, r5, r6, pc}
 800e258:	466a      	mov	r2, sp
 800e25a:	f000 f849 	bl	800e2f0 <_fstat_r>
 800e25e:	2800      	cmp	r0, #0
 800e260:	dbed      	blt.n	800e23e <__swhatbuf_r+0x12>
 800e262:	9901      	ldr	r1, [sp, #4]
 800e264:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800e268:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800e26c:	4259      	negs	r1, r3
 800e26e:	4159      	adcs	r1, r3
 800e270:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800e274:	e7eb      	b.n	800e24e <__swhatbuf_r+0x22>

0800e276 <__smakebuf_r>:
 800e276:	898b      	ldrh	r3, [r1, #12]
 800e278:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800e27a:	079d      	lsls	r5, r3, #30
 800e27c:	4606      	mov	r6, r0
 800e27e:	460c      	mov	r4, r1
 800e280:	d507      	bpl.n	800e292 <__smakebuf_r+0x1c>
 800e282:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800e286:	6023      	str	r3, [r4, #0]
 800e288:	6123      	str	r3, [r4, #16]
 800e28a:	2301      	movs	r3, #1
 800e28c:	6163      	str	r3, [r4, #20]
 800e28e:	b003      	add	sp, #12
 800e290:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e292:	466a      	mov	r2, sp
 800e294:	ab01      	add	r3, sp, #4
 800e296:	f7ff ffc9 	bl	800e22c <__swhatbuf_r>
 800e29a:	9f00      	ldr	r7, [sp, #0]
 800e29c:	4605      	mov	r5, r0
 800e29e:	4639      	mov	r1, r7
 800e2a0:	4630      	mov	r0, r6
 800e2a2:	f7ff f9cf 	bl	800d644 <_malloc_r>
 800e2a6:	b948      	cbnz	r0, 800e2bc <__smakebuf_r+0x46>
 800e2a8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e2ac:	059a      	lsls	r2, r3, #22
 800e2ae:	d4ee      	bmi.n	800e28e <__smakebuf_r+0x18>
 800e2b0:	f023 0303 	bic.w	r3, r3, #3
 800e2b4:	f043 0302 	orr.w	r3, r3, #2
 800e2b8:	81a3      	strh	r3, [r4, #12]
 800e2ba:	e7e2      	b.n	800e282 <__smakebuf_r+0xc>
 800e2bc:	89a3      	ldrh	r3, [r4, #12]
 800e2be:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800e2c2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800e2c6:	81a3      	strh	r3, [r4, #12]
 800e2c8:	9b01      	ldr	r3, [sp, #4]
 800e2ca:	6020      	str	r0, [r4, #0]
 800e2cc:	b15b      	cbz	r3, 800e2e6 <__smakebuf_r+0x70>
 800e2ce:	4630      	mov	r0, r6
 800e2d0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800e2d4:	f000 f81e 	bl	800e314 <_isatty_r>
 800e2d8:	b128      	cbz	r0, 800e2e6 <__smakebuf_r+0x70>
 800e2da:	89a3      	ldrh	r3, [r4, #12]
 800e2dc:	f023 0303 	bic.w	r3, r3, #3
 800e2e0:	f043 0301 	orr.w	r3, r3, #1
 800e2e4:	81a3      	strh	r3, [r4, #12]
 800e2e6:	89a3      	ldrh	r3, [r4, #12]
 800e2e8:	431d      	orrs	r5, r3
 800e2ea:	81a5      	strh	r5, [r4, #12]
 800e2ec:	e7cf      	b.n	800e28e <__smakebuf_r+0x18>
	...

0800e2f0 <_fstat_r>:
 800e2f0:	b538      	push	{r3, r4, r5, lr}
 800e2f2:	2300      	movs	r3, #0
 800e2f4:	4d06      	ldr	r5, [pc, #24]	@ (800e310 <_fstat_r+0x20>)
 800e2f6:	4604      	mov	r4, r0
 800e2f8:	4608      	mov	r0, r1
 800e2fa:	4611      	mov	r1, r2
 800e2fc:	602b      	str	r3, [r5, #0]
 800e2fe:	f7f3 fc47 	bl	8001b90 <_fstat>
 800e302:	1c43      	adds	r3, r0, #1
 800e304:	d102      	bne.n	800e30c <_fstat_r+0x1c>
 800e306:	682b      	ldr	r3, [r5, #0]
 800e308:	b103      	cbz	r3, 800e30c <_fstat_r+0x1c>
 800e30a:	6023      	str	r3, [r4, #0]
 800e30c:	bd38      	pop	{r3, r4, r5, pc}
 800e30e:	bf00      	nop
 800e310:	20000770 	.word	0x20000770

0800e314 <_isatty_r>:
 800e314:	b538      	push	{r3, r4, r5, lr}
 800e316:	2300      	movs	r3, #0
 800e318:	4d05      	ldr	r5, [pc, #20]	@ (800e330 <_isatty_r+0x1c>)
 800e31a:	4604      	mov	r4, r0
 800e31c:	4608      	mov	r0, r1
 800e31e:	602b      	str	r3, [r5, #0]
 800e320:	f7f3 fc45 	bl	8001bae <_isatty>
 800e324:	1c43      	adds	r3, r0, #1
 800e326:	d102      	bne.n	800e32e <_isatty_r+0x1a>
 800e328:	682b      	ldr	r3, [r5, #0]
 800e32a:	b103      	cbz	r3, 800e32e <_isatty_r+0x1a>
 800e32c:	6023      	str	r3, [r4, #0]
 800e32e:	bd38      	pop	{r3, r4, r5, pc}
 800e330:	20000770 	.word	0x20000770

0800e334 <_sbrk_r>:
 800e334:	b538      	push	{r3, r4, r5, lr}
 800e336:	2300      	movs	r3, #0
 800e338:	4d05      	ldr	r5, [pc, #20]	@ (800e350 <_sbrk_r+0x1c>)
 800e33a:	4604      	mov	r4, r0
 800e33c:	4608      	mov	r0, r1
 800e33e:	602b      	str	r3, [r5, #0]
 800e340:	f7f3 fc4c 	bl	8001bdc <_sbrk>
 800e344:	1c43      	adds	r3, r0, #1
 800e346:	d102      	bne.n	800e34e <_sbrk_r+0x1a>
 800e348:	682b      	ldr	r3, [r5, #0]
 800e34a:	b103      	cbz	r3, 800e34e <_sbrk_r+0x1a>
 800e34c:	6023      	str	r3, [r4, #0]
 800e34e:	bd38      	pop	{r3, r4, r5, pc}
 800e350:	20000770 	.word	0x20000770

0800e354 <memcpy>:
 800e354:	440a      	add	r2, r1
 800e356:	4291      	cmp	r1, r2
 800e358:	f100 33ff 	add.w	r3, r0, #4294967295
 800e35c:	d100      	bne.n	800e360 <memcpy+0xc>
 800e35e:	4770      	bx	lr
 800e360:	b510      	push	{r4, lr}
 800e362:	f811 4b01 	ldrb.w	r4, [r1], #1
 800e366:	4291      	cmp	r1, r2
 800e368:	f803 4f01 	strb.w	r4, [r3, #1]!
 800e36c:	d1f9      	bne.n	800e362 <memcpy+0xe>
 800e36e:	bd10      	pop	{r4, pc}

0800e370 <__assert_func>:
 800e370:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800e372:	4614      	mov	r4, r2
 800e374:	461a      	mov	r2, r3
 800e376:	4b09      	ldr	r3, [pc, #36]	@ (800e39c <__assert_func+0x2c>)
 800e378:	4605      	mov	r5, r0
 800e37a:	681b      	ldr	r3, [r3, #0]
 800e37c:	68d8      	ldr	r0, [r3, #12]
 800e37e:	b954      	cbnz	r4, 800e396 <__assert_func+0x26>
 800e380:	4b07      	ldr	r3, [pc, #28]	@ (800e3a0 <__assert_func+0x30>)
 800e382:	461c      	mov	r4, r3
 800e384:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800e388:	9100      	str	r1, [sp, #0]
 800e38a:	462b      	mov	r3, r5
 800e38c:	4905      	ldr	r1, [pc, #20]	@ (800e3a4 <__assert_func+0x34>)
 800e38e:	f000 f841 	bl	800e414 <fiprintf>
 800e392:	f000 f851 	bl	800e438 <abort>
 800e396:	4b04      	ldr	r3, [pc, #16]	@ (800e3a8 <__assert_func+0x38>)
 800e398:	e7f4      	b.n	800e384 <__assert_func+0x14>
 800e39a:	bf00      	nop
 800e39c:	200001d0 	.word	0x200001d0
 800e3a0:	0800e7f6 	.word	0x0800e7f6
 800e3a4:	0800e7c8 	.word	0x0800e7c8
 800e3a8:	0800e7bb 	.word	0x0800e7bb

0800e3ac <_calloc_r>:
 800e3ac:	b570      	push	{r4, r5, r6, lr}
 800e3ae:	fba1 5402 	umull	r5, r4, r1, r2
 800e3b2:	b93c      	cbnz	r4, 800e3c4 <_calloc_r+0x18>
 800e3b4:	4629      	mov	r1, r5
 800e3b6:	f7ff f945 	bl	800d644 <_malloc_r>
 800e3ba:	4606      	mov	r6, r0
 800e3bc:	b928      	cbnz	r0, 800e3ca <_calloc_r+0x1e>
 800e3be:	2600      	movs	r6, #0
 800e3c0:	4630      	mov	r0, r6
 800e3c2:	bd70      	pop	{r4, r5, r6, pc}
 800e3c4:	220c      	movs	r2, #12
 800e3c6:	6002      	str	r2, [r0, #0]
 800e3c8:	e7f9      	b.n	800e3be <_calloc_r+0x12>
 800e3ca:	462a      	mov	r2, r5
 800e3cc:	4621      	mov	r1, r4
 800e3ce:	f7fe f9e7 	bl	800c7a0 <memset>
 800e3d2:	e7f5      	b.n	800e3c0 <_calloc_r+0x14>

0800e3d4 <__ascii_mbtowc>:
 800e3d4:	b082      	sub	sp, #8
 800e3d6:	b901      	cbnz	r1, 800e3da <__ascii_mbtowc+0x6>
 800e3d8:	a901      	add	r1, sp, #4
 800e3da:	b142      	cbz	r2, 800e3ee <__ascii_mbtowc+0x1a>
 800e3dc:	b14b      	cbz	r3, 800e3f2 <__ascii_mbtowc+0x1e>
 800e3de:	7813      	ldrb	r3, [r2, #0]
 800e3e0:	600b      	str	r3, [r1, #0]
 800e3e2:	7812      	ldrb	r2, [r2, #0]
 800e3e4:	1e10      	subs	r0, r2, #0
 800e3e6:	bf18      	it	ne
 800e3e8:	2001      	movne	r0, #1
 800e3ea:	b002      	add	sp, #8
 800e3ec:	4770      	bx	lr
 800e3ee:	4610      	mov	r0, r2
 800e3f0:	e7fb      	b.n	800e3ea <__ascii_mbtowc+0x16>
 800e3f2:	f06f 0001 	mvn.w	r0, #1
 800e3f6:	e7f8      	b.n	800e3ea <__ascii_mbtowc+0x16>

0800e3f8 <__ascii_wctomb>:
 800e3f8:	4603      	mov	r3, r0
 800e3fa:	4608      	mov	r0, r1
 800e3fc:	b141      	cbz	r1, 800e410 <__ascii_wctomb+0x18>
 800e3fe:	2aff      	cmp	r2, #255	@ 0xff
 800e400:	d904      	bls.n	800e40c <__ascii_wctomb+0x14>
 800e402:	228a      	movs	r2, #138	@ 0x8a
 800e404:	f04f 30ff 	mov.w	r0, #4294967295
 800e408:	601a      	str	r2, [r3, #0]
 800e40a:	4770      	bx	lr
 800e40c:	2001      	movs	r0, #1
 800e40e:	700a      	strb	r2, [r1, #0]
 800e410:	4770      	bx	lr
	...

0800e414 <fiprintf>:
 800e414:	b40e      	push	{r1, r2, r3}
 800e416:	b503      	push	{r0, r1, lr}
 800e418:	4601      	mov	r1, r0
 800e41a:	ab03      	add	r3, sp, #12
 800e41c:	4805      	ldr	r0, [pc, #20]	@ (800e434 <fiprintf+0x20>)
 800e41e:	f853 2b04 	ldr.w	r2, [r3], #4
 800e422:	6800      	ldr	r0, [r0, #0]
 800e424:	9301      	str	r3, [sp, #4]
 800e426:	f7ff fd41 	bl	800deac <_vfiprintf_r>
 800e42a:	b002      	add	sp, #8
 800e42c:	f85d eb04 	ldr.w	lr, [sp], #4
 800e430:	b003      	add	sp, #12
 800e432:	4770      	bx	lr
 800e434:	200001d0 	.word	0x200001d0

0800e438 <abort>:
 800e438:	2006      	movs	r0, #6
 800e43a:	b508      	push	{r3, lr}
 800e43c:	f000 f82c 	bl	800e498 <raise>
 800e440:	2001      	movs	r0, #1
 800e442:	f7f3 fb56 	bl	8001af2 <_exit>

0800e446 <_raise_r>:
 800e446:	291f      	cmp	r1, #31
 800e448:	b538      	push	{r3, r4, r5, lr}
 800e44a:	4605      	mov	r5, r0
 800e44c:	460c      	mov	r4, r1
 800e44e:	d904      	bls.n	800e45a <_raise_r+0x14>
 800e450:	2316      	movs	r3, #22
 800e452:	6003      	str	r3, [r0, #0]
 800e454:	f04f 30ff 	mov.w	r0, #4294967295
 800e458:	bd38      	pop	{r3, r4, r5, pc}
 800e45a:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800e45c:	b112      	cbz	r2, 800e464 <_raise_r+0x1e>
 800e45e:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800e462:	b94b      	cbnz	r3, 800e478 <_raise_r+0x32>
 800e464:	4628      	mov	r0, r5
 800e466:	f000 f831 	bl	800e4cc <_getpid_r>
 800e46a:	4622      	mov	r2, r4
 800e46c:	4601      	mov	r1, r0
 800e46e:	4628      	mov	r0, r5
 800e470:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800e474:	f000 b818 	b.w	800e4a8 <_kill_r>
 800e478:	2b01      	cmp	r3, #1
 800e47a:	d00a      	beq.n	800e492 <_raise_r+0x4c>
 800e47c:	1c59      	adds	r1, r3, #1
 800e47e:	d103      	bne.n	800e488 <_raise_r+0x42>
 800e480:	2316      	movs	r3, #22
 800e482:	6003      	str	r3, [r0, #0]
 800e484:	2001      	movs	r0, #1
 800e486:	e7e7      	b.n	800e458 <_raise_r+0x12>
 800e488:	2100      	movs	r1, #0
 800e48a:	4620      	mov	r0, r4
 800e48c:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800e490:	4798      	blx	r3
 800e492:	2000      	movs	r0, #0
 800e494:	e7e0      	b.n	800e458 <_raise_r+0x12>
	...

0800e498 <raise>:
 800e498:	4b02      	ldr	r3, [pc, #8]	@ (800e4a4 <raise+0xc>)
 800e49a:	4601      	mov	r1, r0
 800e49c:	6818      	ldr	r0, [r3, #0]
 800e49e:	f7ff bfd2 	b.w	800e446 <_raise_r>
 800e4a2:	bf00      	nop
 800e4a4:	200001d0 	.word	0x200001d0

0800e4a8 <_kill_r>:
 800e4a8:	b538      	push	{r3, r4, r5, lr}
 800e4aa:	2300      	movs	r3, #0
 800e4ac:	4d06      	ldr	r5, [pc, #24]	@ (800e4c8 <_kill_r+0x20>)
 800e4ae:	4604      	mov	r4, r0
 800e4b0:	4608      	mov	r0, r1
 800e4b2:	4611      	mov	r1, r2
 800e4b4:	602b      	str	r3, [r5, #0]
 800e4b6:	f7f3 fb0c 	bl	8001ad2 <_kill>
 800e4ba:	1c43      	adds	r3, r0, #1
 800e4bc:	d102      	bne.n	800e4c4 <_kill_r+0x1c>
 800e4be:	682b      	ldr	r3, [r5, #0]
 800e4c0:	b103      	cbz	r3, 800e4c4 <_kill_r+0x1c>
 800e4c2:	6023      	str	r3, [r4, #0]
 800e4c4:	bd38      	pop	{r3, r4, r5, pc}
 800e4c6:	bf00      	nop
 800e4c8:	20000770 	.word	0x20000770

0800e4cc <_getpid_r>:
 800e4cc:	f7f3 bafa 	b.w	8001ac4 <_getpid>

0800e4d0 <_init>:
 800e4d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e4d2:	bf00      	nop
 800e4d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e4d6:	bc08      	pop	{r3}
 800e4d8:	469e      	mov	lr, r3
 800e4da:	4770      	bx	lr

0800e4dc <_fini>:
 800e4dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e4de:	bf00      	nop
 800e4e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e4e2:	bc08      	pop	{r3}
 800e4e4:	469e      	mov	lr, r3
 800e4e6:	4770      	bx	lr
